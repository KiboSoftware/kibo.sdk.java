/*
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.solrschemamanager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.solrschemamanager.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.solrschemamanager.models.SchemaDefinitionField;
import com.kibocommerce.sdk.solrschemamanager.models.SpellingSchemaDefinitionField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * SchemaDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SchemaDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_IS_PUBLISHED = "isPublished";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHED)
  private Boolean isPublished;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<SchemaDefinitionField> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPELLING_FIELDS = "spellingFields";
  @SerializedName(SERIALIZED_NAME_SPELLING_FIELDS)
  private List<SpellingSchemaDefinitionField> spellingFields = null;

  public static final String SERIALIZED_NAME_SPELL_CORRECT_ENABLED = "spellCorrectEnabled";
  @SerializedName(SERIALIZED_NAME_SPELL_CORRECT_ENABLED)
  private Boolean spellCorrectEnabled;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public SchemaDefinition() {
  }

  public SchemaDefinition language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public SchemaDefinition isPublished(Boolean isPublished) {
    
    this.isPublished = isPublished;
    return this;
  }

   /**
   * Get isPublished
   * @return isPublished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPublished() {
    return isPublished;
  }


  public void setIsPublished(Boolean isPublished) {
    this.isPublished = isPublished;
  }


  public SchemaDefinition fields(List<SchemaDefinitionField> fields) {
    
    this.fields = fields;
    return this;
  }

  public SchemaDefinition addFieldsItem(SchemaDefinitionField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SchemaDefinitionField> getFields() {
    return fields;
  }


  public void setFields(List<SchemaDefinitionField> fields) {
    this.fields = fields;
  }


  public SchemaDefinition spellingFields(List<SpellingSchemaDefinitionField> spellingFields) {
    
    this.spellingFields = spellingFields;
    return this;
  }

  public SchemaDefinition addSpellingFieldsItem(SpellingSchemaDefinitionField spellingFieldsItem) {
    if (this.spellingFields == null) {
      this.spellingFields = new ArrayList<>();
    }
    this.spellingFields.add(spellingFieldsItem);
    return this;
  }

   /**
   * List of attributes used in the spelling dictionary
   * @return spellingFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of attributes used in the spelling dictionary")

  public List<SpellingSchemaDefinitionField> getSpellingFields() {
    return spellingFields;
  }


  public void setSpellingFields(List<SpellingSchemaDefinitionField> spellingFields) {
    this.spellingFields = spellingFields;
  }


  public SchemaDefinition spellCorrectEnabled(Boolean spellCorrectEnabled) {
    
    this.spellCorrectEnabled = spellCorrectEnabled;
    return this;
  }

   /**
   * Returns boolean if contains any SpellingFields members.
   * @return spellCorrectEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns boolean if contains any SpellingFields members.")

  public Boolean getSpellCorrectEnabled() {
    return spellCorrectEnabled;
  }


  public void setSpellCorrectEnabled(Boolean spellCorrectEnabled) {
    this.spellCorrectEnabled = spellCorrectEnabled;
  }


  public SchemaDefinition auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaDefinition schemaDefinition = (SchemaDefinition) o;
    return Objects.equals(this.language, schemaDefinition.language) &&
        Objects.equals(this.isPublished, schemaDefinition.isPublished) &&
        Objects.equals(this.fields, schemaDefinition.fields) &&
        Objects.equals(this.spellingFields, schemaDefinition.spellingFields) &&
        Objects.equals(this.spellCorrectEnabled, schemaDefinition.spellCorrectEnabled) &&
        Objects.equals(this.auditInfo, schemaDefinition.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, isPublished, fields, spellingFields, spellCorrectEnabled, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaDefinition {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    isPublished: ").append(toIndentedString(isPublished)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    spellingFields: ").append(toIndentedString(spellingFields)).append("\n");
    sb.append("    spellCorrectEnabled: ").append(toIndentedString(spellCorrectEnabled)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language");
    openapiFields.add("isPublished");
    openapiFields.add("fields");
    openapiFields.add("spellingFields");
    openapiFields.add("spellCorrectEnabled");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("fields");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchemaDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchemaDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaDefinition is not found in the empty JSON string", SchemaDefinition.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SchemaDefinition.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        SchemaDefinitionField.validateJsonObject(jsonArrayfields.get(i).getAsJsonObject());
      };
      if (jsonObj.get("spellingFields") != null && !jsonObj.get("spellingFields").isJsonNull()) {
        JsonArray jsonArrayspellingFields = jsonObj.getAsJsonArray("spellingFields");
        if (jsonArrayspellingFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spellingFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spellingFields` to be an array in the JSON string but got `%s`", jsonObj.get("spellingFields").toString()));
          }

          // validate the optional field `spellingFields` (array)
          for (int i = 0; i < jsonArrayspellingFields.size(); i++) {
            SpellingSchemaDefinitionField.validateJsonObject(jsonArrayspellingFields.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaDefinition>() {
           @Override
           public void write(JsonWriter out, SchemaDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchemaDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchemaDefinition
  * @throws IOException if the JSON string is invalid with respect to SchemaDefinition
  */
  public static SchemaDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaDefinition.class);
  }

 /**
  * Convert an instance of SchemaDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

