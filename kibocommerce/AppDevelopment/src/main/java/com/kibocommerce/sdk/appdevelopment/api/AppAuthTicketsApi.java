/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.appdevelopment.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.appdevelopment.models.AppAuthInfo;
import com.kibocommerce.sdk.appdevelopment.models.AuthTicket;
import com.kibocommerce.sdk.appdevelopment.models.AuthTicketRequest;
import com.kibocommerce.sdk.appdevelopment.models.OAuthAccessTokenResponse;
import com.kibocommerce.sdk.appdevelopment.models.OauthAuthRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppAuthTicketsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public AppAuthTicketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppAuthTicketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public AppAuthTicketsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public AppAuthTicketsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public AppAuthTicketsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authenticateApp
     * @param appAuthInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateAppCall(AppAuthInfo appAuthInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appAuthInfo;

        // create path and map variables
        String localVarPath = "/platform/applications/authtickets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticateAppValidateBeforeCall(AppAuthInfo appAuthInfo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = authenticateAppCall(appAuthInfo, _callback);
        return localVarCall;

    }

    /**
     * App Authenticate
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * @param appAuthInfo  (optional)
     * @return AuthTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuthTicket authenticateApp(AppAuthInfo appAuthInfo) throws ApiException {
        ApiResponse<AuthTicket> localVarResp = authenticateAppWithHttpInfo(appAuthInfo);
        return localVarResp.getData();
    }

    /**
     * App Authenticate
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * @param appAuthInfo  (optional)
     * @return ApiResponse&lt;AuthTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthTicket> authenticateAppWithHttpInfo(AppAuthInfo appAuthInfo) throws ApiException {
        okhttp3.Call localVarCall = authenticateAppValidateBeforeCall(appAuthInfo, null);
        Type localVarReturnType = new TypeToken<AuthTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * App Authenticate (asynchronously)
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * @param appAuthInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authenticateAppAsync(AppAuthInfo appAuthInfo, final ApiCallback<AuthTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticateAppValidateBeforeCall(appAuthInfo, _callback);
        Type localVarReturnType = new TypeToken<AuthTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppAuthTicket
     * @param refreshToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppAuthTicketCall(String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/applications/authtickets/{refreshToken}"
            .replaceAll("\\{" + "refreshToken" + "\\}", localVarApiClient.escapeString(refreshToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppAuthTicketValidateBeforeCall(String refreshToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'refreshToken' is set
        if (refreshToken == null) {
            throw new ApiException("Missing the required parameter 'refreshToken' when calling deleteAppAuthTicket(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAppAuthTicketCall(refreshToken, _callback);
        return localVarCall;

    }

    /**
     * Delete App Auth Ticket
     * This method is used to expire an application&#39;s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * @param refreshToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAppAuthTicket(String refreshToken) throws ApiException {
        deleteAppAuthTicketWithHttpInfo(refreshToken);
    }

    /**
     * Delete App Auth Ticket
     * This method is used to expire an application&#39;s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * @param refreshToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAppAuthTicketWithHttpInfo(String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = deleteAppAuthTicketValidateBeforeCall(refreshToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete App Auth Ticket (asynchronously)
     * This method is used to expire an application&#39;s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * @param refreshToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppAuthTicketAsync(String refreshToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppAuthTicketValidateBeforeCall(refreshToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthAuthenticateApp
     * @param oauthAuthRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAuthenticateAppCall(OauthAuthRequest oauthAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthAuthRequest;

        // create path and map variables
        String localVarPath = "/platform/applications/authtickets/oauth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthAuthenticateAppValidateBeforeCall(OauthAuthRequest oauthAuthRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = oauthAuthenticateAppCall(oauthAuthRequest, _callback);
        return localVarCall;

    }

    /**
     * Oauth Authenticate App
     * Oauth Authenticate App
     * @param oauthAuthRequest  (optional)
     * @return OAuthAccessTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OAuthAccessTokenResponse oauthAuthenticateApp(OauthAuthRequest oauthAuthRequest) throws ApiException {
        ApiResponse<OAuthAccessTokenResponse> localVarResp = oauthAuthenticateAppWithHttpInfo(oauthAuthRequest);
        return localVarResp.getData();
    }

    /**
     * Oauth Authenticate App
     * Oauth Authenticate App
     * @param oauthAuthRequest  (optional)
     * @return ApiResponse&lt;OAuthAccessTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuthAccessTokenResponse> oauthAuthenticateAppWithHttpInfo(OauthAuthRequest oauthAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = oauthAuthenticateAppValidateBeforeCall(oauthAuthRequest, null);
        Type localVarReturnType = new TypeToken<OAuthAccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Oauth Authenticate App (asynchronously)
     * Oauth Authenticate App
     * @param oauthAuthRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAuthenticateAppAsync(OauthAuthRequest oauthAuthRequest, final ApiCallback<OAuthAccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthAuthenticateAppValidateBeforeCall(oauthAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuthAccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshAppAuthTicket
     * @param authTicketRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshAppAuthTicketCall(AuthTicketRequest authTicketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authTicketRequest;

        // create path and map variables
        String localVarPath = "/platform/applications/authtickets/refresh-ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshAppAuthTicketValidateBeforeCall(AuthTicketRequest authTicketRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = refreshAppAuthTicketCall(authTicketRequest, _callback);
        return localVarCall;

    }

    /**
     * Refresh App Auth Ticket
     * Returns the AppAuthTicket with a refreshed AccessToken
     * @param authTicketRequest  (optional)
     * @return AuthTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AuthTicket refreshAppAuthTicket(AuthTicketRequest authTicketRequest) throws ApiException {
        ApiResponse<AuthTicket> localVarResp = refreshAppAuthTicketWithHttpInfo(authTicketRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh App Auth Ticket
     * Returns the AppAuthTicket with a refreshed AccessToken
     * @param authTicketRequest  (optional)
     * @return ApiResponse&lt;AuthTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthTicket> refreshAppAuthTicketWithHttpInfo(AuthTicketRequest authTicketRequest) throws ApiException {
        okhttp3.Call localVarCall = refreshAppAuthTicketValidateBeforeCall(authTicketRequest, null);
        Type localVarReturnType = new TypeToken<AuthTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh App Auth Ticket (asynchronously)
     * Returns the AppAuthTicket with a refreshed AccessToken
     * @param authTicketRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshAppAuthTicketAsync(AuthTicketRequest authTicketRequest, final ApiCallback<AuthTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshAppAuthTicketValidateBeforeCall(authTicketRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public AppAuthTicketsApi build() {
            return new AppAuthTicketsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
