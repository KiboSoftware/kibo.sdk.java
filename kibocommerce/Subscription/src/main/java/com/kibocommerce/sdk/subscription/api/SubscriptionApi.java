/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.subscription.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.subscription.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.subscription.models.Frequency;
import com.kibocommerce.sdk.subscription.models.FulfillmentInfo;
import com.kibocommerce.sdk.subscription.models.InventoryTags;
import com.kibocommerce.sdk.subscription.models.Order;
import com.kibocommerce.sdk.subscription.models.Payment;
import com.kibocommerce.sdk.subscription.models.SubscriptionAction;
import com.kibocommerce.sdk.subscription.models.SubscriptionAdjustment;
import com.kibocommerce.sdk.subscription.models.SubscriptionCoupons;
import com.kibocommerce.sdk.subscription.models.SubscriptionItem;
import com.kibocommerce.sdk.subscription.models.SubscriptionNextOrderDate;
import com.kibocommerce.sdk.subscription.models.SubscriptionReason;
import com.kibocommerce.sdk.subscription.models.SubscriptionReasonCollection;
import com.kibocommerce.sdk.subscription.models.SubscriptionRuntimeSubscription;
import com.kibocommerce.sdk.subscription.models.SubscriptionRuntimeSubscriptionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public SubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public SubscriptionApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public SubscriptionApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public SubscriptionApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSubscriptionItem
     * @param subscriptionId subscription id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionItem subscription item to add. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSubscriptionItemCall(String subscriptionId, String updateMode, SubscriptionItem subscriptionItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionItem;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/items"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSubscriptionItemValidateBeforeCall(String subscriptionId, String updateMode, SubscriptionItem subscriptionItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling addSubscriptionItem(Async)");
        }
        

        okhttp3.Call localVarCall = addSubscriptionItemCall(subscriptionId, updateMode, subscriptionItem, _callback);
        return localVarCall;

    }

    /**
     * Add Subscription Item
     * Add a subscription item in existing subscription.
     * @param subscriptionId subscription id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionItem subscription item to add. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription addSubscriptionItem(String subscriptionId, String updateMode, SubscriptionItem subscriptionItem) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = addSubscriptionItemWithHttpInfo(subscriptionId, updateMode, subscriptionItem);
        return localVarResp.getData();
    }

    /**
     * Add Subscription Item
     * Add a subscription item in existing subscription.
     * @param subscriptionId subscription id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionItem subscription item to add. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> addSubscriptionItemWithHttpInfo(String subscriptionId, String updateMode, SubscriptionItem subscriptionItem) throws ApiException {
        okhttp3.Call localVarCall = addSubscriptionItemValidateBeforeCall(subscriptionId, updateMode, subscriptionItem, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Subscription Item (asynchronously)
     * Add a subscription item in existing subscription.
     * @param subscriptionId subscription id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionItem subscription item to add. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSubscriptionItemAsync(String subscriptionId, String updateMode, SubscriptionItem subscriptionItem, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSubscriptionItemValidateBeforeCall(subscriptionId, updateMode, subscriptionItem, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCoupon
     * @param subscriptionId Unique identifier of the Subscription with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode updateMode\&quot;&gt;Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponCall(String subscriptionId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/coupons/{couponCode}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCouponValidateBeforeCall(String subscriptionId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applyCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling applyCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = applyCouponCall(subscriptionId, couponCode, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Apply Coupon
     * Apply coupon to the Subscription.
     * @param subscriptionId Unique identifier of the Subscription with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode updateMode\&quot;&gt;Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription applyCoupon(String subscriptionId, String couponCode, String updateMode) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = applyCouponWithHttpInfo(subscriptionId, couponCode, updateMode);
        return localVarResp.getData();
    }

    /**
     * Apply Coupon
     * Apply coupon to the Subscription.
     * @param subscriptionId Unique identifier of the Subscription with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode updateMode\&quot;&gt;Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> applyCouponWithHttpInfo(String subscriptionId, String couponCode, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(subscriptionId, couponCode, updateMode, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Coupon (asynchronously)
     * Apply coupon to the Subscription.
     * @param subscriptionId Unique identifier of the Subscription with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode updateMode\&quot;&gt;Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponAsync(String subscriptionId, String couponCode, String updateMode, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(subscriptionId, couponCode, updateMode, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearSubscriptionDraft
     * @param subscriptionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearSubscriptionDraftCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/cleardraft"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearSubscriptionDraftValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling clearSubscriptionDraft(Async)");
        }
        

        okhttp3.Call localVarCall = clearSubscriptionDraftCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     * @param subscriptionId  (required)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription clearSubscriptionDraft(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = clearSubscriptionDraftWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> clearSubscriptionDraftWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = clearSubscriptionDraftValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete subscription draft (asynchronously)
     * Delete subscription draft
     * @param subscriptionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearSubscriptionDraftAsync(String subscriptionId, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearSubscriptionDraftValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertToOrder
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToOrderCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/converttoorder"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertToOrderValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling convertToOrder(Async)");
        }
        

        okhttp3.Call localVarCall = convertToOrderCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Convert To Order
     * Convert the subscription to order.
     * @param subscriptionId The subscription identifier. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order convertToOrder(String subscriptionId) throws ApiException {
        ApiResponse<Order> localVarResp = convertToOrderWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Convert To Order
     * Convert the subscription to order.
     * @param subscriptionId The subscription identifier. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> convertToOrderWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = convertToOrderValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert To Order (asynchronously)
     * Convert the subscription to order.
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToOrderAsync(String subscriptionId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertToOrderValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubscription
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionCall(SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionRuntimeSubscription;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubscriptionValidateBeforeCall(SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSubscriptionCall(subscriptionRuntimeSubscription, _callback);
        return localVarCall;

    }

    /**
     * Creates Subscription
     * Creates and validates a new subscription.
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription createSubscription(SubscriptionRuntimeSubscription subscriptionRuntimeSubscription) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = createSubscriptionWithHttpInfo(subscriptionRuntimeSubscription);
        return localVarResp.getData();
    }

    /**
     * Creates Subscription
     * Creates and validates a new subscription.
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> createSubscriptionWithHttpInfo(SubscriptionRuntimeSubscription subscriptionRuntimeSubscription) throws ApiException {
        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(subscriptionRuntimeSubscription, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates Subscription (asynchronously)
     * Creates and validates a new subscription.
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubscriptionAsync(SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubscriptionValidateBeforeCall(subscriptionRuntimeSubscription, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscriptionData
     * @param subscriptionId Unique Identifier of the Subscription you want to Delete the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Delete from the Subscription DataBag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionDataCall(String subscriptionId, String subscriptionDataId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/data/{subscriptionDataId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionDataId" + "\\}", localVarApiClient.escapeString(subscriptionDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionDataValidateBeforeCall(String subscriptionId, String subscriptionDataId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscriptionData(Async)");
        }
        
        // verify the required parameter 'subscriptionDataId' is set
        if (subscriptionDataId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionDataId' when calling deleteSubscriptionData(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSubscriptionDataCall(subscriptionId, subscriptionDataId, _callback);
        return localVarCall;

    }

    /**
     * Delete Subscription Data
     * Delete Value of the given Key in the SubscriptionData bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to Delete the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Delete from the Subscription DataBag (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSubscriptionData(String subscriptionId, String subscriptionDataId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSubscriptionDataWithHttpInfo(subscriptionId, subscriptionDataId);
        return localVarResp.getData();
    }

    /**
     * Delete Subscription Data
     * Delete Value of the given Key in the SubscriptionData bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to Delete the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Delete from the Subscription DataBag (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSubscriptionDataWithHttpInfo(String subscriptionId, String subscriptionDataId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionDataValidateBeforeCall(subscriptionId, subscriptionDataId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Subscription Data (asynchronously)
     * Delete Value of the given Key in the SubscriptionData bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to Delete the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Delete from the Subscription DataBag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionDataAsync(String subscriptionId, String subscriptionDataId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionDataValidateBeforeCall(subscriptionId, subscriptionDataId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscriptionItem
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionItemCall(String subscriptionId, String subscriptionItemId, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionReason;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/remove"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionItemValidateBeforeCall(String subscriptionId, String subscriptionItemId, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscriptionItem(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling deleteSubscriptionItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSubscriptionItemCall(subscriptionId, subscriptionItemId, updateMode, subscriptionReason, _callback);
        return localVarCall;

    }

    /**
     * Delete Subscription Item
     * Removes a particular subscription item from the subscription
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription deleteSubscriptionItem(String subscriptionId, String subscriptionItemId, String updateMode, SubscriptionReason subscriptionReason) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = deleteSubscriptionItemWithHttpInfo(subscriptionId, subscriptionItemId, updateMode, subscriptionReason);
        return localVarResp.getData();
    }

    /**
     * Delete Subscription Item
     * Removes a particular subscription item from the subscription
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> deleteSubscriptionItemWithHttpInfo(String subscriptionId, String subscriptionItemId, String updateMode, SubscriptionReason subscriptionReason) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionItemValidateBeforeCall(subscriptionId, subscriptionItemId, updateMode, subscriptionReason, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Subscription Item (asynchronously)
     * Removes a particular subscription item from the subscription
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionItemAsync(String subscriptionId, String subscriptionItemId, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionItemValidateBeforeCall(subscriptionId, subscriptionItemId, updateMode, subscriptionReason, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSubscriptionItemData
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to delete the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Delete from the SubscriptionItem DataBag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionItemDataCall(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data/{subscriptionItemDataId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()))
            .replaceAll("\\{" + "subscriptionItemDataId" + "\\}", localVarApiClient.escapeString(subscriptionItemDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubscriptionItemDataValidateBeforeCall(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deleteSubscriptionItemData(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling deleteSubscriptionItemData(Async)");
        }
        
        // verify the required parameter 'subscriptionItemDataId' is set
        if (subscriptionItemDataId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemDataId' when calling deleteSubscriptionItemData(Async)");
        }
        

        okhttp3.Call localVarCall = deleteSubscriptionItemDataCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, _callback);
        return localVarCall;

    }

    /**
     * Delete Subscription Item Data
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to delete the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Delete from the SubscriptionItem DataBag (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteSubscriptionItemData(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteSubscriptionItemDataWithHttpInfo(subscriptionId, subscriptionItemId, subscriptionItemDataId);
        return localVarResp.getData();
    }

    /**
     * Delete Subscription Item Data
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to delete the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Delete from the SubscriptionItem DataBag (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteSubscriptionItemDataWithHttpInfo(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId) throws ApiException {
        okhttp3.Call localVarCall = deleteSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Subscription Item Data (asynchronously)
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to delete the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Delete from the SubscriptionItem DataBag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSubscriptionItemDataAsync(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableShipmentMethods
     * @param subscriptionId  (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShipmentMethodsCall(String subscriptionId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/shipments/methods"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableShipmentMethodsValidateBeforeCall(String subscriptionId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getAvailableShipmentMethods(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableShipmentMethodsCall(subscriptionId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Available Shipment Methods
     * Gets valid shipping methods for subscription
     * @param subscriptionId  (required)
     * @param draft  (optional)
     * @return List&lt;CommerceRuntimeShippingRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeShippingRate> getAvailableShipmentMethods(String subscriptionId, Boolean draft) throws ApiException {
        ApiResponse<List<CommerceRuntimeShippingRate>> localVarResp = getAvailableShipmentMethodsWithHttpInfo(subscriptionId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Available Shipment Methods
     * Gets valid shipping methods for subscription
     * @param subscriptionId  (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeShippingRate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeShippingRate>> getAvailableShipmentMethodsWithHttpInfo(String subscriptionId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getAvailableShipmentMethodsValidateBeforeCall(subscriptionId, draft, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Shipment Methods (asynchronously)
     * Gets valid shipping methods for subscription
     * @param subscriptionId  (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShipmentMethodsAsync(String subscriptionId, Boolean draft, final ApiCallback<List<CommerceRuntimeShippingRate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableShipmentMethodsValidateBeforeCall(subscriptionId, draft, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReasons
     * @param category Action to get available reasons for. Defaults to CANCEL (optional, default to CANCEL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsCall(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReasonsValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReasonsCall(category, _callback);
        return localVarCall;

    }

    /**
     * Get Reasons
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * @param category Action to get available reasons for. Defaults to CANCEL (optional, default to CANCEL)
     * @return SubscriptionReasonCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionReasonCollection getReasons(String category) throws ApiException {
        ApiResponse<SubscriptionReasonCollection> localVarResp = getReasonsWithHttpInfo(category);
        return localVarResp.getData();
    }

    /**
     * Get Reasons
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * @param category Action to get available reasons for. Defaults to CANCEL (optional, default to CANCEL)
     * @return ApiResponse&lt;SubscriptionReasonCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionReasonCollection> getReasonsWithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(category, null);
        Type localVarReturnType = new TypeToken<SubscriptionReasonCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reasons (asynchronously)
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * @param category Action to get available reasons for. Defaults to CANCEL (optional, default to CANCEL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsAsync(String category, final ApiCallback<SubscriptionReasonCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(category, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionReasonCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscription
     * @param subscriptionId The subscription identifier. (required)
     * @param draft return draft version of subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionCall(String subscriptionId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionValidateBeforeCall(String subscriptionId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSubscription(Async)");
        }
        

        okhttp3.Call localVarCall = getSubscriptionCall(subscriptionId, draft, _callback);
        return localVarCall;

    }

    /**
     * Gets Subscription
     * Retrieves the details of a subscription specified by the subscription ID.
     * @param subscriptionId The subscription identifier. (required)
     * @param draft return draft version of subscription. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription getSubscription(String subscriptionId, Boolean draft) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = getSubscriptionWithHttpInfo(subscriptionId, draft);
        return localVarResp.getData();
    }

    /**
     * Gets Subscription
     * Retrieves the details of a subscription specified by the subscription ID.
     * @param subscriptionId The subscription identifier. (required)
     * @param draft return draft version of subscription. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> getSubscriptionWithHttpInfo(String subscriptionId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(subscriptionId, draft, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets Subscription (asynchronously)
     * Retrieves the details of a subscription specified by the subscription ID.
     * @param subscriptionId The subscription identifier. (required)
     * @param draft return draft version of subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionAsync(String subscriptionId, Boolean draft, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionValidateBeforeCall(subscriptionId, draft, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscriptionData
     * @param subscriptionId Unique Identifier of the Subscription whose Data you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionDataCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/data"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionDataValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSubscriptionData(Async)");
        }
        

        okhttp3.Call localVarCall = getSubscriptionDataCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Get subscription Data
     * Retrieves all the values in the Subscription Data bag
     * @param subscriptionId Unique Identifier of the Subscription whose Data you want to get (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object getSubscriptionData(String subscriptionId) throws ApiException {
        ApiResponse<Object> localVarResp = getSubscriptionDataWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Get subscription Data
     * Retrieves all the values in the Subscription Data bag
     * @param subscriptionId Unique Identifier of the Subscription whose Data you want to get (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSubscriptionDataWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionDataValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subscription Data (asynchronously)
     * Retrieves all the values in the Subscription Data bag
     * @param subscriptionId Unique Identifier of the Subscription whose Data you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionDataAsync(String subscriptionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionDataValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscriptionItemData
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Subscription Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem whose Data you want to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionItemDataCall(String subscriptionId, String subscriptionItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionItemDataValidateBeforeCall(String subscriptionId, String subscriptionItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getSubscriptionItemData(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling getSubscriptionItemData(Async)");
        }
        

        okhttp3.Call localVarCall = getSubscriptionItemDataCall(subscriptionId, subscriptionItemId, _callback);
        return localVarCall;

    }

    /**
     * Get Subscription Item Data
     * Retrieves a specific value in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Subscription Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem whose Data you want to get (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object getSubscriptionItemData(String subscriptionId, String subscriptionItemId) throws ApiException {
        ApiResponse<Object> localVarResp = getSubscriptionItemDataWithHttpInfo(subscriptionId, subscriptionItemId);
        return localVarResp.getData();
    }

    /**
     * Get Subscription Item Data
     * Retrieves a specific value in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Subscription Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem whose Data you want to get (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSubscriptionItemDataWithHttpInfo(String subscriptionId, String subscriptionItemId) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscription Item Data (asynchronously)
     * Retrieves a specific value in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Subscription Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem whose Data you want to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionItemDataAsync(String subscriptionId, String subscriptionItemId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubscriptions
     * @param startIndex The start index. (optional)
     * @param pageSize Size of the page. (optional)
     * @param sortBy The sort by. (optional)
     * @param filter The filter. (optional)
     * @param q The q. (optional)
     * @param qLimit The q limit. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getSubscriptionsCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        return localVarCall;

    }

    /**
     * Get Subscriptions
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * @param startIndex The start index. (optional)
     * @param pageSize Size of the page. (optional)
     * @param sortBy The sort by. (optional)
     * @param filter The filter. (optional)
     * @param q The q. (optional)
     * @param qLimit The q limit. (optional)
     * @return SubscriptionRuntimeSubscriptionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscriptionCollection getSubscriptions(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscriptionCollection> localVarResp = getSubscriptionsWithHttpInfo(startIndex, pageSize, sortBy, filter, q, qLimit);
        return localVarResp.getData();
    }

    /**
     * Get Subscriptions
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * @param startIndex The start index. (optional)
     * @param pageSize Size of the page. (optional)
     * @param sortBy The sort by. (optional)
     * @param filter The filter. (optional)
     * @param q The q. (optional)
     * @param qLimit The q limit. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscriptionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscriptionCollection> getSubscriptionsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscriptionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscriptions (asynchronously)
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * @param startIndex The start index. (optional)
     * @param pageSize Size of the page. (optional)
     * @param sortBy The sort by. (optional)
     * @param filter The filter. (optional)
     * @param q The q. (optional)
     * @param qLimit The q limit. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubscriptionsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback<SubscriptionRuntimeSubscriptionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubscriptionsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscriptionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderNow
     * @param subscriptionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderNowCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/ordernow"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderNowValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling orderNow(Async)");
        }
        

        okhttp3.Call localVarCall = orderNowCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Order Now
     * Lets the user place an instant order from the subscription.
     * @param subscriptionId  (required)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription orderNow(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = orderNowWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Order Now
     * Lets the user place an instant order from the subscription.
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> orderNowWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = orderNowValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order Now (asynchronously)
     * Lets the user place an instant order from the subscription.
     * @param subscriptionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderNowAsync(String subscriptionId, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderNowValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderPartialSubscription
     * @param subscriptionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPartialSubscriptionCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/orderpartialdraft"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderPartialSubscriptionValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling orderPartialSubscription(Async)");
        }
        

        okhttp3.Call localVarCall = orderPartialSubscriptionCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Order Partial Subscription
     * Lets the user place an order from Partial Draft.
     * @param subscriptionId  (required)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription orderPartialSubscription(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = orderPartialSubscriptionWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Order Partial Subscription
     * Lets the user place an order from Partial Draft.
     * @param subscriptionId  (required)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> orderPartialSubscriptionWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = orderPartialSubscriptionValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order Partial Subscription (asynchronously)
     * Lets the user place an order from Partial Draft.
     * @param subscriptionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPartialSubscriptionAsync(String subscriptionId, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderPartialSubscriptionValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performSubscriptionAction
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAction Action to perform, which can be \&quot;Activate,\&quot; \&quot;Pause,\&quot; \&quot;Cancel\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performSubscriptionActionCall(String subscriptionId, SubscriptionAction subscriptionAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionAction;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/actions"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performSubscriptionActionValidateBeforeCall(String subscriptionId, SubscriptionAction subscriptionAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling performSubscriptionAction(Async)");
        }
        

        okhttp3.Call localVarCall = performSubscriptionActionCall(subscriptionId, subscriptionAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Subscription Action
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAction Action to perform, which can be \&quot;Activate,\&quot; \&quot;Pause,\&quot; \&quot;Cancel\&quot;. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription performSubscriptionAction(String subscriptionId, SubscriptionAction subscriptionAction) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = performSubscriptionActionWithHttpInfo(subscriptionId, subscriptionAction);
        return localVarResp.getData();
    }

    /**
     * Perform Subscription Action
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAction Action to perform, which can be \&quot;Activate,\&quot; \&quot;Pause,\&quot; \&quot;Cancel\&quot;. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> performSubscriptionActionWithHttpInfo(String subscriptionId, SubscriptionAction subscriptionAction) throws ApiException {
        okhttp3.Call localVarCall = performSubscriptionActionValidateBeforeCall(subscriptionId, subscriptionAction, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Subscription Action (asynchronously)
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAction Action to perform, which can be \&quot;Activate,\&quot; \&quot;Pause,\&quot; \&quot;Cancel\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performSubscriptionActionAsync(String subscriptionId, SubscriptionAction subscriptionAction, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = performSubscriptionActionValidateBeforeCall(subscriptionId, subscriptionAction, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupon
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponCall(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCoupons;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/removecoupon"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponValidateBeforeCall(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling removeCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponCall(subscriptionId, updateMode, subscriptionCoupons, _callback);
        return localVarCall;

    }

    /**
     * Remove coupons from subscription and draft
     * Remove coupons from subscription and draft
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription removeCoupon(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = removeCouponWithHttpInfo(subscriptionId, updateMode, subscriptionCoupons);
        return localVarResp.getData();
    }

    /**
     * Remove coupons from subscription and draft
     * Remove coupons from subscription and draft
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> removeCouponWithHttpInfo(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons) throws ApiException {
        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(subscriptionId, updateMode, subscriptionCoupons, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove coupons from subscription and draft (asynchronously)
     * Remove coupons from subscription and draft
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponAsync(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(subscriptionId, updateMode, subscriptionCoupons, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOneTimeCoupon
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeOneTimeCouponCall(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionCoupons;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/removeonetimecoupon"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOneTimeCouponValidateBeforeCall(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling removeOneTimeCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = removeOneTimeCouponCall(subscriptionId, updateMode, subscriptionCoupons, _callback);
        return localVarCall;

    }

    /**
     * Remove one time coupons from subscription
     * Remove one time coupons from subscription
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SubscriptionRuntimeSubscription removeOneTimeCoupon(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = removeOneTimeCouponWithHttpInfo(subscriptionId, updateMode, subscriptionCoupons);
        return localVarResp.getData();
    }

    /**
     * Remove one time coupons from subscription
     * Remove one time coupons from subscription
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SubscriptionRuntimeSubscription> removeOneTimeCouponWithHttpInfo(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons) throws ApiException {
        okhttp3.Call localVarCall = removeOneTimeCouponValidateBeforeCall(subscriptionId, updateMode, subscriptionCoupons, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove one time coupons from subscription (asynchronously)
     * Remove one time coupons from subscription
     * @param subscriptionId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionCoupons CouponCodes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call removeOneTimeCouponAsync(String subscriptionId, String updateMode, SubscriptionCoupons subscriptionCoupons, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOneTimeCouponValidateBeforeCall(subscriptionId, updateMode, subscriptionCoupons, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for skipSubscription
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skipSubscriptionCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/skip"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skipSubscriptionValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling skipSubscription(Async)");
        }
        

        okhttp3.Call localVarCall = skipSubscriptionCall(subscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Skip Subscription
     * Skips the next continuity order for the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription skipSubscription(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = skipSubscriptionWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Skip Subscription
     * Skips the next continuity order for the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> skipSubscriptionWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = skipSubscriptionValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Skip Subscription (asynchronously)
     * Skips the next continuity order for the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skipSubscriptionAsync(String subscriptionId, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = skipSubscriptionValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAdjustments
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAdjustment Adjustments for subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdjustmentsCall(String subscriptionId, SubscriptionAdjustment subscriptionAdjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionAdjustment;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/adjustments"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAdjustmentsValidateBeforeCall(String subscriptionId, SubscriptionAdjustment subscriptionAdjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateAdjustments(Async)");
        }
        

        okhttp3.Call localVarCall = updateAdjustmentsCall(subscriptionId, subscriptionAdjustment, _callback);
        return localVarCall;

    }

    /**
     * Update Adjustments
     * Update item, shipping and handling adjustments on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAdjustment Adjustments for subscription. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updateAdjustments(String subscriptionId, SubscriptionAdjustment subscriptionAdjustment) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updateAdjustmentsWithHttpInfo(subscriptionId, subscriptionAdjustment);
        return localVarResp.getData();
    }

    /**
     * Update Adjustments
     * Update item, shipping and handling adjustments on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAdjustment Adjustments for subscription. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updateAdjustmentsWithHttpInfo(String subscriptionId, SubscriptionAdjustment subscriptionAdjustment) throws ApiException {
        okhttp3.Call localVarCall = updateAdjustmentsValidateBeforeCall(subscriptionId, subscriptionAdjustment, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Adjustments (asynchronously)
     * Update item, shipping and handling adjustments on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionAdjustment Adjustments for subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAdjustmentsAsync(String subscriptionId, SubscriptionAdjustment subscriptionAdjustment, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAdjustmentsValidateBeforeCall(subscriptionId, subscriptionAdjustment, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFulfillmentInfo
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param fulfillmentInfo New fulfillment info for subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFulfillmentInfoCall(String subscriptionId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentInfo;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/fulfillmentinfo"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFulfillmentInfoValidateBeforeCall(String subscriptionId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateFulfillmentInfo(Async)");
        }
        

        okhttp3.Call localVarCall = updateFulfillmentInfoCall(subscriptionId, updateMode, fulfillmentInfo, _callback);
        return localVarCall;

    }

    /**
     * Update Fulfillment Info
     * Modifies the Fulfillment Info for a subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param fulfillmentInfo New fulfillment info for subscription. (optional)
     * @return FulfillmentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FulfillmentInfo updateFulfillmentInfo(String subscriptionId, String updateMode, FulfillmentInfo fulfillmentInfo) throws ApiException {
        ApiResponse<FulfillmentInfo> localVarResp = updateFulfillmentInfoWithHttpInfo(subscriptionId, updateMode, fulfillmentInfo);
        return localVarResp.getData();
    }

    /**
     * Update Fulfillment Info
     * Modifies the Fulfillment Info for a subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param fulfillmentInfo New fulfillment info for subscription. (optional)
     * @return ApiResponse&lt;FulfillmentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FulfillmentInfo> updateFulfillmentInfoWithHttpInfo(String subscriptionId, String updateMode, FulfillmentInfo fulfillmentInfo) throws ApiException {
        okhttp3.Call localVarCall = updateFulfillmentInfoValidateBeforeCall(subscriptionId, updateMode, fulfillmentInfo, null);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Fulfillment Info (asynchronously)
     * Modifies the Fulfillment Info for a subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param fulfillmentInfo New fulfillment info for subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFulfillmentInfoAsync(String subscriptionId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback<FulfillmentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFulfillmentInfoValidateBeforeCall(subscriptionId, updateMode, fulfillmentInfo, _callback);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemQuantity
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param quantity New quantity for the specified subscription item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason if item quantity is decreased. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityCall(String subscriptionId, String subscriptionItemId, Integer quantity, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionReason;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/quantity/{quantity}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()))
            .replaceAll("\\{" + "quantity" + "\\}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemQuantityValidateBeforeCall(String subscriptionId, String subscriptionItemId, Integer quantity, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling updateItemQuantity(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemQuantityCall(subscriptionId, subscriptionItemId, quantity, updateMode, subscriptionReason, _callback);
        return localVarCall;

    }

    /**
     * Update Item Quantity
     * Update Item Quantity on existing subscription.
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param quantity New quantity for the specified subscription item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason if item quantity is decreased. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updateItemQuantity(String subscriptionId, String subscriptionItemId, Integer quantity, String updateMode, SubscriptionReason subscriptionReason) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updateItemQuantityWithHttpInfo(subscriptionId, subscriptionItemId, quantity, updateMode, subscriptionReason);
        return localVarResp.getData();
    }

    /**
     * Update Item Quantity
     * Update Item Quantity on existing subscription.
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param quantity New quantity for the specified subscription item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason if item quantity is decreased. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updateItemQuantityWithHttpInfo(String subscriptionId, String subscriptionItemId, Integer quantity, String updateMode, SubscriptionReason subscriptionReason) throws ApiException {
        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(subscriptionId, subscriptionItemId, quantity, updateMode, subscriptionReason, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Quantity (asynchronously)
     * Update Item Quantity on existing subscription.
     * @param subscriptionId subscription id (required)
     * @param subscriptionItemId subscription item id (required)
     * @param quantity New quantity for the specified subscription item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param subscriptionReason cancellation reason if item quantity is decreased. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityAsync(String subscriptionId, String subscriptionItemId, Integer quantity, String updateMode, SubscriptionReason subscriptionReason, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(subscriptionId, subscriptionItemId, quantity, updateMode, subscriptionReason, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNextOrderDate
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionNextOrderDate The Next Order date to be set. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNextOrderDateCall(String subscriptionId, SubscriptionNextOrderDate subscriptionNextOrderDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionNextOrderDate;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/nextorderdate"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNextOrderDateValidateBeforeCall(String subscriptionId, SubscriptionNextOrderDate subscriptionNextOrderDate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateNextOrderDate(Async)");
        }
        

        okhttp3.Call localVarCall = updateNextOrderDateCall(subscriptionId, subscriptionNextOrderDate, _callback);
        return localVarCall;

    }

    /**
     * Update Next Order Date
     * Updates the next order date on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionNextOrderDate The Next Order date to be set. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updateNextOrderDate(String subscriptionId, SubscriptionNextOrderDate subscriptionNextOrderDate) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updateNextOrderDateWithHttpInfo(subscriptionId, subscriptionNextOrderDate);
        return localVarResp.getData();
    }

    /**
     * Update Next Order Date
     * Updates the next order date on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionNextOrderDate The Next Order date to be set. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updateNextOrderDateWithHttpInfo(String subscriptionId, SubscriptionNextOrderDate subscriptionNextOrderDate) throws ApiException {
        okhttp3.Call localVarCall = updateNextOrderDateValidateBeforeCall(subscriptionId, subscriptionNextOrderDate, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Next Order Date (asynchronously)
     * Updates the next order date on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionNextOrderDate The Next Order date to be set. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNextOrderDateAsync(String subscriptionId, SubscriptionNextOrderDate subscriptionNextOrderDate, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNextOrderDateValidateBeforeCall(subscriptionId, subscriptionNextOrderDate, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePayment
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param payment The new payment to be applied. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentCall(String subscriptionId, String updateMode, Payment payment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payment;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/payment"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentValidateBeforeCall(String subscriptionId, String updateMode, Payment payment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updatePayment(Async)");
        }
        

        okhttp3.Call localVarCall = updatePaymentCall(subscriptionId, updateMode, payment, _callback);
        return localVarCall;

    }

    /**
     * Update Payment
     * Updates the payment on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param payment The new payment to be applied. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updatePayment(String subscriptionId, String updateMode, Payment payment) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updatePaymentWithHttpInfo(subscriptionId, updateMode, payment);
        return localVarResp.getData();
    }

    /**
     * Update Payment
     * Updates the payment on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param payment The new payment to be applied. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updatePaymentWithHttpInfo(String subscriptionId, String updateMode, Payment payment) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentValidateBeforeCall(subscriptionId, updateMode, payment, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Payment (asynchronously)
     * Updates the payment on the subscription.
     * @param subscriptionId The subscription identifier. (required)
     * @param updateMode Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft). (optional)
     * @param payment The new payment to be applied. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentAsync(String subscriptionId, String updateMode, Payment payment, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentValidateBeforeCall(subscriptionId, updateMode, payment, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionCall(String subscriptionId, SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionRuntimeSubscription;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String subscriptionId, SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscription(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionCall(subscriptionId, subscriptionRuntimeSubscription, _callback);
        return localVarCall;

    }

    /**
     * Update Subscription
     * Update the info for an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updateSubscription(String subscriptionId, SubscriptionRuntimeSubscription subscriptionRuntimeSubscription) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updateSubscriptionWithHttpInfo(subscriptionId, subscriptionRuntimeSubscription);
        return localVarResp.getData();
    }

    /**
     * Update Subscription
     * Update the info for an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updateSubscriptionWithHttpInfo(String subscriptionId, SubscriptionRuntimeSubscription subscriptionRuntimeSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionRuntimeSubscription, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription (asynchronously)
     * Update the info for an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param subscriptionRuntimeSubscription The subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionAsync(String subscriptionId, SubscriptionRuntimeSubscription subscriptionRuntimeSubscription, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(subscriptionId, subscriptionRuntimeSubscription, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionData
     * @param subscriptionId Unique Identifier of the Subscription you want to insert / update the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Insert / Update from the Subscription DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionDataCall(String subscriptionId, String subscriptionDataId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/data/{subscriptionDataId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionDataId" + "\\}", localVarApiClient.escapeString(subscriptionDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionDataValidateBeforeCall(String subscriptionId, String subscriptionDataId, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscriptionData(Async)");
        }
        
        // verify the required parameter 'subscriptionDataId' is set
        if (subscriptionDataId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionDataId' when calling updateSubscriptionData(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionDataCall(subscriptionId, subscriptionDataId, body, _callback);
        return localVarCall;

    }

    /**
     * Update Subscription Data
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to insert / update the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Insert / Update from the Subscription DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSubscriptionData(String subscriptionId, String subscriptionDataId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = updateSubscriptionDataWithHttpInfo(subscriptionId, subscriptionDataId, body);
        return localVarResp.getData();
    }

    /**
     * Update Subscription Data
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to insert / update the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Insert / Update from the Subscription DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSubscriptionDataWithHttpInfo(String subscriptionId, String subscriptionDataId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionDataValidateBeforeCall(subscriptionId, subscriptionDataId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription Data (asynchronously)
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to insert / update the Databag for (required)
     * @param subscriptionDataId URLEncoded Key for the Value you want to Insert / Update from the Subscription DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionDataAsync(String subscriptionId, String subscriptionDataId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionDataValidateBeforeCall(subscriptionId, subscriptionDataId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionFrequency
     * @param subscriptionId The subscription identifier. (required)
     * @param frequency The requested frequency for update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionFrequencyCall(String subscriptionId, Frequency frequency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = frequency;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/frequency"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionFrequencyValidateBeforeCall(String subscriptionId, Frequency frequency, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscriptionFrequency(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionFrequencyCall(subscriptionId, frequency, _callback);
        return localVarCall;

    }

    /**
     * Update Subscription Frequency
     * Update the frequency on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param frequency The requested frequency for update (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription updateSubscriptionFrequency(String subscriptionId, Frequency frequency) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = updateSubscriptionFrequencyWithHttpInfo(subscriptionId, frequency);
        return localVarResp.getData();
    }

    /**
     * Update Subscription Frequency
     * Update the frequency on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param frequency The requested frequency for update (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> updateSubscriptionFrequencyWithHttpInfo(String subscriptionId, Frequency frequency) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionFrequencyValidateBeforeCall(subscriptionId, frequency, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription Frequency (asynchronously)
     * Update the frequency on an existing subscription
     * @param subscriptionId The subscription identifier. (required)
     * @param frequency The requested frequency for update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionFrequencyAsync(String subscriptionId, Frequency frequency, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionFrequencyValidateBeforeCall(subscriptionId, frequency, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionItemData
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to Insert / Update the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Insert / Update from the SubscriptionItem DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionItemDataCall(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data/{subscriptionItemDataId}"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()))
            .replaceAll("\\{" + "subscriptionItemDataId" + "\\}", localVarApiClient.escapeString(subscriptionItemDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionItemDataValidateBeforeCall(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling updateSubscriptionItemData(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling updateSubscriptionItemData(Async)");
        }
        
        // verify the required parameter 'subscriptionItemDataId' is set
        if (subscriptionItemDataId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemDataId' when calling updateSubscriptionItemData(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionItemDataCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, body, _callback);
        return localVarCall;

    }

    /**
     * Update Subscription Item Data
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to Insert / Update the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Insert / Update from the SubscriptionItem DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSubscriptionItemData(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = updateSubscriptionItemDataWithHttpInfo(subscriptionId, subscriptionItemId, subscriptionItemDataId, body);
        return localVarResp.getData();
    }

    /**
     * Update Subscription Item Data
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to Insert / Update the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Insert / Update from the SubscriptionItem DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSubscriptionItemDataWithHttpInfo(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription Item Data (asynchronously)
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     * @param subscriptionId Unique Identifier of the Subscription you want to get the Items for (required)
     * @param subscriptionItemId Unique Identifier of the SubscriptionItem you want to Insert / Update the Databag for (required)
     * @param subscriptionItemDataId URLEncoded Key for the Value you want to Insert / Update from the SubscriptionItem DataBag (required)
     * @param body Data Object you are trying to insert / update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionItemDataAsync(String subscriptionId, String subscriptionItemId, String subscriptionItemDataId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionItemDataValidateBeforeCall(subscriptionId, subscriptionItemId, subscriptionItemDataId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertInventoryTags
     * @param subscriptionId  (required)
     * @param subscriptionItemId  (required)
     * @param updateMode  (optional)
     * @param inventoryTags  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsCall(String subscriptionId, String subscriptionItemId, String updateMode, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryTags;

        // create path and map variables
        String localVarPath = "/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/upsertinventorytags"
            .replaceAll("\\{" + "subscriptionId" + "\\}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replaceAll("\\{" + "subscriptionItemId" + "\\}", localVarApiClient.escapeString(subscriptionItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertInventoryTagsValidateBeforeCall(String subscriptionId, String subscriptionItemId, String updateMode, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling upsertInventoryTags(Async)");
        }
        
        // verify the required parameter 'subscriptionItemId' is set
        if (subscriptionItemId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionItemId' when calling upsertInventoryTags(Async)");
        }
        

        okhttp3.Call localVarCall = upsertInventoryTagsCall(subscriptionId, subscriptionItemId, updateMode, inventoryTags, _callback);
        return localVarCall;

    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     * @param subscriptionId  (required)
     * @param subscriptionItemId  (required)
     * @param updateMode  (optional)
     * @param inventoryTags  (optional)
     * @return SubscriptionRuntimeSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionRuntimeSubscription upsertInventoryTags(String subscriptionId, String subscriptionItemId, String updateMode, List<InventoryTags> inventoryTags) throws ApiException {
        ApiResponse<SubscriptionRuntimeSubscription> localVarResp = upsertInventoryTagsWithHttpInfo(subscriptionId, subscriptionItemId, updateMode, inventoryTags);
        return localVarResp.getData();
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     * @param subscriptionId  (required)
     * @param subscriptionItemId  (required)
     * @param updateMode  (optional)
     * @param inventoryTags  (optional)
     * @return ApiResponse&lt;SubscriptionRuntimeSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionRuntimeSubscription> upsertInventoryTagsWithHttpInfo(String subscriptionId, String subscriptionItemId, String updateMode, List<InventoryTags> inventoryTags) throws ApiException {
        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(subscriptionId, subscriptionItemId, updateMode, inventoryTags, null);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Inventory Tags (asynchronously)
     * Upsert Inventory Tags
     * @param subscriptionId  (required)
     * @param subscriptionItemId  (required)
     * @param updateMode  (optional)
     * @param inventoryTags  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsAsync(String subscriptionId, String subscriptionItemId, String updateMode, List<InventoryTags> inventoryTags, final ApiCallback<SubscriptionRuntimeSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(subscriptionId, subscriptionItemId, updateMode, inventoryTags, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionRuntimeSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public SubscriptionApi build() {
            return new SubscriptionApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
