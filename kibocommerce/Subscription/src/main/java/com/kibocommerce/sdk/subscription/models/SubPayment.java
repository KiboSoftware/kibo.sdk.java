/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.subscription.models.PaymentActionTarget;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * SubPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubPayment implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_AMOUNT_COLLECTED = "amountCollected";
  @SerializedName(SERIALIZED_NAME_AMOUNT_COLLECTED)
  private Double amountCollected;

  public static final String SERIALIZED_NAME_AMOUNT_CREDITED = "amountCredited";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CREDITED)
  private Double amountCredited;

  public static final String SERIALIZED_NAME_AMOUNT_REQUESTED = "amountRequested";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REQUESTED)
  private Double amountRequested;

  public static final String SERIALIZED_NAME_AMOUNT_REFUNDED = "amountRefunded";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REFUNDED)
  private Double amountRefunded;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private PaymentActionTarget target;

  public SubPayment() {
  }

  public SubPayment status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public SubPayment amountCollected(Double amountCollected) {
    
    this.amountCollected = amountCollected;
    return this;
  }

   /**
   * Get amountCollected
   * @return amountCollected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountCollected() {
    return amountCollected;
  }


  public void setAmountCollected(Double amountCollected) {
    this.amountCollected = amountCollected;
  }


  public SubPayment amountCredited(Double amountCredited) {
    
    this.amountCredited = amountCredited;
    return this;
  }

   /**
   * Get amountCredited
   * @return amountCredited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountCredited() {
    return amountCredited;
  }


  public void setAmountCredited(Double amountCredited) {
    this.amountCredited = amountCredited;
  }


  public SubPayment amountRequested(Double amountRequested) {
    
    this.amountRequested = amountRequested;
    return this;
  }

   /**
   * Get amountRequested
   * @return amountRequested
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountRequested() {
    return amountRequested;
  }


  public void setAmountRequested(Double amountRequested) {
    this.amountRequested = amountRequested;
  }


  public SubPayment amountRefunded(Double amountRefunded) {
    
    this.amountRefunded = amountRefunded;
    return this;
  }

   /**
   * Get amountRefunded
   * @return amountRefunded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountRefunded() {
    return amountRefunded;
  }


  public void setAmountRefunded(Double amountRefunded) {
    this.amountRefunded = amountRefunded;
  }


  public SubPayment target(PaymentActionTarget target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentActionTarget getTarget() {
    return target;
  }


  public void setTarget(PaymentActionTarget target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubPayment subPayment = (SubPayment) o;
    return Objects.equals(this.status, subPayment.status) &&
        Objects.equals(this.amountCollected, subPayment.amountCollected) &&
        Objects.equals(this.amountCredited, subPayment.amountCredited) &&
        Objects.equals(this.amountRequested, subPayment.amountRequested) &&
        Objects.equals(this.amountRefunded, subPayment.amountRefunded) &&
        Objects.equals(this.target, subPayment.target);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, amountCollected, amountCredited, amountRequested, amountRefunded, target);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubPayment {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amountCollected: ").append(toIndentedString(amountCollected)).append("\n");
    sb.append("    amountCredited: ").append(toIndentedString(amountCredited)).append("\n");
    sb.append("    amountRequested: ").append(toIndentedString(amountRequested)).append("\n");
    sb.append("    amountRefunded: ").append(toIndentedString(amountRefunded)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("amountCollected");
    openapiFields.add("amountCredited");
    openapiFields.add("amountRequested");
    openapiFields.add("amountRefunded");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubPayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubPayment is not found in the empty JSON string", SubPayment.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SubPayment.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubPayment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        PaymentActionTarget.validateJsonObject(jsonObj.getAsJsonObject("target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<SubPayment>() {
           @Override
           public void write(JsonWriter out, SubPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubPayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubPayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubPayment
  * @throws IOException if the JSON string is invalid with respect to SubPayment
  */
  public static SubPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubPayment.class);
  }

 /**
  * Convert an instance of SubPayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

