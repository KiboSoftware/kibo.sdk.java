/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.subscription.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.subscription.models.CheckPayment;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeContact;
import com.kibocommerce.sdk.subscription.models.PaymentCard;
import com.kibocommerce.sdk.subscription.models.PaymentToken;
import com.kibocommerce.sdk.subscription.models.PurchaseOrderPayment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Customer&#39;s payment details such as payment type (credit card, check by mail, or PayPal)  and cardholder information if payment is by credit card.
 */
@ApiModel(description = "Customer's payment details such as payment type (credit card, check by mail, or PayPal)  and cardholder information if payment is by credit card.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BillingInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_PAYMENT_WORKFLOW = "paymentWorkflow";
  @SerializedName(SERIALIZED_NAME_PAYMENT_WORKFLOW)
  private String paymentWorkflow;

  public static final String SERIALIZED_NAME_BILLING_CONTACT = "billingContact";
  @SerializedName(SERIALIZED_NAME_BILLING_CONTACT)
  private CommerceRuntimeContact billingContact;

  public static final String SERIALIZED_NAME_IS_SAME_BILLING_SHIPPING_ADDRESS = "isSameBillingShippingAddress";
  @SerializedName(SERIALIZED_NAME_IS_SAME_BILLING_SHIPPING_ADDRESS)
  private Boolean isSameBillingShippingAddress;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private PaymentCard card;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private PaymentToken token;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchaseOrder";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private PurchaseOrderPayment purchaseOrder;

  public static final String SERIALIZED_NAME_CHECK = "check";
  @SerializedName(SERIALIZED_NAME_CHECK)
  private CheckPayment check;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_STORE_CREDIT_CODE = "storeCreditCode";
  @SerializedName(SERIALIZED_NAME_STORE_CREDIT_CODE)
  private String storeCreditCode;

  public static final String SERIALIZED_NAME_STORE_CREDIT_TYPE = "storeCreditType";
  @SerializedName(SERIALIZED_NAME_STORE_CREDIT_TYPE)
  private String storeCreditType;

  public static final String SERIALIZED_NAME_CUSTOM_CREDIT_TYPE = "customCreditType";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CREDIT_TYPE)
  private String customCreditType;

  public static final String SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID = "externalTransactionId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID)
  private String externalTransactionId;

  public static final String SERIALIZED_NAME_IS_RECURRING = "isRecurring";
  @SerializedName(SERIALIZED_NAME_IS_RECURRING)
  private Boolean isRecurring;

  public static final String SERIALIZED_NAME_RECURRING_TRANSACTION_ID = "recurringTransactionId";
  @SerializedName(SERIALIZED_NAME_RECURRING_TRANSACTION_ID)
  private String recurringTransactionId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public BillingInfo() {
  }

  public BillingInfo paymentType(String paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Type of payment, such as credit card, check by mail, or PayPal.  see Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid values
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of payment, such as credit card, check by mail, or PayPal.  see Mozu.CommerceRuntime.Contracts.Payments.PaymentTypeConst for valid values")

  public String getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public BillingInfo paymentWorkflow(String paymentWorkflow) {
    
    this.paymentWorkflow = paymentWorkflow;
    return this;
  }

   /**
   * Get paymentWorkflow
   * @return paymentWorkflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentWorkflow() {
    return paymentWorkflow;
  }


  public void setPaymentWorkflow(String paymentWorkflow) {
    this.paymentWorkflow = paymentWorkflow;
  }


  public BillingInfo billingContact(CommerceRuntimeContact billingContact) {
    
    this.billingContact = billingContact;
    return this;
  }

   /**
   * Get billingContact
   * @return billingContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceRuntimeContact getBillingContact() {
    return billingContact;
  }


  public void setBillingContact(CommerceRuntimeContact billingContact) {
    this.billingContact = billingContact;
  }


  public BillingInfo isSameBillingShippingAddress(Boolean isSameBillingShippingAddress) {
    
    this.isSameBillingShippingAddress = isSameBillingShippingAddress;
    return this;
  }

   /**
   * Indicates that billing and shipping address are the same
   * @return isSameBillingShippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates that billing and shipping address are the same")

  public Boolean getIsSameBillingShippingAddress() {
    return isSameBillingShippingAddress;
  }


  public void setIsSameBillingShippingAddress(Boolean isSameBillingShippingAddress) {
    this.isSameBillingShippingAddress = isSameBillingShippingAddress;
  }


  public BillingInfo card(PaymentCard card) {
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentCard getCard() {
    return card;
  }


  public void setCard(PaymentCard card) {
    this.card = card;
  }


  public BillingInfo token(PaymentToken token) {
    
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentToken getToken() {
    return token;
  }


  public void setToken(PaymentToken token) {
    this.token = token;
  }


  public BillingInfo purchaseOrder(PurchaseOrderPayment purchaseOrder) {
    
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PurchaseOrderPayment getPurchaseOrder() {
    return purchaseOrder;
  }


  public void setPurchaseOrder(PurchaseOrderPayment purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public BillingInfo check(CheckPayment check) {
    
    this.check = check;
    return this;
  }

   /**
   * Get check
   * @return check
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckPayment getCheck() {
    return check;
  }


  public void setCheck(CheckPayment check) {
    this.check = check;
  }


  public BillingInfo auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public BillingInfo storeCreditCode(String storeCreditCode) {
    
    this.storeCreditCode = storeCreditCode;
    return this;
  }

   /**
   * The store credit to use for this purchase
   * @return storeCreditCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The store credit to use for this purchase")

  public String getStoreCreditCode() {
    return storeCreditCode;
  }


  public void setStoreCreditCode(String storeCreditCode) {
    this.storeCreditCode = storeCreditCode;
  }


  public BillingInfo storeCreditType(String storeCreditType) {
    
    this.storeCreditType = storeCreditType;
    return this;
  }

   /**
   * The type of store credit used for this purchase
   * @return storeCreditType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of store credit used for this purchase")

  public String getStoreCreditType() {
    return storeCreditType;
  }


  public void setStoreCreditType(String storeCreditType) {
    this.storeCreditType = storeCreditType;
  }


  public BillingInfo customCreditType(String customCreditType) {
    
    this.customCreditType = customCreditType;
    return this;
  }

   /**
   * Name of custom stored credit type
   * @return customCreditType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of custom stored credit type")

  public String getCustomCreditType() {
    return customCreditType;
  }


  public void setCustomCreditType(String customCreditType) {
    this.customCreditType = customCreditType;
  }


  public BillingInfo externalTransactionId(String externalTransactionId) {
    
    this.externalTransactionId = externalTransactionId;
    return this;
  }

   /**
   * Transaction Id from third party payment source like Visa Checkout, Amazon
   * @return externalTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction Id from third party payment source like Visa Checkout, Amazon")

  public String getExternalTransactionId() {
    return externalTransactionId;
  }


  public void setExternalTransactionId(String externalTransactionId) {
    this.externalTransactionId = externalTransactionId;
  }


  public BillingInfo isRecurring(Boolean isRecurring) {
    
    this.isRecurring = isRecurring;
    return this;
  }

   /**
   * Indicates whether the payment is used in recurring transactions. ex- subscription payments
   * @return isRecurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the payment is used in recurring transactions. ex- subscription payments")

  public Boolean getIsRecurring() {
    return isRecurring;
  }


  public void setIsRecurring(Boolean isRecurring) {
    this.isRecurring = isRecurring;
  }


  public BillingInfo recurringTransactionId(String recurringTransactionId) {
    
    this.recurringTransactionId = recurringTransactionId;
    return this;
  }

   /**
   * Recurring Payment Id returned by Payment Gateway  networkTransactionId for vantiv  previousTransactionId for cybersource etc
   * @return recurringTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Recurring Payment Id returned by Payment Gateway  networkTransactionId for vantiv  previousTransactionId for cybersource etc")

  public String getRecurringTransactionId() {
    return recurringTransactionId;
  }


  public void setRecurringTransactionId(String recurringTransactionId) {
    this.recurringTransactionId = recurringTransactionId;
  }


  public BillingInfo data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Custom data from payment providers
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom data from payment providers")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingInfo billingInfo = (BillingInfo) o;
    return Objects.equals(this.paymentType, billingInfo.paymentType) &&
        Objects.equals(this.paymentWorkflow, billingInfo.paymentWorkflow) &&
        Objects.equals(this.billingContact, billingInfo.billingContact) &&
        Objects.equals(this.isSameBillingShippingAddress, billingInfo.isSameBillingShippingAddress) &&
        Objects.equals(this.card, billingInfo.card) &&
        Objects.equals(this.token, billingInfo.token) &&
        Objects.equals(this.purchaseOrder, billingInfo.purchaseOrder) &&
        Objects.equals(this.check, billingInfo.check) &&
        Objects.equals(this.auditInfo, billingInfo.auditInfo) &&
        Objects.equals(this.storeCreditCode, billingInfo.storeCreditCode) &&
        Objects.equals(this.storeCreditType, billingInfo.storeCreditType) &&
        Objects.equals(this.customCreditType, billingInfo.customCreditType) &&
        Objects.equals(this.externalTransactionId, billingInfo.externalTransactionId) &&
        Objects.equals(this.isRecurring, billingInfo.isRecurring) &&
        Objects.equals(this.recurringTransactionId, billingInfo.recurringTransactionId) &&
        Objects.equals(this.data, billingInfo.data);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentType, paymentWorkflow, billingContact, isSameBillingShippingAddress, card, token, purchaseOrder, check, auditInfo, storeCreditCode, storeCreditType, customCreditType, externalTransactionId, isRecurring, recurringTransactionId, data);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingInfo {\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentWorkflow: ").append(toIndentedString(paymentWorkflow)).append("\n");
    sb.append("    billingContact: ").append(toIndentedString(billingContact)).append("\n");
    sb.append("    isSameBillingShippingAddress: ").append(toIndentedString(isSameBillingShippingAddress)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    check: ").append(toIndentedString(check)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    storeCreditCode: ").append(toIndentedString(storeCreditCode)).append("\n");
    sb.append("    storeCreditType: ").append(toIndentedString(storeCreditType)).append("\n");
    sb.append("    customCreditType: ").append(toIndentedString(customCreditType)).append("\n");
    sb.append("    externalTransactionId: ").append(toIndentedString(externalTransactionId)).append("\n");
    sb.append("    isRecurring: ").append(toIndentedString(isRecurring)).append("\n");
    sb.append("    recurringTransactionId: ").append(toIndentedString(recurringTransactionId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentType");
    openapiFields.add("paymentWorkflow");
    openapiFields.add("billingContact");
    openapiFields.add("isSameBillingShippingAddress");
    openapiFields.add("card");
    openapiFields.add("token");
    openapiFields.add("purchaseOrder");
    openapiFields.add("check");
    openapiFields.add("auditInfo");
    openapiFields.add("storeCreditCode");
    openapiFields.add("storeCreditType");
    openapiFields.add("customCreditType");
    openapiFields.add("externalTransactionId");
    openapiFields.add("isRecurring");
    openapiFields.add("recurringTransactionId");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BillingInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BillingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingInfo is not found in the empty JSON string", BillingInfo.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!BillingInfo.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if ((jsonObj.get("paymentWorkflow") != null && !jsonObj.get("paymentWorkflow").isJsonNull()) && !jsonObj.get("paymentWorkflow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentWorkflow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentWorkflow").toString()));
      }
      // validate the optional field `billingContact`
      if (jsonObj.get("billingContact") != null && !jsonObj.get("billingContact").isJsonNull()) {
        CommerceRuntimeContact.validateJsonObject(jsonObj.getAsJsonObject("billingContact"));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        PaymentCard.validateJsonObject(jsonObj.getAsJsonObject("card"));
      }
      // validate the optional field `token`
      if (jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) {
        PaymentToken.validateJsonObject(jsonObj.getAsJsonObject("token"));
      }
      // validate the optional field `purchaseOrder`
      if (jsonObj.get("purchaseOrder") != null && !jsonObj.get("purchaseOrder").isJsonNull()) {
        PurchaseOrderPayment.validateJsonObject(jsonObj.getAsJsonObject("purchaseOrder"));
      }
      // validate the optional field `check`
      if (jsonObj.get("check") != null && !jsonObj.get("check").isJsonNull()) {
        CheckPayment.validateJsonObject(jsonObj.getAsJsonObject("check"));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if ((jsonObj.get("storeCreditCode") != null && !jsonObj.get("storeCreditCode").isJsonNull()) && !jsonObj.get("storeCreditCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCreditCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCreditCode").toString()));
      }
      if ((jsonObj.get("storeCreditType") != null && !jsonObj.get("storeCreditType").isJsonNull()) && !jsonObj.get("storeCreditType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeCreditType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeCreditType").toString()));
      }
      if ((jsonObj.get("customCreditType") != null && !jsonObj.get("customCreditType").isJsonNull()) && !jsonObj.get("customCreditType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCreditType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCreditType").toString()));
      }
      if ((jsonObj.get("externalTransactionId") != null && !jsonObj.get("externalTransactionId").isJsonNull()) && !jsonObj.get("externalTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalTransactionId").toString()));
      }
      if ((jsonObj.get("recurringTransactionId") != null && !jsonObj.get("recurringTransactionId").isJsonNull()) && !jsonObj.get("recurringTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurringTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurringTransactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingInfo>() {
           @Override
           public void write(JsonWriter out, BillingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingInfo
  * @throws IOException if the JSON string is invalid with respect to BillingInfo
  */
  public static BillingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingInfo.class);
  }

 /**
  * Convert an instance of BillingInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

