/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingstorefront.models.CommerceRuntimeContact;
import com.kibocommerce.sdk.shippingstorefront.models.CustomAttribute;
import com.kibocommerce.sdk.shippingstorefront.models.ShippingRuntimePackage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ShippingRuntimeShipment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShippingRuntimeShipment implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ORDER_TOTAL = "orderTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_TOTAL)
  private Double orderTotal;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private CommerceRuntimeContact origin;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private CommerceRuntimeContact destination;

  public static final String SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE = "fulfillmentLocationCode";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE)
  private String fulfillmentLocationCode;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<ShippingRuntimePackage> packages = null;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_CODES = "shippingMethodCodes";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_CODES)
  private List<String> shippingMethodCodes = null;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<CustomAttribute> customAttributes = null;

  public static final String SERIALIZED_NAME_ESTIMATED_SHIPMENT_DATE = "estimatedShipmentDate";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_SHIPMENT_DATE)
  private OffsetDateTime estimatedShipmentDate;

  public ShippingRuntimeShipment() {
  }

  public ShippingRuntimeShipment orderTotal(Double orderTotal) {
    
    this.orderTotal = orderTotal;
    return this;
  }

   /**
   * Get orderTotal
   * @return orderTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOrderTotal() {
    return orderTotal;
  }


  public void setOrderTotal(Double orderTotal) {
    this.orderTotal = orderTotal;
  }


  public ShippingRuntimeShipment origin(CommerceRuntimeContact origin) {
    
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceRuntimeContact getOrigin() {
    return origin;
  }


  public void setOrigin(CommerceRuntimeContact origin) {
    this.origin = origin;
  }


  public ShippingRuntimeShipment destination(CommerceRuntimeContact destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceRuntimeContact getDestination() {
    return destination;
  }


  public void setDestination(CommerceRuntimeContact destination) {
    this.destination = destination;
  }


  public ShippingRuntimeShipment fulfillmentLocationCode(String fulfillmentLocationCode) {
    
    this.fulfillmentLocationCode = fulfillmentLocationCode;
    return this;
  }

   /**
   * Get fulfillmentLocationCode
   * @return fulfillmentLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFulfillmentLocationCode() {
    return fulfillmentLocationCode;
  }


  public void setFulfillmentLocationCode(String fulfillmentLocationCode) {
    this.fulfillmentLocationCode = fulfillmentLocationCode;
  }


  public ShippingRuntimeShipment packages(List<ShippingRuntimePackage> packages) {
    
    this.packages = packages;
    return this;
  }

  public ShippingRuntimeShipment addPackagesItem(ShippingRuntimePackage packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

   /**
   * Get packages
   * @return packages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ShippingRuntimePackage> getPackages() {
    return packages;
  }


  public void setPackages(List<ShippingRuntimePackage> packages) {
    this.packages = packages;
  }


  public ShippingRuntimeShipment shippingMethodCodes(List<String> shippingMethodCodes) {
    
    this.shippingMethodCodes = shippingMethodCodes;
    return this;
  }

  public ShippingRuntimeShipment addShippingMethodCodesItem(String shippingMethodCodesItem) {
    if (this.shippingMethodCodes == null) {
      this.shippingMethodCodes = new ArrayList<>();
    }
    this.shippingMethodCodes.add(shippingMethodCodesItem);
    return this;
  }

   /**
   * Get shippingMethodCodes
   * @return shippingMethodCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getShippingMethodCodes() {
    return shippingMethodCodes;
  }


  public void setShippingMethodCodes(List<String> shippingMethodCodes) {
    this.shippingMethodCodes = shippingMethodCodes;
  }


  public ShippingRuntimeShipment customAttributes(List<CustomAttribute> customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

  public ShippingRuntimeShipment addCustomAttributesItem(CustomAttribute customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public ShippingRuntimeShipment estimatedShipmentDate(OffsetDateTime estimatedShipmentDate) {
    
    this.estimatedShipmentDate = estimatedShipmentDate;
    return this;
  }

   /**
   * Get estimatedShipmentDate
   * @return estimatedShipmentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEstimatedShipmentDate() {
    return estimatedShipmentDate;
  }


  public void setEstimatedShipmentDate(OffsetDateTime estimatedShipmentDate) {
    this.estimatedShipmentDate = estimatedShipmentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingRuntimeShipment shippingRuntimeShipment = (ShippingRuntimeShipment) o;
    return Objects.equals(this.orderTotal, shippingRuntimeShipment.orderTotal) &&
        Objects.equals(this.origin, shippingRuntimeShipment.origin) &&
        Objects.equals(this.destination, shippingRuntimeShipment.destination) &&
        Objects.equals(this.fulfillmentLocationCode, shippingRuntimeShipment.fulfillmentLocationCode) &&
        Objects.equals(this.packages, shippingRuntimeShipment.packages) &&
        Objects.equals(this.shippingMethodCodes, shippingRuntimeShipment.shippingMethodCodes) &&
        Objects.equals(this.customAttributes, shippingRuntimeShipment.customAttributes) &&
        Objects.equals(this.estimatedShipmentDate, shippingRuntimeShipment.estimatedShipmentDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderTotal, origin, destination, fulfillmentLocationCode, packages, shippingMethodCodes, customAttributes, estimatedShipmentDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingRuntimeShipment {\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    fulfillmentLocationCode: ").append(toIndentedString(fulfillmentLocationCode)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    shippingMethodCodes: ").append(toIndentedString(shippingMethodCodes)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    estimatedShipmentDate: ").append(toIndentedString(estimatedShipmentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderTotal");
    openapiFields.add("origin");
    openapiFields.add("destination");
    openapiFields.add("fulfillmentLocationCode");
    openapiFields.add("packages");
    openapiFields.add("shippingMethodCodes");
    openapiFields.add("customAttributes");
    openapiFields.add("estimatedShipmentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShippingRuntimeShipment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShippingRuntimeShipment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingRuntimeShipment is not found in the empty JSON string", ShippingRuntimeShipment.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShippingRuntimeShipment.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingRuntimeShipment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        CommerceRuntimeContact.validateJsonObject(jsonObj.getAsJsonObject("origin"));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        CommerceRuntimeContact.validateJsonObject(jsonObj.getAsJsonObject("destination"));
      }
      if ((jsonObj.get("fulfillmentLocationCode") != null && !jsonObj.get("fulfillmentLocationCode").isJsonNull()) && !jsonObj.get("fulfillmentLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentLocationCode").toString()));
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            ShippingRuntimePackage.validateJsonObject(jsonArraypackages.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("shippingMethodCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethodCodes` to be an array in the JSON string but got `%s`", jsonObj.get("shippingMethodCodes").toString()));
      }
      if (jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("customAttributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
          }

          // validate the optional field `customAttributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            CustomAttribute.validateJsonObject(jsonArraycustomAttributes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingRuntimeShipment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingRuntimeShipment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingRuntimeShipment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingRuntimeShipment.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingRuntimeShipment>() {
           @Override
           public void write(JsonWriter out, ShippingRuntimeShipment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingRuntimeShipment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShippingRuntimeShipment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShippingRuntimeShipment
  * @throws IOException if the JSON string is invalid with respect to ShippingRuntimeShipment
  */
  public static ShippingRuntimeShipment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingRuntimeShipment.class);
  }

 /**
  * Convert an instance of ShippingRuntimeShipment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

