/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingstorefront.models.CustomAttribute;
import com.kibocommerce.sdk.shippingstorefront.models.Money;
import com.kibocommerce.sdk.shippingstorefront.models.Notification;
import com.kibocommerce.sdk.shippingstorefront.models.PackageResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ShipmentResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShipmentResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Money shippingTotal;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "trackingNumber";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_PACKAGE_RESPONSES = "packageResponses";
  @SerializedName(SERIALIZED_NAME_PACKAGE_RESPONSES)
  private List<PackageResponse> packageResponses = null;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<CustomAttribute> customAttributes = null;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Notification> messages = null;

  public static final String SERIALIZED_NAME_IS_SUCCESSFUL = "isSuccessful";
  @SerializedName(SERIALIZED_NAME_IS_SUCCESSFUL)
  private Boolean isSuccessful;

  public ShipmentResponse() {
  }

  public ShipmentResponse shippingTotal(Money shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * Get shippingTotal
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Money shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public ShipmentResponse trackingNumber(String trackingNumber) {
    
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * Get trackingNumber
   * @return trackingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackingNumber() {
    return trackingNumber;
  }


  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }


  public ShipmentResponse packageResponses(List<PackageResponse> packageResponses) {
    
    this.packageResponses = packageResponses;
    return this;
  }

  public ShipmentResponse addPackageResponsesItem(PackageResponse packageResponsesItem) {
    if (this.packageResponses == null) {
      this.packageResponses = new ArrayList<>();
    }
    this.packageResponses.add(packageResponsesItem);
    return this;
  }

   /**
   * Get packageResponses
   * @return packageResponses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PackageResponse> getPackageResponses() {
    return packageResponses;
  }


  public void setPackageResponses(List<PackageResponse> packageResponses) {
    this.packageResponses = packageResponses;
  }


  public ShipmentResponse customAttributes(List<CustomAttribute> customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

  public ShipmentResponse addCustomAttributesItem(CustomAttribute customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public ShipmentResponse messages(List<Notification> messages) {
    
    this.messages = messages;
    return this;
  }

  public ShipmentResponse addMessagesItem(Notification messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Notification> getMessages() {
    return messages;
  }


  public void setMessages(List<Notification> messages) {
    this.messages = messages;
  }


  public ShipmentResponse isSuccessful(Boolean isSuccessful) {
    
    this.isSuccessful = isSuccessful;
    return this;
  }

   /**
   * Get isSuccessful
   * @return isSuccessful
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsSuccessful() {
    return isSuccessful;
  }


  public void setIsSuccessful(Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentResponse shipmentResponse = (ShipmentResponse) o;
    return Objects.equals(this.shippingTotal, shipmentResponse.shippingTotal) &&
        Objects.equals(this.trackingNumber, shipmentResponse.trackingNumber) &&
        Objects.equals(this.packageResponses, shipmentResponse.packageResponses) &&
        Objects.equals(this.customAttributes, shipmentResponse.customAttributes) &&
        Objects.equals(this.messages, shipmentResponse.messages) &&
        Objects.equals(this.isSuccessful, shipmentResponse.isSuccessful);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingTotal, trackingNumber, packageResponses, customAttributes, messages, isSuccessful);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentResponse {\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    packageResponses: ").append(toIndentedString(packageResponses)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    isSuccessful: ").append(toIndentedString(isSuccessful)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shippingTotal");
    openapiFields.add("trackingNumber");
    openapiFields.add("packageResponses");
    openapiFields.add("customAttributes");
    openapiFields.add("messages");
    openapiFields.add("isSuccessful");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipmentResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShipmentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentResponse is not found in the empty JSON string", ShipmentResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShipmentResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `shippingTotal`
      if (jsonObj.get("shippingTotal") != null && !jsonObj.get("shippingTotal").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("shippingTotal"));
      }
      if ((jsonObj.get("trackingNumber") != null && !jsonObj.get("trackingNumber").isJsonNull()) && !jsonObj.get("trackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingNumber").toString()));
      }
      if (jsonObj.get("packageResponses") != null && !jsonObj.get("packageResponses").isJsonNull()) {
        JsonArray jsonArraypackageResponses = jsonObj.getAsJsonArray("packageResponses");
        if (jsonArraypackageResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packageResponses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packageResponses` to be an array in the JSON string but got `%s`", jsonObj.get("packageResponses").toString()));
          }

          // validate the optional field `packageResponses` (array)
          for (int i = 0; i < jsonArraypackageResponses.size(); i++) {
            PackageResponse.validateJsonObject(jsonArraypackageResponses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("customAttributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
          }

          // validate the optional field `customAttributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            CustomAttribute.validateJsonObject(jsonArraycustomAttributes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Notification.validateJsonObject(jsonArraymessages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentResponse>() {
           @Override
           public void write(JsonWriter out, ShipmentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipmentResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipmentResponse
  * @throws IOException if the JSON string is invalid with respect to ShipmentResponse
  */
  public static ShipmentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentResponse.class);
  }

 /**
  * Convert an instance of ShipmentResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

