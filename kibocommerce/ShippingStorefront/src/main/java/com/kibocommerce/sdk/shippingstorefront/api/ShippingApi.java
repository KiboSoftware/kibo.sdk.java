/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.shippingstorefront.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.shippingstorefront.models.CancelLabelRequest;
import com.kibocommerce.sdk.shippingstorefront.models.CancelLabelResponse;
import com.kibocommerce.sdk.shippingstorefront.models.CarrierResponse;
import com.kibocommerce.sdk.shippingstorefront.models.ManifestResponse;
import com.kibocommerce.sdk.shippingstorefront.models.RateRequest;
import com.kibocommerce.sdk.shippingstorefront.models.RateRequestGroup;
import com.kibocommerce.sdk.shippingstorefront.models.RatesResponse;
import com.kibocommerce.sdk.shippingstorefront.models.RatesResponseGroup;
import com.kibocommerce.sdk.shippingstorefront.models.ShipmentRequest;
import com.kibocommerce.sdk.shippingstorefront.models.ShipmentResponse;
import com.kibocommerce.sdk.shippingstorefront.models.ShippingRuntimeManifestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShippingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ShippingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShippingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ShippingApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ShippingApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ShippingApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelLabels
     * @param cancelLabelRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelLabelsCall(CancelLabelRequest cancelLabelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelLabelRequest;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/cancel-labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelLabelsValidateBeforeCall(CancelLabelRequest cancelLabelRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cancelLabelsCall(cancelLabelRequest, _callback);
        return localVarCall;

    }

    /**
     * Cancel Labels
     * Cancel a Unused Label
     * @param cancelLabelRequest  (optional)
     * @return CancelLabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelLabelResponse cancelLabels(CancelLabelRequest cancelLabelRequest) throws ApiException {
        ApiResponse<CancelLabelResponse> localVarResp = cancelLabelsWithHttpInfo(cancelLabelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel Labels
     * Cancel a Unused Label
     * @param cancelLabelRequest  (optional)
     * @return ApiResponse&lt;CancelLabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelLabelResponse> cancelLabelsWithHttpInfo(CancelLabelRequest cancelLabelRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelLabelsValidateBeforeCall(cancelLabelRequest, null);
        Type localVarReturnType = new TypeToken<CancelLabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Labels (asynchronously)
     * Cancel a Unused Label
     * @param cancelLabelRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelLabelsAsync(CancelLabelRequest cancelLabelRequest, final ApiCallback<CancelLabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelLabelsValidateBeforeCall(cancelLabelRequest, _callback);
        Type localVarReturnType = new TypeToken<CancelLabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarriers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarriersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/carriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarriersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCarriersCall(_callback);
        return localVarCall;

    }

    /**
     * Get Carriers
     * Get a list of supported carriers.
     * @return CarrierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierResponse getCarriers() throws ApiException {
        ApiResponse<CarrierResponse> localVarResp = getCarriersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Carriers
     * Get a list of supported carriers.
     * @return ApiResponse&lt;CarrierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierResponse> getCarriersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCarriersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CarrierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Carriers (asynchronously)
     * Get a list of supported carriers.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarriersAsync(final ApiCallback<CarrierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarriersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CarrierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabels
     * @param shipmentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsCall(ShipmentRequest shipmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shipmentRequest;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/request-labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelsValidateBeforeCall(ShipmentRequest shipmentRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLabelsCall(shipmentRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Labels
     * Get Shipping Label for the Service Type Requested
     * @param shipmentRequest  (optional)
     * @return ShipmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShipmentResponse getLabels(ShipmentRequest shipmentRequest) throws ApiException {
        ApiResponse<ShipmentResponse> localVarResp = getLabelsWithHttpInfo(shipmentRequest);
        return localVarResp.getData();
    }

    /**
     * Get Labels
     * Get Shipping Label for the Service Type Requested
     * @param shipmentRequest  (optional)
     * @return ApiResponse&lt;ShipmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShipmentResponse> getLabelsWithHttpInfo(ShipmentRequest shipmentRequest) throws ApiException {
        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(shipmentRequest, null);
        Type localVarReturnType = new TypeToken<ShipmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Labels (asynchronously)
     * Get Shipping Label for the Service Type Requested
     * @param shipmentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsAsync(ShipmentRequest shipmentRequest, final ApiCallback<ShipmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(shipmentRequest, _callback);
        Type localVarReturnType = new TypeToken<ShipmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManifest
     * @param shippingRuntimeManifestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestCall(ShippingRuntimeManifestRequest shippingRuntimeManifestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shippingRuntimeManifestRequest;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/request-manifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManifestValidateBeforeCall(ShippingRuntimeManifestRequest shippingRuntimeManifestRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getManifestCall(shippingRuntimeManifestRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Manifest
     * Get Manifest for the list Shipping Labels
     * @param shippingRuntimeManifestRequest  (optional)
     * @return ManifestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ManifestResponse getManifest(ShippingRuntimeManifestRequest shippingRuntimeManifestRequest) throws ApiException {
        ApiResponse<ManifestResponse> localVarResp = getManifestWithHttpInfo(shippingRuntimeManifestRequest);
        return localVarResp.getData();
    }

    /**
     * Get Manifest
     * Get Manifest for the list Shipping Labels
     * @param shippingRuntimeManifestRequest  (optional)
     * @return ApiResponse&lt;ManifestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManifestResponse> getManifestWithHttpInfo(ShippingRuntimeManifestRequest shippingRuntimeManifestRequest) throws ApiException {
        okhttp3.Call localVarCall = getManifestValidateBeforeCall(shippingRuntimeManifestRequest, null);
        Type localVarReturnType = new TypeToken<ManifestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Manifest (asynchronously)
     * Get Manifest for the list Shipping Labels
     * @param shippingRuntimeManifestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestAsync(ShippingRuntimeManifestRequest shippingRuntimeManifestRequest, final ApiCallback<ManifestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManifestValidateBeforeCall(shippingRuntimeManifestRequest, _callback);
        Type localVarReturnType = new TypeToken<ManifestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getManifestURL
     * @param carrierId  (required)
     * @param manifestId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestURLCall(String carrierId, String manifestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/{carrierId}/get-manifest-url/{manifestId}"
            .replaceAll("\\{" + "carrierId" + "\\}", localVarApiClient.escapeString(carrierId.toString()))
            .replaceAll("\\{" + "manifestId" + "\\}", localVarApiClient.escapeString(manifestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManifestURLValidateBeforeCall(String carrierId, String manifestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getManifestURL(Async)");
        }
        
        // verify the required parameter 'manifestId' is set
        if (manifestId == null) {
            throw new ApiException("Missing the required parameter 'manifestId' when calling getManifestURL(Async)");
        }
        

        okhttp3.Call localVarCall = getManifestURLCall(carrierId, manifestId, _callback);
        return localVarCall;

    }

    /**
     * Get Manifest URL
     * Get Manifest URL for the Manifest Id
     * @param carrierId  (required)
     * @param manifestId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String getManifestURL(String carrierId, String manifestId) throws ApiException {
        ApiResponse<String> localVarResp = getManifestURLWithHttpInfo(carrierId, manifestId);
        return localVarResp.getData();
    }

    /**
     * Get Manifest URL
     * Get Manifest URL for the Manifest Id
     * @param carrierId  (required)
     * @param manifestId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getManifestURLWithHttpInfo(String carrierId, String manifestId) throws ApiException {
        okhttp3.Call localVarCall = getManifestURLValidateBeforeCall(carrierId, manifestId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Manifest URL (asynchronously)
     * Get Manifest URL for the Manifest Id
     * @param carrierId  (required)
     * @param manifestId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getManifestURLAsync(String carrierId, String manifestId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManifestURLValidateBeforeCall(carrierId, manifestId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultiRates
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequestGroup  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiRatesCall(Boolean includeRawResponse, List<RateRequestGroup> rateRequestGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rateRequestGroup;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/request-multi-rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeRawResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRawResponse", includeRawResponse));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiRatesValidateBeforeCall(Boolean includeRawResponse, List<RateRequestGroup> rateRequestGroup, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMultiRatesCall(includeRawResponse, rateRequestGroup, _callback);
        return localVarCall;

    }

    /**
     * Get Multi Rates
     * Get List of Rate Responses for a List of Rate Requests
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequestGroup  (optional)
     * @return List&lt;RatesResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<RatesResponseGroup> getMultiRates(Boolean includeRawResponse, List<RateRequestGroup> rateRequestGroup) throws ApiException {
        ApiResponse<List<RatesResponseGroup>> localVarResp = getMultiRatesWithHttpInfo(includeRawResponse, rateRequestGroup);
        return localVarResp.getData();
    }

    /**
     * Get Multi Rates
     * Get List of Rate Responses for a List of Rate Requests
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequestGroup  (optional)
     * @return ApiResponse&lt;List&lt;RatesResponseGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RatesResponseGroup>> getMultiRatesWithHttpInfo(Boolean includeRawResponse, List<RateRequestGroup> rateRequestGroup) throws ApiException {
        okhttp3.Call localVarCall = getMultiRatesValidateBeforeCall(includeRawResponse, rateRequestGroup, null);
        Type localVarReturnType = new TypeToken<List<RatesResponseGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Multi Rates (asynchronously)
     * Get List of Rate Responses for a List of Rate Requests
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequestGroup  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiRatesAsync(Boolean includeRawResponse, List<RateRequestGroup> rateRequestGroup, final ApiCallback<List<RatesResponseGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultiRatesValidateBeforeCall(includeRawResponse, rateRequestGroup, _callback);
        Type localVarReturnType = new TypeToken<List<RatesResponseGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRates
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatesCall(Boolean includeRawResponse, RateRequest rateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rateRequest;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/shipping/request-rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeRawResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRawResponse", includeRawResponse));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRatesValidateBeforeCall(Boolean includeRawResponse, RateRequest rateRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRatesCall(includeRawResponse, rateRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Rates
     * Get Rate Responses for a Rate Request
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequest  (optional)
     * @return RatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RatesResponse getRates(Boolean includeRawResponse, RateRequest rateRequest) throws ApiException {
        ApiResponse<RatesResponse> localVarResp = getRatesWithHttpInfo(includeRawResponse, rateRequest);
        return localVarResp.getData();
    }

    /**
     * Get Rates
     * Get Rate Responses for a Rate Request
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequest  (optional)
     * @return ApiResponse&lt;RatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RatesResponse> getRatesWithHttpInfo(Boolean includeRawResponse, RateRequest rateRequest) throws ApiException {
        okhttp3.Call localVarCall = getRatesValidateBeforeCall(includeRawResponse, rateRequest, null);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Rates (asynchronously)
     * Get Rate Responses for a Rate Request
     * @param includeRawResponse  (optional, default to false)
     * @param rateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatesAsync(Boolean includeRawResponse, RateRequest rateRequest, final ApiCallback<RatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRatesValidateBeforeCall(includeRawResponse, rateRequest, _callback);
        Type localVarReturnType = new TypeToken<RatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ShippingApi build() {
            return new ShippingApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
