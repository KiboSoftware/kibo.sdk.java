/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Model of a tenant silo config.
 */
@ApiModel(description = "Model of a tenant silo config.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TenantSiloConfigModel implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SILO_I_D = "siloID";
  @SerializedName(SERIALIZED_NAME_SILO_I_D)
  private Integer siloID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_USABLE = "usable";
  @SerializedName(SERIALIZED_NAME_USABLE)
  private Boolean usable;

  public static final String SERIALIZED_NAME_ADDITONAL_TENANTS_ALLOWED = "additonalTenantsAllowed";
  @SerializedName(SERIALIZED_NAME_ADDITONAL_TENANTS_ALLOWED)
  private Boolean additonalTenantsAllowed;

  public static final String SERIALIZED_NAME_BATCH_WORKERS = "batchWorkers";
  @SerializedName(SERIALIZED_NAME_BATCH_WORKERS)
  private Integer batchWorkers;

  public static final String SERIALIZED_NAME_EVENT_SENDER_WORKERS = "eventSenderWorkers";
  @SerializedName(SERIALIZED_NAME_EVENT_SENDER_WORKERS)
  private Integer eventSenderWorkers;

  public static final String SERIALIZED_NAME_TENANT_I_D = "tenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private Integer tenantID;

  public TenantSiloConfigModel() {
  }

  public TenantSiloConfigModel siloID(Integer siloID) {
    
    this.siloID = siloID;
    return this;
  }

   /**
   * A Silo ID
   * @return siloID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Silo ID")

  public Integer getSiloID() {
    return siloID;
  }


  public void setSiloID(Integer siloID) {
    this.siloID = siloID;
  }


  public TenantSiloConfigModel name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the Silo
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Silo")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TenantSiloConfigModel description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of silo configuration
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of silo configuration")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TenantSiloConfigModel usable(Boolean usable) {
    
    this.usable = usable;
    return this;
  }

   /**
   * Whether the  silo config is usable or not
   * @return usable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the  silo config is usable or not")

  public Boolean getUsable() {
    return usable;
  }


  public void setUsable(Boolean usable) {
    this.usable = usable;
  }


  public TenantSiloConfigModel additonalTenantsAllowed(Boolean additonalTenantsAllowed) {
    
    this.additonalTenantsAllowed = additonalTenantsAllowed;
    return this;
  }

   /**
   * Check whether theAdditional tenants allowed or not 
   * @return additonalTenantsAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Check whether theAdditional tenants allowed or not ")

  public Boolean getAdditonalTenantsAllowed() {
    return additonalTenantsAllowed;
  }


  public void setAdditonalTenantsAllowed(Boolean additonalTenantsAllowed) {
    this.additonalTenantsAllowed = additonalTenantsAllowed;
  }


  public TenantSiloConfigModel batchWorkers(Integer batchWorkers) {
    
    this.batchWorkers = batchWorkers;
    return this;
  }

   /**
   * Number of Batch Workers to run for this tenant.
   * @return batchWorkers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of Batch Workers to run for this tenant.")

  public Integer getBatchWorkers() {
    return batchWorkers;
  }


  public void setBatchWorkers(Integer batchWorkers) {
    this.batchWorkers = batchWorkers;
  }


  public TenantSiloConfigModel eventSenderWorkers(Integer eventSenderWorkers) {
    
    this.eventSenderWorkers = eventSenderWorkers;
    return this;
  }

   /**
   * Number of Event Sender Workers to run for this tenant.
   * @return eventSenderWorkers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of Event Sender Workers to run for this tenant.")

  public Integer getEventSenderWorkers() {
    return eventSenderWorkers;
  }


  public void setEventSenderWorkers(Integer eventSenderWorkers) {
    this.eventSenderWorkers = eventSenderWorkers;
  }


  public TenantSiloConfigModel tenantID(Integer tenantID) {
    
    this.tenantID = tenantID;
    return this;
  }

   /**
   * A Tenant ID
   * @return tenantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A Tenant ID")

  public Integer getTenantID() {
    return tenantID;
  }


  public void setTenantID(Integer tenantID) {
    this.tenantID = tenantID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantSiloConfigModel tenantSiloConfigModel = (TenantSiloConfigModel) o;
    return Objects.equals(this.siloID, tenantSiloConfigModel.siloID) &&
        Objects.equals(this.name, tenantSiloConfigModel.name) &&
        Objects.equals(this.description, tenantSiloConfigModel.description) &&
        Objects.equals(this.usable, tenantSiloConfigModel.usable) &&
        Objects.equals(this.additonalTenantsAllowed, tenantSiloConfigModel.additonalTenantsAllowed) &&
        Objects.equals(this.batchWorkers, tenantSiloConfigModel.batchWorkers) &&
        Objects.equals(this.eventSenderWorkers, tenantSiloConfigModel.eventSenderWorkers) &&
        Objects.equals(this.tenantID, tenantSiloConfigModel.tenantID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(siloID, name, description, usable, additonalTenantsAllowed, batchWorkers, eventSenderWorkers, tenantID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantSiloConfigModel {\n");
    sb.append("    siloID: ").append(toIndentedString(siloID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    usable: ").append(toIndentedString(usable)).append("\n");
    sb.append("    additonalTenantsAllowed: ").append(toIndentedString(additonalTenantsAllowed)).append("\n");
    sb.append("    batchWorkers: ").append(toIndentedString(batchWorkers)).append("\n");
    sb.append("    eventSenderWorkers: ").append(toIndentedString(eventSenderWorkers)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("siloID");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("usable");
    openapiFields.add("additonalTenantsAllowed");
    openapiFields.add("batchWorkers");
    openapiFields.add("eventSenderWorkers");
    openapiFields.add("tenantID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TenantSiloConfigModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TenantSiloConfigModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenantSiloConfigModel is not found in the empty JSON string", TenantSiloConfigModel.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!TenantSiloConfigModel.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenantSiloConfigModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenantSiloConfigModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenantSiloConfigModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenantSiloConfigModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenantSiloConfigModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TenantSiloConfigModel>() {
           @Override
           public void write(JsonWriter out, TenantSiloConfigModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenantSiloConfigModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TenantSiloConfigModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TenantSiloConfigModel
  * @throws IOException if the JSON string is invalid with respect to TenantSiloConfigModel
  */
  public static TenantSiloConfigModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenantSiloConfigModel.class);
  }

 /**
  * Convert an instance of TenantSiloConfigModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

