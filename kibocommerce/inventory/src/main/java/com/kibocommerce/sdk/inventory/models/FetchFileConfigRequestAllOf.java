/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FetchFileConfigRequestAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FetchFileConfigRequestAllOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FETCH_FILE_CONFIG_I_D = "fetchFileConfigID";
  @SerializedName(SERIALIZED_NAME_FETCH_FILE_CONFIG_I_D)
  private Integer fetchFileConfigID;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EMAIL_LIST = "emailList";
  @SerializedName(SERIALIZED_NAME_EMAIL_LIST)
  private String emailList;

  public static final String SERIALIZED_NAME_REFRESH_ENABLED = "refreshEnabled";
  @SerializedName(SERIALIZED_NAME_REFRESH_ENABLED)
  private Boolean refreshEnabled;

  public static final String SERIALIZED_NAME_REFRESH_FILE_DESCRIPTION = "refreshFileDescription";
  @SerializedName(SERIALIZED_NAME_REFRESH_FILE_DESCRIPTION)
  private String refreshFileDescription;

  public static final String SERIALIZED_NAME_UPDATE_ENABLED = "updateEnabled";
  @SerializedName(SERIALIZED_NAME_UPDATE_ENABLED)
  private Boolean updateEnabled;

  public static final String SERIALIZED_NAME_UPDATE_FILE_DESCRIPTION = "updateFileDescription";
  @SerializedName(SERIALIZED_NAME_UPDATE_FILE_DESCRIPTION)
  private String updateFileDescription;

  public static final String SERIALIZED_NAME_FTP_SERVER = "ftpServer";
  @SerializedName(SERIALIZED_NAME_FTP_SERVER)
  private String ftpServer;

  public static final String SERIALIZED_NAME_FTP_USERNAME = "ftpUsername";
  @SerializedName(SERIALIZED_NAME_FTP_USERNAME)
  private String ftpUsername;

  public static final String SERIALIZED_NAME_FTP_PASSWORD = "ftpPassword";
  @SerializedName(SERIALIZED_NAME_FTP_PASSWORD)
  private String ftpPassword;

  public static final String SERIALIZED_NAME_FTP_PORT = "ftpPort";
  @SerializedName(SERIALIZED_NAME_FTP_PORT)
  private Integer ftpPort;

  public static final String SERIALIZED_NAME_FTP_REMOTE_PATH = "ftpRemotePath";
  @SerializedName(SERIALIZED_NAME_FTP_REMOTE_PATH)
  private String ftpRemotePath;

  public static final String SERIALIZED_NAME_FTP_REMOTE_PATH_ARCHIVE = "ftpRemotePathArchive";
  @SerializedName(SERIALIZED_NAME_FTP_REMOTE_PATH_ARCHIVE)
  private String ftpRemotePathArchive;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_S3_PATH = "s3Path";
  @SerializedName(SERIALIZED_NAME_S3_PATH)
  private String s3Path;

  public static final String SERIALIZED_NAME_ARCHIVE_BUCKET = "archiveBucket";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_BUCKET)
  private String archiveBucket;

  public static final String SERIALIZED_NAME_S3_ARCHIVE_PATH = "s3ArchivePath";
  @SerializedName(SERIALIZED_NAME_S3_ARCHIVE_PATH)
  private String s3ArchivePath;

  public static final String SERIALIZED_NAME_LOCK_NAME = "lockName";
  @SerializedName(SERIALIZED_NAME_LOCK_NAME)
  private String lockName;

  public static final String SERIALIZED_NAME_POST_PROCESS_ACTION = "postProcessAction";
  @SerializedName(SERIALIZED_NAME_POST_PROCESS_ACTION)
  private Integer postProcessAction;

  public static final String SERIALIZED_NAME_USE_CONTROL_FILE = "useControlFile";
  @SerializedName(SERIALIZED_NAME_USE_CONTROL_FILE)
  private Boolean useControlFile;

  public static final String SERIALIZED_NAME_MULTIPLE_FILES = "multipleFiles";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_FILES)
  private Boolean multipleFiles;

  public static final String SERIALIZED_NAME_ZERO_OUT_NEGATIVES = "zeroOutNegatives";
  @SerializedName(SERIALIZED_NAME_ZERO_OUT_NEGATIVES)
  private Boolean zeroOutNegatives;

  public static final String SERIALIZED_NAME_TEST_F_T_P_CONFIGS = "testFTPConfigs";
  @SerializedName(SERIALIZED_NAME_TEST_F_T_P_CONFIGS)
  private Boolean testFTPConfigs;

  public static final String SERIALIZED_NAME_FIELD_NAME_MAP = "fieldNameMap";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME_MAP)
  private List<String> fieldNameMap = null;

  public static final String SERIALIZED_NAME_IGNORE_EXTRA_FIELDS = "ignoreExtraFields";
  @SerializedName(SERIALIZED_NAME_IGNORE_EXTRA_FIELDS)
  private Boolean ignoreExtraFields;

  public static final String SERIALIZED_NAME_BLANK_QUANTITY_IS_ZERO = "blankQuantityIsZero";
  @SerializedName(SERIALIZED_NAME_BLANK_QUANTITY_IS_ZERO)
  private Boolean blankQuantityIsZero;

  public static final String SERIALIZED_NAME_CSV_DELIMITER = "csvDelimiter";
  @SerializedName(SERIALIZED_NAME_CSV_DELIMITER)
  private String csvDelimiter;

  /**
   * Enum for fetch file productMapping
   */
  @JsonAdapter(ProductMappingEnum.Adapter.class)
  public enum ProductMappingEnum {
    PART_NUMBER_WITH_UPC("SWAP_PART_NUMBER_WITH_UPC"),
    
    SKU_WITH_UPC("SWAP_SKU_WITH_UPC");

    private String value;

    ProductMappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductMappingEnum fromValue(String value) {
      for (ProductMappingEnum b : ProductMappingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductMappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductMappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductMappingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductMappingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_MAPPING = "productMapping";
  @SerializedName(SERIALIZED_NAME_PRODUCT_MAPPING)
  private ProductMappingEnum productMapping;

  public FetchFileConfigRequestAllOf() {
  }

  public FetchFileConfigRequestAllOf fetchFileConfigID(Integer fetchFileConfigID) {
    
    this.fetchFileConfigID = fetchFileConfigID;
    return this;
  }

   /**
   * Fetch File Config ID
   * @return fetchFileConfigID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fetch File Config ID")

  public Integer getFetchFileConfigID() {
    return fetchFileConfigID;
  }


  public void setFetchFileConfigID(Integer fetchFileConfigID) {
    this.fetchFileConfigID = fetchFileConfigID;
  }


  public FetchFileConfigRequestAllOf active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Flag for active state
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for active state")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public FetchFileConfigRequestAllOf emailList(String emailList) {
    
    this.emailList = emailList;
    return this;
  }

   /**
   * Email List
   * @return emailList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email List")

  public String getEmailList() {
    return emailList;
  }


  public void setEmailList(String emailList) {
    this.emailList = emailList;
  }


  public FetchFileConfigRequestAllOf refreshEnabled(Boolean refreshEnabled) {
    
    this.refreshEnabled = refreshEnabled;
    return this;
  }

   /**
   * Flag for Refresh Enabled
   * @return refreshEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for Refresh Enabled")

  public Boolean getRefreshEnabled() {
    return refreshEnabled;
  }


  public void setRefreshEnabled(Boolean refreshEnabled) {
    this.refreshEnabled = refreshEnabled;
  }


  public FetchFileConfigRequestAllOf refreshFileDescription(String refreshFileDescription) {
    
    this.refreshFileDescription = refreshFileDescription;
    return this;
  }

   /**
   * Description for the refresh file
   * @return refreshFileDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description for the refresh file")

  public String getRefreshFileDescription() {
    return refreshFileDescription;
  }


  public void setRefreshFileDescription(String refreshFileDescription) {
    this.refreshFileDescription = refreshFileDescription;
  }


  public FetchFileConfigRequestAllOf updateEnabled(Boolean updateEnabled) {
    
    this.updateEnabled = updateEnabled;
    return this;
  }

   /**
   * Flag for Update Enabled
   * @return updateEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for Update Enabled")

  public Boolean getUpdateEnabled() {
    return updateEnabled;
  }


  public void setUpdateEnabled(Boolean updateEnabled) {
    this.updateEnabled = updateEnabled;
  }


  public FetchFileConfigRequestAllOf updateFileDescription(String updateFileDescription) {
    
    this.updateFileDescription = updateFileDescription;
    return this;
  }

   /**
   * Description for the update file
   * @return updateFileDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description for the update file")

  public String getUpdateFileDescription() {
    return updateFileDescription;
  }


  public void setUpdateFileDescription(String updateFileDescription) {
    this.updateFileDescription = updateFileDescription;
  }


  public FetchFileConfigRequestAllOf ftpServer(String ftpServer) {
    
    this.ftpServer = ftpServer;
    return this;
  }

   /**
   * FTP server address
   * @return ftpServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server address")

  public String getFtpServer() {
    return ftpServer;
  }


  public void setFtpServer(String ftpServer) {
    this.ftpServer = ftpServer;
  }


  public FetchFileConfigRequestAllOf ftpUsername(String ftpUsername) {
    
    this.ftpUsername = ftpUsername;
    return this;
  }

   /**
   * FTP server username
   * @return ftpUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server username")

  public String getFtpUsername() {
    return ftpUsername;
  }


  public void setFtpUsername(String ftpUsername) {
    this.ftpUsername = ftpUsername;
  }


  public FetchFileConfigRequestAllOf ftpPassword(String ftpPassword) {
    
    this.ftpPassword = ftpPassword;
    return this;
  }

   /**
   * FTP server password
   * @return ftpPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server password")

  public String getFtpPassword() {
    return ftpPassword;
  }


  public void setFtpPassword(String ftpPassword) {
    this.ftpPassword = ftpPassword;
  }


  public FetchFileConfigRequestAllOf ftpPort(Integer ftpPort) {
    
    this.ftpPort = ftpPort;
    return this;
  }

   /**
   * FTP server port
   * @return ftpPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server port")

  public Integer getFtpPort() {
    return ftpPort;
  }


  public void setFtpPort(Integer ftpPort) {
    this.ftpPort = ftpPort;
  }


  public FetchFileConfigRequestAllOf ftpRemotePath(String ftpRemotePath) {
    
    this.ftpRemotePath = ftpRemotePath;
    return this;
  }

   /**
   * FTP server remote path
   * @return ftpRemotePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server remote path")

  public String getFtpRemotePath() {
    return ftpRemotePath;
  }


  public void setFtpRemotePath(String ftpRemotePath) {
    this.ftpRemotePath = ftpRemotePath;
  }


  public FetchFileConfigRequestAllOf ftpRemotePathArchive(String ftpRemotePathArchive) {
    
    this.ftpRemotePathArchive = ftpRemotePathArchive;
    return this;
  }

   /**
   * FTP server remote path archive
   * @return ftpRemotePathArchive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP server remote path archive")

  public String getFtpRemotePathArchive() {
    return ftpRemotePathArchive;
  }


  public void setFtpRemotePathArchive(String ftpRemotePathArchive) {
    this.ftpRemotePathArchive = ftpRemotePathArchive;
  }


  public FetchFileConfigRequestAllOf region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * S3 Region
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "S3 Region")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public FetchFileConfigRequestAllOf bucket(String bucket) {
    
    this.bucket = bucket;
    return this;
  }

   /**
   * S3 Bucket
   * @return bucket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "S3 Bucket")

  public String getBucket() {
    return bucket;
  }


  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public FetchFileConfigRequestAllOf s3Path(String s3Path) {
    
    this.s3Path = s3Path;
    return this;
  }

   /**
   * S3 Bucket Path (directory)
   * @return s3Path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "S3 Bucket Path (directory)")

  public String getS3Path() {
    return s3Path;
  }


  public void setS3Path(String s3Path) {
    this.s3Path = s3Path;
  }


  public FetchFileConfigRequestAllOf archiveBucket(String archiveBucket) {
    
    this.archiveBucket = archiveBucket;
    return this;
  }

   /**
   * S3 Archive Bucket
   * @return archiveBucket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "S3 Archive Bucket")

  public String getArchiveBucket() {
    return archiveBucket;
  }


  public void setArchiveBucket(String archiveBucket) {
    this.archiveBucket = archiveBucket;
  }


  public FetchFileConfigRequestAllOf s3ArchivePath(String s3ArchivePath) {
    
    this.s3ArchivePath = s3ArchivePath;
    return this;
  }

   /**
   * S3 Archive Bucket Path (directory)
   * @return s3ArchivePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "S3 Archive Bucket Path (directory)")

  public String getS3ArchivePath() {
    return s3ArchivePath;
  }


  public void setS3ArchivePath(String s3ArchivePath) {
    this.s3ArchivePath = s3ArchivePath;
  }


  public FetchFileConfigRequestAllOf lockName(String lockName) {
    
    this.lockName = lockName;
    return this;
  }

   /**
   * Lock name
   * @return lockName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lock name")

  public String getLockName() {
    return lockName;
  }


  public void setLockName(String lockName) {
    this.lockName = lockName;
  }


  public FetchFileConfigRequestAllOf postProcessAction(Integer postProcessAction) {
    
    this.postProcessAction = postProcessAction;
    return this;
  }

   /**
   * Enum denoting action post processing
   * @return postProcessAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enum denoting action post processing")

  public Integer getPostProcessAction() {
    return postProcessAction;
  }


  public void setPostProcessAction(Integer postProcessAction) {
    this.postProcessAction = postProcessAction;
  }


  public FetchFileConfigRequestAllOf useControlFile(Boolean useControlFile) {
    
    this.useControlFile = useControlFile;
    return this;
  }

   /**
   * Flag for using control file
   * @return useControlFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for using control file")

  public Boolean getUseControlFile() {
    return useControlFile;
  }


  public void setUseControlFile(Boolean useControlFile) {
    this.useControlFile = useControlFile;
  }


  public FetchFileConfigRequestAllOf multipleFiles(Boolean multipleFiles) {
    
    this.multipleFiles = multipleFiles;
    return this;
  }

   /**
   * Flag for using multiple files
   * @return multipleFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for using multiple files")

  public Boolean getMultipleFiles() {
    return multipleFiles;
  }


  public void setMultipleFiles(Boolean multipleFiles) {
    this.multipleFiles = multipleFiles;
  }


  public FetchFileConfigRequestAllOf zeroOutNegatives(Boolean zeroOutNegatives) {
    
    this.zeroOutNegatives = zeroOutNegatives;
    return this;
  }

   /**
   * Flag for converting negatives to zero
   * @return zeroOutNegatives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for converting negatives to zero")

  public Boolean getZeroOutNegatives() {
    return zeroOutNegatives;
  }


  public void setZeroOutNegatives(Boolean zeroOutNegatives) {
    this.zeroOutNegatives = zeroOutNegatives;
  }


  public FetchFileConfigRequestAllOf testFTPConfigs(Boolean testFTPConfigs) {
    
    this.testFTPConfigs = testFTPConfigs;
    return this;
  }

   /**
   * Flag for if its a test ftp config
   * @return testFTPConfigs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for if its a test ftp config")

  public Boolean getTestFTPConfigs() {
    return testFTPConfigs;
  }


  public void setTestFTPConfigs(Boolean testFTPConfigs) {
    this.testFTPConfigs = testFTPConfigs;
  }


  public FetchFileConfigRequestAllOf fieldNameMap(List<String> fieldNameMap) {
    
    this.fieldNameMap = fieldNameMap;
    return this;
  }

  public FetchFileConfigRequestAllOf addFieldNameMapItem(String fieldNameMapItem) {
    if (this.fieldNameMap == null) {
      this.fieldNameMap = new ArrayList<>();
    }
    this.fieldNameMap.add(fieldNameMapItem);
    return this;
  }

   /**
   * List of field names
   * @return fieldNameMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of field names")

  public List<String> getFieldNameMap() {
    return fieldNameMap;
  }


  public void setFieldNameMap(List<String> fieldNameMap) {
    this.fieldNameMap = fieldNameMap;
  }


  public FetchFileConfigRequestAllOf ignoreExtraFields(Boolean ignoreExtraFields) {
    
    this.ignoreExtraFields = ignoreExtraFields;
    return this;
  }

   /**
   * Flag for ignoring extra fields
   * @return ignoreExtraFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for ignoring extra fields")

  public Boolean getIgnoreExtraFields() {
    return ignoreExtraFields;
  }


  public void setIgnoreExtraFields(Boolean ignoreExtraFields) {
    this.ignoreExtraFields = ignoreExtraFields;
  }


  public FetchFileConfigRequestAllOf blankQuantityIsZero(Boolean blankQuantityIsZero) {
    
    this.blankQuantityIsZero = blankQuantityIsZero;
    return this;
  }

   /**
   * Flag to convert null quantities to zero
   * @return blankQuantityIsZero
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag to convert null quantities to zero")

  public Boolean getBlankQuantityIsZero() {
    return blankQuantityIsZero;
  }


  public void setBlankQuantityIsZero(Boolean blankQuantityIsZero) {
    this.blankQuantityIsZero = blankQuantityIsZero;
  }


  public FetchFileConfigRequestAllOf csvDelimiter(String csvDelimiter) {
    
    this.csvDelimiter = csvDelimiter;
    return this;
  }

   /**
   * Delimiter
   * @return csvDelimiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Delimiter")

  public String getCsvDelimiter() {
    return csvDelimiter;
  }


  public void setCsvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
  }


  public FetchFileConfigRequestAllOf productMapping(ProductMappingEnum productMapping) {
    
    this.productMapping = productMapping;
    return this;
  }

   /**
   * Enum for fetch file productMapping
   * @return productMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enum for fetch file productMapping")

  public ProductMappingEnum getProductMapping() {
    return productMapping;
  }


  public void setProductMapping(ProductMappingEnum productMapping) {
    this.productMapping = productMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchFileConfigRequestAllOf fetchFileConfigRequestAllOf = (FetchFileConfigRequestAllOf) o;
    return Objects.equals(this.fetchFileConfigID, fetchFileConfigRequestAllOf.fetchFileConfigID) &&
        Objects.equals(this.active, fetchFileConfigRequestAllOf.active) &&
        Objects.equals(this.emailList, fetchFileConfigRequestAllOf.emailList) &&
        Objects.equals(this.refreshEnabled, fetchFileConfigRequestAllOf.refreshEnabled) &&
        Objects.equals(this.refreshFileDescription, fetchFileConfigRequestAllOf.refreshFileDescription) &&
        Objects.equals(this.updateEnabled, fetchFileConfigRequestAllOf.updateEnabled) &&
        Objects.equals(this.updateFileDescription, fetchFileConfigRequestAllOf.updateFileDescription) &&
        Objects.equals(this.ftpServer, fetchFileConfigRequestAllOf.ftpServer) &&
        Objects.equals(this.ftpUsername, fetchFileConfigRequestAllOf.ftpUsername) &&
        Objects.equals(this.ftpPassword, fetchFileConfigRequestAllOf.ftpPassword) &&
        Objects.equals(this.ftpPort, fetchFileConfigRequestAllOf.ftpPort) &&
        Objects.equals(this.ftpRemotePath, fetchFileConfigRequestAllOf.ftpRemotePath) &&
        Objects.equals(this.ftpRemotePathArchive, fetchFileConfigRequestAllOf.ftpRemotePathArchive) &&
        Objects.equals(this.region, fetchFileConfigRequestAllOf.region) &&
        Objects.equals(this.bucket, fetchFileConfigRequestAllOf.bucket) &&
        Objects.equals(this.s3Path, fetchFileConfigRequestAllOf.s3Path) &&
        Objects.equals(this.archiveBucket, fetchFileConfigRequestAllOf.archiveBucket) &&
        Objects.equals(this.s3ArchivePath, fetchFileConfigRequestAllOf.s3ArchivePath) &&
        Objects.equals(this.lockName, fetchFileConfigRequestAllOf.lockName) &&
        Objects.equals(this.postProcessAction, fetchFileConfigRequestAllOf.postProcessAction) &&
        Objects.equals(this.useControlFile, fetchFileConfigRequestAllOf.useControlFile) &&
        Objects.equals(this.multipleFiles, fetchFileConfigRequestAllOf.multipleFiles) &&
        Objects.equals(this.zeroOutNegatives, fetchFileConfigRequestAllOf.zeroOutNegatives) &&
        Objects.equals(this.testFTPConfigs, fetchFileConfigRequestAllOf.testFTPConfigs) &&
        Objects.equals(this.fieldNameMap, fetchFileConfigRequestAllOf.fieldNameMap) &&
        Objects.equals(this.ignoreExtraFields, fetchFileConfigRequestAllOf.ignoreExtraFields) &&
        Objects.equals(this.blankQuantityIsZero, fetchFileConfigRequestAllOf.blankQuantityIsZero) &&
        Objects.equals(this.csvDelimiter, fetchFileConfigRequestAllOf.csvDelimiter) &&
        Objects.equals(this.productMapping, fetchFileConfigRequestAllOf.productMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fetchFileConfigID, active, emailList, refreshEnabled, refreshFileDescription, updateEnabled, updateFileDescription, ftpServer, ftpUsername, ftpPassword, ftpPort, ftpRemotePath, ftpRemotePathArchive, region, bucket, s3Path, archiveBucket, s3ArchivePath, lockName, postProcessAction, useControlFile, multipleFiles, zeroOutNegatives, testFTPConfigs, fieldNameMap, ignoreExtraFields, blankQuantityIsZero, csvDelimiter, productMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchFileConfigRequestAllOf {\n");
    sb.append("    fetchFileConfigID: ").append(toIndentedString(fetchFileConfigID)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    emailList: ").append(toIndentedString(emailList)).append("\n");
    sb.append("    refreshEnabled: ").append(toIndentedString(refreshEnabled)).append("\n");
    sb.append("    refreshFileDescription: ").append(toIndentedString(refreshFileDescription)).append("\n");
    sb.append("    updateEnabled: ").append(toIndentedString(updateEnabled)).append("\n");
    sb.append("    updateFileDescription: ").append(toIndentedString(updateFileDescription)).append("\n");
    sb.append("    ftpServer: ").append(toIndentedString(ftpServer)).append("\n");
    sb.append("    ftpUsername: ").append(toIndentedString(ftpUsername)).append("\n");
    sb.append("    ftpPassword: ").append(toIndentedString(ftpPassword)).append("\n");
    sb.append("    ftpPort: ").append(toIndentedString(ftpPort)).append("\n");
    sb.append("    ftpRemotePath: ").append(toIndentedString(ftpRemotePath)).append("\n");
    sb.append("    ftpRemotePathArchive: ").append(toIndentedString(ftpRemotePathArchive)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    s3Path: ").append(toIndentedString(s3Path)).append("\n");
    sb.append("    archiveBucket: ").append(toIndentedString(archiveBucket)).append("\n");
    sb.append("    s3ArchivePath: ").append(toIndentedString(s3ArchivePath)).append("\n");
    sb.append("    lockName: ").append(toIndentedString(lockName)).append("\n");
    sb.append("    postProcessAction: ").append(toIndentedString(postProcessAction)).append("\n");
    sb.append("    useControlFile: ").append(toIndentedString(useControlFile)).append("\n");
    sb.append("    multipleFiles: ").append(toIndentedString(multipleFiles)).append("\n");
    sb.append("    zeroOutNegatives: ").append(toIndentedString(zeroOutNegatives)).append("\n");
    sb.append("    testFTPConfigs: ").append(toIndentedString(testFTPConfigs)).append("\n");
    sb.append("    fieldNameMap: ").append(toIndentedString(fieldNameMap)).append("\n");
    sb.append("    ignoreExtraFields: ").append(toIndentedString(ignoreExtraFields)).append("\n");
    sb.append("    blankQuantityIsZero: ").append(toIndentedString(blankQuantityIsZero)).append("\n");
    sb.append("    csvDelimiter: ").append(toIndentedString(csvDelimiter)).append("\n");
    sb.append("    productMapping: ").append(toIndentedString(productMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fetchFileConfigID");
    openapiFields.add("active");
    openapiFields.add("emailList");
    openapiFields.add("refreshEnabled");
    openapiFields.add("refreshFileDescription");
    openapiFields.add("updateEnabled");
    openapiFields.add("updateFileDescription");
    openapiFields.add("ftpServer");
    openapiFields.add("ftpUsername");
    openapiFields.add("ftpPassword");
    openapiFields.add("ftpPort");
    openapiFields.add("ftpRemotePath");
    openapiFields.add("ftpRemotePathArchive");
    openapiFields.add("region");
    openapiFields.add("bucket");
    openapiFields.add("s3Path");
    openapiFields.add("archiveBucket");
    openapiFields.add("s3ArchivePath");
    openapiFields.add("lockName");
    openapiFields.add("postProcessAction");
    openapiFields.add("useControlFile");
    openapiFields.add("multipleFiles");
    openapiFields.add("zeroOutNegatives");
    openapiFields.add("testFTPConfigs");
    openapiFields.add("fieldNameMap");
    openapiFields.add("ignoreExtraFields");
    openapiFields.add("blankQuantityIsZero");
    openapiFields.add("csvDelimiter");
    openapiFields.add("productMapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FetchFileConfigRequestAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FetchFileConfigRequestAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchFileConfigRequestAllOf is not found in the empty JSON string", FetchFileConfigRequestAllOf.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FetchFileConfigRequestAllOf.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FetchFileConfigRequestAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("emailList") != null && !jsonObj.get("emailList").isJsonNull()) && !jsonObj.get("emailList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailList").toString()));
      }
      if ((jsonObj.get("refreshFileDescription") != null && !jsonObj.get("refreshFileDescription").isJsonNull()) && !jsonObj.get("refreshFileDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshFileDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshFileDescription").toString()));
      }
      if ((jsonObj.get("updateFileDescription") != null && !jsonObj.get("updateFileDescription").isJsonNull()) && !jsonObj.get("updateFileDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateFileDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateFileDescription").toString()));
      }
      if ((jsonObj.get("ftpServer") != null && !jsonObj.get("ftpServer").isJsonNull()) && !jsonObj.get("ftpServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpServer").toString()));
      }
      if ((jsonObj.get("ftpUsername") != null && !jsonObj.get("ftpUsername").isJsonNull()) && !jsonObj.get("ftpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpUsername").toString()));
      }
      if ((jsonObj.get("ftpPassword") != null && !jsonObj.get("ftpPassword").isJsonNull()) && !jsonObj.get("ftpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpPassword").toString()));
      }
      if ((jsonObj.get("ftpRemotePath") != null && !jsonObj.get("ftpRemotePath").isJsonNull()) && !jsonObj.get("ftpRemotePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpRemotePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpRemotePath").toString()));
      }
      if ((jsonObj.get("ftpRemotePathArchive") != null && !jsonObj.get("ftpRemotePathArchive").isJsonNull()) && !jsonObj.get("ftpRemotePathArchive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpRemotePathArchive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpRemotePathArchive").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("s3Path") != null && !jsonObj.get("s3Path").isJsonNull()) && !jsonObj.get("s3Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3Path").toString()));
      }
      if ((jsonObj.get("archiveBucket") != null && !jsonObj.get("archiveBucket").isJsonNull()) && !jsonObj.get("archiveBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archiveBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archiveBucket").toString()));
      }
      if ((jsonObj.get("s3ArchivePath") != null && !jsonObj.get("s3ArchivePath").isJsonNull()) && !jsonObj.get("s3ArchivePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3ArchivePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3ArchivePath").toString()));
      }
      if ((jsonObj.get("lockName") != null && !jsonObj.get("lockName").isJsonNull()) && !jsonObj.get("lockName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fieldNameMap").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldNameMap` to be an array in the JSON string but got `%s`", jsonObj.get("fieldNameMap").toString()));
      }
      if ((jsonObj.get("csvDelimiter") != null && !jsonObj.get("csvDelimiter").isJsonNull()) && !jsonObj.get("csvDelimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csvDelimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csvDelimiter").toString()));
      }
      if ((jsonObj.get("productMapping") != null && !jsonObj.get("productMapping").isJsonNull()) && !jsonObj.get("productMapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productMapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productMapping").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchFileConfigRequestAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchFileConfigRequestAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchFileConfigRequestAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchFileConfigRequestAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchFileConfigRequestAllOf>() {
           @Override
           public void write(JsonWriter out, FetchFileConfigRequestAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchFileConfigRequestAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FetchFileConfigRequestAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FetchFileConfigRequestAllOf
  * @throws IOException if the JSON string is invalid with respect to FetchFileConfigRequestAllOf
  */
  public static FetchFileConfigRequestAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchFileConfigRequestAllOf.class);
  }

 /**
  * Convert an instance of FetchFileConfigRequestAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

