/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.BundledProductSummary;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategory;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesPackageMeasurements;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductInventoryInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPrice;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPricingBehaviorInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductProperty;
import com.kibocommerce.sdk.catalogstorefront.models.ProductImage;
import com.kibocommerce.sdk.catalogstorefront.models.ProductPurchasableState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ProductValidationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductValidationSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_PURCHASE_LOCATION = "purchaseLocation";
  @SerializedName(SERIALIZED_NAME_PURCHASE_LOCATION)
  private String purchaseLocation;

  public static final String SERIALIZED_NAME_PRODUCT_USAGE = "productUsage";
  @SerializedName(SERIALIZED_NAME_PRODUCT_USAGE)
  private String productUsage;

  public static final String SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED = "fulfillmentTypesSupported";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED)
  private List<String> fulfillmentTypesSupported = null;

  public static final String SERIALIZED_NAME_GOODS_TYPE = "goodsType";
  @SerializedName(SERIALIZED_NAME_GOODS_TYPE)
  private String goodsType;

  public static final String SERIALIZED_NAME_BUNDLED_PRODUCTS = "bundledProducts";
  @SerializedName(SERIALIZED_NAME_BUNDLED_PRODUCTS)
  private List<BundledProductSummary> bundledProducts = null;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_MFG_PART_NUMBER = "mfgPartNumber";
  @SerializedName(SERIALIZED_NAME_MFG_PART_NUMBER)
  private String mfgPartNumber;

  public static final String SERIALIZED_NAME_VARIATION_PRODUCT_CODE = "variationProductCode";
  @SerializedName(SERIALIZED_NAME_VARIATION_PRODUCT_CODE)
  private String variationProductCode;

  public static final String SERIALIZED_NAME_PURCHASABLE_STATE = "purchasableState";
  @SerializedName(SERIALIZED_NAME_PURCHASABLE_STATE)
  private ProductPurchasableState purchasableState;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CatalogRuntimesProductPrice price;

  public static final String SERIALIZED_NAME_MEASUREMENTS = "measurements";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS)
  private CatalogRuntimesPackageMeasurements measurements;

  public static final String SERIALIZED_NAME_IS_PACKAGED_STAND_ALONE = "isPackagedStandAlone";
  @SerializedName(SERIALIZED_NAME_IS_PACKAGED_STAND_ALONE)
  private Boolean isPackagedStandAlone;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ProductImage image;

  public static final String SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION = "productShortDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION)
  private String productShortDescription;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<CatalogRuntimesCategory> categories = null;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<CatalogRuntimesProductProperty> properties = null;

  public static final String SERIALIZED_NAME_PRICING_BEHAVIOR = "pricingBehavior";
  @SerializedName(SERIALIZED_NAME_PRICING_BEHAVIOR)
  private CatalogRuntimesProductPricingBehaviorInfo pricingBehavior;

  public static final String SERIALIZED_NAME_INVENTORY_INFO = "inventoryInfo";
  @SerializedName(SERIALIZED_NAME_INVENTORY_INFO)
  private CatalogRuntimesProductInventoryInfo inventoryInfo;

  public static final String SERIALIZED_NAME_IS_TAXABLE = "isTaxable";
  @SerializedName(SERIALIZED_NAME_IS_TAXABLE)
  private Boolean isTaxable;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public ProductValidationSummary() {
  }

  public ProductValidationSummary productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * Merchant-created code associated with the product, for example, a SKU.
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant-created code associated with the product, for example, a SKU.")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public ProductValidationSummary purchaseLocation(String purchaseLocation) {
    
    this.purchaseLocation = purchaseLocation;
    return this;
  }

   /**
   * The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....
   * @return purchaseLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....")

  public String getPurchaseLocation() {
    return purchaseLocation;
  }


  public void setPurchaseLocation(String purchaseLocation) {
    this.purchaseLocation = purchaseLocation;
  }


  public ProductValidationSummary productUsage(String productUsage) {
    
    this.productUsage = productUsage;
    return this;
  }

   /**
   * The UsageType of this product (Standard, Configurable, Bundle, Component)
   * @return productUsage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UsageType of this product (Standard, Configurable, Bundle, Component)")

  public String getProductUsage() {
    return productUsage;
  }


  public void setProductUsage(String productUsage) {
    this.productUsage = productUsage;
  }


  public ProductValidationSummary fulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
    return this;
  }

  public ProductValidationSummary addFulfillmentTypesSupportedItem(String fulfillmentTypesSupportedItem) {
    if (this.fulfillmentTypesSupported == null) {
      this.fulfillmentTypesSupported = new ArrayList<>();
    }
    this.fulfillmentTypesSupported.add(fulfillmentTypesSupportedItem);
    return this;
  }

   /**
   * Indicates the fulfillment types the product supports.
   * @return fulfillmentTypesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the fulfillment types the product supports.")

  public List<String> getFulfillmentTypesSupported() {
    return fulfillmentTypesSupported;
  }


  public void setFulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
  }


  public ProductValidationSummary goodsType(String goodsType) {
    
    this.goodsType = goodsType;
    return this;
  }

   /**
   * The GoodsType of the product (Physical, Digital, DigitalCredit....)
   * @return goodsType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The GoodsType of the product (Physical, Digital, DigitalCredit....)")

  public String getGoodsType() {
    return goodsType;
  }


  public void setGoodsType(String goodsType) {
    this.goodsType = goodsType;
  }


  public ProductValidationSummary bundledProducts(List<BundledProductSummary> bundledProducts) {
    
    this.bundledProducts = bundledProducts;
    return this;
  }

  public ProductValidationSummary addBundledProductsItem(BundledProductSummary bundledProductsItem) {
    if (this.bundledProducts == null) {
      this.bundledProducts = new ArrayList<>();
    }
    this.bundledProducts.add(bundledProductsItem);
    return this;
  }

   /**
   * The list of Bundled products included in this product. This is only populated when ProductUsage&#x3D;Bundle
   * @return bundledProducts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of Bundled products included in this product. This is only populated when ProductUsage=Bundle")

  public List<BundledProductSummary> getBundledProducts() {
    return bundledProducts;
  }


  public void setBundledProducts(List<BundledProductSummary> bundledProducts) {
    this.bundledProducts = bundledProducts;
  }


  public ProductValidationSummary upc(String upc) {
    
    this.upc = upc;
    return this;
  }

   /**
   * UPC code of the product.
   * @return upc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UPC code of the product.")

  public String getUpc() {
    return upc;
  }


  public void setUpc(String upc) {
    this.upc = upc;
  }


  public ProductValidationSummary mfgPartNumber(String mfgPartNumber) {
    
    this.mfgPartNumber = mfgPartNumber;
    return this;
  }

   /**
   * Manufacturer part number.
   * @return mfgPartNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manufacturer part number.")

  public String getMfgPartNumber() {
    return mfgPartNumber;
  }


  public void setMfgPartNumber(String mfgPartNumber) {
    this.mfgPartNumber = mfgPartNumber;
  }


  public ProductValidationSummary variationProductCode(String variationProductCode) {
    
    this.variationProductCode = variationProductCode;
    return this;
  }

   /**
   * For a product with options, the code of the product variation that represents the current selection of product options.
   * @return variationProductCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For a product with options, the code of the product variation that represents the current selection of product options.")

  public String getVariationProductCode() {
    return variationProductCode;
  }


  public void setVariationProductCode(String variationProductCode) {
    this.variationProductCode = variationProductCode;
  }


  public ProductValidationSummary purchasableState(ProductPurchasableState purchasableState) {
    
    this.purchasableState = purchasableState;
    return this;
  }

   /**
   * Get purchasableState
   * @return purchasableState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPurchasableState getPurchasableState() {
    return purchasableState;
  }


  public void setPurchasableState(ProductPurchasableState purchasableState) {
    this.purchasableState = purchasableState;
  }


  public ProductValidationSummary price(CatalogRuntimesProductPrice price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductPrice getPrice() {
    return price;
  }


  public void setPrice(CatalogRuntimesProductPrice price) {
    this.price = price;
  }


  public ProductValidationSummary measurements(CatalogRuntimesPackageMeasurements measurements) {
    
    this.measurements = measurements;
    return this;
  }

   /**
   * Get measurements
   * @return measurements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesPackageMeasurements getMeasurements() {
    return measurements;
  }


  public void setMeasurements(CatalogRuntimesPackageMeasurements measurements) {
    this.measurements = measurements;
  }


  public ProductValidationSummary isPackagedStandAlone(Boolean isPackagedStandAlone) {
    
    this.isPackagedStandAlone = isPackagedStandAlone;
    return this;
  }

   /**
   * Is this product shipped in its own package
   * @return isPackagedStandAlone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this product shipped in its own package")

  public Boolean getIsPackagedStandAlone() {
    return isPackagedStandAlone;
  }


  public void setIsPackagedStandAlone(Boolean isPackagedStandAlone) {
    this.isPackagedStandAlone = isPackagedStandAlone;
  }


  public ProductValidationSummary image(ProductImage image) {
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductImage getImage() {
    return image;
  }


  public void setImage(ProductImage image) {
    this.image = image;
  }


  public ProductValidationSummary productShortDescription(String productShortDescription) {
    
    this.productShortDescription = productShortDescription;
    return this;
  }

   /**
   * Brief description of the product typically used when the product is displayed in a list or search results.
   * @return productShortDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Brief description of the product typically used when the product is displayed in a list or search results.")

  public String getProductShortDescription() {
    return productShortDescription;
  }


  public void setProductShortDescription(String productShortDescription) {
    this.productShortDescription = productShortDescription;
  }


  public ProductValidationSummary productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * Name of the product.
   * @return productName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the product.")

  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public ProductValidationSummary categories(List<CatalogRuntimesCategory> categories) {
    
    this.categories = categories;
    return this;
  }

  public ProductValidationSummary addCategoriesItem(CatalogRuntimesCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Categories to which the product belongs.
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Categories to which the product belongs.")

  public List<CatalogRuntimesCategory> getCategories() {
    return categories;
  }


  public void setCategories(List<CatalogRuntimesCategory> categories) {
    this.categories = categories;
  }


  public ProductValidationSummary properties(List<CatalogRuntimesProductProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public ProductValidationSummary addPropertiesItem(CatalogRuntimesProductProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * List of product Properties.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of product Properties.")

  public List<CatalogRuntimesProductProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<CatalogRuntimesProductProperty> properties) {
    this.properties = properties;
  }


  public ProductValidationSummary pricingBehavior(CatalogRuntimesProductPricingBehaviorInfo pricingBehavior) {
    
    this.pricingBehavior = pricingBehavior;
    return this;
  }

   /**
   * Get pricingBehavior
   * @return pricingBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductPricingBehaviorInfo getPricingBehavior() {
    return pricingBehavior;
  }


  public void setPricingBehavior(CatalogRuntimesProductPricingBehaviorInfo pricingBehavior) {
    this.pricingBehavior = pricingBehavior;
  }


  public ProductValidationSummary inventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    
    this.inventoryInfo = inventoryInfo;
    return this;
  }

   /**
   * Get inventoryInfo
   * @return inventoryInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductInventoryInfo getInventoryInfo() {
    return inventoryInfo;
  }


  public void setInventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    this.inventoryInfo = inventoryInfo;
  }


  public ProductValidationSummary isTaxable(Boolean isTaxable) {
    
    this.isTaxable = isTaxable;
    return this;
  }

   /**
   * If true, the product listed on the live order is subject to tax.
   * @return isTaxable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the product listed on the live order is subject to tax.")

  public Boolean getIsTaxable() {
    return isTaxable;
  }


  public void setIsTaxable(Boolean isTaxable) {
    this.isTaxable = isTaxable;
  }


  public ProductValidationSummary productType(String productType) {
    
    this.productType = productType;
    return this;
  }

   /**
   * Get productType
   * @return productType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProductType() {
    return productType;
  }


  public void setProductType(String productType) {
    this.productType = productType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductValidationSummary productValidationSummary = (ProductValidationSummary) o;
    return Objects.equals(this.productCode, productValidationSummary.productCode) &&
        Objects.equals(this.purchaseLocation, productValidationSummary.purchaseLocation) &&
        Objects.equals(this.productUsage, productValidationSummary.productUsage) &&
        Objects.equals(this.fulfillmentTypesSupported, productValidationSummary.fulfillmentTypesSupported) &&
        Objects.equals(this.goodsType, productValidationSummary.goodsType) &&
        Objects.equals(this.bundledProducts, productValidationSummary.bundledProducts) &&
        Objects.equals(this.upc, productValidationSummary.upc) &&
        Objects.equals(this.mfgPartNumber, productValidationSummary.mfgPartNumber) &&
        Objects.equals(this.variationProductCode, productValidationSummary.variationProductCode) &&
        Objects.equals(this.purchasableState, productValidationSummary.purchasableState) &&
        Objects.equals(this.price, productValidationSummary.price) &&
        Objects.equals(this.measurements, productValidationSummary.measurements) &&
        Objects.equals(this.isPackagedStandAlone, productValidationSummary.isPackagedStandAlone) &&
        Objects.equals(this.image, productValidationSummary.image) &&
        Objects.equals(this.productShortDescription, productValidationSummary.productShortDescription) &&
        Objects.equals(this.productName, productValidationSummary.productName) &&
        Objects.equals(this.categories, productValidationSummary.categories) &&
        Objects.equals(this.properties, productValidationSummary.properties) &&
        Objects.equals(this.pricingBehavior, productValidationSummary.pricingBehavior) &&
        Objects.equals(this.inventoryInfo, productValidationSummary.inventoryInfo) &&
        Objects.equals(this.isTaxable, productValidationSummary.isTaxable) &&
        Objects.equals(this.productType, productValidationSummary.productType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productCode, purchaseLocation, productUsage, fulfillmentTypesSupported, goodsType, bundledProducts, upc, mfgPartNumber, variationProductCode, purchasableState, price, measurements, isPackagedStandAlone, image, productShortDescription, productName, categories, properties, pricingBehavior, inventoryInfo, isTaxable, productType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductValidationSummary {\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    purchaseLocation: ").append(toIndentedString(purchaseLocation)).append("\n");
    sb.append("    productUsage: ").append(toIndentedString(productUsage)).append("\n");
    sb.append("    fulfillmentTypesSupported: ").append(toIndentedString(fulfillmentTypesSupported)).append("\n");
    sb.append("    goodsType: ").append(toIndentedString(goodsType)).append("\n");
    sb.append("    bundledProducts: ").append(toIndentedString(bundledProducts)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    mfgPartNumber: ").append(toIndentedString(mfgPartNumber)).append("\n");
    sb.append("    variationProductCode: ").append(toIndentedString(variationProductCode)).append("\n");
    sb.append("    purchasableState: ").append(toIndentedString(purchasableState)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("    isPackagedStandAlone: ").append(toIndentedString(isPackagedStandAlone)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    productShortDescription: ").append(toIndentedString(productShortDescription)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    pricingBehavior: ").append(toIndentedString(pricingBehavior)).append("\n");
    sb.append("    inventoryInfo: ").append(toIndentedString(inventoryInfo)).append("\n");
    sb.append("    isTaxable: ").append(toIndentedString(isTaxable)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productCode");
    openapiFields.add("purchaseLocation");
    openapiFields.add("productUsage");
    openapiFields.add("fulfillmentTypesSupported");
    openapiFields.add("goodsType");
    openapiFields.add("bundledProducts");
    openapiFields.add("upc");
    openapiFields.add("mfgPartNumber");
    openapiFields.add("variationProductCode");
    openapiFields.add("purchasableState");
    openapiFields.add("price");
    openapiFields.add("measurements");
    openapiFields.add("isPackagedStandAlone");
    openapiFields.add("image");
    openapiFields.add("productShortDescription");
    openapiFields.add("productName");
    openapiFields.add("categories");
    openapiFields.add("properties");
    openapiFields.add("pricingBehavior");
    openapiFields.add("inventoryInfo");
    openapiFields.add("isTaxable");
    openapiFields.add("productType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductValidationSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductValidationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductValidationSummary is not found in the empty JSON string", ProductValidationSummary.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductValidationSummary.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductValidationSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      if ((jsonObj.get("purchaseLocation") != null && !jsonObj.get("purchaseLocation").isJsonNull()) && !jsonObj.get("purchaseLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseLocation").toString()));
      }
      if ((jsonObj.get("productUsage") != null && !jsonObj.get("productUsage").isJsonNull()) && !jsonObj.get("productUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productUsage").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fulfillmentTypesSupported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentTypesSupported` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentTypesSupported").toString()));
      }
      if ((jsonObj.get("goodsType") != null && !jsonObj.get("goodsType").isJsonNull()) && !jsonObj.get("goodsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodsType").toString()));
      }
      if (jsonObj.get("bundledProducts") != null && !jsonObj.get("bundledProducts").isJsonNull()) {
        JsonArray jsonArraybundledProducts = jsonObj.getAsJsonArray("bundledProducts");
        if (jsonArraybundledProducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundledProducts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundledProducts` to be an array in the JSON string but got `%s`", jsonObj.get("bundledProducts").toString()));
          }

          // validate the optional field `bundledProducts` (array)
          for (int i = 0; i < jsonArraybundledProducts.size(); i++) {
            BundledProductSummary.validateJsonObject(jsonArraybundledProducts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if ((jsonObj.get("mfgPartNumber") != null && !jsonObj.get("mfgPartNumber").isJsonNull()) && !jsonObj.get("mfgPartNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfgPartNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfgPartNumber").toString()));
      }
      if ((jsonObj.get("variationProductCode") != null && !jsonObj.get("variationProductCode").isJsonNull()) && !jsonObj.get("variationProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variationProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variationProductCode").toString()));
      }
      // validate the optional field `purchasableState`
      if (jsonObj.get("purchasableState") != null && !jsonObj.get("purchasableState").isJsonNull()) {
        ProductPurchasableState.validateJsonObject(jsonObj.getAsJsonObject("purchasableState"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CatalogRuntimesProductPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      // validate the optional field `measurements`
      if (jsonObj.get("measurements") != null && !jsonObj.get("measurements").isJsonNull()) {
        CatalogRuntimesPackageMeasurements.validateJsonObject(jsonObj.getAsJsonObject("measurements"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ProductImage.validateJsonObject(jsonObj.getAsJsonObject("image"));
      }
      if ((jsonObj.get("productShortDescription") != null && !jsonObj.get("productShortDescription").isJsonNull()) && !jsonObj.get("productShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productShortDescription").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            CatalogRuntimesCategory.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            CatalogRuntimesProductProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `pricingBehavior`
      if (jsonObj.get("pricingBehavior") != null && !jsonObj.get("pricingBehavior").isJsonNull()) {
        CatalogRuntimesProductPricingBehaviorInfo.validateJsonObject(jsonObj.getAsJsonObject("pricingBehavior"));
      }
      // validate the optional field `inventoryInfo`
      if (jsonObj.get("inventoryInfo") != null && !jsonObj.get("inventoryInfo").isJsonNull()) {
        CatalogRuntimesProductInventoryInfo.validateJsonObject(jsonObj.getAsJsonObject("inventoryInfo"));
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductValidationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductValidationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductValidationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductValidationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductValidationSummary>() {
           @Override
           public void write(JsonWriter out, ProductValidationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductValidationSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductValidationSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductValidationSummary
  * @throws IOException if the JSON string is invalid with respect to ProductValidationSummary
  */
  public static ProductValidationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductValidationSummary.class);
  }

 /**
  * Convert an instance of ProductValidationSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

