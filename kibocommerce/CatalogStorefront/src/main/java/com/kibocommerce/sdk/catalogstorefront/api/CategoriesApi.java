/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogstorefront.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategory;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategoryCollection;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategoryPagedCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CategoriesApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CategoriesApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CategoriesApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storefrontGetCategories
     * @param filter Optional. A set of filter expressions representing the search parameters for a query:              eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals,              sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Optional. Used to page results from a query.              Indicates the zero-based offset in the complete result set where the returned entities begin.              For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3.              The default value is 0. (optional)
     * @param pageSize Optional. Used to page results from a query.              Indicates the maximum number of entities to return from a query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear.              Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;.              The sortBy parameter follows an available property.              For example, to sort results by category ID ascending, use sortBy&#x3D;categoryId asc. (optional)
     * @param includeAttributes Optional. Used to include Category Attributes in response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoriesCall(String filter, Integer startIndex, Integer pageSize, String sortBy, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetCategoriesValidateBeforeCall(String filter, Integer startIndex, Integer pageSize, String sortBy, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetCategoriesCall(filter, startIndex, pageSize, sortBy, includeAttributes, _callback);
        return localVarCall;

    }

    /**
     * Get a list of product categories
     * Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query:              eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals,              sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Optional. Used to page results from a query.              Indicates the zero-based offset in the complete result set where the returned entities begin.              For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3.              The default value is 0. (optional)
     * @param pageSize Optional. Used to page results from a query.              Indicates the maximum number of entities to return from a query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear.              Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;.              The sortBy parameter follows an available property.              For example, to sort results by category ID ascending, use sortBy&#x3D;categoryId asc. (optional)
     * @param includeAttributes Optional. Used to include Category Attributes in response (optional, default to false)
     * @return CatalogRuntimesCategoryPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogRuntimesCategoryPagedCollection storefrontGetCategories(String filter, Integer startIndex, Integer pageSize, String sortBy, Boolean includeAttributes) throws ApiException {
        ApiResponse<CatalogRuntimesCategoryPagedCollection> localVarResp = storefrontGetCategoriesWithHttpInfo(filter, startIndex, pageSize, sortBy, includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get a list of product categories
     * Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query:              eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals,              sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Optional. Used to page results from a query.              Indicates the zero-based offset in the complete result set where the returned entities begin.              For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3.              The default value is 0. (optional)
     * @param pageSize Optional. Used to page results from a query.              Indicates the maximum number of entities to return from a query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear.              Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;.              The sortBy parameter follows an available property.              For example, to sort results by category ID ascending, use sortBy&#x3D;categoryId asc. (optional)
     * @param includeAttributes Optional. Used to include Category Attributes in response (optional, default to false)
     * @return ApiResponse&lt;CatalogRuntimesCategoryPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogRuntimesCategoryPagedCollection> storefrontGetCategoriesWithHttpInfo(String filter, Integer startIndex, Integer pageSize, String sortBy, Boolean includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetCategoriesValidateBeforeCall(filter, startIndex, pageSize, sortBy, includeAttributes, null);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategoryPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of product categories (asynchronously)
     * Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query:              eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals,              sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Optional. Used to page results from a query.              Indicates the zero-based offset in the complete result set where the returned entities begin.              For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3.              The default value is 0. (optional)
     * @param pageSize Optional. Used to page results from a query.              Indicates the maximum number of entities to return from a query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear.              Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;.              The sortBy parameter follows an available property.              For example, to sort results by category ID ascending, use sortBy&#x3D;categoryId asc. (optional)
     * @param includeAttributes Optional. Used to include Category Attributes in response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoriesAsync(String filter, Integer startIndex, Integer pageSize, String sortBy, Boolean includeAttributes, final ApiCallback<CatalogRuntimesCategoryPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetCategoriesValidateBeforeCall(filter, startIndex, pageSize, sortBy, includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategoryPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetCategory
     * @param categoryId Required. Unique identifier of the category whose details you want to get. (required)
     * @param allowInactive Optional. Allow the return of items with the IsDisplayed flag set to false. (optional)
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoryCall(Integer categoryId, Boolean allowInactive, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowInactive", allowInactive));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetCategoryValidateBeforeCall(Integer categoryId, Boolean allowInactive, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling storefrontGetCategory(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontGetCategoryCall(categoryId, allowInactive, includeAttributes, _callback);
        return localVarCall;

    }

    /**
     * Get a product category
     * Retrieves the name and details of a category that appears on the storefront. 
     * @param categoryId Required. Unique identifier of the category whose details you want to get. (required)
     * @param allowInactive Optional. Allow the return of items with the IsDisplayed flag set to false. (optional)
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @return CatalogRuntimesCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogRuntimesCategory storefrontGetCategory(Integer categoryId, Boolean allowInactive, Boolean includeAttributes) throws ApiException {
        ApiResponse<CatalogRuntimesCategory> localVarResp = storefrontGetCategoryWithHttpInfo(categoryId, allowInactive, includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get a product category
     * Retrieves the name and details of a category that appears on the storefront. 
     * @param categoryId Required. Unique identifier of the category whose details you want to get. (required)
     * @param allowInactive Optional. Allow the return of items with the IsDisplayed flag set to false. (optional)
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @return ApiResponse&lt;CatalogRuntimesCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogRuntimesCategory> storefrontGetCategoryWithHttpInfo(Integer categoryId, Boolean allowInactive, Boolean includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetCategoryValidateBeforeCall(categoryId, allowInactive, includeAttributes, null);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a product category (asynchronously)
     * Retrieves the name and details of a category that appears on the storefront. 
     * @param categoryId Required. Unique identifier of the category whose details you want to get. (required)
     * @param allowInactive Optional. Allow the return of items with the IsDisplayed flag set to false. (optional)
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoryAsync(Integer categoryId, Boolean allowInactive, Boolean includeAttributes, final ApiCallback<CatalogRuntimesCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetCategoryValidateBeforeCall(categoryId, allowInactive, includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetCategoryTree
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoryTreeCall(Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/categories/tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetCategoryTreeValidateBeforeCall(Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetCategoryTreeCall(includeAttributes, _callback);
        return localVarCall;

    }

    /**
     * Get a category tree
     * Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @return CatalogRuntimesCategoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogRuntimesCategoryCollection storefrontGetCategoryTree(Boolean includeAttributes) throws ApiException {
        ApiResponse<CatalogRuntimesCategoryCollection> localVarResp = storefrontGetCategoryTreeWithHttpInfo(includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get a category tree
     * Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @return ApiResponse&lt;CatalogRuntimesCategoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogRuntimesCategoryCollection> storefrontGetCategoryTreeWithHttpInfo(Boolean includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetCategoryTreeValidateBeforeCall(includeAttributes, null);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a category tree (asynchronously)
     * Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.
     * @param includeAttributes Optional. If True, Return Category Attributes collection with Category (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetCategoryTreeAsync(Boolean includeAttributes, final ApiCallback<CatalogRuntimesCategoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetCategoryTreeValidateBeforeCall(includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<CatalogRuntimesCategoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CategoriesApi build() {
            return new CategoriesApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
