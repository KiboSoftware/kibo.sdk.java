/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogstorefront.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogstorefront.models.ProductSearchRandomAccessCursor;
import com.kibocommerce.sdk.catalogstorefront.models.ProductSearchResult;
import com.kibocommerce.sdk.catalogstorefront.models.RequestFilter;
import com.kibocommerce.sdk.catalogstorefront.models.SearchSuggestionResult;
import com.kibocommerce.sdk.catalogstorefront.models.VisualSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductSearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ProductSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ProductSearchApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ProductSearchApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ProductSearchApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchDebug
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate The template to use for what facets to compute. ex: categoryId:id (optional)
     * @param facetTemplateSubset If you only want to return a subset of the facets defined in the template. ex: category,price,rating (optional)
     * @param facet Fields to facet on in addition to the optionally provided facetTemplate. ex: category,price,rating (optional)
     * @param facetFieldRangeQuery Facet field range. ex: field:[val+TO+val] can also label (optional)
     * @param facetHierPrefix Facet hierarchy prefix. Skip these levels on a hierarchical facet. ex: field:foo/bar/bing (optional)
     * @param facetHierValue Find the node to start with given a unique lookup value, instead of requiring a prefix path. ex: field:bing (optional)
     * @param facetHierDepth Facet hierarchy depth. Number of levels to return. ex: category:1 (optional)
     * @param facetStartIndex Facet offset (optional)
     * @param facetPageSize Facet page size (optional)
     * @param facetSettings Deprecated (optional)
     * @param facetValueFilter Apply facet values as a filter. ex: category:3,price:[* TO 100] (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param sliceSearchResults Whether to slice results or not (optional, default to false)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings The name of a SiteSearchSettings (search relevancy settings) scheme to use. Defaults to whichever Settings is marked as IsDefault&#x3D;true. (optional)
     * @param enableSearchTuningRules Use search-tuning-rules or not (optional, default to true)
     * @param searchTuningRuleContext The filters which the search tuning rules will match on. (optional)
     * @param searchTuningRuleCode Search-Tuning-Rule Code (optional)
     * @param responseGroups A list of property groups to return instead of using the granular responseFields param. ex: categories,properties,options (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param mid Personalization Id (Monetate Id) (optional)
     * @param omitNamespace  (optional)
     * @param campaignId  (optional)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param responseFields  (optional)
     * @param rows  (optional)
     * @param start  (optional)
     * @param q optional alternative to query for debugging tools (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDebugCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Boolean sliceSearchResults, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, Boolean returnUrl, String mid, Boolean omitNamespace, String campaignId, String merchandizingRuleCode, String responseFields, Integer rows, Integer start, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/searchDebug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (facetTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplate", facetTemplate));
        }

        if (facetTemplateSubset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateSubset", facetTemplateSubset));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFieldRangeQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetFieldRangeQuery", facetFieldRangeQuery));
        }

        if (facetHierPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierPrefix", facetHierPrefix));
        }

        if (facetHierValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierValue", facetHierValue));
        }

        if (facetHierDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierDepth", facetHierDepth));
        }

        if (facetStartIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetStartIndex", facetStartIndex));
        }

        if (facetPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPageSize", facetPageSize));
        }

        if (facetSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetSettings", facetSettings));
        }

        if (facetValueFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueFilter", facetValueFilter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sliceSearchResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sliceSearchResults", sliceSearchResults));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (searchSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchSettings", searchSettings));
        }

        if (enableSearchTuningRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableSearchTuningRules", enableSearchTuningRules));
        }

        if (searchTuningRuleContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleContext", searchTuningRuleContext));
        }

        if (searchTuningRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleCode", searchTuningRuleCode));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (facetTemplateExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateExclude", facetTemplateExclude));
        }

        if (facetPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPrefix", facetPrefix));
        }

        if (responseOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseOptions", responseOptions));
        }

        if (cursorMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursorMark", cursorMark));
        }

        if (facetValueSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueSort", facetValueSort));
        }

        if (returnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnUrl", returnUrl));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (omitNamespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omitNamespace", omitNamespace));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (merchandizingRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchandizingRuleCode", merchandizingRuleCode));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseFields", responseFields));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDebugValidateBeforeCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Boolean sliceSearchResults, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, Boolean returnUrl, String mid, Boolean omitNamespace, String campaignId, String merchandizingRuleCode, String responseFields, Integer rows, Integer start, String q, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchDebugCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, sliceSearchResults, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, returnUrl, mid, omitNamespace, campaignId, merchandizingRuleCode, responseFields, rows, start, q, _callback);
        return localVarCall;

    }

    /**
     * Searches the items displayed on the storefront. Used for debugging explain plans from solr
     * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate The template to use for what facets to compute. ex: categoryId:id (optional)
     * @param facetTemplateSubset If you only want to return a subset of the facets defined in the template. ex: category,price,rating (optional)
     * @param facet Fields to facet on in addition to the optionally provided facetTemplate. ex: category,price,rating (optional)
     * @param facetFieldRangeQuery Facet field range. ex: field:[val+TO+val] can also label (optional)
     * @param facetHierPrefix Facet hierarchy prefix. Skip these levels on a hierarchical facet. ex: field:foo/bar/bing (optional)
     * @param facetHierValue Find the node to start with given a unique lookup value, instead of requiring a prefix path. ex: field:bing (optional)
     * @param facetHierDepth Facet hierarchy depth. Number of levels to return. ex: category:1 (optional)
     * @param facetStartIndex Facet offset (optional)
     * @param facetPageSize Facet page size (optional)
     * @param facetSettings Deprecated (optional)
     * @param facetValueFilter Apply facet values as a filter. ex: category:3,price:[* TO 100] (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param sliceSearchResults Whether to slice results or not (optional, default to false)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings The name of a SiteSearchSettings (search relevancy settings) scheme to use. Defaults to whichever Settings is marked as IsDefault&#x3D;true. (optional)
     * @param enableSearchTuningRules Use search-tuning-rules or not (optional, default to true)
     * @param searchTuningRuleContext The filters which the search tuning rules will match on. (optional)
     * @param searchTuningRuleCode Search-Tuning-Rule Code (optional)
     * @param responseGroups A list of property groups to return instead of using the granular responseFields param. ex: categories,properties,options (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param mid Personalization Id (Monetate Id) (optional)
     * @param omitNamespace  (optional)
     * @param campaignId  (optional)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param responseFields  (optional)
     * @param rows  (optional)
     * @param start  (optional)
     * @param q optional alternative to query for debugging tools (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void searchDebug(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Boolean sliceSearchResults, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, Boolean returnUrl, String mid, Boolean omitNamespace, String campaignId, String merchandizingRuleCode, String responseFields, Integer rows, Integer start, String q) throws ApiException {
        searchDebugWithHttpInfo(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, sliceSearchResults, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, returnUrl, mid, omitNamespace, campaignId, merchandizingRuleCode, responseFields, rows, start, q);
    }

    /**
     * Searches the items displayed on the storefront. Used for debugging explain plans from solr
     * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate The template to use for what facets to compute. ex: categoryId:id (optional)
     * @param facetTemplateSubset If you only want to return a subset of the facets defined in the template. ex: category,price,rating (optional)
     * @param facet Fields to facet on in addition to the optionally provided facetTemplate. ex: category,price,rating (optional)
     * @param facetFieldRangeQuery Facet field range. ex: field:[val+TO+val] can also label (optional)
     * @param facetHierPrefix Facet hierarchy prefix. Skip these levels on a hierarchical facet. ex: field:foo/bar/bing (optional)
     * @param facetHierValue Find the node to start with given a unique lookup value, instead of requiring a prefix path. ex: field:bing (optional)
     * @param facetHierDepth Facet hierarchy depth. Number of levels to return. ex: category:1 (optional)
     * @param facetStartIndex Facet offset (optional)
     * @param facetPageSize Facet page size (optional)
     * @param facetSettings Deprecated (optional)
     * @param facetValueFilter Apply facet values as a filter. ex: category:3,price:[* TO 100] (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param sliceSearchResults Whether to slice results or not (optional, default to false)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings The name of a SiteSearchSettings (search relevancy settings) scheme to use. Defaults to whichever Settings is marked as IsDefault&#x3D;true. (optional)
     * @param enableSearchTuningRules Use search-tuning-rules or not (optional, default to true)
     * @param searchTuningRuleContext The filters which the search tuning rules will match on. (optional)
     * @param searchTuningRuleCode Search-Tuning-Rule Code (optional)
     * @param responseGroups A list of property groups to return instead of using the granular responseFields param. ex: categories,properties,options (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param mid Personalization Id (Monetate Id) (optional)
     * @param omitNamespace  (optional)
     * @param campaignId  (optional)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param responseFields  (optional)
     * @param rows  (optional)
     * @param start  (optional)
     * @param q optional alternative to query for debugging tools (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchDebugWithHttpInfo(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Boolean sliceSearchResults, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, Boolean returnUrl, String mid, Boolean omitNamespace, String campaignId, String merchandizingRuleCode, String responseFields, Integer rows, Integer start, String q) throws ApiException {
        okhttp3.Call localVarCall = searchDebugValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, sliceSearchResults, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, returnUrl, mid, omitNamespace, campaignId, merchandizingRuleCode, responseFields, rows, start, q, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Searches the items displayed on the storefront. Used for debugging explain plans from solr (asynchronously)
     * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate The template to use for what facets to compute. ex: categoryId:id (optional)
     * @param facetTemplateSubset If you only want to return a subset of the facets defined in the template. ex: category,price,rating (optional)
     * @param facet Fields to facet on in addition to the optionally provided facetTemplate. ex: category,price,rating (optional)
     * @param facetFieldRangeQuery Facet field range. ex: field:[val+TO+val] can also label (optional)
     * @param facetHierPrefix Facet hierarchy prefix. Skip these levels on a hierarchical facet. ex: field:foo/bar/bing (optional)
     * @param facetHierValue Find the node to start with given a unique lookup value, instead of requiring a prefix path. ex: field:bing (optional)
     * @param facetHierDepth Facet hierarchy depth. Number of levels to return. ex: category:1 (optional)
     * @param facetStartIndex Facet offset (optional)
     * @param facetPageSize Facet page size (optional)
     * @param facetSettings Deprecated (optional)
     * @param facetValueFilter Apply facet values as a filter. ex: category:3,price:[* TO 100] (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param sliceSearchResults Whether to slice results or not (optional, default to false)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings The name of a SiteSearchSettings (search relevancy settings) scheme to use. Defaults to whichever Settings is marked as IsDefault&#x3D;true. (optional)
     * @param enableSearchTuningRules Use search-tuning-rules or not (optional, default to true)
     * @param searchTuningRuleContext The filters which the search tuning rules will match on. (optional)
     * @param searchTuningRuleCode Search-Tuning-Rule Code (optional)
     * @param responseGroups A list of property groups to return instead of using the granular responseFields param. ex: categories,properties,options (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param mid Personalization Id (Monetate Id) (optional)
     * @param omitNamespace  (optional)
     * @param campaignId  (optional)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param responseFields  (optional)
     * @param rows  (optional)
     * @param start  (optional)
     * @param q optional alternative to query for debugging tools (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDebugAsync(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Boolean sliceSearchResults, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, Boolean returnUrl, String mid, Boolean omitNamespace, String campaignId, String merchandizingRuleCode, String responseFields, Integer rows, Integer start, String q, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDebugValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, sliceSearchResults, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, returnUrl, mid, omitNamespace, campaignId, merchandizingRuleCode, responseFields, rows, start, q, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetRandomAccessCursor
     * @param query Optional terms to search on. Only matching products will be included in the cursor. (optional)
     * @param filter Optional set of filter expressions to filter on. Only matching products will be included in the cursor. (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetRandomAccessCursorCall(String query, String filter, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/randomAccessCursor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetRandomAccessCursorValidateBeforeCall(String query, String filter, Integer pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetRandomAccessCursorCall(query, filter, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Gets list of cursors for search results
     * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
     * @param query Optional terms to search on. Only matching products will be included in the cursor. (optional)
     * @param filter Optional set of filter expressions to filter on. Only matching products will be included in the cursor. (optional)
     * @param pageSize  (optional)
     * @return ProductSearchRandomAccessCursor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductSearchRandomAccessCursor storefrontGetRandomAccessCursor(String query, String filter, Integer pageSize) throws ApiException {
        ApiResponse<ProductSearchRandomAccessCursor> localVarResp = storefrontGetRandomAccessCursorWithHttpInfo(query, filter, pageSize);
        return localVarResp.getData();
    }

    /**
     * Gets list of cursors for search results
     * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
     * @param query Optional terms to search on. Only matching products will be included in the cursor. (optional)
     * @param filter Optional set of filter expressions to filter on. Only matching products will be included in the cursor. (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;ProductSearchRandomAccessCursor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSearchRandomAccessCursor> storefrontGetRandomAccessCursorWithHttpInfo(String query, String filter, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetRandomAccessCursorValidateBeforeCall(query, filter, pageSize, null);
        Type localVarReturnType = new TypeToken<ProductSearchRandomAccessCursor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of cursors for search results (asynchronously)
     * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
     * @param query Optional terms to search on. Only matching products will be included in the cursor. (optional)
     * @param filter Optional set of filter expressions to filter on. Only matching products will be included in the cursor. (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetRandomAccessCursorAsync(String query, String filter, Integer pageSize, final ApiCallback<ProductSearchRandomAccessCursor> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetRandomAccessCursorValidateBeforeCall(query, filter, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ProductSearchRandomAccessCursor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontSearch
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSearchCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (facetTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplate", facetTemplate));
        }

        if (facetTemplateSubset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateSubset", facetTemplateSubset));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFieldRangeQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetFieldRangeQuery", facetFieldRangeQuery));
        }

        if (facetHierPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierPrefix", facetHierPrefix));
        }

        if (facetHierValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierValue", facetHierValue));
        }

        if (facetHierDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierDepth", facetHierDepth));
        }

        if (facetStartIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetStartIndex", facetStartIndex));
        }

        if (facetPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPageSize", facetPageSize));
        }

        if (facetSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetSettings", facetSettings));
        }

        if (facetValueFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueFilter", facetValueFilter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (searchSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchSettings", searchSettings));
        }

        if (enableSearchTuningRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableSearchTuningRules", enableSearchTuningRules));
        }

        if (searchTuningRuleContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleContext", searchTuningRuleContext));
        }

        if (searchTuningRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleCode", searchTuningRuleCode));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (facetTemplateExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateExclude", facetTemplateExclude));
        }

        if (facetPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPrefix", facetPrefix));
        }

        if (responseOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseOptions", responseOptions));
        }

        if (cursorMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursorMark", cursorMark));
        }

        if (facetValueSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueSort", facetValueSort));
        }

        if (defaultSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultSort", defaultSort));
        }

        if (shouldSlice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shouldSlice", shouldSlice));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (omitNamespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omitNamespace", omitNamespace));
        }

        if (includeAllImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllImages", includeAllImages));
        }

        if (spellcorrectOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcorrectOverride", spellcorrectOverride));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        if (merchandizingRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchandizingRuleCode", merchandizingRuleCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontSearchValidateBeforeCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontSearchCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, _callback);
        return localVarCall;

    }

    /**
     * Search for products.
     * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @return ProductSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductSearchResult storefrontSearch(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode) throws ApiException {
        ApiResponse<ProductSearchResult> localVarResp = storefrontSearchWithHttpInfo(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode);
        return localVarResp.getData();
    }

    /**
     * Search for products.
     * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @return ApiResponse&lt;ProductSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSearchResult> storefrontSearchWithHttpInfo(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode) throws ApiException {
        okhttp3.Call localVarCall = storefrontSearchValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, null);
        Type localVarReturnType = new TypeToken<ProductSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for products. (asynchronously)
     * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSearchAsync(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback<ProductSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontSearchValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, _callback);
        Type localVarReturnType = new TypeToken<ProductSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontSiteSearch
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param fieldList  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSiteSearchCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, String fieldList, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/siteSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (facetTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplate", facetTemplate));
        }

        if (facetTemplateSubset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateSubset", facetTemplateSubset));
        }

        if (facet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facet", facet));
        }

        if (facetFieldRangeQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetFieldRangeQuery", facetFieldRangeQuery));
        }

        if (facetHierPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierPrefix", facetHierPrefix));
        }

        if (facetHierValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierValue", facetHierValue));
        }

        if (facetHierDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetHierDepth", facetHierDepth));
        }

        if (facetStartIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetStartIndex", facetStartIndex));
        }

        if (facetPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPageSize", facetPageSize));
        }

        if (facetSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetSettings", facetSettings));
        }

        if (facetValueFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueFilter", facetValueFilter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (searchSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchSettings", searchSettings));
        }

        if (enableSearchTuningRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableSearchTuningRules", enableSearchTuningRules));
        }

        if (searchTuningRuleContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleContext", searchTuningRuleContext));
        }

        if (searchTuningRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTuningRuleCode", searchTuningRuleCode));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (facetTemplateExclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetTemplateExclude", facetTemplateExclude));
        }

        if (facetPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetPrefix", facetPrefix));
        }

        if (responseOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseOptions", responseOptions));
        }

        if (cursorMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursorMark", cursorMark));
        }

        if (facetValueSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetValueSort", facetValueSort));
        }

        if (defaultSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultSort", defaultSort));
        }

        if (shouldSlice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shouldSlice", shouldSlice));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (fieldList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldList", fieldList));
        }

        if (omitNamespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("omitNamespace", omitNamespace));
        }

        if (includeAllImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllImages", includeAllImages));
        }

        if (spellcorrectOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcorrectOverride", spellcorrectOverride));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        if (merchandizingRuleCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchandizingRuleCode", merchandizingRuleCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontSiteSearchValidateBeforeCall(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, String fieldList, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontSiteSearchCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, fieldList, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, _callback);
        return localVarCall;

    }

    /**
     * Site Search - Searches the items displayed on the storefront.
     * Site Search - Searches the items displayed on the storefront.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param fieldList  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @return ProductSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductSearchResult storefrontSiteSearch(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, String fieldList, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode) throws ApiException {
        ApiResponse<ProductSearchResult> localVarResp = storefrontSiteSearchWithHttpInfo(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, fieldList, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode);
        return localVarResp.getData();
    }

    /**
     * Site Search - Searches the items displayed on the storefront.
     * Site Search - Searches the items displayed on the storefront.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param fieldList  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @return ApiResponse&lt;ProductSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSearchResult> storefrontSiteSearchWithHttpInfo(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, String fieldList, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode) throws ApiException {
        okhttp3.Call localVarCall = storefrontSiteSearchValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, fieldList, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, null);
        Type localVarReturnType = new TypeToken<ProductSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Site Search - Searches the items displayed on the storefront. (asynchronously)
     * Site Search - Searches the items displayed on the storefront.
     * @param query The terms to search on. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param facetTemplate  (optional)
     * @param facetTemplateSubset  (optional)
     * @param facet  (optional)
     * @param facetFieldRangeQuery  (optional)
     * @param facetHierPrefix  (optional)
     * @param facetHierValue  (optional)
     * @param facetHierDepth  (optional)
     * @param facetStartIndex  (optional)
     * @param facetPageSize  (optional)
     * @param facetSettings  (optional)
     * @param facetValueFilter  (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 12 and the maximum value is 200. Optional. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. Optional. (optional, default to 0)
     * @param searchSettings  (optional)
     * @param enableSearchTuningRules  (optional, default to true)
     * @param searchTuningRuleContext  (optional)
     * @param searchTuningRuleCode  (optional)
     * @param responseGroups  (optional)
     * @param facetTemplateExclude  (optional)
     * @param facetPrefix  (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param facetValueSort  (optional)
     * @param defaultSort  (optional)
     * @param shouldSlice  (optional)
     * @param mid  (optional)
     * @param fieldList  (optional)
     * @param omitNamespace  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param spellcorrectOverride  (optional, default to Default)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param merchandizingRuleCode Optional. Use a specific search-merchandizing-rule code if provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSiteSearchAsync(String query, String filter, String facetTemplate, String facetTemplateSubset, String facet, String facetFieldRangeQuery, String facetHierPrefix, String facetHierValue, String facetHierDepth, String facetStartIndex, String facetPageSize, String facetSettings, String facetValueFilter, String sortBy, Integer pageSize, Integer startIndex, String searchSettings, Boolean enableSearchTuningRules, String searchTuningRuleContext, String searchTuningRuleCode, String responseGroups, String facetTemplateExclude, String facetPrefix, String responseOptions, String cursorMark, String facetValueSort, String defaultSort, Boolean shouldSlice, String mid, String fieldList, Boolean omitNamespace, Boolean includeAllImages, String spellcorrectOverride, Boolean useSubscriptionPricing, String merchandizingRuleCode, final ApiCallback<ProductSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontSiteSearchValidateBeforeCall(query, filter, facetTemplate, facetTemplateSubset, facet, facetFieldRangeQuery, facetHierPrefix, facetHierValue, facetHierDepth, facetStartIndex, facetPageSize, facetSettings, facetValueFilter, sortBy, pageSize, startIndex, searchSettings, enableSearchTuningRules, searchTuningRuleContext, searchTuningRuleCode, responseGroups, facetTemplateExclude, facetPrefix, responseOptions, cursorMark, facetValueSort, defaultSort, shouldSlice, mid, fieldList, omitNamespace, includeAllImages, spellcorrectOverride, useSubscriptionPricing, merchandizingRuleCode, _callback);
        Type localVarReturnType = new TypeToken<ProductSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontSuggest
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSuggestCall(String query, String groups, Integer pageSize, String mid, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontSuggestValidateBeforeCall(String query, String groups, Integer pageSize, String mid, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontSuggestCall(query, groups, pageSize, mid, filter, _callback);
        return localVarCall;

    }

    /**
     * Gets suggested search terms
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @return SearchSuggestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchSuggestionResult storefrontSuggest(String query, String groups, Integer pageSize, String mid, String filter) throws ApiException {
        ApiResponse<SearchSuggestionResult> localVarResp = storefrontSuggestWithHttpInfo(query, groups, pageSize, mid, filter);
        return localVarResp.getData();
    }

    /**
     * Gets suggested search terms
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;SearchSuggestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchSuggestionResult> storefrontSuggestWithHttpInfo(String query, String groups, Integer pageSize, String mid, String filter) throws ApiException {
        okhttp3.Call localVarCall = storefrontSuggestValidateBeforeCall(query, groups, pageSize, mid, filter, null);
        Type localVarReturnType = new TypeToken<SearchSuggestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets suggested search terms (asynchronously)
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSuggestAsync(String query, String groups, Integer pageSize, String mid, String filter, final ApiCallback<SearchSuggestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontSuggestValidateBeforeCall(query, groups, pageSize, mid, filter, _callback);
        Type localVarReturnType = new TypeToken<SearchSuggestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontSuggest2
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName  (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSuggest2Call(String query, String groups, Integer pageSize, String searchSettingsName, String mid, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/suggest2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (searchSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchSettingsName", searchSettingsName));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontSuggest2ValidateBeforeCall(String query, String groups, Integer pageSize, String searchSettingsName, String mid, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontSuggest2Call(query, groups, pageSize, searchSettingsName, mid, filter, _callback);
        return localVarCall;

    }

    /**
     * Gets suggested search terms
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName  (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @return SearchSuggestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchSuggestionResult storefrontSuggest2(String query, String groups, Integer pageSize, String searchSettingsName, String mid, String filter) throws ApiException {
        ApiResponse<SearchSuggestionResult> localVarResp = storefrontSuggest2WithHttpInfo(query, groups, pageSize, searchSettingsName, mid, filter);
        return localVarResp.getData();
    }

    /**
     * Gets suggested search terms
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName  (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;SearchSuggestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchSuggestionResult> storefrontSuggest2WithHttpInfo(String query, String groups, Integer pageSize, String searchSettingsName, String mid, String filter) throws ApiException {
        okhttp3.Call localVarCall = storefrontSuggest2ValidateBeforeCall(query, groups, pageSize, searchSettingsName, mid, filter, null);
        Type localVarReturnType = new TypeToken<SearchSuggestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets suggested search terms (asynchronously)
     * Suggests possible search terms as the shopper enters search text.
     * @param query Comma delimited list of suggestion groups that should be returned. The default is everything (optional)
     * @param groups  (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName  (optional)
     * @param mid  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontSuggest2Async(String query, String groups, Integer pageSize, String searchSettingsName, String mid, String filter, final ApiCallback<SearchSuggestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontSuggest2ValidateBeforeCall(query, groups, pageSize, searchSettingsName, mid, filter, _callback);
        Type localVarReturnType = new TypeToken<SearchSuggestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontVisualSearch
     * @param searchTerm  (required)
     * @param filters  (optional)
     * @param returnfields  (optional)
     * @param searchfields  (optional)
     * @param ignoregrouping  (optional)
     * @param numResults  (optional)
     * @param pageNumber  (optional)
     * @param applicationId  (optional)
     * @param catalogId  (optional)
     * @param sessionId  (optional)
     * @param trackingId  (optional)
     * @param apiKey  (optional)
     * @param revision  (optional)
     * @param cip  (optional)
     * @param displayDebug  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontVisualSearchCall(String searchTerm, List<RequestFilter> filters, List<String> returnfields, List<String> searchfields, Boolean ignoregrouping, Integer numResults, Integer pageNumber, String applicationId, String catalogId, String sessionId, String trackingId, String apiKey, String revision, String cip, Boolean displayDebug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/visualsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchTerm", searchTerm));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (returnfields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Returnfields", returnfields));
        }

        if (searchfields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Searchfields", searchfields));
        }

        if (ignoregrouping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Ignoregrouping", ignoregrouping));
        }

        if (numResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumResults", numResults));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageNumber", pageNumber));
        }

        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplicationId", applicationId));
        }

        if (catalogId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CatalogId", catalogId));
        }

        if (sessionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SessionId", sessionId));
        }

        if (trackingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TrackingId", trackingId));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiKey", apiKey));
        }

        if (revision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Revision", revision));
        }

        if (cip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Cip", cip));
        }

        if (displayDebug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DisplayDebug", displayDebug));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontVisualSearchValidateBeforeCall(String searchTerm, List<RequestFilter> filters, List<String> returnfields, List<String> searchfields, Boolean ignoregrouping, Integer numResults, Integer pageNumber, String applicationId, String catalogId, String sessionId, String trackingId, String apiKey, String revision, String cip, Boolean displayDebug, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling storefrontVisualSearch(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontVisualSearchCall(searchTerm, filters, returnfields, searchfields, ignoregrouping, numResults, pageNumber, applicationId, catalogId, sessionId, trackingId, apiKey, revision, cip, displayDebug, _callback);
        return localVarCall;

    }

    /**
     * Type ahead - Searches the items displayed on the storefront.
     * Type ahead - Searches the items displayed on the storefront.
     * @param searchTerm  (required)
     * @param filters  (optional)
     * @param returnfields  (optional)
     * @param searchfields  (optional)
     * @param ignoregrouping  (optional)
     * @param numResults  (optional)
     * @param pageNumber  (optional)
     * @param applicationId  (optional)
     * @param catalogId  (optional)
     * @param sessionId  (optional)
     * @param trackingId  (optional)
     * @param apiKey  (optional)
     * @param revision  (optional)
     * @param cip  (optional)
     * @param displayDebug  (optional)
     * @return VisualSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public VisualSearchResult storefrontVisualSearch(String searchTerm, List<RequestFilter> filters, List<String> returnfields, List<String> searchfields, Boolean ignoregrouping, Integer numResults, Integer pageNumber, String applicationId, String catalogId, String sessionId, String trackingId, String apiKey, String revision, String cip, Boolean displayDebug) throws ApiException {
        ApiResponse<VisualSearchResult> localVarResp = storefrontVisualSearchWithHttpInfo(searchTerm, filters, returnfields, searchfields, ignoregrouping, numResults, pageNumber, applicationId, catalogId, sessionId, trackingId, apiKey, revision, cip, displayDebug);
        return localVarResp.getData();
    }

    /**
     * Type ahead - Searches the items displayed on the storefront.
     * Type ahead - Searches the items displayed on the storefront.
     * @param searchTerm  (required)
     * @param filters  (optional)
     * @param returnfields  (optional)
     * @param searchfields  (optional)
     * @param ignoregrouping  (optional)
     * @param numResults  (optional)
     * @param pageNumber  (optional)
     * @param applicationId  (optional)
     * @param catalogId  (optional)
     * @param sessionId  (optional)
     * @param trackingId  (optional)
     * @param apiKey  (optional)
     * @param revision  (optional)
     * @param cip  (optional)
     * @param displayDebug  (optional)
     * @return ApiResponse&lt;VisualSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VisualSearchResult> storefrontVisualSearchWithHttpInfo(String searchTerm, List<RequestFilter> filters, List<String> returnfields, List<String> searchfields, Boolean ignoregrouping, Integer numResults, Integer pageNumber, String applicationId, String catalogId, String sessionId, String trackingId, String apiKey, String revision, String cip, Boolean displayDebug) throws ApiException {
        okhttp3.Call localVarCall = storefrontVisualSearchValidateBeforeCall(searchTerm, filters, returnfields, searchfields, ignoregrouping, numResults, pageNumber, applicationId, catalogId, sessionId, trackingId, apiKey, revision, cip, displayDebug, null);
        Type localVarReturnType = new TypeToken<VisualSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Type ahead - Searches the items displayed on the storefront. (asynchronously)
     * Type ahead - Searches the items displayed on the storefront.
     * @param searchTerm  (required)
     * @param filters  (optional)
     * @param returnfields  (optional)
     * @param searchfields  (optional)
     * @param ignoregrouping  (optional)
     * @param numResults  (optional)
     * @param pageNumber  (optional)
     * @param applicationId  (optional)
     * @param catalogId  (optional)
     * @param sessionId  (optional)
     * @param trackingId  (optional)
     * @param apiKey  (optional)
     * @param revision  (optional)
     * @param cip  (optional)
     * @param displayDebug  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontVisualSearchAsync(String searchTerm, List<RequestFilter> filters, List<String> returnfields, List<String> searchfields, Boolean ignoregrouping, Integer numResults, Integer pageNumber, String applicationId, String catalogId, String sessionId, String trackingId, String apiKey, String revision, String cip, Boolean displayDebug, final ApiCallback<VisualSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontVisualSearchValidateBeforeCall(searchTerm, filters, returnfields, searchfields, ignoregrouping, numResults, pageNumber, applicationId, catalogId, sessionId, trackingId, apiKey, revision, cip, displayDebug, _callback);
        Type localVarReturnType = new TypeToken<VisualSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestDebug
     * @param groups Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products (optional)
     * @param query The terms to search on. (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName Specific Search Configuration. Optional parameter (optional)
     * @param mid Session Id. Optional parameter (optional)
     * @param filter  (optional)
     * @param campaignId Used to debug with a specific campaign. Optional parameter (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestDebugCall(String groups, String query, Integer pageSize, String searchSettingsName, String mid, String filter, String campaignId, Boolean returnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/productsearch/suggestdebug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groups", groups));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (searchSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchSettingsName", searchSettingsName));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        if (returnUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnUrl", returnUrl));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestDebugValidateBeforeCall(String groups, String query, Integer pageSize, String searchSettingsName, String mid, String filter, String campaignId, Boolean returnUrl, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = suggestDebugCall(groups, query, pageSize, searchSettingsName, mid, filter, campaignId, returnUrl, _callback);
        return localVarCall;

    }

    /**
     * Debugging relevancy for the Suggest endpoint
     * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
     * @param groups Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products (optional)
     * @param query The terms to search on. (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName Specific Search Configuration. Optional parameter (optional)
     * @param mid Session Id. Optional parameter (optional)
     * @param filter  (optional)
     * @param campaignId Used to debug with a specific campaign. Optional parameter (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void suggestDebug(String groups, String query, Integer pageSize, String searchSettingsName, String mid, String filter, String campaignId, Boolean returnUrl) throws ApiException {
        suggestDebugWithHttpInfo(groups, query, pageSize, searchSettingsName, mid, filter, campaignId, returnUrl);
    }

    /**
     * Debugging relevancy for the Suggest endpoint
     * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
     * @param groups Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products (optional)
     * @param query The terms to search on. (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName Specific Search Configuration. Optional parameter (optional)
     * @param mid Session Id. Optional parameter (optional)
     * @param filter  (optional)
     * @param campaignId Used to debug with a specific campaign. Optional parameter (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> suggestDebugWithHttpInfo(String groups, String query, Integer pageSize, String searchSettingsName, String mid, String filter, String campaignId, Boolean returnUrl) throws ApiException {
        okhttp3.Call localVarCall = suggestDebugValidateBeforeCall(groups, query, pageSize, searchSettingsName, mid, filter, campaignId, returnUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Debugging relevancy for the Suggest endpoint (asynchronously)
     * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
     * @param groups Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products (optional)
     * @param query The terms to search on. (optional)
     * @param pageSize Indicates the maximum number of entities to return from a query. The default value is 10 and the maximum value is 200. Optional. (optional)
     * @param searchSettingsName Specific Search Configuration. Optional parameter (optional)
     * @param mid Session Id. Optional parameter (optional)
     * @param filter  (optional)
     * @param campaignId Used to debug with a specific campaign. Optional parameter (optional)
     * @param returnUrl Only respond with the request made to the search-engine, for one \&quot;groups\&quot; parameter value. Default is false. Optional parameter. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestDebugAsync(String groups, String query, Integer pageSize, String searchSettingsName, String mid, String filter, String campaignId, Boolean returnUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestDebugValidateBeforeCall(groups, query, pageSize, searchSettingsName, mid, filter, campaignId, returnUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ProductSearchApi build() {
            return new ProductSearchApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
