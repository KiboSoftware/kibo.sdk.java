/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.AttributeDetail;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPropertyValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * An attribute used as a property of a product
 */
@ApiModel(description = "An attribute used as a property of a product")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesProductProperty implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTE_F_Q_N = "attributeFQN";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_F_Q_N)
  private String attributeFQN;

  public static final String SERIALIZED_NAME_IS_HIDDEN = "isHidden";
  @SerializedName(SERIALIZED_NAME_IS_HIDDEN)
  private Boolean isHidden;

  public static final String SERIALIZED_NAME_IS_MULTI_VALUE = "isMultiValue";
  @SerializedName(SERIALIZED_NAME_IS_MULTI_VALUE)
  private Boolean isMultiValue;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DETAIL = "attributeDetail";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DETAIL)
  private AttributeDetail attributeDetail;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<CatalogRuntimesProductPropertyValue> values = null;

  public static final String SERIALIZED_NAME_PROPERTY_TYPE = "propertyType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_TYPE)
  private String propertyType;

  public CatalogRuntimesProductProperty() {
  }

  public CatalogRuntimesProductProperty attributeFQN(String attributeFQN) {
    
    this.attributeFQN = attributeFQN;
    return this;
  }

   /**
   * Attribute fully qualified name
   * @return attributeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attribute fully qualified name")

  public String getAttributeFQN() {
    return attributeFQN;
  }


  public void setAttributeFQN(String attributeFQN) {
    this.attributeFQN = attributeFQN;
  }


  public CatalogRuntimesProductProperty isHidden(Boolean isHidden) {
    
    this.isHidden = isHidden;
    return this;
  }

   /**
   * Indicates whether the product property should be hidden from the customer
   * @return isHidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the product property should be hidden from the customer")

  public Boolean getIsHidden() {
    return isHidden;
  }


  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }


  public CatalogRuntimesProductProperty isMultiValue(Boolean isMultiValue) {
    
    this.isMultiValue = isMultiValue;
    return this;
  }

   /**
   * Indicates whether it&#39;s possible for there to be more than one value in the Values field
   * @return isMultiValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether it's possible for there to be more than one value in the Values field")

  public Boolean getIsMultiValue() {
    return isMultiValue;
  }


  public void setIsMultiValue(Boolean isMultiValue) {
    this.isMultiValue = isMultiValue;
  }


  public CatalogRuntimesProductProperty attributeDetail(AttributeDetail attributeDetail) {
    
    this.attributeDetail = attributeDetail;
    return this;
  }

   /**
   * Get attributeDetail
   * @return attributeDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttributeDetail getAttributeDetail() {
    return attributeDetail;
  }


  public void setAttributeDetail(AttributeDetail attributeDetail) {
    this.attributeDetail = attributeDetail;
  }


  public CatalogRuntimesProductProperty values(List<CatalogRuntimesProductPropertyValue> values) {
    
    this.values = values;
    return this;
  }

  public CatalogRuntimesProductProperty addValuesItem(CatalogRuntimesProductPropertyValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Value(s) of the product property
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value(s) of the product property")

  public List<CatalogRuntimesProductPropertyValue> getValues() {
    return values;
  }


  public void setValues(List<CatalogRuntimesProductPropertyValue> values) {
    this.values = values;
  }


  public CatalogRuntimesProductProperty propertyType(String propertyType) {
    
    this.propertyType = propertyType;
    return this;
  }

   /**
   * Property Type of the Property
   * @return propertyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Property Type of the Property")

  public String getPropertyType() {
    return propertyType;
  }


  public void setPropertyType(String propertyType) {
    this.propertyType = propertyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesProductProperty catalogRuntimesProductProperty = (CatalogRuntimesProductProperty) o;
    return Objects.equals(this.attributeFQN, catalogRuntimesProductProperty.attributeFQN) &&
        Objects.equals(this.isHidden, catalogRuntimesProductProperty.isHidden) &&
        Objects.equals(this.isMultiValue, catalogRuntimesProductProperty.isMultiValue) &&
        Objects.equals(this.attributeDetail, catalogRuntimesProductProperty.attributeDetail) &&
        Objects.equals(this.values, catalogRuntimesProductProperty.values) &&
        Objects.equals(this.propertyType, catalogRuntimesProductProperty.propertyType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeFQN, isHidden, isMultiValue, attributeDetail, values, propertyType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesProductProperty {\n");
    sb.append("    attributeFQN: ").append(toIndentedString(attributeFQN)).append("\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("    isMultiValue: ").append(toIndentedString(isMultiValue)).append("\n");
    sb.append("    attributeDetail: ").append(toIndentedString(attributeDetail)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeFQN");
    openapiFields.add("isHidden");
    openapiFields.add("isMultiValue");
    openapiFields.add("attributeDetail");
    openapiFields.add("values");
    openapiFields.add("propertyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesProductProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesProductProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesProductProperty is not found in the empty JSON string", CatalogRuntimesProductProperty.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesProductProperty.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesProductProperty` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("attributeFQN") != null && !jsonObj.get("attributeFQN").isJsonNull()) && !jsonObj.get("attributeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeFQN").toString()));
      }
      // validate the optional field `attributeDetail`
      if (jsonObj.get("attributeDetail") != null && !jsonObj.get("attributeDetail").isJsonNull()) {
        AttributeDetail.validateJsonObject(jsonObj.getAsJsonObject("attributeDetail"));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            CatalogRuntimesProductPropertyValue.validateJsonObject(jsonArrayvalues.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("propertyType") != null && !jsonObj.get("propertyType").isJsonNull()) && !jsonObj.get("propertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesProductProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesProductProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesProductProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesProductProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesProductProperty>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesProductProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesProductProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesProductProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesProductProperty
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesProductProperty
  */
  public static CatalogRuntimesProductProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesProductProperty.class);
  }

 /**
  * Convert an instance of CatalogRuntimesProductProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

