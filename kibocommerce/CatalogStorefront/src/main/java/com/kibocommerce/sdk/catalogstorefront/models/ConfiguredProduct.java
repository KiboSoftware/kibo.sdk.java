/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesDiscount;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesPackageMeasurements;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductInventoryInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductOption;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPrice;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductProperty;
import com.kibocommerce.sdk.catalogstorefront.models.ProductImage;
import com.kibocommerce.sdk.catalogstorefront.models.ProductPriceRange;
import com.kibocommerce.sdk.catalogstorefront.models.ProductPurchasableState;
import com.kibocommerce.sdk.catalogstorefront.models.ProductVolumePrice;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Product as it is currently configured on the storefront. The configuration changes each time the shopper changes the product order.
 */
@ApiModel(description = "Product as it is currently configured on the storefront. The configuration changes each time the shopper changes the product order.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConfiguredProduct implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_PURCHASE_LOCATION = "purchaseLocation";
  @SerializedName(SERIALIZED_NAME_PURCHASE_LOCATION)
  private String purchaseLocation;

  public static final String SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED = "fulfillmentTypesSupported";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED)
  private List<String> fulfillmentTypesSupported = null;

  public static final String SERIALIZED_NAME_VARIATION_PRODUCT_CODE = "variationProductCode";
  @SerializedName(SERIALIZED_NAME_VARIATION_PRODUCT_CODE)
  private String variationProductCode;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_MFG_PART_NUMBER = "mfgPartNumber";
  @SerializedName(SERIALIZED_NAME_MFG_PART_NUMBER)
  private String mfgPartNumber;

  public static final String SERIALIZED_NAME_PURCHASABLE_STATE = "purchasableState";
  @SerializedName(SERIALIZED_NAME_PURCHASABLE_STATE)
  private ProductPurchasableState purchasableState;

  public static final String SERIALIZED_NAME_PRICE_RANGE = "priceRange";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGE)
  private ProductPriceRange priceRange;

  public static final String SERIALIZED_NAME_VOLUME_PRICE_BANDS = "volumePriceBands";
  @SerializedName(SERIALIZED_NAME_VOLUME_PRICE_BANDS)
  private List<ProductVolumePrice> volumePriceBands = null;

  public static final String SERIALIZED_NAME_VOLUME_PRICE_RANGE = "volumePriceRange";
  @SerializedName(SERIALIZED_NAME_VOLUME_PRICE_RANGE)
  private ProductPriceRange volumePriceRange;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CatalogRuntimesProductPrice price;

  public static final String SERIALIZED_NAME_AVAILABLE_SHIPPING_DISCOUNTS = "availableShippingDiscounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SHIPPING_DISCOUNTS)
  private List<CatalogRuntimesDiscount> availableShippingDiscounts = null;

  public static final String SERIALIZED_NAME_MEASUREMENTS = "measurements";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS)
  private CatalogRuntimesPackageMeasurements measurements;

  public static final String SERIALIZED_NAME_INVENTORY_INFO = "inventoryInfo";
  @SerializedName(SERIALIZED_NAME_INVENTORY_INFO)
  private CatalogRuntimesProductInventoryInfo inventoryInfo;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CatalogRuntimesProductOption> options = null;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<CatalogRuntimesProductProperty> properties = null;

  public static final String SERIALIZED_NAME_PRICE_LIST_ENTRY_TYPE_PROPERTY = "priceListEntryTypeProperty";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ENTRY_TYPE_PROPERTY)
  private CatalogRuntimesProductProperty priceListEntryTypeProperty;

  public static final String SERIALIZED_NAME_PRODUCT_IMAGES = "productImages";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGES)
  private List<ProductImage> productImages = null;

  public ConfiguredProduct() {
  }

  public ConfiguredProduct productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * Merchant-created code associated with the product, for example, a SKU.
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant-created code associated with the product, for example, a SKU.")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public ConfiguredProduct purchaseLocation(String purchaseLocation) {
    
    this.purchaseLocation = purchaseLocation;
    return this;
  }

   /**
   * The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....
   * @return purchaseLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....")

  public String getPurchaseLocation() {
    return purchaseLocation;
  }


  public void setPurchaseLocation(String purchaseLocation) {
    this.purchaseLocation = purchaseLocation;
  }


  public ConfiguredProduct fulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
    return this;
  }

  public ConfiguredProduct addFulfillmentTypesSupportedItem(String fulfillmentTypesSupportedItem) {
    if (this.fulfillmentTypesSupported == null) {
      this.fulfillmentTypesSupported = new ArrayList<>();
    }
    this.fulfillmentTypesSupported.add(fulfillmentTypesSupportedItem);
    return this;
  }

   /**
   * Indicates the fulfillment types the product supports.
   * @return fulfillmentTypesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the fulfillment types the product supports.")

  public List<String> getFulfillmentTypesSupported() {
    return fulfillmentTypesSupported;
  }


  public void setFulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
  }


  public ConfiguredProduct variationProductCode(String variationProductCode) {
    
    this.variationProductCode = variationProductCode;
    return this;
  }

   /**
   * For a product with options, the code of the product variation that represents the current selection of product options.   Question: is this right?
   * @return variationProductCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For a product with options, the code of the product variation that represents the current selection of product options.   Question: is this right?")

  public String getVariationProductCode() {
    return variationProductCode;
  }


  public void setVariationProductCode(String variationProductCode) {
    this.variationProductCode = variationProductCode;
  }


  public ConfiguredProduct upc(String upc) {
    
    this.upc = upc;
    return this;
  }

   /**
   * UPC code of the product.
   * @return upc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UPC code of the product.")

  public String getUpc() {
    return upc;
  }


  public void setUpc(String upc) {
    this.upc = upc;
  }


  public ConfiguredProduct mfgPartNumber(String mfgPartNumber) {
    
    this.mfgPartNumber = mfgPartNumber;
    return this;
  }

   /**
   * Manufacturer part number.
   * @return mfgPartNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manufacturer part number.")

  public String getMfgPartNumber() {
    return mfgPartNumber;
  }


  public void setMfgPartNumber(String mfgPartNumber) {
    this.mfgPartNumber = mfgPartNumber;
  }


  public ConfiguredProduct purchasableState(ProductPurchasableState purchasableState) {
    
    this.purchasableState = purchasableState;
    return this;
  }

   /**
   * Get purchasableState
   * @return purchasableState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPurchasableState getPurchasableState() {
    return purchasableState;
  }


  public void setPurchasableState(ProductPurchasableState purchasableState) {
    this.purchasableState = purchasableState;
  }


  public ConfiguredProduct priceRange(ProductPriceRange priceRange) {
    
    this.priceRange = priceRange;
    return this;
  }

   /**
   * Get priceRange
   * @return priceRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPriceRange getPriceRange() {
    return priceRange;
  }


  public void setPriceRange(ProductPriceRange priceRange) {
    this.priceRange = priceRange;
  }


  public ConfiguredProduct volumePriceBands(List<ProductVolumePrice> volumePriceBands) {
    
    this.volumePriceBands = volumePriceBands;
    return this;
  }

  public ConfiguredProduct addVolumePriceBandsItem(ProductVolumePrice volumePriceBandsItem) {
    if (this.volumePriceBands == null) {
      this.volumePriceBands = new ArrayList<>();
    }
    this.volumePriceBands.add(volumePriceBandsItem);
    return this;
  }

   /**
   * For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...
   * @return volumePriceBands
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...")

  public List<ProductVolumePrice> getVolumePriceBands() {
    return volumePriceBands;
  }


  public void setVolumePriceBands(List<ProductVolumePrice> volumePriceBands) {
    this.volumePriceBands = volumePriceBands;
  }


  public ConfiguredProduct volumePriceRange(ProductPriceRange volumePriceRange) {
    
    this.volumePriceRange = volumePriceRange;
    return this;
  }

   /**
   * Get volumePriceRange
   * @return volumePriceRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPriceRange getVolumePriceRange() {
    return volumePriceRange;
  }


  public void setVolumePriceRange(ProductPriceRange volumePriceRange) {
    this.volumePriceRange = volumePriceRange;
  }


  public ConfiguredProduct price(CatalogRuntimesProductPrice price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductPrice getPrice() {
    return price;
  }


  public void setPrice(CatalogRuntimesProductPrice price) {
    this.price = price;
  }


  public ConfiguredProduct availableShippingDiscounts(List<CatalogRuntimesDiscount> availableShippingDiscounts) {
    
    this.availableShippingDiscounts = availableShippingDiscounts;
    return this;
  }

  public ConfiguredProduct addAvailableShippingDiscountsItem(CatalogRuntimesDiscount availableShippingDiscountsItem) {
    if (this.availableShippingDiscounts == null) {
      this.availableShippingDiscounts = new ArrayList<>();
    }
    this.availableShippingDiscounts.add(availableShippingDiscountsItem);
    return this;
  }

   /**
   * List of potential shipping discounts available for this product.
   * @return availableShippingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of potential shipping discounts available for this product.")

  public List<CatalogRuntimesDiscount> getAvailableShippingDiscounts() {
    return availableShippingDiscounts;
  }


  public void setAvailableShippingDiscounts(List<CatalogRuntimesDiscount> availableShippingDiscounts) {
    this.availableShippingDiscounts = availableShippingDiscounts;
  }


  public ConfiguredProduct measurements(CatalogRuntimesPackageMeasurements measurements) {
    
    this.measurements = measurements;
    return this;
  }

   /**
   * Get measurements
   * @return measurements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesPackageMeasurements getMeasurements() {
    return measurements;
  }


  public void setMeasurements(CatalogRuntimesPackageMeasurements measurements) {
    this.measurements = measurements;
  }


  public ConfiguredProduct inventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    
    this.inventoryInfo = inventoryInfo;
    return this;
  }

   /**
   * Get inventoryInfo
   * @return inventoryInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductInventoryInfo getInventoryInfo() {
    return inventoryInfo;
  }


  public void setInventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    this.inventoryInfo = inventoryInfo;
  }


  public ConfiguredProduct options(List<CatalogRuntimesProductOption> options) {
    
    this.options = options;
    return this;
  }

  public ConfiguredProduct addOptionsItem(CatalogRuntimesProductOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Remaining options and option values that can be selected given the shopper&#39;s current selection of options.
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Remaining options and option values that can be selected given the shopper's current selection of options.")

  public List<CatalogRuntimesProductOption> getOptions() {
    return options;
  }


  public void setOptions(List<CatalogRuntimesProductOption> options) {
    this.options = options;
  }


  public ConfiguredProduct properties(List<CatalogRuntimesProductProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public ConfiguredProduct addPropertiesItem(CatalogRuntimesProductProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Remaining options and option values that can be selected given the shopper&#39;s current selection of options.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Remaining options and option values that can be selected given the shopper's current selection of options.")

  public List<CatalogRuntimesProductProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<CatalogRuntimesProductProperty> properties) {
    this.properties = properties;
  }


  public ConfiguredProduct priceListEntryTypeProperty(CatalogRuntimesProductProperty priceListEntryTypeProperty) {
    
    this.priceListEntryTypeProperty = priceListEntryTypeProperty;
    return this;
  }

   /**
   * Get priceListEntryTypeProperty
   * @return priceListEntryTypeProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductProperty getPriceListEntryTypeProperty() {
    return priceListEntryTypeProperty;
  }


  public void setPriceListEntryTypeProperty(CatalogRuntimesProductProperty priceListEntryTypeProperty) {
    this.priceListEntryTypeProperty = priceListEntryTypeProperty;
  }


  public ConfiguredProduct productImages(List<ProductImage> productImages) {
    
    this.productImages = productImages;
    return this;
  }

  public ConfiguredProduct addProductImagesItem(ProductImage productImagesItem) {
    if (this.productImages == null) {
      this.productImages = new ArrayList<>();
    }
    this.productImages.add(productImagesItem);
    return this;
  }

   /**
   * Images associated with the product.
   * @return productImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Images associated with the product.")

  public List<ProductImage> getProductImages() {
    return productImages;
  }


  public void setProductImages(List<ProductImage> productImages) {
    this.productImages = productImages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfiguredProduct configuredProduct = (ConfiguredProduct) o;
    return Objects.equals(this.productCode, configuredProduct.productCode) &&
        Objects.equals(this.purchaseLocation, configuredProduct.purchaseLocation) &&
        Objects.equals(this.fulfillmentTypesSupported, configuredProduct.fulfillmentTypesSupported) &&
        Objects.equals(this.variationProductCode, configuredProduct.variationProductCode) &&
        Objects.equals(this.upc, configuredProduct.upc) &&
        Objects.equals(this.mfgPartNumber, configuredProduct.mfgPartNumber) &&
        Objects.equals(this.purchasableState, configuredProduct.purchasableState) &&
        Objects.equals(this.priceRange, configuredProduct.priceRange) &&
        Objects.equals(this.volumePriceBands, configuredProduct.volumePriceBands) &&
        Objects.equals(this.volumePriceRange, configuredProduct.volumePriceRange) &&
        Objects.equals(this.price, configuredProduct.price) &&
        Objects.equals(this.availableShippingDiscounts, configuredProduct.availableShippingDiscounts) &&
        Objects.equals(this.measurements, configuredProduct.measurements) &&
        Objects.equals(this.inventoryInfo, configuredProduct.inventoryInfo) &&
        Objects.equals(this.options, configuredProduct.options) &&
        Objects.equals(this.properties, configuredProduct.properties) &&
        Objects.equals(this.priceListEntryTypeProperty, configuredProduct.priceListEntryTypeProperty) &&
        Objects.equals(this.productImages, configuredProduct.productImages);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productCode, purchaseLocation, fulfillmentTypesSupported, variationProductCode, upc, mfgPartNumber, purchasableState, priceRange, volumePriceBands, volumePriceRange, price, availableShippingDiscounts, measurements, inventoryInfo, options, properties, priceListEntryTypeProperty, productImages);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfiguredProduct {\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    purchaseLocation: ").append(toIndentedString(purchaseLocation)).append("\n");
    sb.append("    fulfillmentTypesSupported: ").append(toIndentedString(fulfillmentTypesSupported)).append("\n");
    sb.append("    variationProductCode: ").append(toIndentedString(variationProductCode)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    mfgPartNumber: ").append(toIndentedString(mfgPartNumber)).append("\n");
    sb.append("    purchasableState: ").append(toIndentedString(purchasableState)).append("\n");
    sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
    sb.append("    volumePriceBands: ").append(toIndentedString(volumePriceBands)).append("\n");
    sb.append("    volumePriceRange: ").append(toIndentedString(volumePriceRange)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    availableShippingDiscounts: ").append(toIndentedString(availableShippingDiscounts)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("    inventoryInfo: ").append(toIndentedString(inventoryInfo)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    priceListEntryTypeProperty: ").append(toIndentedString(priceListEntryTypeProperty)).append("\n");
    sb.append("    productImages: ").append(toIndentedString(productImages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productCode");
    openapiFields.add("purchaseLocation");
    openapiFields.add("fulfillmentTypesSupported");
    openapiFields.add("variationProductCode");
    openapiFields.add("upc");
    openapiFields.add("mfgPartNumber");
    openapiFields.add("purchasableState");
    openapiFields.add("priceRange");
    openapiFields.add("volumePriceBands");
    openapiFields.add("volumePriceRange");
    openapiFields.add("price");
    openapiFields.add("availableShippingDiscounts");
    openapiFields.add("measurements");
    openapiFields.add("inventoryInfo");
    openapiFields.add("options");
    openapiFields.add("properties");
    openapiFields.add("priceListEntryTypeProperty");
    openapiFields.add("productImages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfiguredProduct
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfiguredProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfiguredProduct is not found in the empty JSON string", ConfiguredProduct.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ConfiguredProduct.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfiguredProduct` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      if ((jsonObj.get("purchaseLocation") != null && !jsonObj.get("purchaseLocation").isJsonNull()) && !jsonObj.get("purchaseLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseLocation").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fulfillmentTypesSupported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentTypesSupported` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentTypesSupported").toString()));
      }
      if ((jsonObj.get("variationProductCode") != null && !jsonObj.get("variationProductCode").isJsonNull()) && !jsonObj.get("variationProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variationProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variationProductCode").toString()));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if ((jsonObj.get("mfgPartNumber") != null && !jsonObj.get("mfgPartNumber").isJsonNull()) && !jsonObj.get("mfgPartNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfgPartNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfgPartNumber").toString()));
      }
      // validate the optional field `purchasableState`
      if (jsonObj.get("purchasableState") != null && !jsonObj.get("purchasableState").isJsonNull()) {
        ProductPurchasableState.validateJsonObject(jsonObj.getAsJsonObject("purchasableState"));
      }
      // validate the optional field `priceRange`
      if (jsonObj.get("priceRange") != null && !jsonObj.get("priceRange").isJsonNull()) {
        ProductPriceRange.validateJsonObject(jsonObj.getAsJsonObject("priceRange"));
      }
      if (jsonObj.get("volumePriceBands") != null && !jsonObj.get("volumePriceBands").isJsonNull()) {
        JsonArray jsonArrayvolumePriceBands = jsonObj.getAsJsonArray("volumePriceBands");
        if (jsonArrayvolumePriceBands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumePriceBands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumePriceBands` to be an array in the JSON string but got `%s`", jsonObj.get("volumePriceBands").toString()));
          }

          // validate the optional field `volumePriceBands` (array)
          for (int i = 0; i < jsonArrayvolumePriceBands.size(); i++) {
            ProductVolumePrice.validateJsonObject(jsonArrayvolumePriceBands.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `volumePriceRange`
      if (jsonObj.get("volumePriceRange") != null && !jsonObj.get("volumePriceRange").isJsonNull()) {
        ProductPriceRange.validateJsonObject(jsonObj.getAsJsonObject("volumePriceRange"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CatalogRuntimesProductPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      if (jsonObj.get("availableShippingDiscounts") != null && !jsonObj.get("availableShippingDiscounts").isJsonNull()) {
        JsonArray jsonArrayavailableShippingDiscounts = jsonObj.getAsJsonArray("availableShippingDiscounts");
        if (jsonArrayavailableShippingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableShippingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableShippingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("availableShippingDiscounts").toString()));
          }

          // validate the optional field `availableShippingDiscounts` (array)
          for (int i = 0; i < jsonArrayavailableShippingDiscounts.size(); i++) {
            CatalogRuntimesDiscount.validateJsonObject(jsonArrayavailableShippingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `measurements`
      if (jsonObj.get("measurements") != null && !jsonObj.get("measurements").isJsonNull()) {
        CatalogRuntimesPackageMeasurements.validateJsonObject(jsonObj.getAsJsonObject("measurements"));
      }
      // validate the optional field `inventoryInfo`
      if (jsonObj.get("inventoryInfo") != null && !jsonObj.get("inventoryInfo").isJsonNull()) {
        CatalogRuntimesProductInventoryInfo.validateJsonObject(jsonObj.getAsJsonObject("inventoryInfo"));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CatalogRuntimesProductOption.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            CatalogRuntimesProductProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `priceListEntryTypeProperty`
      if (jsonObj.get("priceListEntryTypeProperty") != null && !jsonObj.get("priceListEntryTypeProperty").isJsonNull()) {
        CatalogRuntimesProductProperty.validateJsonObject(jsonObj.getAsJsonObject("priceListEntryTypeProperty"));
      }
      if (jsonObj.get("productImages") != null && !jsonObj.get("productImages").isJsonNull()) {
        JsonArray jsonArrayproductImages = jsonObj.getAsJsonArray("productImages");
        if (jsonArrayproductImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productImages` to be an array in the JSON string but got `%s`", jsonObj.get("productImages").toString()));
          }

          // validate the optional field `productImages` (array)
          for (int i = 0; i < jsonArrayproductImages.size(); i++) {
            ProductImage.validateJsonObject(jsonArrayproductImages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfiguredProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfiguredProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfiguredProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfiguredProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfiguredProduct>() {
           @Override
           public void write(JsonWriter out, ConfiguredProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfiguredProduct read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfiguredProduct given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfiguredProduct
  * @throws IOException if the JSON string is invalid with respect to ConfiguredProduct
  */
  public static ConfiguredProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfiguredProduct.class);
  }

 /**
  * Convert an instance of ConfiguredProduct to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

