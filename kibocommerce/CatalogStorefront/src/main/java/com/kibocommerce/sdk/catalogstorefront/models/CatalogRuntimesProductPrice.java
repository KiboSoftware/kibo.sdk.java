/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesAppliedDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Price of the product with any sale and discounts applied.
 */
@ApiModel(description = "Price of the product with any sale and discounts applied.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesProductPrice implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private Double msrp;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "priceType";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private String priceType;

  public static final String SERIALIZED_NAME_SALE_PRICE = "salePrice";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE)
  private Double salePrice;

  public static final String SERIALIZED_NAME_SALE_PRICE_TYPE = "salePriceType";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE_TYPE)
  private String salePriceType;

  public static final String SERIALIZED_NAME_CATALOG_SALE_PRICE = "catalogSalePrice";
  @SerializedName(SERIALIZED_NAME_CATALOG_SALE_PRICE)
  private Double catalogSalePrice;

  public static final String SERIALIZED_NAME_CATALOG_LIST_PRICE = "catalogListPrice";
  @SerializedName(SERIALIZED_NAME_CATALOG_LIST_PRICE)
  private Double catalogListPrice;

  public static final String SERIALIZED_NAME_PRICE_LIST_ENTRY_END_DATE = "priceListEntryEndDate";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ENTRY_END_DATE)
  private OffsetDateTime priceListEntryEndDate;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private CatalogRuntimesAppliedDiscount discount;

  public static final String SERIALIZED_NAME_CREDIT_VALUE = "creditValue";
  @SerializedName(SERIALIZED_NAME_CREDIT_VALUE)
  private Double creditValue;

  public static final String SERIALIZED_NAME_EFFECTIVE_PRICELIST_CODE = "effectivePricelistCode";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_PRICELIST_CODE)
  private String effectivePricelistCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_ENTRY_CODE = "priceListEntryCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ENTRY_CODE)
  private String priceListEntryCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_ENTRY_MODE = "priceListEntryMode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ENTRY_MODE)
  private String priceListEntryMode;

  public CatalogRuntimesProductPrice() {
  }

  public CatalogRuntimesProductPrice msrp(Double msrp) {
    
    this.msrp = msrp;
    return this;
  }

   /**
   * Manufacturer suggested Retail price, this may be null if one is not set in the catalog.
   * @return msrp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manufacturer suggested Retail price, this may be null if one is not set in the catalog.")

  public Double getMsrp() {
    return msrp;
  }


  public void setMsrp(Double msrp) {
    this.msrp = msrp;
  }


  public CatalogRuntimesProductPrice price(Double price) {
    
    this.price = price;
    return this;
  }

   /**
   * Listed Price of the product. This is the price that the merchant intends to sell the product for if no sale is active.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Listed Price of the product. This is the price that the merchant intends to sell the product for if no sale is active.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    this.price = price;
  }


  public CatalogRuntimesProductPrice priceType(String priceType) {
    
    this.priceType = priceType;
    return this;
  }

   /**
   * Futher clarification of what value is being returned in the Price field
   * @return priceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Futher clarification of what value is being returned in the Price field")

  public String getPriceType() {
    return priceType;
  }


  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }


  public CatalogRuntimesProductPrice salePrice(Double salePrice) {
    
    this.salePrice = salePrice;
    return this;
  }

   /**
   * Current sale price of the product. This can be either a specific numerical amount or it can be calculated based on an active discount. Optional.
   * @return salePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current sale price of the product. This can be either a specific numerical amount or it can be calculated based on an active discount. Optional.")

  public Double getSalePrice() {
    return salePrice;
  }


  public void setSalePrice(Double salePrice) {
    this.salePrice = salePrice;
  }


  public CatalogRuntimesProductPrice salePriceType(String salePriceType) {
    
    this.salePriceType = salePriceType;
    return this;
  }

   /**
   * Get salePriceType
   * @return salePriceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSalePriceType() {
    return salePriceType;
  }


  public void setSalePriceType(String salePriceType) {
    this.salePriceType = salePriceType;
  }


  public CatalogRuntimesProductPrice catalogSalePrice(Double catalogSalePrice) {
    
    this.catalogSalePrice = catalogSalePrice;
    return this;
  }

   /**
   * Current sale price of the product listed in the catalog. This is not typically dispalyed directly to the user as it will be listed in SalePrice if applicable.
   * @return catalogSalePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current sale price of the product listed in the catalog. This is not typically dispalyed directly to the user as it will be listed in SalePrice if applicable.")

  public Double getCatalogSalePrice() {
    return catalogSalePrice;
  }


  public void setCatalogSalePrice(Double catalogSalePrice) {
    this.catalogSalePrice = catalogSalePrice;
  }


  public CatalogRuntimesProductPrice catalogListPrice(Double catalogListPrice) {
    
    this.catalogListPrice = catalogListPrice;
    return this;
  }

   /**
   * Current Price Listed in the catalog.
   * @return catalogListPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current Price Listed in the catalog.")

  public Double getCatalogListPrice() {
    return catalogListPrice;
  }


  public void setCatalogListPrice(Double catalogListPrice) {
    this.catalogListPrice = catalogListPrice;
  }


  public CatalogRuntimesProductPrice priceListEntryEndDate(OffsetDateTime priceListEntryEndDate) {
    
    this.priceListEntryEndDate = priceListEntryEndDate;
    return this;
  }

   /**
   * EndDate if PriceListEntry present.
   * @return priceListEntryEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EndDate if PriceListEntry present.")

  public OffsetDateTime getPriceListEntryEndDate() {
    return priceListEntryEndDate;
  }


  public void setPriceListEntryEndDate(OffsetDateTime priceListEntryEndDate) {
    this.priceListEntryEndDate = priceListEntryEndDate;
  }


  public CatalogRuntimesProductPrice discount(CatalogRuntimesAppliedDiscount discount) {
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesAppliedDiscount getDiscount() {
    return discount;
  }


  public void setDiscount(CatalogRuntimesAppliedDiscount discount) {
    this.discount = discount;
  }


  public CatalogRuntimesProductPrice creditValue(Double creditValue) {
    
    this.creditValue = creditValue;
    return this;
  }

   /**
   * Credit Value applicable to this product. Should only be present on DigitalCredit goodsType....
   * @return creditValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Value applicable to this product. Should only be present on DigitalCredit goodsType....")

  public Double getCreditValue() {
    return creditValue;
  }


  public void setCreditValue(Double creditValue) {
    this.creditValue = creditValue;
  }


  public CatalogRuntimesProductPrice effectivePricelistCode(String effectivePricelistCode) {
    
    this.effectivePricelistCode = effectivePricelistCode;
    return this;
  }

   /**
   * The priceList that was applied to this product
   * @return effectivePricelistCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The priceList that was applied to this product")

  public String getEffectivePricelistCode() {
    return effectivePricelistCode;
  }


  public void setEffectivePricelistCode(String effectivePricelistCode) {
    this.effectivePricelistCode = effectivePricelistCode;
  }


  public CatalogRuntimesProductPrice priceListEntryCode(String priceListEntryCode) {
    
    this.priceListEntryCode = priceListEntryCode;
    return this;
  }

   /**
   * The specific PriceListCode that was applied (includes inheritence
   * @return priceListEntryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The specific PriceListCode that was applied (includes inheritence")

  public String getPriceListEntryCode() {
    return priceListEntryCode;
  }


  public void setPriceListEntryCode(String priceListEntryCode) {
    this.priceListEntryCode = priceListEntryCode;
  }


  public CatalogRuntimesProductPrice priceListEntryMode(String priceListEntryMode) {
    
    this.priceListEntryMode = priceListEntryMode;
    return this;
  }

   /**
   * IF a PriceList Entry was applied to this price it will be (simple, bulk...)
   * @return priceListEntryMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IF a PriceList Entry was applied to this price it will be (simple, bulk...)")

  public String getPriceListEntryMode() {
    return priceListEntryMode;
  }


  public void setPriceListEntryMode(String priceListEntryMode) {
    this.priceListEntryMode = priceListEntryMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesProductPrice catalogRuntimesProductPrice = (CatalogRuntimesProductPrice) o;
    return Objects.equals(this.msrp, catalogRuntimesProductPrice.msrp) &&
        Objects.equals(this.price, catalogRuntimesProductPrice.price) &&
        Objects.equals(this.priceType, catalogRuntimesProductPrice.priceType) &&
        Objects.equals(this.salePrice, catalogRuntimesProductPrice.salePrice) &&
        Objects.equals(this.salePriceType, catalogRuntimesProductPrice.salePriceType) &&
        Objects.equals(this.catalogSalePrice, catalogRuntimesProductPrice.catalogSalePrice) &&
        Objects.equals(this.catalogListPrice, catalogRuntimesProductPrice.catalogListPrice) &&
        Objects.equals(this.priceListEntryEndDate, catalogRuntimesProductPrice.priceListEntryEndDate) &&
        Objects.equals(this.discount, catalogRuntimesProductPrice.discount) &&
        Objects.equals(this.creditValue, catalogRuntimesProductPrice.creditValue) &&
        Objects.equals(this.effectivePricelistCode, catalogRuntimesProductPrice.effectivePricelistCode) &&
        Objects.equals(this.priceListEntryCode, catalogRuntimesProductPrice.priceListEntryCode) &&
        Objects.equals(this.priceListEntryMode, catalogRuntimesProductPrice.priceListEntryMode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(msrp, price, priceType, salePrice, salePriceType, catalogSalePrice, catalogListPrice, priceListEntryEndDate, discount, creditValue, effectivePricelistCode, priceListEntryCode, priceListEntryMode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesProductPrice {\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
    sb.append("    salePriceType: ").append(toIndentedString(salePriceType)).append("\n");
    sb.append("    catalogSalePrice: ").append(toIndentedString(catalogSalePrice)).append("\n");
    sb.append("    catalogListPrice: ").append(toIndentedString(catalogListPrice)).append("\n");
    sb.append("    priceListEntryEndDate: ").append(toIndentedString(priceListEntryEndDate)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    creditValue: ").append(toIndentedString(creditValue)).append("\n");
    sb.append("    effectivePricelistCode: ").append(toIndentedString(effectivePricelistCode)).append("\n");
    sb.append("    priceListEntryCode: ").append(toIndentedString(priceListEntryCode)).append("\n");
    sb.append("    priceListEntryMode: ").append(toIndentedString(priceListEntryMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msrp");
    openapiFields.add("price");
    openapiFields.add("priceType");
    openapiFields.add("salePrice");
    openapiFields.add("salePriceType");
    openapiFields.add("catalogSalePrice");
    openapiFields.add("catalogListPrice");
    openapiFields.add("priceListEntryEndDate");
    openapiFields.add("discount");
    openapiFields.add("creditValue");
    openapiFields.add("effectivePricelistCode");
    openapiFields.add("priceListEntryCode");
    openapiFields.add("priceListEntryMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesProductPrice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesProductPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesProductPrice is not found in the empty JSON string", CatalogRuntimesProductPrice.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesProductPrice.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesProductPrice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("priceType") != null && !jsonObj.get("priceType").isJsonNull()) && !jsonObj.get("priceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceType").toString()));
      }
      if ((jsonObj.get("salePriceType") != null && !jsonObj.get("salePriceType").isJsonNull()) && !jsonObj.get("salePriceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salePriceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salePriceType").toString()));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        CatalogRuntimesAppliedDiscount.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      }
      if ((jsonObj.get("effectivePricelistCode") != null && !jsonObj.get("effectivePricelistCode").isJsonNull()) && !jsonObj.get("effectivePricelistCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectivePricelistCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectivePricelistCode").toString()));
      }
      if ((jsonObj.get("priceListEntryCode") != null && !jsonObj.get("priceListEntryCode").isJsonNull()) && !jsonObj.get("priceListEntryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListEntryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListEntryCode").toString()));
      }
      if ((jsonObj.get("priceListEntryMode") != null && !jsonObj.get("priceListEntryMode").isJsonNull()) && !jsonObj.get("priceListEntryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListEntryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListEntryMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesProductPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesProductPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesProductPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesProductPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesProductPrice>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesProductPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesProductPrice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesProductPrice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesProductPrice
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesProductPrice
  */
  public static CatalogRuntimesProductPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesProductPrice.class);
  }

 /**
  * Convert an instance of CatalogRuntimesProductPrice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

