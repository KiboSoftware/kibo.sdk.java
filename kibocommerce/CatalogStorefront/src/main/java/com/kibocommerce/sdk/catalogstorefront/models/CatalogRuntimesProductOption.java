/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.AttributeDetail;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductOptionValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * An option for a product and its list of values, if any. Also includes whether the option is configurable or stand-alone, whether it is required, whether it can have mulitple values and whether the shopper can supply its value (for example, engraved initials).
 */
@ApiModel(description = "An option for a product and its list of values, if any. Also includes whether the option is configurable or stand-alone, whether it is required, whether it can have mulitple values and whether the shopper can supply its value (for example, engraved initials).")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesProductOption implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTE_F_Q_N = "attributeFQN";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_F_Q_N)
  private String attributeFQN;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_IS_MULTI_VALUE = "isMultiValue";
  @SerializedName(SERIALIZED_NAME_IS_MULTI_VALUE)
  private Boolean isMultiValue;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<CatalogRuntimesProductOptionValue> values = null;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DETAIL = "attributeDetail";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DETAIL)
  private AttributeDetail attributeDetail;

  public static final String SERIALIZED_NAME_IS_PRODUCT_IMAGE_GROUP_SELECTOR = "isProductImageGroupSelector";
  @SerializedName(SERIALIZED_NAME_IS_PRODUCT_IMAGE_GROUP_SELECTOR)
  private Boolean isProductImageGroupSelector;

  public CatalogRuntimesProductOption() {
  }

  public CatalogRuntimesProductOption attributeFQN(String attributeFQN) {
    
    this.attributeFQN = attributeFQN;
    return this;
  }

   /**
   * Attribute fully qualified name
   * @return attributeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attribute fully qualified name")

  public String getAttributeFQN() {
    return attributeFQN;
  }


  public void setAttributeFQN(String attributeFQN) {
    this.attributeFQN = attributeFQN;
  }


  public CatalogRuntimesProductOption isRequired(Boolean isRequired) {
    
    this.isRequired = isRequired;
    return this;
  }

   /**
   * If true, the shopper must provide a value for the option before it can be purchased.
   * @return isRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the shopper must provide a value for the option before it can be purchased.")

  public Boolean getIsRequired() {
    return isRequired;
  }


  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public CatalogRuntimesProductOption isMultiValue(Boolean isMultiValue) {
    
    this.isMultiValue = isMultiValue;
    return this;
  }

   /**
   * If true, more than one value can be assigned to an option. Only possible with stand-alone options.
   * @return isMultiValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, more than one value can be assigned to an option. Only possible with stand-alone options.")

  public Boolean getIsMultiValue() {
    return isMultiValue;
  }


  public void setIsMultiValue(Boolean isMultiValue) {
    this.isMultiValue = isMultiValue;
  }


  public CatalogRuntimesProductOption values(List<CatalogRuntimesProductOptionValue> values) {
    
    this.values = values;
    return this;
  }

  public CatalogRuntimesProductOption addValuesItem(CatalogRuntimesProductOptionValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Possible choices for an option, for example, values of the option \&quot;Color\&quot; can be \&quot;red,\&quot; \&quot;white,\&quot; and \&quot;blue.\&quot;
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Possible choices for an option, for example, values of the option \"Color\" can be \"red,\" \"white,\" and \"blue.\"")

  public List<CatalogRuntimesProductOptionValue> getValues() {
    return values;
  }


  public void setValues(List<CatalogRuntimesProductOptionValue> values) {
    this.values = values;
  }


  public CatalogRuntimesProductOption attributeDetail(AttributeDetail attributeDetail) {
    
    this.attributeDetail = attributeDetail;
    return this;
  }

   /**
   * Get attributeDetail
   * @return attributeDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AttributeDetail getAttributeDetail() {
    return attributeDetail;
  }


  public void setAttributeDetail(AttributeDetail attributeDetail) {
    this.attributeDetail = attributeDetail;
  }


  public CatalogRuntimesProductOption isProductImageGroupSelector(Boolean isProductImageGroupSelector) {
    
    this.isProductImageGroupSelector = isProductImageGroupSelector;
    return this;
  }

   /**
   * Get isProductImageGroupSelector
   * @return isProductImageGroupSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsProductImageGroupSelector() {
    return isProductImageGroupSelector;
  }


  public void setIsProductImageGroupSelector(Boolean isProductImageGroupSelector) {
    this.isProductImageGroupSelector = isProductImageGroupSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesProductOption catalogRuntimesProductOption = (CatalogRuntimesProductOption) o;
    return Objects.equals(this.attributeFQN, catalogRuntimesProductOption.attributeFQN) &&
        Objects.equals(this.isRequired, catalogRuntimesProductOption.isRequired) &&
        Objects.equals(this.isMultiValue, catalogRuntimesProductOption.isMultiValue) &&
        Objects.equals(this.values, catalogRuntimesProductOption.values) &&
        Objects.equals(this.attributeDetail, catalogRuntimesProductOption.attributeDetail) &&
        Objects.equals(this.isProductImageGroupSelector, catalogRuntimesProductOption.isProductImageGroupSelector);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeFQN, isRequired, isMultiValue, values, attributeDetail, isProductImageGroupSelector);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesProductOption {\n");
    sb.append("    attributeFQN: ").append(toIndentedString(attributeFQN)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isMultiValue: ").append(toIndentedString(isMultiValue)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    attributeDetail: ").append(toIndentedString(attributeDetail)).append("\n");
    sb.append("    isProductImageGroupSelector: ").append(toIndentedString(isProductImageGroupSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeFQN");
    openapiFields.add("isRequired");
    openapiFields.add("isMultiValue");
    openapiFields.add("values");
    openapiFields.add("attributeDetail");
    openapiFields.add("isProductImageGroupSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesProductOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesProductOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesProductOption is not found in the empty JSON string", CatalogRuntimesProductOption.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesProductOption.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesProductOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("attributeFQN") != null && !jsonObj.get("attributeFQN").isJsonNull()) && !jsonObj.get("attributeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeFQN").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            CatalogRuntimesProductOptionValue.validateJsonObject(jsonArrayvalues.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `attributeDetail`
      if (jsonObj.get("attributeDetail") != null && !jsonObj.get("attributeDetail").isJsonNull()) {
        AttributeDetail.validateJsonObject(jsonObj.getAsJsonObject("attributeDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesProductOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesProductOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesProductOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesProductOption.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesProductOption>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesProductOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesProductOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesProductOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesProductOption
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesProductOption
  */
  public static CatalogRuntimesProductOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesProductOption.class);
  }

 /**
  * Convert an instance of CatalogRuntimesProductOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

