/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
 */
@ApiModel(description = "Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesProductInventoryInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MANAGE_STOCK = "manageStock";
  @SerializedName(SERIALIZED_NAME_MANAGE_STOCK)
  private Boolean manageStock;

  public static final String SERIALIZED_NAME_OUT_OF_STOCK_BEHAVIOR = "outOfStockBehavior";
  @SerializedName(SERIALIZED_NAME_OUT_OF_STOCK_BEHAVIOR)
  private String outOfStockBehavior;

  public static final String SERIALIZED_NAME_ONLINE_STOCK_AVAILABLE = "onlineStockAvailable";
  @SerializedName(SERIALIZED_NAME_ONLINE_STOCK_AVAILABLE)
  private Integer onlineStockAvailable;

  public static final String SERIALIZED_NAME_ONLINE_SOFT_STOCK_AVAILABLE = "onlineSoftStockAvailable";
  @SerializedName(SERIALIZED_NAME_ONLINE_SOFT_STOCK_AVAILABLE)
  private Integer onlineSoftStockAvailable;

  public static final String SERIALIZED_NAME_ONLINE_LOCATION_CODE = "onlineLocationCode";
  @SerializedName(SERIALIZED_NAME_ONLINE_LOCATION_CODE)
  private String onlineLocationCode;

  public static final String SERIALIZED_NAME_AVAILABLE_DATE = "availableDate";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_DATE)
  private OffsetDateTime availableDate;

  public static final String SERIALIZED_NAME_IS_SUBSTITUTABLE = "isSubstitutable";
  @SerializedName(SERIALIZED_NAME_IS_SUBSTITUTABLE)
  private Boolean isSubstitutable;

  public CatalogRuntimesProductInventoryInfo() {
  }

  public CatalogRuntimesProductInventoryInfo manageStock(Boolean manageStock) {
    
    this.manageStock = manageStock;
    return this;
  }

   /**
   * If true, the Products service manages inventory for this product.
   * @return manageStock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the Products service manages inventory for this product.")

  public Boolean getManageStock() {
    return manageStock;
  }


  public void setManageStock(Boolean manageStock) {
    this.manageStock = manageStock;
  }


  public CatalogRuntimesProductInventoryInfo outOfStockBehavior(String outOfStockBehavior) {
    
    this.outOfStockBehavior = outOfStockBehavior;
    return this;
  }

   /**
   * The behvior when the ManageStock is true and the product is not in stock.
   * @return outOfStockBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The behvior when the ManageStock is true and the product is not in stock.")

  public String getOutOfStockBehavior() {
    return outOfStockBehavior;
  }


  public void setOutOfStockBehavior(String outOfStockBehavior) {
    this.outOfStockBehavior = outOfStockBehavior;
  }


  public CatalogRuntimesProductInventoryInfo onlineStockAvailable(Integer onlineStockAvailable) {
    
    this.onlineStockAvailable = onlineStockAvailable;
    return this;
  }

   /**
   * Number of product items currently available for purchase.
   * @return onlineStockAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of product items currently available for purchase.")

  public Integer getOnlineStockAvailable() {
    return onlineStockAvailable;
  }


  public void setOnlineStockAvailable(Integer onlineStockAvailable) {
    this.onlineStockAvailable = onlineStockAvailable;
  }


  public CatalogRuntimesProductInventoryInfo onlineSoftStockAvailable(Integer onlineSoftStockAvailable) {
    
    this.onlineSoftStockAvailable = onlineSoftStockAvailable;
    return this;
  }

   /**
   * Number of product items currently available for purchase.
   * @return onlineSoftStockAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of product items currently available for purchase.")

  public Integer getOnlineSoftStockAvailable() {
    return onlineSoftStockAvailable;
  }


  public void setOnlineSoftStockAvailable(Integer onlineSoftStockAvailable) {
    this.onlineSoftStockAvailable = onlineSoftStockAvailable;
  }


  public CatalogRuntimesProductInventoryInfo onlineLocationCode(String onlineLocationCode) {
    
    this.onlineLocationCode = onlineLocationCode;
    return this;
  }

   /**
   * Directship location code for OnlineStockAvailable
   * @return onlineLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Directship location code for OnlineStockAvailable")

  public String getOnlineLocationCode() {
    return onlineLocationCode;
  }


  public void setOnlineLocationCode(String onlineLocationCode) {
    this.onlineLocationCode = onlineLocationCode;
  }


  public CatalogRuntimesProductInventoryInfo availableDate(OffsetDateTime availableDate) {
    
    this.availableDate = availableDate;
    return this;
  }

   /**
   * Date the item will become available for back order if out of stock
   * @return availableDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the item will become available for back order if out of stock")

  public OffsetDateTime getAvailableDate() {
    return availableDate;
  }


  public void setAvailableDate(OffsetDateTime availableDate) {
    this.availableDate = availableDate;
  }


  public CatalogRuntimesProductInventoryInfo isSubstitutable(Boolean isSubstitutable) {
    
    this.isSubstitutable = isSubstitutable;
    return this;
  }

   /**
   * ReadOnly flag indicates is the product has substitutions defined
   * @return isSubstitutable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ReadOnly flag indicates is the product has substitutions defined")

  public Boolean getIsSubstitutable() {
    return isSubstitutable;
  }


  public void setIsSubstitutable(Boolean isSubstitutable) {
    this.isSubstitutable = isSubstitutable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesProductInventoryInfo catalogRuntimesProductInventoryInfo = (CatalogRuntimesProductInventoryInfo) o;
    return Objects.equals(this.manageStock, catalogRuntimesProductInventoryInfo.manageStock) &&
        Objects.equals(this.outOfStockBehavior, catalogRuntimesProductInventoryInfo.outOfStockBehavior) &&
        Objects.equals(this.onlineStockAvailable, catalogRuntimesProductInventoryInfo.onlineStockAvailable) &&
        Objects.equals(this.onlineSoftStockAvailable, catalogRuntimesProductInventoryInfo.onlineSoftStockAvailable) &&
        Objects.equals(this.onlineLocationCode, catalogRuntimesProductInventoryInfo.onlineLocationCode) &&
        Objects.equals(this.availableDate, catalogRuntimesProductInventoryInfo.availableDate) &&
        Objects.equals(this.isSubstitutable, catalogRuntimesProductInventoryInfo.isSubstitutable);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(manageStock, outOfStockBehavior, onlineStockAvailable, onlineSoftStockAvailable, onlineLocationCode, availableDate, isSubstitutable);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesProductInventoryInfo {\n");
    sb.append("    manageStock: ").append(toIndentedString(manageStock)).append("\n");
    sb.append("    outOfStockBehavior: ").append(toIndentedString(outOfStockBehavior)).append("\n");
    sb.append("    onlineStockAvailable: ").append(toIndentedString(onlineStockAvailable)).append("\n");
    sb.append("    onlineSoftStockAvailable: ").append(toIndentedString(onlineSoftStockAvailable)).append("\n");
    sb.append("    onlineLocationCode: ").append(toIndentedString(onlineLocationCode)).append("\n");
    sb.append("    availableDate: ").append(toIndentedString(availableDate)).append("\n");
    sb.append("    isSubstitutable: ").append(toIndentedString(isSubstitutable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("manageStock");
    openapiFields.add("outOfStockBehavior");
    openapiFields.add("onlineStockAvailable");
    openapiFields.add("onlineSoftStockAvailable");
    openapiFields.add("onlineLocationCode");
    openapiFields.add("availableDate");
    openapiFields.add("isSubstitutable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesProductInventoryInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesProductInventoryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesProductInventoryInfo is not found in the empty JSON string", CatalogRuntimesProductInventoryInfo.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesProductInventoryInfo.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesProductInventoryInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("outOfStockBehavior") != null && !jsonObj.get("outOfStockBehavior").isJsonNull()) && !jsonObj.get("outOfStockBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outOfStockBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outOfStockBehavior").toString()));
      }
      if ((jsonObj.get("onlineLocationCode") != null && !jsonObj.get("onlineLocationCode").isJsonNull()) && !jsonObj.get("onlineLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onlineLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onlineLocationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesProductInventoryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesProductInventoryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesProductInventoryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesProductInventoryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesProductInventoryInfo>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesProductInventoryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesProductInventoryInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesProductInventoryInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesProductInventoryInfo
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesProductInventoryInfo
  */
  public static CatalogRuntimesProductInventoryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesProductInventoryInfo.class);
  }

 /**
  * Convert an instance of CatalogRuntimesProductInventoryInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

