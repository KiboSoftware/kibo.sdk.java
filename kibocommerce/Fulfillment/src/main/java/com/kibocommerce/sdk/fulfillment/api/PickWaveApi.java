/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.fulfillment.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.fulfillment.models.ClosePickWave;
import com.kibocommerce.sdk.fulfillment.models.CollectionModelOfPickWave;
import com.kibocommerce.sdk.fulfillment.models.CollectionModelOfShipment;
import com.kibocommerce.sdk.fulfillment.models.CreatePickWave;
import com.kibocommerce.sdk.fulfillment.models.EntityModelOfPickWave;
import com.kibocommerce.sdk.fulfillment.models.EntityModelOfPickWaveDetail;
import com.kibocommerce.sdk.fulfillment.models.EntityModelOfstring;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PickWaveApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public PickWaveApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PickWaveApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public PickWaveApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public PickWaveApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public PickWaveApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for closePickWaveUsingPUT
     * @param pickWaveNumber pickWaveNumber (required)
     * @param closePickWave  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closePickWaveUsingPUTCall(Integer pickWaveNumber, ClosePickWave closePickWave, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closePickWave;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}/closed"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closePickWaveUsingPUTValidateBeforeCall(Integer pickWaveNumber, ClosePickWave closePickWave, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling closePickWaveUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = closePickWaveUsingPUTCall(pickWaveNumber, closePickWave, _callback);
        return localVarCall;

    }

    /**
     * Close Pick Wave
     * Close Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param closePickWave  (optional)
     * @return EntityModelOfPickWave
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfPickWave closePickWaveUsingPUT(Integer pickWaveNumber, ClosePickWave closePickWave) throws ApiException {
        ApiResponse<EntityModelOfPickWave> localVarResp = closePickWaveUsingPUTWithHttpInfo(pickWaveNumber, closePickWave);
        return localVarResp.getData();
    }

    /**
     * Close Pick Wave
     * Close Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param closePickWave  (optional)
     * @return ApiResponse&lt;EntityModelOfPickWave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfPickWave> closePickWaveUsingPUTWithHttpInfo(Integer pickWaveNumber, ClosePickWave closePickWave) throws ApiException {
        okhttp3.Call localVarCall = closePickWaveUsingPUTValidateBeforeCall(pickWaveNumber, closePickWave, null);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Close Pick Wave (asynchronously)
     * Close Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param closePickWave  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closePickWaveUsingPUTAsync(Integer pickWaveNumber, ClosePickWave closePickWave, final ApiCallback<EntityModelOfPickWave> _callback) throws ApiException {

        okhttp3.Call localVarCall = closePickWaveUsingPUTValidateBeforeCall(pickWaveNumber, closePickWave, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPickWaveUsingPOST
     * @param createPickWave  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPickWaveUsingPOSTCall(CreatePickWave createPickWave, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPickWave;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPickWaveUsingPOSTValidateBeforeCall(CreatePickWave createPickWave, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createPickWaveUsingPOSTCall(createPickWave, _callback);
        return localVarCall;

    }

    /**
     * Create Pick Wave
     * Create Pick Wave
     * @param createPickWave  (optional)
     * @return EntityModelOfPickWave
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfPickWave createPickWaveUsingPOST(CreatePickWave createPickWave) throws ApiException {
        ApiResponse<EntityModelOfPickWave> localVarResp = createPickWaveUsingPOSTWithHttpInfo(createPickWave);
        return localVarResp.getData();
    }

    /**
     * Create Pick Wave
     * Create Pick Wave
     * @param createPickWave  (optional)
     * @return ApiResponse&lt;EntityModelOfPickWave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfPickWave> createPickWaveUsingPOSTWithHttpInfo(CreatePickWave createPickWave) throws ApiException {
        okhttp3.Call localVarCall = createPickWaveUsingPOSTValidateBeforeCall(createPickWave, null);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Pick Wave (asynchronously)
     * Create Pick Wave
     * @param createPickWave  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPickWaveUsingPOSTAsync(CreatePickWave createPickWave, final ApiCallback<EntityModelOfPickWave> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPickWaveUsingPOSTValidateBeforeCall(createPickWave, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOpenPickWavesUsingGET
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param shipmentType shipmentType (optional)
     * @param userId userId (optional)
     * @param userDisplayName userDisplayName (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOpenPickWavesUsingGETCall(String fulfillmentLocationCode, String shipmentType, String userId, String userDisplayName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/open/{fulfillmentLocationCode}"
            .replaceAll("\\{" + "fulfillmentLocationCode" + "\\}", localVarApiClient.escapeString(fulfillmentLocationCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipmentType", shipmentType));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userDisplayName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userDisplayName", userDisplayName));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpenPickWavesUsingGETValidateBeforeCall(String fulfillmentLocationCode, String shipmentType, String userId, String userDisplayName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fulfillmentLocationCode' is set
        if (fulfillmentLocationCode == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLocationCode' when calling getOpenPickWavesUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getOpenPickWavesUsingGETCall(fulfillmentLocationCode, shipmentType, userId, userDisplayName, _callback);
        return localVarCall;

    }

    /**
     * Get Open Pick Waves
     * Get Open Pick Waves
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param shipmentType shipmentType (optional)
     * @param userId userId (optional)
     * @param userDisplayName userDisplayName (optional)
     * @return CollectionModelOfPickWave
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionModelOfPickWave getOpenPickWavesUsingGET(String fulfillmentLocationCode, String shipmentType, String userId, String userDisplayName) throws ApiException {
        ApiResponse<CollectionModelOfPickWave> localVarResp = getOpenPickWavesUsingGETWithHttpInfo(fulfillmentLocationCode, shipmentType, userId, userDisplayName);
        return localVarResp.getData();
    }

    /**
     * Get Open Pick Waves
     * Get Open Pick Waves
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param shipmentType shipmentType (optional)
     * @param userId userId (optional)
     * @param userDisplayName userDisplayName (optional)
     * @return ApiResponse&lt;CollectionModelOfPickWave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionModelOfPickWave> getOpenPickWavesUsingGETWithHttpInfo(String fulfillmentLocationCode, String shipmentType, String userId, String userDisplayName) throws ApiException {
        okhttp3.Call localVarCall = getOpenPickWavesUsingGETValidateBeforeCall(fulfillmentLocationCode, shipmentType, userId, userDisplayName, null);
        Type localVarReturnType = new TypeToken<CollectionModelOfPickWave>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Open Pick Waves (asynchronously)
     * Get Open Pick Waves
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param shipmentType shipmentType (optional)
     * @param userId userId (optional)
     * @param userDisplayName userDisplayName (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOpenPickWavesUsingGETAsync(String fulfillmentLocationCode, String shipmentType, String userId, String userDisplayName, final ApiCallback<CollectionModelOfPickWave> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpenPickWavesUsingGETValidateBeforeCall(fulfillmentLocationCode, shipmentType, userId, userDisplayName, _callback);
        Type localVarReturnType = new TypeToken<CollectionModelOfPickWave>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPickWaveDetailsUsingGET
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContentsByLocator sortContentsByLocator (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickWaveDetailsUsingGETCall(Integer pickWaveNumber, String sortContentsByLocator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}/pickWaveDetails"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortContentsByLocator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortContentsByLocator", sortContentsByLocator));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPickWaveDetailsUsingGETValidateBeforeCall(Integer pickWaveNumber, String sortContentsByLocator, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling getPickWaveDetailsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPickWaveDetailsUsingGETCall(pickWaveNumber, sortContentsByLocator, _callback);
        return localVarCall;

    }

    /**
     * Get Pick Wave Details
     * Get Pick Wave Details
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContentsByLocator sortContentsByLocator (optional)
     * @return EntityModelOfPickWaveDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfPickWaveDetail getPickWaveDetailsUsingGET(Integer pickWaveNumber, String sortContentsByLocator) throws ApiException {
        ApiResponse<EntityModelOfPickWaveDetail> localVarResp = getPickWaveDetailsUsingGETWithHttpInfo(pickWaveNumber, sortContentsByLocator);
        return localVarResp.getData();
    }

    /**
     * Get Pick Wave Details
     * Get Pick Wave Details
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContentsByLocator sortContentsByLocator (optional)
     * @return ApiResponse&lt;EntityModelOfPickWaveDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfPickWaveDetail> getPickWaveDetailsUsingGETWithHttpInfo(Integer pickWaveNumber, String sortContentsByLocator) throws ApiException {
        okhttp3.Call localVarCall = getPickWaveDetailsUsingGETValidateBeforeCall(pickWaveNumber, sortContentsByLocator, null);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWaveDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Pick Wave Details (asynchronously)
     * Get Pick Wave Details
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContentsByLocator sortContentsByLocator (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickWaveDetailsUsingGETAsync(Integer pickWaveNumber, String sortContentsByLocator, final ApiCallback<EntityModelOfPickWaveDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPickWaveDetailsUsingGETValidateBeforeCall(pickWaveNumber, sortContentsByLocator, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWaveDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPickWaveUsingGET
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContents  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickWaveUsingGETCall(Integer pickWaveNumber, String sortContents, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortContents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortContents", sortContents));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPickWaveUsingGETValidateBeforeCall(Integer pickWaveNumber, String sortContents, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling getPickWaveUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getPickWaveUsingGETCall(pickWaveNumber, sortContents, _callback);
        return localVarCall;

    }

    /**
     * Get Pick Wave
     * Get Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContents  (optional)
     * @return EntityModelOfPickWave
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfPickWave getPickWaveUsingGET(Integer pickWaveNumber, String sortContents) throws ApiException {
        ApiResponse<EntityModelOfPickWave> localVarResp = getPickWaveUsingGETWithHttpInfo(pickWaveNumber, sortContents);
        return localVarResp.getData();
    }

    /**
     * Get Pick Wave
     * Get Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContents  (optional)
     * @return ApiResponse&lt;EntityModelOfPickWave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfPickWave> getPickWaveUsingGETWithHttpInfo(Integer pickWaveNumber, String sortContents) throws ApiException {
        okhttp3.Call localVarCall = getPickWaveUsingGETValidateBeforeCall(pickWaveNumber, sortContents, null);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Pick Wave (asynchronously)
     * Get Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param sortContents  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickWaveUsingGETAsync(Integer pickWaveNumber, String sortContents, final ApiCallback<EntityModelOfPickWave> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPickWaveUsingGETValidateBeforeCall(pickWaveNumber, sortContents, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfPickWave>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipmentsInPickWaveUsingGET
     * @param pickWaveNumber pickWaveNumber (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentsInPickWaveUsingGETCall(Integer pickWaveNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}/shipments"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentsInPickWaveUsingGETValidateBeforeCall(Integer pickWaveNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling getShipmentsInPickWaveUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getShipmentsInPickWaveUsingGETCall(pickWaveNumber, _callback);
        return localVarCall;

    }

    /**
     * Get Shipments in Pick Wave
     * Get Shipments in Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @return CollectionModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionModelOfShipment getShipmentsInPickWaveUsingGET(Integer pickWaveNumber) throws ApiException {
        ApiResponse<CollectionModelOfShipment> localVarResp = getShipmentsInPickWaveUsingGETWithHttpInfo(pickWaveNumber);
        return localVarResp.getData();
    }

    /**
     * Get Shipments in Pick Wave
     * Get Shipments in Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @return ApiResponse&lt;CollectionModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionModelOfShipment> getShipmentsInPickWaveUsingGETWithHttpInfo(Integer pickWaveNumber) throws ApiException {
        okhttp3.Call localVarCall = getShipmentsInPickWaveUsingGETValidateBeforeCall(pickWaveNumber, null);
        Type localVarReturnType = new TypeToken<CollectionModelOfShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipments in Pick Wave (asynchronously)
     * Get Shipments in Pick Wave
     * @param pickWaveNumber pickWaveNumber (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentsInPickWaveUsingGETAsync(Integer pickWaveNumber, final ApiCallback<CollectionModelOfShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentsInPickWaveUsingGETValidateBeforeCall(pickWaveNumber, _callback);
        Type localVarReturnType = new TypeToken<CollectionModelOfShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renderOrderPickSheetsUsingGET
     * @param pickWaveNumber pickWaveNumber (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderOrderPickSheetsUsingGETCall(Integer pickWaveNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}/order-pick-sheets/html"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderOrderPickSheetsUsingGETValidateBeforeCall(Integer pickWaveNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling renderOrderPickSheetsUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = renderOrderPickSheetsUsingGETCall(pickWaveNumber, _callback);
        return localVarCall;

    }

    /**
     * Render Pick Wave Order Sheets
     * Render pick wave order pick sheets in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @return EntityModelOfstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfstring renderOrderPickSheetsUsingGET(Integer pickWaveNumber) throws ApiException {
        ApiResponse<EntityModelOfstring> localVarResp = renderOrderPickSheetsUsingGETWithHttpInfo(pickWaveNumber);
        return localVarResp.getData();
    }

    /**
     * Render Pick Wave Order Sheets
     * Render pick wave order pick sheets in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @return ApiResponse&lt;EntityModelOfstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfstring> renderOrderPickSheetsUsingGETWithHttpInfo(Integer pickWaveNumber) throws ApiException {
        okhttp3.Call localVarCall = renderOrderPickSheetsUsingGETValidateBeforeCall(pickWaveNumber, null);
        Type localVarReturnType = new TypeToken<EntityModelOfstring>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Render Pick Wave Order Sheets (asynchronously)
     * Render pick wave order pick sheets in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderOrderPickSheetsUsingGETAsync(Integer pickWaveNumber, final ApiCallback<EntityModelOfstring> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderOrderPickSheetsUsingGETValidateBeforeCall(pickWaveNumber, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfstring>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renderPickWaveUsingGET
     * @param pickWaveNumber pickWaveNumber (required)
     * @param printPickWave printPickWave (optional)
     * @param printPackingLists printPackingLists (optional)
     * @param printSingleOrderSheets printSingleOrderSheets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderPickWaveUsingGETCall(Integer pickWaveNumber, Boolean printPickWave, Boolean printPackingLists, Boolean printSingleOrderSheets, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/pickwaves/{pickWaveNumber}/rendition/html"
            .replaceAll("\\{" + "pickWaveNumber" + "\\}", localVarApiClient.escapeString(pickWaveNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (printPickWave != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printPickWave", printPickWave));
        }

        if (printPackingLists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printPackingLists", printPackingLists));
        }

        if (printSingleOrderSheets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("printSingleOrderSheets", printSingleOrderSheets));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderPickWaveUsingGETValidateBeforeCall(Integer pickWaveNumber, Boolean printPickWave, Boolean printPackingLists, Boolean printSingleOrderSheets, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pickWaveNumber' is set
        if (pickWaveNumber == null) {
            throw new ApiException("Missing the required parameter 'pickWaveNumber' when calling renderPickWaveUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = renderPickWaveUsingGETCall(pickWaveNumber, printPickWave, printPackingLists, printSingleOrderSheets, _callback);
        return localVarCall;

    }

    /**
     * Render Pick Wave
     * Render pick wave in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @param printPickWave printPickWave (optional)
     * @param printPackingLists printPackingLists (optional)
     * @param printSingleOrderSheets printSingleOrderSheets (optional)
     * @return EntityModelOfstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfstring renderPickWaveUsingGET(Integer pickWaveNumber, Boolean printPickWave, Boolean printPackingLists, Boolean printSingleOrderSheets) throws ApiException {
        ApiResponse<EntityModelOfstring> localVarResp = renderPickWaveUsingGETWithHttpInfo(pickWaveNumber, printPickWave, printPackingLists, printSingleOrderSheets);
        return localVarResp.getData();
    }

    /**
     * Render Pick Wave
     * Render pick wave in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @param printPickWave printPickWave (optional)
     * @param printPackingLists printPackingLists (optional)
     * @param printSingleOrderSheets printSingleOrderSheets (optional)
     * @return ApiResponse&lt;EntityModelOfstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfstring> renderPickWaveUsingGETWithHttpInfo(Integer pickWaveNumber, Boolean printPickWave, Boolean printPackingLists, Boolean printSingleOrderSheets) throws ApiException {
        okhttp3.Call localVarCall = renderPickWaveUsingGETValidateBeforeCall(pickWaveNumber, printPickWave, printPackingLists, printSingleOrderSheets, null);
        Type localVarReturnType = new TypeToken<EntityModelOfstring>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Render Pick Wave (asynchronously)
     * Render pick wave in HTML format for printing
     * @param pickWaveNumber pickWaveNumber (required)
     * @param printPickWave printPickWave (optional)
     * @param printPackingLists printPackingLists (optional)
     * @param printSingleOrderSheets printSingleOrderSheets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renderPickWaveUsingGETAsync(Integer pickWaveNumber, Boolean printPickWave, Boolean printPackingLists, Boolean printSingleOrderSheets, final ApiCallback<EntityModelOfstring> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderPickWaveUsingGETValidateBeforeCall(pickWaveNumber, printPickWave, printPackingLists, printSingleOrderSheets, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfstring>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public PickWaveApi build() {
            return new PickWaveApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
