/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.CustomerCheckoutSettings;
import com.kibocommerce.sdk.settings.models.OrderProcessingSettings;
import com.kibocommerce.sdk.settings.models.PaymentSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Checkout and payment settings defined for this site. Can set which payment gateway to use, whether a shopper is required to login to place an order,  when credit cards are authorized and charged (when the order is placed or shipped), and, in the future,   whether the checkout page displays an option for shoppers to receive your email marketing campaigns.
 */
@ApiModel(description = "Checkout and payment settings defined for this site. Can set which payment gateway to use, whether a shopper is required to login to place an order,  when credit cards are authorized and charged (when the order is placed or shipped), and, in the future,   whether the checkout page displays an option for shoppers to receive your email marketing campaigns.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckoutSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PAYMENT_SETTINGS = "paymentSettings";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SETTINGS)
  private PaymentSettings paymentSettings;

  public static final String SERIALIZED_NAME_CUSTOMER_CHECKOUT_SETTINGS = "customerCheckoutSettings";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CHECKOUT_SETTINGS)
  private CustomerCheckoutSettings customerCheckoutSettings;

  public static final String SERIALIZED_NAME_ORDER_PROCESSING_SETTINGS = "orderProcessingSettings";
  @SerializedName(SERIALIZED_NAME_ORDER_PROCESSING_SETTINGS)
  private OrderProcessingSettings orderProcessingSettings;

  public CheckoutSettings() {
  }

  public CheckoutSettings paymentSettings(PaymentSettings paymentSettings) {
    
    this.paymentSettings = paymentSettings;
    return this;
  }

   /**
   * Get paymentSettings
   * @return paymentSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentSettings getPaymentSettings() {
    return paymentSettings;
  }


  public void setPaymentSettings(PaymentSettings paymentSettings) {
    this.paymentSettings = paymentSettings;
  }


  public CheckoutSettings customerCheckoutSettings(CustomerCheckoutSettings customerCheckoutSettings) {
    
    this.customerCheckoutSettings = customerCheckoutSettings;
    return this;
  }

   /**
   * Get customerCheckoutSettings
   * @return customerCheckoutSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomerCheckoutSettings getCustomerCheckoutSettings() {
    return customerCheckoutSettings;
  }


  public void setCustomerCheckoutSettings(CustomerCheckoutSettings customerCheckoutSettings) {
    this.customerCheckoutSettings = customerCheckoutSettings;
  }


  public CheckoutSettings orderProcessingSettings(OrderProcessingSettings orderProcessingSettings) {
    
    this.orderProcessingSettings = orderProcessingSettings;
    return this;
  }

   /**
   * Get orderProcessingSettings
   * @return orderProcessingSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderProcessingSettings getOrderProcessingSettings() {
    return orderProcessingSettings;
  }


  public void setOrderProcessingSettings(OrderProcessingSettings orderProcessingSettings) {
    this.orderProcessingSettings = orderProcessingSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutSettings checkoutSettings = (CheckoutSettings) o;
    return Objects.equals(this.paymentSettings, checkoutSettings.paymentSettings) &&
        Objects.equals(this.customerCheckoutSettings, checkoutSettings.customerCheckoutSettings) &&
        Objects.equals(this.orderProcessingSettings, checkoutSettings.orderProcessingSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentSettings, customerCheckoutSettings, orderProcessingSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutSettings {\n");
    sb.append("    paymentSettings: ").append(toIndentedString(paymentSettings)).append("\n");
    sb.append("    customerCheckoutSettings: ").append(toIndentedString(customerCheckoutSettings)).append("\n");
    sb.append("    orderProcessingSettings: ").append(toIndentedString(orderProcessingSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentSettings");
    openapiFields.add("customerCheckoutSettings");
    openapiFields.add("orderProcessingSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutSettings is not found in the empty JSON string", CheckoutSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CheckoutSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `paymentSettings`
      if (jsonObj.get("paymentSettings") != null && !jsonObj.get("paymentSettings").isJsonNull()) {
        PaymentSettings.validateJsonObject(jsonObj.getAsJsonObject("paymentSettings"));
      }
      // validate the optional field `customerCheckoutSettings`
      if (jsonObj.get("customerCheckoutSettings") != null && !jsonObj.get("customerCheckoutSettings").isJsonNull()) {
        CustomerCheckoutSettings.validateJsonObject(jsonObj.getAsJsonObject("customerCheckoutSettings"));
      }
      // validate the optional field `orderProcessingSettings`
      if (jsonObj.get("orderProcessingSettings") != null && !jsonObj.get("orderProcessingSettings").isJsonNull()) {
        OrderProcessingSettings.validateJsonObject(jsonObj.getAsJsonObject("orderProcessingSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutSettings>() {
           @Override
           public void write(JsonWriter out, CheckoutSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutSettings
  * @throws IOException if the JSON string is invalid with respect to CheckoutSettings
  */
  public static CheckoutSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutSettings.class);
  }

 /**
  * Convert an instance of CheckoutSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

