/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ReCaptchaSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReCaptchaSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SITE_KEY = "siteKey";
  @SerializedName(SERIALIZED_NAME_SITE_KEY)
  private String siteKey;

  public static final String SERIALIZED_NAME_VALID_SCORE = "validScore";
  @SerializedName(SERIALIZED_NAME_VALID_SCORE)
  private Double validScore;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<String> actions = null;

  public ReCaptchaSettings() {
  }

  public ReCaptchaSettings siteKey(String siteKey) {
    
    this.siteKey = siteKey;
    return this;
  }

   /**
   * Get siteKey
   * @return siteKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSiteKey() {
    return siteKey;
  }


  public void setSiteKey(String siteKey) {
    this.siteKey = siteKey;
  }


  public ReCaptchaSettings validScore(Double validScore) {
    
    this.validScore = validScore;
    return this;
  }

   /**
   * Get validScore
   * @return validScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getValidScore() {
    return validScore;
  }


  public void setValidScore(Double validScore) {
    this.validScore = validScore;
  }


  public ReCaptchaSettings secret(String secret) {
    
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    this.secret = secret;
  }


  public ReCaptchaSettings actions(List<String> actions) {
    
    this.actions = actions;
    return this;
  }

  public ReCaptchaSettings addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getActions() {
    return actions;
  }


  public void setActions(List<String> actions) {
    this.actions = actions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReCaptchaSettings reCaptchaSettings = (ReCaptchaSettings) o;
    return Objects.equals(this.siteKey, reCaptchaSettings.siteKey) &&
        Objects.equals(this.validScore, reCaptchaSettings.validScore) &&
        Objects.equals(this.secret, reCaptchaSettings.secret) &&
        Objects.equals(this.actions, reCaptchaSettings.actions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(siteKey, validScore, secret, actions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReCaptchaSettings {\n");
    sb.append("    siteKey: ").append(toIndentedString(siteKey)).append("\n");
    sb.append("    validScore: ").append(toIndentedString(validScore)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("siteKey");
    openapiFields.add("validScore");
    openapiFields.add("secret");
    openapiFields.add("actions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReCaptchaSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReCaptchaSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReCaptchaSettings is not found in the empty JSON string", ReCaptchaSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ReCaptchaSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReCaptchaSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("siteKey") != null && !jsonObj.get("siteKey").isJsonNull()) && !jsonObj.get("siteKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteKey").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReCaptchaSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReCaptchaSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReCaptchaSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReCaptchaSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ReCaptchaSettings>() {
           @Override
           public void write(JsonWriter out, ReCaptchaSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReCaptchaSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReCaptchaSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReCaptchaSettings
  * @throws IOException if the JSON string is invalid with respect to ReCaptchaSettings
  */
  public static ReCaptchaSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReCaptchaSettings.class);
  }

 /**
  * Convert an instance of ReCaptchaSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

