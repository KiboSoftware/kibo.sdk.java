/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.AdminUserAuditInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Checkout requirements for customers, for example, whether they must login before purchasing from your store.   Other customized checkout requirements can be defined.
 */
@ApiModel(description = "Checkout requirements for customers, for example, whether they must login before purchasing from your store.   Other customized checkout requirements can be defined.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerCheckoutSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CUSTOMER_CHECKOUT_TYPE = "customerCheckoutType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CHECKOUT_TYPE)
  private String customerCheckoutType;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public CustomerCheckoutSettings() {
  }

  public CustomerCheckoutSettings customerCheckoutType(String customerCheckoutType) {
    
    this.customerCheckoutType = customerCheckoutType;
    return this;
  }

   /**
   * Checkout login setting. Value can be either \&quot;LoginOptional,\&quot; where shoppers are prompted to sign in  but are not required to do so, or \&quot;LoginRequired,\&quot; where shopppers must login before purchasing.
   * @return customerCheckoutType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Checkout login setting. Value can be either \"LoginOptional,\" where shoppers are prompted to sign in  but are not required to do so, or \"LoginRequired,\" where shopppers must login before purchasing.")

  public String getCustomerCheckoutType() {
    return customerCheckoutType;
  }


  public void setCustomerCheckoutType(String customerCheckoutType) {
    this.customerCheckoutType = customerCheckoutType;
  }


  public CustomerCheckoutSettings auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerCheckoutSettings customerCheckoutSettings = (CustomerCheckoutSettings) o;
    return Objects.equals(this.customerCheckoutType, customerCheckoutSettings.customerCheckoutType) &&
        Objects.equals(this.auditInfo, customerCheckoutSettings.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerCheckoutType, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerCheckoutSettings {\n");
    sb.append("    customerCheckoutType: ").append(toIndentedString(customerCheckoutType)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerCheckoutType");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerCheckoutSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerCheckoutSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerCheckoutSettings is not found in the empty JSON string", CustomerCheckoutSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomerCheckoutSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerCheckoutSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("customerCheckoutType") != null && !jsonObj.get("customerCheckoutType").isJsonNull()) && !jsonObj.get("customerCheckoutType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCheckoutType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCheckoutType").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerCheckoutSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerCheckoutSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerCheckoutSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerCheckoutSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerCheckoutSettings>() {
           @Override
           public void write(JsonWriter out, CustomerCheckoutSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerCheckoutSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerCheckoutSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerCheckoutSettings
  * @throws IOException if the JSON string is invalid with respect to CustomerCheckoutSettings
  */
  public static CustomerCheckoutSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerCheckoutSettings.class);
  }

 /**
  * Convert an instance of CustomerCheckoutSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

