/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.ThirdPartyCredentialField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * This class describes credentials and enablement for the various third-party payment workflows that we will integrate with.  Examples include Paypal Express, Amazon Payments, Google Wallet, etc.
 */
@ApiModel(description = "This class describes credentials and enablement for the various third-party payment workflows that we will integrate with.  Examples include Paypal Express, Amazon Payments, Google Wallet, etc.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExternalPaymentWorkflowDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_NAME = "fullyQualifiedName";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_NAME)
  private String fullyQualifiedName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_LEGACY = "isLegacy";
  @SerializedName(SERIALIZED_NAME_IS_LEGACY)
  private Boolean isLegacy;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private List<ThirdPartyCredentialField> credentials = null;

  public ExternalPaymentWorkflowDefinition() {
  }

  public ExternalPaymentWorkflowDefinition name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Should be one of Contracts.Constants.ThirdPartyWorkflowNames.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should be one of Contracts.Constants.ThirdPartyWorkflowNames.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ExternalPaymentWorkflowDefinition namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public ExternalPaymentWorkflowDefinition fullyQualifiedName(String fullyQualifiedName) {
    
    this.fullyQualifiedName = fullyQualifiedName;
    return this;
  }

   /**
   * Get fullyQualifiedName
   * @return fullyQualifiedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullyQualifiedName() {
    return fullyQualifiedName;
  }


  public void setFullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
  }


  public ExternalPaymentWorkflowDefinition description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Information about this definition for display purposes in the &#39;Payment and Checkout Settings&#39;  admin ui.  This field may contain valid html tags
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about this definition for display purposes in the 'Payment and Checkout Settings'  admin ui.  This field may contain valid html tags")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ExternalPaymentWorkflowDefinition isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ExternalPaymentWorkflowDefinition isLegacy(Boolean isLegacy) {
    
    this.isLegacy = isLegacy;
    return this;
  }

   /**
   * Indicates if this is a legacy implementation using ARC only  or using the new extensible implementation.
   * @return isLegacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if this is a legacy implementation using ARC only  or using the new extensible implementation.")

  public Boolean getIsLegacy() {
    return isLegacy;
  }


  public void setIsLegacy(Boolean isLegacy) {
    this.isLegacy = isLegacy;
  }


  public ExternalPaymentWorkflowDefinition credentials(List<ThirdPartyCredentialField> credentials) {
    
    this.credentials = credentials;
    return this;
  }

  public ExternalPaymentWorkflowDefinition addCredentialsItem(ThirdPartyCredentialField credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ThirdPartyCredentialField> getCredentials() {
    return credentials;
  }


  public void setCredentials(List<ThirdPartyCredentialField> credentials) {
    this.credentials = credentials;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition = (ExternalPaymentWorkflowDefinition) o;
    return Objects.equals(this.name, externalPaymentWorkflowDefinition.name) &&
        Objects.equals(this.namespace, externalPaymentWorkflowDefinition.namespace) &&
        Objects.equals(this.fullyQualifiedName, externalPaymentWorkflowDefinition.fullyQualifiedName) &&
        Objects.equals(this.description, externalPaymentWorkflowDefinition.description) &&
        Objects.equals(this.isEnabled, externalPaymentWorkflowDefinition.isEnabled) &&
        Objects.equals(this.isLegacy, externalPaymentWorkflowDefinition.isLegacy) &&
        Objects.equals(this.credentials, externalPaymentWorkflowDefinition.credentials);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, namespace, fullyQualifiedName, description, isEnabled, isLegacy, credentials);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalPaymentWorkflowDefinition {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    fullyQualifiedName: ").append(toIndentedString(fullyQualifiedName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isLegacy: ").append(toIndentedString(isLegacy)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("fullyQualifiedName");
    openapiFields.add("description");
    openapiFields.add("isEnabled");
    openapiFields.add("isLegacy");
    openapiFields.add("credentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExternalPaymentWorkflowDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExternalPaymentWorkflowDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalPaymentWorkflowDefinition is not found in the empty JSON string", ExternalPaymentWorkflowDefinition.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ExternalPaymentWorkflowDefinition.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalPaymentWorkflowDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("fullyQualifiedName") != null && !jsonObj.get("fullyQualifiedName").isJsonNull()) && !jsonObj.get("fullyQualifiedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        JsonArray jsonArraycredentials = jsonObj.getAsJsonArray("credentials");
        if (jsonArraycredentials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentials` to be an array in the JSON string but got `%s`", jsonObj.get("credentials").toString()));
          }

          // validate the optional field `credentials` (array)
          for (int i = 0; i < jsonArraycredentials.size(); i++) {
            ThirdPartyCredentialField.validateJsonObject(jsonArraycredentials.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalPaymentWorkflowDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalPaymentWorkflowDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalPaymentWorkflowDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalPaymentWorkflowDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalPaymentWorkflowDefinition>() {
           @Override
           public void write(JsonWriter out, ExternalPaymentWorkflowDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalPaymentWorkflowDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExternalPaymentWorkflowDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExternalPaymentWorkflowDefinition
  * @throws IOException if the JSON string is invalid with respect to ExternalPaymentWorkflowDefinition
  */
  public static ExternalPaymentWorkflowDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalPaymentWorkflowDefinition.class);
  }

 /**
  * Convert an instance of ExternalPaymentWorkflowDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

