/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.settings.models.ThirdPartyPaymentSetting;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Order processing (credit card payment authorization) setting defined for this site.   Can choose when the shopper’s credit card is authorized and charged. Possibilities include, \&quot;authorize and charge the shopper&#39;s credit card for the full   order amount when the order is placed,\&quot; \&quot;authorize the shopper&#39;s credit card for the full amount when the order is placed and charge the credit card when the order is shipped,\&quot; or   \&quot;authorize and charge the shopper&#39;s credit card for the full amount when the order is shipped.\&quot;
 */
@ApiModel(description = "Order processing (credit card payment authorization) setting defined for this site.   Can choose when the shopper’s credit card is authorized and charged. Possibilities include, \"authorize and charge the shopper's credit card for the full   order amount when the order is placed,\" \"authorize the shopper's credit card for the full amount when the order is placed and charge the credit card when the order is shipped,\" or   \"authorize and charge the shopper's credit card for the full amount when the order is shipped.\"")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OrderProcessingSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PAYMENT_PROCESSING_FLOW_TYPE = "paymentProcessingFlowType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROCESSING_FLOW_TYPE)
  private String paymentProcessingFlowType;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_USE_OVERRIDE_PRICE_TO_CALCULATE_DISCOUNTS = "useOverridePriceToCalculateDiscounts";
  @SerializedName(SERIALIZED_NAME_USE_OVERRIDE_PRICE_TO_CALCULATE_DISCOUNTS)
  private Boolean useOverridePriceToCalculateDiscounts;

  public static final String SERIALIZED_NAME_ABANDONED_ORDER_THRESHOLD_IN_MINUTES = "abandonedOrderThresholdInMinutes";
  @SerializedName(SERIALIZED_NAME_ABANDONED_ORDER_THRESHOLD_IN_MINUTES)
  private Integer abandonedOrderThresholdInMinutes;

  public static final String SERIALIZED_NAME_GIFT_CARD_PROCESSING_TYPE = "giftCardProcessingType";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_PROCESSING_TYPE)
  private String giftCardProcessingType;

  public static final String SERIALIZED_NAME_GIFT_CARD_REFUND_CREDIT_PROCESSING_TYPE = "giftCardRefundCreditProcessingType";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_REFUND_CREDIT_PROCESSING_TYPE)
  private String giftCardRefundCreditProcessingType;

  public static final String SERIALIZED_NAME_THIRD_PARTY_PAYMENT_SETTINGS = "thirdPartyPaymentSettings";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_PAYMENT_SETTINGS)
  private List<ThirdPartyPaymentSetting> thirdPartyPaymentSettings = null;

  public OrderProcessingSettings() {
  }

  public OrderProcessingSettings paymentProcessingFlowType(String paymentProcessingFlowType) {
    
    this.paymentProcessingFlowType = paymentProcessingFlowType;
    return this;
  }

   /**
   * Credit card payment authorization setting. Options can be authorize and charge the shopper&#39;s credit card when the order is placed, \&quot;AuthorizeAndCaptureOnOrderPlacement,\&quot;   authorize the shopper&#39;s credit card when the order is placed and charge the credit card when the shipped, \&quot;AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\&quot;   or authorize and charge the shopper&#39;s credit card for the full amount when the order is shipped, \&quot;AuthorizeAndCaptureOnOrderShipment.\&quot;
   * @return paymentProcessingFlowType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, \"AuthorizeAndCaptureOnOrderPlacement,\"   authorize the shopper's credit card when the order is placed and charge the credit card when the shipped, \"AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\"   or authorize and charge the shopper's credit card for the full amount when the order is shipped, \"AuthorizeAndCaptureOnOrderShipment.\"")

  public String getPaymentProcessingFlowType() {
    return paymentProcessingFlowType;
  }


  public void setPaymentProcessingFlowType(String paymentProcessingFlowType) {
    this.paymentProcessingFlowType = paymentProcessingFlowType;
  }


  public OrderProcessingSettings auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public OrderProcessingSettings useOverridePriceToCalculateDiscounts(Boolean useOverridePriceToCalculateDiscounts) {
    
    this.useOverridePriceToCalculateDiscounts = useOverridePriceToCalculateDiscounts;
    return this;
  }

   /**
   * Use the override price on products to calculate discounts
   * @return useOverridePriceToCalculateDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use the override price on products to calculate discounts")

  public Boolean getUseOverridePriceToCalculateDiscounts() {
    return useOverridePriceToCalculateDiscounts;
  }


  public void setUseOverridePriceToCalculateDiscounts(Boolean useOverridePriceToCalculateDiscounts) {
    this.useOverridePriceToCalculateDiscounts = useOverridePriceToCalculateDiscounts;
  }


  public OrderProcessingSettings abandonedOrderThresholdInMinutes(Integer abandonedOrderThresholdInMinutes) {
    
    this.abandonedOrderThresholdInMinutes = abandonedOrderThresholdInMinutes;
    return this;
  }

   /**
   * Abandoned Order Threshold in minutes indicates the number of minutes until a pending order is considered abandoned.
   * @return abandonedOrderThresholdInMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Abandoned Order Threshold in minutes indicates the number of minutes until a pending order is considered abandoned.")

  public Integer getAbandonedOrderThresholdInMinutes() {
    return abandonedOrderThresholdInMinutes;
  }


  public void setAbandonedOrderThresholdInMinutes(Integer abandonedOrderThresholdInMinutes) {
    this.abandonedOrderThresholdInMinutes = abandonedOrderThresholdInMinutes;
  }


  public OrderProcessingSettings giftCardProcessingType(String giftCardProcessingType) {
    
    this.giftCardProcessingType = giftCardProcessingType;
    return this;
  }

   /**
   * Gift card payment authorization setting. Options can be authorize and charge the shopper&#39;s credit card when the order is placed, \&quot;AuthorizeAndCaptureOnOrderPlacement,\&quot;   authorize the shopper&#39;s gift card when the order is placed and charge the gift card when it is shipped, \&quot;AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\&quot;   or authorize and charge the shopper&#39;s gift card for the full amount when the order is shipped, \&quot;AuthorizeAndCaptureOnOrderShipment.\&quot;
   * @return giftCardProcessingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gift card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, \"AuthorizeAndCaptureOnOrderPlacement,\"   authorize the shopper's gift card when the order is placed and charge the gift card when it is shipped, \"AuthorizeOnOrderPlacementAndCaptureOnOrderShipment,\"   or authorize and charge the shopper's gift card for the full amount when the order is shipped, \"AuthorizeAndCaptureOnOrderShipment.\"")

  public String getGiftCardProcessingType() {
    return giftCardProcessingType;
  }


  public void setGiftCardProcessingType(String giftCardProcessingType) {
    this.giftCardProcessingType = giftCardProcessingType;
  }


  public OrderProcessingSettings giftCardRefundCreditProcessingType(String giftCardRefundCreditProcessingType) {
    
    this.giftCardRefundCreditProcessingType = giftCardRefundCreditProcessingType;
    return this;
  }

   /**
   * GiftCrd Refund/Credit flow, wither to existing or new giftcard
   * @return giftCardRefundCreditProcessingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "GiftCrd Refund/Credit flow, wither to existing or new giftcard")

  public String getGiftCardRefundCreditProcessingType() {
    return giftCardRefundCreditProcessingType;
  }


  public void setGiftCardRefundCreditProcessingType(String giftCardRefundCreditProcessingType) {
    this.giftCardRefundCreditProcessingType = giftCardRefundCreditProcessingType;
  }


  public OrderProcessingSettings thirdPartyPaymentSettings(List<ThirdPartyPaymentSetting> thirdPartyPaymentSettings) {
    
    this.thirdPartyPaymentSettings = thirdPartyPaymentSettings;
    return this;
  }

  public OrderProcessingSettings addThirdPartyPaymentSettingsItem(ThirdPartyPaymentSetting thirdPartyPaymentSettingsItem) {
    if (this.thirdPartyPaymentSettings == null) {
      this.thirdPartyPaymentSettings = new ArrayList<>();
    }
    this.thirdPartyPaymentSettings.add(thirdPartyPaymentSettingsItem);
    return this;
  }

   /**
   * Order processing settings for Third party payments  Ex- ApplePay using AuthorizeOnOrderPlacementAndCaptureOnOrderShipment for processing orders
   * @return thirdPartyPaymentSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order processing settings for Third party payments  Ex- ApplePay using AuthorizeOnOrderPlacementAndCaptureOnOrderShipment for processing orders")

  public List<ThirdPartyPaymentSetting> getThirdPartyPaymentSettings() {
    return thirdPartyPaymentSettings;
  }


  public void setThirdPartyPaymentSettings(List<ThirdPartyPaymentSetting> thirdPartyPaymentSettings) {
    this.thirdPartyPaymentSettings = thirdPartyPaymentSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderProcessingSettings orderProcessingSettings = (OrderProcessingSettings) o;
    return Objects.equals(this.paymentProcessingFlowType, orderProcessingSettings.paymentProcessingFlowType) &&
        Objects.equals(this.auditInfo, orderProcessingSettings.auditInfo) &&
        Objects.equals(this.useOverridePriceToCalculateDiscounts, orderProcessingSettings.useOverridePriceToCalculateDiscounts) &&
        Objects.equals(this.abandonedOrderThresholdInMinutes, orderProcessingSettings.abandonedOrderThresholdInMinutes) &&
        Objects.equals(this.giftCardProcessingType, orderProcessingSettings.giftCardProcessingType) &&
        Objects.equals(this.giftCardRefundCreditProcessingType, orderProcessingSettings.giftCardRefundCreditProcessingType) &&
        Objects.equals(this.thirdPartyPaymentSettings, orderProcessingSettings.thirdPartyPaymentSettings);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentProcessingFlowType, auditInfo, useOverridePriceToCalculateDiscounts, abandonedOrderThresholdInMinutes, giftCardProcessingType, giftCardRefundCreditProcessingType, thirdPartyPaymentSettings);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderProcessingSettings {\n");
    sb.append("    paymentProcessingFlowType: ").append(toIndentedString(paymentProcessingFlowType)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    useOverridePriceToCalculateDiscounts: ").append(toIndentedString(useOverridePriceToCalculateDiscounts)).append("\n");
    sb.append("    abandonedOrderThresholdInMinutes: ").append(toIndentedString(abandonedOrderThresholdInMinutes)).append("\n");
    sb.append("    giftCardProcessingType: ").append(toIndentedString(giftCardProcessingType)).append("\n");
    sb.append("    giftCardRefundCreditProcessingType: ").append(toIndentedString(giftCardRefundCreditProcessingType)).append("\n");
    sb.append("    thirdPartyPaymentSettings: ").append(toIndentedString(thirdPartyPaymentSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentProcessingFlowType");
    openapiFields.add("auditInfo");
    openapiFields.add("useOverridePriceToCalculateDiscounts");
    openapiFields.add("abandonedOrderThresholdInMinutes");
    openapiFields.add("giftCardProcessingType");
    openapiFields.add("giftCardRefundCreditProcessingType");
    openapiFields.add("thirdPartyPaymentSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderProcessingSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrderProcessingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderProcessingSettings is not found in the empty JSON string", OrderProcessingSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!OrderProcessingSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderProcessingSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("paymentProcessingFlowType") != null && !jsonObj.get("paymentProcessingFlowType").isJsonNull()) && !jsonObj.get("paymentProcessingFlowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentProcessingFlowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentProcessingFlowType").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if ((jsonObj.get("giftCardProcessingType") != null && !jsonObj.get("giftCardProcessingType").isJsonNull()) && !jsonObj.get("giftCardProcessingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardProcessingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardProcessingType").toString()));
      }
      if ((jsonObj.get("giftCardRefundCreditProcessingType") != null && !jsonObj.get("giftCardRefundCreditProcessingType").isJsonNull()) && !jsonObj.get("giftCardRefundCreditProcessingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardRefundCreditProcessingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardRefundCreditProcessingType").toString()));
      }
      if (jsonObj.get("thirdPartyPaymentSettings") != null && !jsonObj.get("thirdPartyPaymentSettings").isJsonNull()) {
        JsonArray jsonArraythirdPartyPaymentSettings = jsonObj.getAsJsonArray("thirdPartyPaymentSettings");
        if (jsonArraythirdPartyPaymentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thirdPartyPaymentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thirdPartyPaymentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("thirdPartyPaymentSettings").toString()));
          }

          // validate the optional field `thirdPartyPaymentSettings` (array)
          for (int i = 0; i < jsonArraythirdPartyPaymentSettings.size(); i++) {
            ThirdPartyPaymentSetting.validateJsonObject(jsonArraythirdPartyPaymentSettings.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderProcessingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderProcessingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderProcessingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderProcessingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderProcessingSettings>() {
           @Override
           public void write(JsonWriter out, OrderProcessingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderProcessingSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderProcessingSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderProcessingSettings
  * @throws IOException if the JSON string is invalid with respect to OrderProcessingSettings
  */
  public static OrderProcessingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderProcessingSettings.class);
  }

 /**
  * Convert an instance of OrderProcessingSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

