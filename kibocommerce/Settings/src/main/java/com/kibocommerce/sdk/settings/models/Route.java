/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Route
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Route implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_DEFAULTS = "defaults";
  @SerializedName(SERIALIZED_NAME_DEFAULTS)
  private Map<String, Object> defaults = null;

  public static final String SERIALIZED_NAME_INTERNAL_ROUTE = "internalRoute";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ROUTE)
  private String internalRoute;

  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private String functionId;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private Map<String, List<String>> mappings = null;

  public static final String SERIALIZED_NAME_CANONICAL = "canonical";
  @SerializedName(SERIALIZED_NAME_CANONICAL)
  private Boolean canonical;

  public static final String SERIALIZED_NAME_VALIDATORS = "validators";
  @SerializedName(SERIALIZED_NAME_VALIDATORS)
  private Map<String, List<String>> validators = null;

  public static final String SERIALIZED_NAME_URL_SCHEME = "urlScheme";
  @SerializedName(SERIALIZED_NAME_URL_SCHEME)
  private String urlScheme;

  public Route() {
  }

  public Route template(String template) {
    
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplate() {
    return template;
  }


  public void setTemplate(String template) {
    this.template = template;
  }


  public Route defaults(Map<String, Object> defaults) {
    
    this.defaults = defaults;
    return this;
  }

  public Route putDefaultsItem(String key, Object defaultsItem) {
    if (this.defaults == null) {
      this.defaults = new HashMap<>();
    }
    this.defaults.put(key, defaultsItem);
    return this;
  }

   /**
   * Get defaults
   * @return defaults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getDefaults() {
    return defaults;
  }


  public void setDefaults(Map<String, Object> defaults) {
    this.defaults = defaults;
  }


  public Route internalRoute(String internalRoute) {
    
    this.internalRoute = internalRoute;
    return this;
  }

   /**
   * Get internalRoute
   * @return internalRoute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInternalRoute() {
    return internalRoute;
  }


  public void setInternalRoute(String internalRoute) {
    this.internalRoute = internalRoute;
  }


  public Route functionId(String functionId) {
    
    this.functionId = functionId;
    return this;
  }

   /**
   * Get functionId
   * @return functionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFunctionId() {
    return functionId;
  }


  public void setFunctionId(String functionId) {
    this.functionId = functionId;
  }


  public Route mappings(Map<String, List<String>> mappings) {
    
    this.mappings = mappings;
    return this;
  }

  public Route putMappingsItem(String key, List<String> mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new HashMap<>();
    }
    this.mappings.put(key, mappingsItem);
    return this;
  }

   /**
   * Get mappings
   * @return mappings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, List<String>> getMappings() {
    return mappings;
  }


  public void setMappings(Map<String, List<String>> mappings) {
    this.mappings = mappings;
  }


  public Route canonical(Boolean canonical) {
    
    this.canonical = canonical;
    return this;
  }

   /**
   * Get canonical
   * @return canonical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanonical() {
    return canonical;
  }


  public void setCanonical(Boolean canonical) {
    this.canonical = canonical;
  }


  public Route validators(Map<String, List<String>> validators) {
    
    this.validators = validators;
    return this;
  }

  public Route putValidatorsItem(String key, List<String> validatorsItem) {
    if (this.validators == null) {
      this.validators = new HashMap<>();
    }
    this.validators.put(key, validatorsItem);
    return this;
  }

   /**
   * Get validators
   * @return validators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, List<String>> getValidators() {
    return validators;
  }


  public void setValidators(Map<String, List<String>> validators) {
    this.validators = validators;
  }


  public Route urlScheme(String urlScheme) {
    
    this.urlScheme = urlScheme;
    return this;
  }

   /**
   * Get urlScheme
   * @return urlScheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrlScheme() {
    return urlScheme;
  }


  public void setUrlScheme(String urlScheme) {
    this.urlScheme = urlScheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.template, route.template) &&
        Objects.equals(this.defaults, route.defaults) &&
        Objects.equals(this.internalRoute, route.internalRoute) &&
        Objects.equals(this.functionId, route.functionId) &&
        Objects.equals(this.mappings, route.mappings) &&
        Objects.equals(this.canonical, route.canonical) &&
        Objects.equals(this.validators, route.validators) &&
        Objects.equals(this.urlScheme, route.urlScheme);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, defaults, internalRoute, functionId, mappings, canonical, validators, urlScheme);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("    internalRoute: ").append(toIndentedString(internalRoute)).append("\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("    urlScheme: ").append(toIndentedString(urlScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("template");
    openapiFields.add("defaults");
    openapiFields.add("internalRoute");
    openapiFields.add("functionId");
    openapiFields.add("mappings");
    openapiFields.add("canonical");
    openapiFields.add("validators");
    openapiFields.add("urlScheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Route
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Route.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Route is not found in the empty JSON string", Route.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Route.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Route` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("internalRoute") != null && !jsonObj.get("internalRoute").isJsonNull()) && !jsonObj.get("internalRoute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalRoute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalRoute").toString()));
      }
      if ((jsonObj.get("functionId") != null && !jsonObj.get("functionId").isJsonNull()) && !jsonObj.get("functionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionId").toString()));
      }
      if ((jsonObj.get("urlScheme") != null && !jsonObj.get("urlScheme").isJsonNull()) && !jsonObj.get("urlScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlScheme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Route.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Route' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Route> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Route.class));

       return (TypeAdapter<T>) new TypeAdapter<Route>() {
           @Override
           public void write(JsonWriter out, Route value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Route read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Route given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Route
  * @throws IOException if the JSON string is invalid with respect to Route
  */
  public static Route fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Route.class);
  }

 /**
  * Convert an instance of Route to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

