/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.orderrouting.models.ApiDocumentationFutureInventory;
import com.kibocommerce.sdk.orderrouting.models.ApiDocumentationTagQuantity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Inventory Response
 */
@ApiModel(description = "Inventory Response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiDocumentationInventoryResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ALLOCATED = "allocated";
  @SerializedName(SERIALIZED_NAME_ALLOCATED)
  private Integer allocated;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<String> attributes = null;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Integer available;

  public static final String SERIALIZED_NAME_BLOCK_ASSIGNMENT = "blockAssignment";
  @SerializedName(SERIALIZED_NAME_BLOCK_ASSIGNMENT)
  private Boolean blockAssignment;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_I_D = "currencyID";
  @SerializedName(SERIALIZED_NAME_CURRENCY_I_D)
  private Integer currencyID;

  public static final String SERIALIZED_NAME_DIRECT_SHIP = "directShip";
  @SerializedName(SERIALIZED_NAME_DIRECT_SHIP)
  private Boolean directShip;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private BigDecimal distance;

  public static final String SERIALIZED_NAME_FLOOR = "floor";
  @SerializedName(SERIALIZED_NAME_FLOOR)
  private Integer floor;

  public static final String SERIALIZED_NAME_FUTURE_INVENTORY = "futureInventory";
  @SerializedName(SERIALIZED_NAME_FUTURE_INVENTORY)
  private List<ApiDocumentationFutureInventory> futureInventory = null;

  public static final String SERIALIZED_NAME_INVENTORY_LOCATOR_NAME = "inventoryLocatorName";
  @SerializedName(SERIALIZED_NAME_INVENTORY_LOCATOR_NAME)
  private String inventoryLocatorName;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_LTD = "ltd";
  @SerializedName(SERIALIZED_NAME_LTD)
  private BigDecimal ltd;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<String> messages = null;

  public static final String SERIALIZED_NAME_NUM_RESULTS = "numResults";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Integer numResults;

  public static final String SERIALIZED_NAME_ON_HAND = "onHand";
  @SerializedName(SERIALIZED_NAME_ON_HAND)
  private Integer onHand;

  public static final String SERIALIZED_NAME_PART_NUMBER = "partNumber";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private String partNumber;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_PICKUP = "pickup";
  @SerializedName(SERIALIZED_NAME_PICKUP)
  private Boolean pickup;

  public static final String SERIALIZED_NAME_RETAIL_PRICE = "retailPrice";
  @SerializedName(SERIALIZED_NAME_RETAIL_PRICE)
  private BigDecimal retailPrice;

  public static final String SERIALIZED_NAME_SAFETY_STOCK = "safetyStock";
  @SerializedName(SERIALIZED_NAME_SAFETY_STOCK)
  private Integer safetyStock;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TAGGED_INVENTORY = "taggedInventory";
  @SerializedName(SERIALIZED_NAME_TAGGED_INVENTORY)
  private List<ApiDocumentationTagQuantity> taggedInventory = null;

  public static final String SERIALIZED_NAME_TENANT_I_D = "tenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private Integer tenantID;

  public static final String SERIALIZED_NAME_TRANSFER_ENABLED = "transferEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ENABLED)
  private Boolean transferEnabled;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public ApiDocumentationInventoryResponse() {
  }

  public ApiDocumentationInventoryResponse allocated(Integer allocated) {
    
    this.allocated = allocated;
    return this;
  }

   /**
   * The quantity the location has that are already allocated.
   * @return allocated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity the location has that are already allocated.")

  public Integer getAllocated() {
    return allocated;
  }


  public void setAllocated(Integer allocated) {
    this.allocated = allocated;
  }


  public ApiDocumentationInventoryResponse attributes(List<String> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public ApiDocumentationInventoryResponse addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * List of Inventory Attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Inventory Attributes")

  public List<String> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<String> attributes) {
    this.attributes = attributes;
  }


  public ApiDocumentationInventoryResponse available(Integer available) {
    
    this.available = available;
    return this;
  }

   /**
   * The quantity the location has that are available for purchase
   * @return available
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity the location has that are available for purchase")

  public Integer getAvailable() {
    return available;
  }


  public void setAvailable(Integer available) {
    this.available = available;
  }


  public ApiDocumentationInventoryResponse blockAssignment(Boolean blockAssignment) {
    
    this.blockAssignment = blockAssignment;
    return this;
  }

   /**
   * Whether or not the product is blocked for assignment
   * @return blockAssignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the product is blocked for assignment")

  public Boolean getBlockAssignment() {
    return blockAssignment;
  }


  public void setBlockAssignment(Boolean blockAssignment) {
    this.blockAssignment = blockAssignment;
  }


  public ApiDocumentationInventoryResponse countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country code of this location
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country code of this location")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public ApiDocumentationInventoryResponse currencyID(Integer currencyID) {
    
    this.currencyID = currencyID;
    return this;
  }

   /**
   * The currency identifier for the retailPrice
   * @return currencyID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency identifier for the retailPrice")

  public Integer getCurrencyID() {
    return currencyID;
  }


  public void setCurrencyID(Integer currencyID) {
    this.currencyID = currencyID;
  }


  public ApiDocumentationInventoryResponse directShip(Boolean directShip) {
    
    this.directShip = directShip;
    return this;
  }

   /**
   * Whether this location can ship to a consumer
   * @return directShip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this location can ship to a consumer")

  public Boolean getDirectShip() {
    return directShip;
  }


  public void setDirectShip(Boolean directShip) {
    this.directShip = directShip;
  }


  public ApiDocumentationInventoryResponse distance(BigDecimal distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * The distance in miles from this location to the item&#39;s destination
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The distance in miles from this location to the item's destination")

  public BigDecimal getDistance() {
    return distance;
  }


  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  public ApiDocumentationInventoryResponse floor(Integer floor) {
    
    this.floor = floor;
    return this;
  }

   /**
   * Absolute minimum quantity of this item that should be in stock at any time
   * @return floor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Absolute minimum quantity of this item that should be in stock at any time")

  public Integer getFloor() {
    return floor;
  }


  public void setFloor(Integer floor) {
    this.floor = floor;
  }


  public ApiDocumentationInventoryResponse futureInventory(List<ApiDocumentationFutureInventory> futureInventory) {
    
    this.futureInventory = futureInventory;
    return this;
  }

  public ApiDocumentationInventoryResponse addFutureInventoryItem(ApiDocumentationFutureInventory futureInventoryItem) {
    if (this.futureInventory == null) {
      this.futureInventory = new ArrayList<>();
    }
    this.futureInventory.add(futureInventoryItem);
    return this;
  }

   /**
   * Get futureInventory
   * @return futureInventory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ApiDocumentationFutureInventory> getFutureInventory() {
    return futureInventory;
  }


  public void setFutureInventory(List<ApiDocumentationFutureInventory> futureInventory) {
    this.futureInventory = futureInventory;
  }


  public ApiDocumentationInventoryResponse inventoryLocatorName(String inventoryLocatorName) {
    
    this.inventoryLocatorName = inventoryLocatorName;
    return this;
  }

   /**
   * The inventory locator name of the individual item
   * @return inventoryLocatorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The inventory locator name of the individual item")

  public String getInventoryLocatorName() {
    return inventoryLocatorName;
  }


  public void setInventoryLocatorName(String inventoryLocatorName) {
    this.inventoryLocatorName = inventoryLocatorName;
  }


  public ApiDocumentationInventoryResponse locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Location Code
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location Code")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public ApiDocumentationInventoryResponse locationName(String locationName) {
    
    this.locationName = locationName;
    return this;
  }

   /**
   * Location Name
   * @return locationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location Name")

  public String getLocationName() {
    return locationName;
  }


  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public ApiDocumentationInventoryResponse ltd(BigDecimal ltd) {
    
    this.ltd = ltd;
    return this;
  }

   /**
   * Custom field used for store prioritization
   * @return ltd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom field used for store prioritization")

  public BigDecimal getLtd() {
    return ltd;
  }


  public void setLtd(BigDecimal ltd) {
    this.ltd = ltd;
  }


  public ApiDocumentationInventoryResponse messages(List<String> messages) {
    
    this.messages = messages;
    return this;
  }

  public ApiDocumentationInventoryResponse addMessagesItem(String messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * List of messages
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of messages")

  public List<String> getMessages() {
    return messages;
  }


  public void setMessages(List<String> messages) {
    this.messages = messages;
  }


  public ApiDocumentationInventoryResponse numResults(Integer numResults) {
    
    this.numResults = numResults;
    return this;
  }

   /**
   * Number of results
   * @return numResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of results")

  public Integer getNumResults() {
    return numResults;
  }


  public void setNumResults(Integer numResults) {
    this.numResults = numResults;
  }


  public ApiDocumentationInventoryResponse onHand(Integer onHand) {
    
    this.onHand = onHand;
    return this;
  }

   /**
   * The quantity the location has in its possession
   * @return onHand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity the location has in its possession")

  public Integer getOnHand() {
    return onHand;
  }


  public void setOnHand(Integer onHand) {
    this.onHand = onHand;
  }


  public ApiDocumentationInventoryResponse partNumber(String partNumber) {
    
    this.partNumber = partNumber;
    return this;
  }

   /**
   * Part/Product Number
   * @return partNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Part/Product Number")

  public String getPartNumber() {
    return partNumber;
  }


  public void setPartNumber(String partNumber) {
    this.partNumber = partNumber;
  }


  public ApiDocumentationInventoryResponse pending(Integer pending) {
    
    this.pending = pending;
    return this;
  }

   /**
   * The quantity the location has that are pending.
   * @return pending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity the location has that are pending.")

  public Integer getPending() {
    return pending;
  }


  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public ApiDocumentationInventoryResponse pickup(Boolean pickup) {
    
    this.pickup = pickup;
    return this;
  }

   /**
   * Whether a consumer can pick up product at this location (store)
   * @return pickup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether a consumer can pick up product at this location (store)")

  public Boolean getPickup() {
    return pickup;
  }


  public void setPickup(Boolean pickup) {
    this.pickup = pickup;
  }


  public ApiDocumentationInventoryResponse retailPrice(BigDecimal retailPrice) {
    
    this.retailPrice = retailPrice;
    return this;
  }

   /**
   * The price of the product at this location
   * @return retailPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The price of the product at this location")

  public BigDecimal getRetailPrice() {
    return retailPrice;
  }


  public void setRetailPrice(BigDecimal retailPrice) {
    this.retailPrice = retailPrice;
  }


  public ApiDocumentationInventoryResponse safetyStock(Integer safetyStock) {
    
    this.safetyStock = safetyStock;
    return this;
  }

   /**
   * Quantity of this item the location wants to keep in stock to ensure stock isn&#39;t completely depleted
   * @return safetyStock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted")

  public Integer getSafetyStock() {
    return safetyStock;
  }


  public void setSafetyStock(Integer safetyStock) {
    this.safetyStock = safetyStock;
  }


  public ApiDocumentationInventoryResponse sku(String sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * Stock Keeping Unit
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stock Keeping Unit")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    this.sku = sku;
  }


  public ApiDocumentationInventoryResponse success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Flag for success
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for success")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public ApiDocumentationInventoryResponse taggedInventory(List<ApiDocumentationTagQuantity> taggedInventory) {
    
    this.taggedInventory = taggedInventory;
    return this;
  }

  public ApiDocumentationInventoryResponse addTaggedInventoryItem(ApiDocumentationTagQuantity taggedInventoryItem) {
    if (this.taggedInventory == null) {
      this.taggedInventory = new ArrayList<>();
    }
    this.taggedInventory.add(taggedInventoryItem);
    return this;
  }

   /**
   * Get taggedInventory
   * @return taggedInventory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ApiDocumentationTagQuantity> getTaggedInventory() {
    return taggedInventory;
  }


  public void setTaggedInventory(List<ApiDocumentationTagQuantity> taggedInventory) {
    this.taggedInventory = taggedInventory;
  }


  public ApiDocumentationInventoryResponse tenantID(Integer tenantID) {
    
    this.tenantID = tenantID;
    return this;
  }

   /**
   * Tenant Identifier
   * @return tenantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tenant Identifier")

  public Integer getTenantID() {
    return tenantID;
  }


  public void setTenantID(Integer tenantID) {
    this.tenantID = tenantID;
  }


  public ApiDocumentationInventoryResponse transferEnabled(Boolean transferEnabled) {
    
    this.transferEnabled = transferEnabled;
    return this;
  }

   /**
   * Whether the location can ship to another location (store), thus restocking that location.
   * @return transferEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the location can ship to another location (store), thus restocking that location.")

  public Boolean getTransferEnabled() {
    return transferEnabled;
  }


  public void setTransferEnabled(Boolean transferEnabled) {
    this.transferEnabled = transferEnabled;
  }


  public ApiDocumentationInventoryResponse upc(String upc) {
    
    this.upc = upc;
    return this;
  }

   /**
   * Universal Product Code
   * @return upc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Universal Product Code")

  public String getUpc() {
    return upc;
  }


  public void setUpc(String upc) {
    this.upc = upc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiDocumentationInventoryResponse apiDocumentationInventoryResponse = (ApiDocumentationInventoryResponse) o;
    return Objects.equals(this.allocated, apiDocumentationInventoryResponse.allocated) &&
        Objects.equals(this.attributes, apiDocumentationInventoryResponse.attributes) &&
        Objects.equals(this.available, apiDocumentationInventoryResponse.available) &&
        Objects.equals(this.blockAssignment, apiDocumentationInventoryResponse.blockAssignment) &&
        Objects.equals(this.countryCode, apiDocumentationInventoryResponse.countryCode) &&
        Objects.equals(this.currencyID, apiDocumentationInventoryResponse.currencyID) &&
        Objects.equals(this.directShip, apiDocumentationInventoryResponse.directShip) &&
        Objects.equals(this.distance, apiDocumentationInventoryResponse.distance) &&
        Objects.equals(this.floor, apiDocumentationInventoryResponse.floor) &&
        Objects.equals(this.futureInventory, apiDocumentationInventoryResponse.futureInventory) &&
        Objects.equals(this.inventoryLocatorName, apiDocumentationInventoryResponse.inventoryLocatorName) &&
        Objects.equals(this.locationCode, apiDocumentationInventoryResponse.locationCode) &&
        Objects.equals(this.locationName, apiDocumentationInventoryResponse.locationName) &&
        Objects.equals(this.ltd, apiDocumentationInventoryResponse.ltd) &&
        Objects.equals(this.messages, apiDocumentationInventoryResponse.messages) &&
        Objects.equals(this.numResults, apiDocumentationInventoryResponse.numResults) &&
        Objects.equals(this.onHand, apiDocumentationInventoryResponse.onHand) &&
        Objects.equals(this.partNumber, apiDocumentationInventoryResponse.partNumber) &&
        Objects.equals(this.pending, apiDocumentationInventoryResponse.pending) &&
        Objects.equals(this.pickup, apiDocumentationInventoryResponse.pickup) &&
        Objects.equals(this.retailPrice, apiDocumentationInventoryResponse.retailPrice) &&
        Objects.equals(this.safetyStock, apiDocumentationInventoryResponse.safetyStock) &&
        Objects.equals(this.sku, apiDocumentationInventoryResponse.sku) &&
        Objects.equals(this.success, apiDocumentationInventoryResponse.success) &&
        Objects.equals(this.taggedInventory, apiDocumentationInventoryResponse.taggedInventory) &&
        Objects.equals(this.tenantID, apiDocumentationInventoryResponse.tenantID) &&
        Objects.equals(this.transferEnabled, apiDocumentationInventoryResponse.transferEnabled) &&
        Objects.equals(this.upc, apiDocumentationInventoryResponse.upc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocated, attributes, available, blockAssignment, countryCode, currencyID, directShip, distance, floor, futureInventory, inventoryLocatorName, locationCode, locationName, ltd, messages, numResults, onHand, partNumber, pending, pickup, retailPrice, safetyStock, sku, success, taggedInventory, tenantID, transferEnabled, upc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiDocumentationInventoryResponse {\n");
    sb.append("    allocated: ").append(toIndentedString(allocated)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    blockAssignment: ").append(toIndentedString(blockAssignment)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyID: ").append(toIndentedString(currencyID)).append("\n");
    sb.append("    directShip: ").append(toIndentedString(directShip)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    futureInventory: ").append(toIndentedString(futureInventory)).append("\n");
    sb.append("    inventoryLocatorName: ").append(toIndentedString(inventoryLocatorName)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    ltd: ").append(toIndentedString(ltd)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    onHand: ").append(toIndentedString(onHand)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    pickup: ").append(toIndentedString(pickup)).append("\n");
    sb.append("    retailPrice: ").append(toIndentedString(retailPrice)).append("\n");
    sb.append("    safetyStock: ").append(toIndentedString(safetyStock)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    taggedInventory: ").append(toIndentedString(taggedInventory)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("    transferEnabled: ").append(toIndentedString(transferEnabled)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocated");
    openapiFields.add("attributes");
    openapiFields.add("available");
    openapiFields.add("blockAssignment");
    openapiFields.add("countryCode");
    openapiFields.add("currencyID");
    openapiFields.add("directShip");
    openapiFields.add("distance");
    openapiFields.add("floor");
    openapiFields.add("futureInventory");
    openapiFields.add("inventoryLocatorName");
    openapiFields.add("locationCode");
    openapiFields.add("locationName");
    openapiFields.add("ltd");
    openapiFields.add("messages");
    openapiFields.add("numResults");
    openapiFields.add("onHand");
    openapiFields.add("partNumber");
    openapiFields.add("pending");
    openapiFields.add("pickup");
    openapiFields.add("retailPrice");
    openapiFields.add("safetyStock");
    openapiFields.add("sku");
    openapiFields.add("success");
    openapiFields.add("taggedInventory");
    openapiFields.add("tenantID");
    openapiFields.add("transferEnabled");
    openapiFields.add("upc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApiDocumentationInventoryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApiDocumentationInventoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiDocumentationInventoryResponse is not found in the empty JSON string", ApiDocumentationInventoryResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ApiDocumentationInventoryResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiDocumentationInventoryResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (jsonObj.get("futureInventory") != null && !jsonObj.get("futureInventory").isJsonNull()) {
        JsonArray jsonArrayfutureInventory = jsonObj.getAsJsonArray("futureInventory");
        if (jsonArrayfutureInventory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("futureInventory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `futureInventory` to be an array in the JSON string but got `%s`", jsonObj.get("futureInventory").toString()));
          }

          // validate the optional field `futureInventory` (array)
          for (int i = 0; i < jsonArrayfutureInventory.size(); i++) {
            ApiDocumentationFutureInventory.validateJsonObject(jsonArrayfutureInventory.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("inventoryLocatorName") != null && !jsonObj.get("inventoryLocatorName").isJsonNull()) && !jsonObj.get("inventoryLocatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryLocatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryLocatorName").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      if ((jsonObj.get("locationName") != null && !jsonObj.get("locationName").isJsonNull()) && !jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
      }
      if ((jsonObj.get("partNumber") != null && !jsonObj.get("partNumber").isJsonNull()) && !jsonObj.get("partNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partNumber").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (jsonObj.get("taggedInventory") != null && !jsonObj.get("taggedInventory").isJsonNull()) {
        JsonArray jsonArraytaggedInventory = jsonObj.getAsJsonArray("taggedInventory");
        if (jsonArraytaggedInventory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taggedInventory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taggedInventory` to be an array in the JSON string but got `%s`", jsonObj.get("taggedInventory").toString()));
          }

          // validate the optional field `taggedInventory` (array)
          for (int i = 0; i < jsonArraytaggedInventory.size(); i++) {
            ApiDocumentationTagQuantity.validateJsonObject(jsonArraytaggedInventory.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiDocumentationInventoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiDocumentationInventoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiDocumentationInventoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiDocumentationInventoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiDocumentationInventoryResponse>() {
           @Override
           public void write(JsonWriter out, ApiDocumentationInventoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiDocumentationInventoryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiDocumentationInventoryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiDocumentationInventoryResponse
  * @throws IOException if the JSON string is invalid with respect to ApiDocumentationInventoryResponse
  */
  public static ApiDocumentationInventoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiDocumentationInventoryResponse.class);
  }

 /**
  * Convert an instance of ApiDocumentationInventoryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

