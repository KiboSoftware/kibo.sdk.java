/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.orderrouting.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.orderrouting.models.CustomDataList;
import com.kibocommerce.sdk.orderrouting.models.CustomDataListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderRoutingDataListApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public OrderRoutingDataListApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderRoutingDataListApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public OrderRoutingDataListApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public OrderRoutingDataListApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public OrderRoutingDataListApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomDataListUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataList customDataList (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomDataListUsingPOSTCall(Integer xVolSite, Integer xVolTenant, CustomDataList customDataList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDataList;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/dataList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomDataListUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, CustomDataList customDataList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling createCustomDataListUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createCustomDataListUsingPOST(Async)");
        }
        
        // verify the required parameter 'customDataList' is set
        if (customDataList == null) {
            throw new ApiException("Missing the required parameter 'customDataList' when calling createCustomDataListUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = createCustomDataListUsingPOSTCall(xVolSite, xVolTenant, customDataList, _callback);
        return localVarCall;

    }

    /**
     * createCustomDataList
     * createCustomDataList
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataList customDataList (required)
     * @return CustomDataListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CustomDataListResponse createCustomDataListUsingPOST(Integer xVolSite, Integer xVolTenant, CustomDataList customDataList) throws ApiException {
        ApiResponse<CustomDataListResponse> localVarResp = createCustomDataListUsingPOSTWithHttpInfo(xVolSite, xVolTenant, customDataList);
        return localVarResp.getData();
    }

    /**
     * createCustomDataList
     * createCustomDataList
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataList customDataList (required)
     * @return ApiResponse&lt;CustomDataListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDataListResponse> createCustomDataListUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, CustomDataList customDataList) throws ApiException {
        okhttp3.Call localVarCall = createCustomDataListUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, customDataList, null);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * createCustomDataList (asynchronously)
     * createCustomDataList
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataList customDataList (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomDataListUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, CustomDataList customDataList, final ApiCallback<CustomDataListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomDataListUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, customDataList, _callback);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomDataListUsingDELETE
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomDataListUsingDELETECall(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/dataList/{dataListID}"
            .replaceAll("\\{" + "dataListID" + "\\}", localVarApiClient.escapeString(dataListID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomDataListUsingDELETEValidateBeforeCall(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataListID' is set
        if (dataListID == null) {
            throw new ApiException("Missing the required parameter 'dataListID' when calling deleteCustomDataListUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling deleteCustomDataListUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteCustomDataListUsingDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCustomDataListUsingDELETECall(dataListID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * deleteCustomDataList
     * deleteCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomDataListUsingDELETE(Integer dataListID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        deleteCustomDataListUsingDELETEWithHttpInfo(dataListID, xVolSite, xVolTenant);
    }

    /**
     * deleteCustomDataList
     * deleteCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomDataListUsingDELETEWithHttpInfo(Integer dataListID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomDataListUsingDELETEValidateBeforeCall(dataListID, xVolSite, xVolTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCustomDataList (asynchronously)
     * deleteCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomDataListUsingDELETEAsync(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomDataListUsingDELETEValidateBeforeCall(dataListID, xVolSite, xVolTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomDataListUsingGET
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomDataListUsingGETCall(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/dataList/{dataListID}"
            .replaceAll("\\{" + "dataListID" + "\\}", localVarApiClient.escapeString(dataListID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomDataListUsingGETValidateBeforeCall(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataListID' is set
        if (dataListID == null) {
            throw new ApiException("Missing the required parameter 'dataListID' when calling getCustomDataListUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling getCustomDataListUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getCustomDataListUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomDataListUsingGETCall(dataListID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * getCustomDataList
     * getCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return CustomDataListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CustomDataListResponse getCustomDataListUsingGET(Integer dataListID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<CustomDataListResponse> localVarResp = getCustomDataListUsingGETWithHttpInfo(dataListID, xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * getCustomDataList
     * getCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;CustomDataListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDataListResponse> getCustomDataListUsingGETWithHttpInfo(Integer dataListID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = getCustomDataListUsingGETValidateBeforeCall(dataListID, xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getCustomDataList (asynchronously)
     * getCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomDataListUsingGETAsync(Integer dataListID, Integer xVolSite, Integer xVolTenant, final ApiCallback<CustomDataListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomDataListUsingGETValidateBeforeCall(dataListID, xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomDataListUsingPUT
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param newDataList newDataList (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomDataListUsingPUTCall(Integer dataListID, Integer xVolSite, Integer xVolTenant, CustomDataList newDataList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newDataList;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/dataList/{dataListID}"
            .replaceAll("\\{" + "dataListID" + "\\}", localVarApiClient.escapeString(dataListID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomDataListUsingPUTValidateBeforeCall(Integer dataListID, Integer xVolSite, Integer xVolTenant, CustomDataList newDataList, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dataListID' is set
        if (dataListID == null) {
            throw new ApiException("Missing the required parameter 'dataListID' when calling updateCustomDataListUsingPUT(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling updateCustomDataListUsingPUT(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateCustomDataListUsingPUT(Async)");
        }
        
        // verify the required parameter 'newDataList' is set
        if (newDataList == null) {
            throw new ApiException("Missing the required parameter 'newDataList' when calling updateCustomDataListUsingPUT(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomDataListUsingPUTCall(dataListID, xVolSite, xVolTenant, newDataList, _callback);
        return localVarCall;

    }

    /**
     * updateCustomDataList
     * updateCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param newDataList newDataList (required)
     * @return CustomDataListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CustomDataListResponse updateCustomDataListUsingPUT(Integer dataListID, Integer xVolSite, Integer xVolTenant, CustomDataList newDataList) throws ApiException {
        ApiResponse<CustomDataListResponse> localVarResp = updateCustomDataListUsingPUTWithHttpInfo(dataListID, xVolSite, xVolTenant, newDataList);
        return localVarResp.getData();
    }

    /**
     * updateCustomDataList
     * updateCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param newDataList newDataList (required)
     * @return ApiResponse&lt;CustomDataListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDataListResponse> updateCustomDataListUsingPUTWithHttpInfo(Integer dataListID, Integer xVolSite, Integer xVolTenant, CustomDataList newDataList) throws ApiException {
        okhttp3.Call localVarCall = updateCustomDataListUsingPUTValidateBeforeCall(dataListID, xVolSite, xVolTenant, newDataList, null);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateCustomDataList (asynchronously)
     * updateCustomDataList
     * @param dataListID dataListID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param newDataList newDataList (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomDataListUsingPUTAsync(Integer dataListID, Integer xVolSite, Integer xVolTenant, CustomDataList newDataList, final ApiCallback<CustomDataListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomDataListUsingPUTValidateBeforeCall(dataListID, xVolSite, xVolTenant, newDataList, _callback);
        Type localVarReturnType = new TypeToken<CustomDataListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public OrderRoutingDataListApi build() {
            return new OrderRoutingDataListApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
