/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.orderrouting.models.CustomDataListEntry;
import com.kibocommerce.sdk.orderrouting.models.UserContextInformation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CustomDataList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomDataList implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATOR_USERNAME = "creatorUsername";
  @SerializedName(SERIALIZED_NAME_CREATOR_USERNAME)
  private String creatorUsername;

  public static final String SERIALIZED_NAME_CUSTOM_DATA_LIST_I_D = "customDataListID";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA_LIST_I_D)
  private Integer customDataListID;

  /**
   * Gets or Sets dataType
   */
  @JsonAdapter(DataTypeEnum.Adapter.class)
  public enum DataTypeEnum {
    STRING("STRING"),
    
    NUMBER("NUMBER"),
    
    LOCATION("LOCATION"),
    
    DATE("DATE");

    private String value;

    DataTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataTypeEnum fromValue(String value) {
      for (DataTypeEnum b : DataTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataTypeEnum dataType;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<CustomDataListEntry> entries = null;

  public static final String SERIALIZED_NAME_ENVIRONMENT_I_D = "environmentID";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_I_D)
  private Integer environmentID;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PATH_STRING = "pathString";
  @SerializedName(SERIALIZED_NAME_PATH_STRING)
  private String pathString;

  public static final String SERIALIZED_NAME_PERSISTED = "persisted";
  @SerializedName(SERIALIZED_NAME_PERSISTED)
  private Boolean persisted;

  public static final String SERIALIZED_NAME_SITE_I_D = "siteID";
  @SerializedName(SERIALIZED_NAME_SITE_I_D)
  private Integer siteID;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    READY("dataset.ready"),
    
    PROCESSING("dataset.processing"),
    
    ERROR_PROCESSING("dataset.error.processing");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STRING_VALUES = "stringValues";
  @SerializedName(SERIALIZED_NAME_STRING_VALUES)
  private List<String> stringValues = null;

  public static final String SERIALIZED_NAME_TENANT_I_D = "tenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private Integer tenantID;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_UPDATER_USERNAME = "updaterUsername";
  @SerializedName(SERIALIZED_NAME_UPDATER_USERNAME)
  private String updaterUsername;

  public static final String SERIALIZED_NAME_USER_CONTEXT = "userContext";
  @SerializedName(SERIALIZED_NAME_USER_CONTEXT)
  private UserContextInformation userContext;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<Object> values = null;

  public CustomDataList() {
  }

  public CustomDataList created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CustomDataList creatorUsername(String creatorUsername) {
    
    this.creatorUsername = creatorUsername;
    return this;
  }

   /**
   * Get creatorUsername
   * @return creatorUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatorUsername() {
    return creatorUsername;
  }


  public void setCreatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
  }


  public CustomDataList customDataListID(Integer customDataListID) {
    
    this.customDataListID = customDataListID;
    return this;
  }

   /**
   * Get customDataListID
   * @return customDataListID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomDataListID() {
    return customDataListID;
  }


  public void setCustomDataListID(Integer customDataListID) {
    this.customDataListID = customDataListID;
  }


  public CustomDataList dataType(DataTypeEnum dataType) {
    
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataTypeEnum getDataType() {
    return dataType;
  }


  public void setDataType(DataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public CustomDataList entries(List<CustomDataListEntry> entries) {
    
    this.entries = entries;
    return this;
  }

  public CustomDataList addEntriesItem(CustomDataListEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomDataListEntry> getEntries() {
    return entries;
  }


  public void setEntries(List<CustomDataListEntry> entries) {
    this.entries = entries;
  }


  public CustomDataList environmentID(Integer environmentID) {
    
    this.environmentID = environmentID;
    return this;
  }

   /**
   * Get environmentID
   * @return environmentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEnvironmentID() {
    return environmentID;
  }


  public void setEnvironmentID(Integer environmentID) {
    this.environmentID = environmentID;
  }


  public CustomDataList fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public CustomDataList name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CustomDataList notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CustomDataList pathString(String pathString) {
    
    this.pathString = pathString;
    return this;
  }

   /**
   * Get pathString
   * @return pathString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPathString() {
    return pathString;
  }


  public void setPathString(String pathString) {
    this.pathString = pathString;
  }


  public CustomDataList persisted(Boolean persisted) {
    
    this.persisted = persisted;
    return this;
  }

   /**
   * Get persisted
   * @return persisted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPersisted() {
    return persisted;
  }


  public void setPersisted(Boolean persisted) {
    this.persisted = persisted;
  }


  public CustomDataList siteID(Integer siteID) {
    
    this.siteID = siteID;
    return this;
  }

   /**
   * Get siteID
   * @return siteID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSiteID() {
    return siteID;
  }


  public void setSiteID(Integer siteID) {
    this.siteID = siteID;
  }


  public CustomDataList state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public CustomDataList stringValues(List<String> stringValues) {
    
    this.stringValues = stringValues;
    return this;
  }

  public CustomDataList addStringValuesItem(String stringValuesItem) {
    if (this.stringValues == null) {
      this.stringValues = new ArrayList<>();
    }
    this.stringValues.add(stringValuesItem);
    return this;
  }

   /**
   * Get stringValues
   * @return stringValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getStringValues() {
    return stringValues;
  }


  public void setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
  }


  public CustomDataList tenantID(Integer tenantID) {
    
    this.tenantID = tenantID;
    return this;
  }

   /**
   * Get tenantID
   * @return tenantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTenantID() {
    return tenantID;
  }


  public void setTenantID(Integer tenantID) {
    this.tenantID = tenantID;
  }


  public CustomDataList updated(OffsetDateTime updated) {
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }


  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public CustomDataList updaterUsername(String updaterUsername) {
    
    this.updaterUsername = updaterUsername;
    return this;
  }

   /**
   * Get updaterUsername
   * @return updaterUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdaterUsername() {
    return updaterUsername;
  }


  public void setUpdaterUsername(String updaterUsername) {
    this.updaterUsername = updaterUsername;
  }


  public CustomDataList userContext(UserContextInformation userContext) {
    
    this.userContext = userContext;
    return this;
  }

   /**
   * Get userContext
   * @return userContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserContextInformation getUserContext() {
    return userContext;
  }


  public void setUserContext(UserContextInformation userContext) {
    this.userContext = userContext;
  }


  public CustomDataList values(List<Object> values) {
    
    this.values = values;
    return this;
  }

  public CustomDataList addValuesItem(Object valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getValues() {
    return values;
  }


  public void setValues(List<Object> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDataList customDataList = (CustomDataList) o;
    return Objects.equals(this.created, customDataList.created) &&
        Objects.equals(this.creatorUsername, customDataList.creatorUsername) &&
        Objects.equals(this.customDataListID, customDataList.customDataListID) &&
        Objects.equals(this.dataType, customDataList.dataType) &&
        Objects.equals(this.entries, customDataList.entries) &&
        Objects.equals(this.environmentID, customDataList.environmentID) &&
        Objects.equals(this.fileName, customDataList.fileName) &&
        Objects.equals(this.name, customDataList.name) &&
        Objects.equals(this.notes, customDataList.notes) &&
        Objects.equals(this.pathString, customDataList.pathString) &&
        Objects.equals(this.persisted, customDataList.persisted) &&
        Objects.equals(this.siteID, customDataList.siteID) &&
        Objects.equals(this.state, customDataList.state) &&
        Objects.equals(this.stringValues, customDataList.stringValues) &&
        Objects.equals(this.tenantID, customDataList.tenantID) &&
        Objects.equals(this.updated, customDataList.updated) &&
        Objects.equals(this.updaterUsername, customDataList.updaterUsername) &&
        Objects.equals(this.userContext, customDataList.userContext) &&
        Objects.equals(this.values, customDataList.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, creatorUsername, customDataListID, dataType, entries, environmentID, fileName, name, notes, pathString, persisted, siteID, state, stringValues, tenantID, updated, updaterUsername, userContext, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDataList {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    creatorUsername: ").append(toIndentedString(creatorUsername)).append("\n");
    sb.append("    customDataListID: ").append(toIndentedString(customDataListID)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    environmentID: ").append(toIndentedString(environmentID)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pathString: ").append(toIndentedString(pathString)).append("\n");
    sb.append("    persisted: ").append(toIndentedString(persisted)).append("\n");
    sb.append("    siteID: ").append(toIndentedString(siteID)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stringValues: ").append(toIndentedString(stringValues)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updaterUsername: ").append(toIndentedString(updaterUsername)).append("\n");
    sb.append("    userContext: ").append(toIndentedString(userContext)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("creatorUsername");
    openapiFields.add("customDataListID");
    openapiFields.add("dataType");
    openapiFields.add("entries");
    openapiFields.add("environmentID");
    openapiFields.add("fileName");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("pathString");
    openapiFields.add("persisted");
    openapiFields.add("siteID");
    openapiFields.add("state");
    openapiFields.add("stringValues");
    openapiFields.add("tenantID");
    openapiFields.add("updated");
    openapiFields.add("updaterUsername");
    openapiFields.add("userContext");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomDataList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomDataList.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDataList is not found in the empty JSON string", CustomDataList.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomDataList.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDataList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("creatorUsername") != null && !jsonObj.get("creatorUsername").isJsonNull()) && !jsonObj.get("creatorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUsername").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            CustomDataListEntry.validateJsonObject(jsonArrayentries.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("pathString") != null && !jsonObj.get("pathString").isJsonNull()) && !jsonObj.get("pathString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathString").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stringValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValues` to be an array in the JSON string but got `%s`", jsonObj.get("stringValues").toString()));
      }
      if ((jsonObj.get("updaterUsername") != null && !jsonObj.get("updaterUsername").isJsonNull()) && !jsonObj.get("updaterUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updaterUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updaterUsername").toString()));
      }
      // validate the optional field `userContext`
      if (jsonObj.get("userContext") != null && !jsonObj.get("userContext").isJsonNull()) {
        UserContextInformation.validateJsonObject(jsonObj.getAsJsonObject("userContext"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDataList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDataList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDataList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDataList.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDataList>() {
           @Override
           public void write(JsonWriter out, CustomDataList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDataList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomDataList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomDataList
  * @throws IOException if the JSON string is invalid with respect to CustomDataList
  */
  public static CustomDataList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDataList.class);
  }

 /**
  * Convert an instance of CustomDataList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

