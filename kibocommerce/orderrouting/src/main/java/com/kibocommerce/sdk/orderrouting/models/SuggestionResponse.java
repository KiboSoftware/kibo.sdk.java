/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.orderrouting.models.AssignmentSuggestion;
import com.kibocommerce.sdk.orderrouting.models.StateChangeSuggestion;
import com.kibocommerce.sdk.orderrouting.models.SuggestionLog;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * SuggestionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SuggestionResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ASSIGNMENT_SUGGESTIONS = "assignmentSuggestions";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_SUGGESTIONS)
  private Map<String, List<AssignmentSuggestion>> assignmentSuggestions = null;

  public static final String SERIALIZED_NAME_AVAILABLE_LOCATIONS = "availableLocations";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCATIONS)
  private List<Integer> availableLocations = null;

  public static final String SERIALIZED_NAME_EMPTY_RESPONSE = "emptyResponse";
  @SerializedName(SERIALIZED_NAME_EMPTY_RESPONSE)
  private Boolean emptyResponse;

  public static final String SERIALIZED_NAME_EXTERNAL_RESPONSE_I_D = "externalResponseID";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_RESPONSE_I_D)
  private String externalResponseID;

  public static final String SERIALIZED_NAME_FUTURE_ASSIGNMENT_SUGGESTIONS = "futureAssignmentSuggestions";
  @SerializedName(SERIALIZED_NAME_FUTURE_ASSIGNMENT_SUGGESTIONS)
  private Map<String, List<AssignmentSuggestion>> futureAssignmentSuggestions = null;

  public static final String SERIALIZED_NAME_RESPONSE_I_D = "responseID";
  @SerializedName(SERIALIZED_NAME_RESPONSE_I_D)
  private Integer responseID;

  /**
   * Gets or Sets route
   */
  @JsonAdapter(RouteEnum.Adapter.class)
  public enum RouteEnum {
    DIRECTSHIP("DIRECTSHIP"),
    
    TRANSFER("TRANSFER"),
    
    STH_CONSOLIDATED("STH_CONSOLIDATED");

    private String value;

    RouteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RouteEnum fromValue(String value) {
      for (RouteEnum b : RouteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RouteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RouteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RouteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RouteEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROUTE = "route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private RouteEnum route;

  public static final String SERIALIZED_NAME_STATE_CHANGE_SUGGESTIONS = "stateChangeSuggestions";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGE_SUGGESTIONS)
  private Map<String, StateChangeSuggestion> stateChangeSuggestions = null;

  public static final String SERIALIZED_NAME_SUGGESTION_LOG = "suggestionLog";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_LOG)
  private SuggestionLog suggestionLog;

  public SuggestionResponse() {
  }

  public SuggestionResponse assignmentSuggestions(Map<String, List<AssignmentSuggestion>> assignmentSuggestions) {
    
    this.assignmentSuggestions = assignmentSuggestions;
    return this;
  }

  public SuggestionResponse putAssignmentSuggestionsItem(String key, List<AssignmentSuggestion> assignmentSuggestionsItem) {
    if (this.assignmentSuggestions == null) {
      this.assignmentSuggestions = new HashMap<>();
    }
    this.assignmentSuggestions.put(key, assignmentSuggestionsItem);
    return this;
  }

   /**
   * Get assignmentSuggestions
   * @return assignmentSuggestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, List<AssignmentSuggestion>> getAssignmentSuggestions() {
    return assignmentSuggestions;
  }


  public void setAssignmentSuggestions(Map<String, List<AssignmentSuggestion>> assignmentSuggestions) {
    this.assignmentSuggestions = assignmentSuggestions;
  }


  public SuggestionResponse availableLocations(List<Integer> availableLocations) {
    
    this.availableLocations = availableLocations;
    return this;
  }

  public SuggestionResponse addAvailableLocationsItem(Integer availableLocationsItem) {
    if (this.availableLocations == null) {
      this.availableLocations = new ArrayList<>();
    }
    this.availableLocations.add(availableLocationsItem);
    return this;
  }

   /**
   * Get availableLocations
   * @return availableLocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getAvailableLocations() {
    return availableLocations;
  }


  public void setAvailableLocations(List<Integer> availableLocations) {
    this.availableLocations = availableLocations;
  }


  public SuggestionResponse emptyResponse(Boolean emptyResponse) {
    
    this.emptyResponse = emptyResponse;
    return this;
  }

   /**
   * Get emptyResponse
   * @return emptyResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEmptyResponse() {
    return emptyResponse;
  }


  public void setEmptyResponse(Boolean emptyResponse) {
    this.emptyResponse = emptyResponse;
  }


  public SuggestionResponse externalResponseID(String externalResponseID) {
    
    this.externalResponseID = externalResponseID;
    return this;
  }

   /**
   * Get externalResponseID
   * @return externalResponseID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalResponseID() {
    return externalResponseID;
  }


  public void setExternalResponseID(String externalResponseID) {
    this.externalResponseID = externalResponseID;
  }


  public SuggestionResponse futureAssignmentSuggestions(Map<String, List<AssignmentSuggestion>> futureAssignmentSuggestions) {
    
    this.futureAssignmentSuggestions = futureAssignmentSuggestions;
    return this;
  }

  public SuggestionResponse putFutureAssignmentSuggestionsItem(String key, List<AssignmentSuggestion> futureAssignmentSuggestionsItem) {
    if (this.futureAssignmentSuggestions == null) {
      this.futureAssignmentSuggestions = new HashMap<>();
    }
    this.futureAssignmentSuggestions.put(key, futureAssignmentSuggestionsItem);
    return this;
  }

   /**
   * Get futureAssignmentSuggestions
   * @return futureAssignmentSuggestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, List<AssignmentSuggestion>> getFutureAssignmentSuggestions() {
    return futureAssignmentSuggestions;
  }


  public void setFutureAssignmentSuggestions(Map<String, List<AssignmentSuggestion>> futureAssignmentSuggestions) {
    this.futureAssignmentSuggestions = futureAssignmentSuggestions;
  }


  public SuggestionResponse responseID(Integer responseID) {
    
    this.responseID = responseID;
    return this;
  }

   /**
   * Get responseID
   * @return responseID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getResponseID() {
    return responseID;
  }


  public void setResponseID(Integer responseID) {
    this.responseID = responseID;
  }


  public SuggestionResponse route(RouteEnum route) {
    
    this.route = route;
    return this;
  }

   /**
   * Get route
   * @return route
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RouteEnum getRoute() {
    return route;
  }


  public void setRoute(RouteEnum route) {
    this.route = route;
  }


  public SuggestionResponse stateChangeSuggestions(Map<String, StateChangeSuggestion> stateChangeSuggestions) {
    
    this.stateChangeSuggestions = stateChangeSuggestions;
    return this;
  }

  public SuggestionResponse putStateChangeSuggestionsItem(String key, StateChangeSuggestion stateChangeSuggestionsItem) {
    if (this.stateChangeSuggestions == null) {
      this.stateChangeSuggestions = new HashMap<>();
    }
    this.stateChangeSuggestions.put(key, stateChangeSuggestionsItem);
    return this;
  }

   /**
   * Get stateChangeSuggestions
   * @return stateChangeSuggestions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, StateChangeSuggestion> getStateChangeSuggestions() {
    return stateChangeSuggestions;
  }


  public void setStateChangeSuggestions(Map<String, StateChangeSuggestion> stateChangeSuggestions) {
    this.stateChangeSuggestions = stateChangeSuggestions;
  }


  public SuggestionResponse suggestionLog(SuggestionLog suggestionLog) {
    
    this.suggestionLog = suggestionLog;
    return this;
  }

   /**
   * Get suggestionLog
   * @return suggestionLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SuggestionLog getSuggestionLog() {
    return suggestionLog;
  }


  public void setSuggestionLog(SuggestionLog suggestionLog) {
    this.suggestionLog = suggestionLog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionResponse suggestionResponse = (SuggestionResponse) o;
    return Objects.equals(this.assignmentSuggestions, suggestionResponse.assignmentSuggestions) &&
        Objects.equals(this.availableLocations, suggestionResponse.availableLocations) &&
        Objects.equals(this.emptyResponse, suggestionResponse.emptyResponse) &&
        Objects.equals(this.externalResponseID, suggestionResponse.externalResponseID) &&
        Objects.equals(this.futureAssignmentSuggestions, suggestionResponse.futureAssignmentSuggestions) &&
        Objects.equals(this.responseID, suggestionResponse.responseID) &&
        Objects.equals(this.route, suggestionResponse.route) &&
        Objects.equals(this.stateChangeSuggestions, suggestionResponse.stateChangeSuggestions) &&
        Objects.equals(this.suggestionLog, suggestionResponse.suggestionLog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignmentSuggestions, availableLocations, emptyResponse, externalResponseID, futureAssignmentSuggestions, responseID, route, stateChangeSuggestions, suggestionLog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionResponse {\n");
    sb.append("    assignmentSuggestions: ").append(toIndentedString(assignmentSuggestions)).append("\n");
    sb.append("    availableLocations: ").append(toIndentedString(availableLocations)).append("\n");
    sb.append("    emptyResponse: ").append(toIndentedString(emptyResponse)).append("\n");
    sb.append("    externalResponseID: ").append(toIndentedString(externalResponseID)).append("\n");
    sb.append("    futureAssignmentSuggestions: ").append(toIndentedString(futureAssignmentSuggestions)).append("\n");
    sb.append("    responseID: ").append(toIndentedString(responseID)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    stateChangeSuggestions: ").append(toIndentedString(stateChangeSuggestions)).append("\n");
    sb.append("    suggestionLog: ").append(toIndentedString(suggestionLog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignmentSuggestions");
    openapiFields.add("availableLocations");
    openapiFields.add("emptyResponse");
    openapiFields.add("externalResponseID");
    openapiFields.add("futureAssignmentSuggestions");
    openapiFields.add("responseID");
    openapiFields.add("route");
    openapiFields.add("stateChangeSuggestions");
    openapiFields.add("suggestionLog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SuggestionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SuggestionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionResponse is not found in the empty JSON string", SuggestionResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SuggestionResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // ensure the json data is an array
      if (!jsonObj.get("availableLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableLocations` to be an array in the JSON string but got `%s`", jsonObj.get("availableLocations").toString()));
      }
      if ((jsonObj.get("externalResponseID") != null && !jsonObj.get("externalResponseID").isJsonNull()) && !jsonObj.get("externalResponseID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalResponseID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalResponseID").toString()));
      }
      if ((jsonObj.get("route") != null && !jsonObj.get("route").isJsonNull()) && !jsonObj.get("route").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `route` to be a primitive type in the JSON string but got `%s`", jsonObj.get("route").toString()));
      }
      // validate the optional field `suggestionLog`
      if (jsonObj.get("suggestionLog") != null && !jsonObj.get("suggestionLog").isJsonNull()) {
        SuggestionLog.validateJsonObject(jsonObj.getAsJsonObject("suggestionLog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionResponse>() {
           @Override
           public void write(JsonWriter out, SuggestionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuggestionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuggestionResponse
  * @throws IOException if the JSON string is invalid with respect to SuggestionResponse
  */
  public static SuggestionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionResponse.class);
  }

 /**
  * Convert an instance of SuggestionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

