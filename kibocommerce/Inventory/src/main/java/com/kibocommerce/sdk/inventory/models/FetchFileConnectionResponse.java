/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FetchFileConnectionResponse
 */
@ApiModel(description = "FetchFileConnectionResponse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FetchFileConnectionResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FTP_FILES = "ftpFiles";
  @SerializedName(SERIALIZED_NAME_FTP_FILES)
  private List<String> ftpFiles = null;

  public static final String SERIALIZED_NAME_FTP_ARCHIVE_FILES = "ftpArchiveFiles";
  @SerializedName(SERIALIZED_NAME_FTP_ARCHIVE_FILES)
  private List<String> ftpArchiveFiles = null;

  public static final String SERIALIZED_NAME_S3_FILES = "s3Files";
  @SerializedName(SERIALIZED_NAME_S3_FILES)
  private List<String> s3Files = null;

  public static final String SERIALIZED_NAME_S3_ARCHIVE_FILES = "s3ArchiveFiles";
  @SerializedName(SERIALIZED_NAME_S3_ARCHIVE_FILES)
  private List<String> s3ArchiveFiles = null;

  public FetchFileConnectionResponse() {
  }

  public FetchFileConnectionResponse ftpFiles(List<String> ftpFiles) {
    
    this.ftpFiles = ftpFiles;
    return this;
  }

  public FetchFileConnectionResponse addFtpFilesItem(String ftpFilesItem) {
    if (this.ftpFiles == null) {
      this.ftpFiles = new ArrayList<>();
    }
    this.ftpFiles.add(ftpFilesItem);
    return this;
  }

   /**
   * List of files found on the specified sftp directory
   * @return ftpFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files found on the specified sftp directory")

  public List<String> getFtpFiles() {
    return ftpFiles;
  }


  public void setFtpFiles(List<String> ftpFiles) {
    this.ftpFiles = ftpFiles;
  }


  public FetchFileConnectionResponse ftpArchiveFiles(List<String> ftpArchiveFiles) {
    
    this.ftpArchiveFiles = ftpArchiveFiles;
    return this;
  }

  public FetchFileConnectionResponse addFtpArchiveFilesItem(String ftpArchiveFilesItem) {
    if (this.ftpArchiveFiles == null) {
      this.ftpArchiveFiles = new ArrayList<>();
    }
    this.ftpArchiveFiles.add(ftpArchiveFilesItem);
    return this;
  }

   /**
   * List of files found on the specified sftp archive directory
   * @return ftpArchiveFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files found on the specified sftp archive directory")

  public List<String> getFtpArchiveFiles() {
    return ftpArchiveFiles;
  }


  public void setFtpArchiveFiles(List<String> ftpArchiveFiles) {
    this.ftpArchiveFiles = ftpArchiveFiles;
  }


  public FetchFileConnectionResponse s3Files(List<String> s3Files) {
    
    this.s3Files = s3Files;
    return this;
  }

  public FetchFileConnectionResponse addS3FilesItem(String s3FilesItem) {
    if (this.s3Files == null) {
      this.s3Files = new ArrayList<>();
    }
    this.s3Files.add(s3FilesItem);
    return this;
  }

   /**
   * List of files found on the specified s3 bucket/path
   * @return s3Files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files found on the specified s3 bucket/path")

  public List<String> getS3Files() {
    return s3Files;
  }


  public void setS3Files(List<String> s3Files) {
    this.s3Files = s3Files;
  }


  public FetchFileConnectionResponse s3ArchiveFiles(List<String> s3ArchiveFiles) {
    
    this.s3ArchiveFiles = s3ArchiveFiles;
    return this;
  }

  public FetchFileConnectionResponse addS3ArchiveFilesItem(String s3ArchiveFilesItem) {
    if (this.s3ArchiveFiles == null) {
      this.s3ArchiveFiles = new ArrayList<>();
    }
    this.s3ArchiveFiles.add(s3ArchiveFilesItem);
    return this;
  }

   /**
   * List of files found on the specified s3 archive bucket/path
   * @return s3ArchiveFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files found on the specified s3 archive bucket/path")

  public List<String> getS3ArchiveFiles() {
    return s3ArchiveFiles;
  }


  public void setS3ArchiveFiles(List<String> s3ArchiveFiles) {
    this.s3ArchiveFiles = s3ArchiveFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchFileConnectionResponse fetchFileConnectionResponse = (FetchFileConnectionResponse) o;
    return Objects.equals(this.ftpFiles, fetchFileConnectionResponse.ftpFiles) &&
        Objects.equals(this.ftpArchiveFiles, fetchFileConnectionResponse.ftpArchiveFiles) &&
        Objects.equals(this.s3Files, fetchFileConnectionResponse.s3Files) &&
        Objects.equals(this.s3ArchiveFiles, fetchFileConnectionResponse.s3ArchiveFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ftpFiles, ftpArchiveFiles, s3Files, s3ArchiveFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchFileConnectionResponse {\n");
    sb.append("    ftpFiles: ").append(toIndentedString(ftpFiles)).append("\n");
    sb.append("    ftpArchiveFiles: ").append(toIndentedString(ftpArchiveFiles)).append("\n");
    sb.append("    s3Files: ").append(toIndentedString(s3Files)).append("\n");
    sb.append("    s3ArchiveFiles: ").append(toIndentedString(s3ArchiveFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ftpFiles");
    openapiFields.add("ftpArchiveFiles");
    openapiFields.add("s3Files");
    openapiFields.add("s3ArchiveFiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FetchFileConnectionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FetchFileConnectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchFileConnectionResponse is not found in the empty JSON string", FetchFileConnectionResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FetchFileConnectionResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FetchFileConnectionResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // ensure the json data is an array
      if (!jsonObj.get("ftpFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpFiles` to be an array in the JSON string but got `%s`", jsonObj.get("ftpFiles").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("ftpArchiveFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpArchiveFiles` to be an array in the JSON string but got `%s`", jsonObj.get("ftpArchiveFiles").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("s3Files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Files` to be an array in the JSON string but got `%s`", jsonObj.get("s3Files").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("s3ArchiveFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3ArchiveFiles` to be an array in the JSON string but got `%s`", jsonObj.get("s3ArchiveFiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchFileConnectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchFileConnectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchFileConnectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchFileConnectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchFileConnectionResponse>() {
           @Override
           public void write(JsonWriter out, FetchFileConnectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchFileConnectionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FetchFileConnectionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FetchFileConnectionResponse
  * @throws IOException if the JSON string is invalid with respect to FetchFileConnectionResponse
  */
  public static FetchFileConnectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchFileConnectionResponse.class);
  }

 /**
  * Convert an instance of FetchFileConnectionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

