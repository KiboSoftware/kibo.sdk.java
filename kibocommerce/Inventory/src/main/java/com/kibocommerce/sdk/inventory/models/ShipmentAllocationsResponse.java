/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.models.InventoryAllocationResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ShipmentAllocationsResponse Object
 */
@ApiModel(description = "ShipmentAllocationsResponse Object")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShipmentAllocationsResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CURRENT_ALLOCATIONS = "currentAllocations";
  @SerializedName(SERIALIZED_NAME_CURRENT_ALLOCATIONS)
  private List<InventoryAllocationResponse> currentAllocations = null;

  public static final String SERIALIZED_NAME_FUTURE_ALLOCATIONS = "futureAllocations";
  @SerializedName(SERIALIZED_NAME_FUTURE_ALLOCATIONS)
  private List<InventoryAllocationResponse> futureAllocations = null;

  public ShipmentAllocationsResponse() {
  }

  public ShipmentAllocationsResponse currentAllocations(List<InventoryAllocationResponse> currentAllocations) {
    
    this.currentAllocations = currentAllocations;
    return this;
  }

  public ShipmentAllocationsResponse addCurrentAllocationsItem(InventoryAllocationResponse currentAllocationsItem) {
    if (this.currentAllocations == null) {
      this.currentAllocations = new ArrayList<>();
    }
    this.currentAllocations.add(currentAllocationsItem);
    return this;
  }

   /**
   * List of InventoryAllocationResponse objects
   * @return currentAllocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of InventoryAllocationResponse objects")

  public List<InventoryAllocationResponse> getCurrentAllocations() {
    return currentAllocations;
  }


  public void setCurrentAllocations(List<InventoryAllocationResponse> currentAllocations) {
    this.currentAllocations = currentAllocations;
  }


  public ShipmentAllocationsResponse futureAllocations(List<InventoryAllocationResponse> futureAllocations) {
    
    this.futureAllocations = futureAllocations;
    return this;
  }

  public ShipmentAllocationsResponse addFutureAllocationsItem(InventoryAllocationResponse futureAllocationsItem) {
    if (this.futureAllocations == null) {
      this.futureAllocations = new ArrayList<>();
    }
    this.futureAllocations.add(futureAllocationsItem);
    return this;
  }

   /**
   * List of InventoryAllocationResponse objects
   * @return futureAllocations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of InventoryAllocationResponse objects")

  public List<InventoryAllocationResponse> getFutureAllocations() {
    return futureAllocations;
  }


  public void setFutureAllocations(List<InventoryAllocationResponse> futureAllocations) {
    this.futureAllocations = futureAllocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentAllocationsResponse shipmentAllocationsResponse = (ShipmentAllocationsResponse) o;
    return Objects.equals(this.currentAllocations, shipmentAllocationsResponse.currentAllocations) &&
        Objects.equals(this.futureAllocations, shipmentAllocationsResponse.futureAllocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentAllocations, futureAllocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentAllocationsResponse {\n");
    sb.append("    currentAllocations: ").append(toIndentedString(currentAllocations)).append("\n");
    sb.append("    futureAllocations: ").append(toIndentedString(futureAllocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentAllocations");
    openapiFields.add("futureAllocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipmentAllocationsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShipmentAllocationsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentAllocationsResponse is not found in the empty JSON string", ShipmentAllocationsResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShipmentAllocationsResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentAllocationsResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("currentAllocations") != null && !jsonObj.get("currentAllocations").isJsonNull()) {
        JsonArray jsonArraycurrentAllocations = jsonObj.getAsJsonArray("currentAllocations");
        if (jsonArraycurrentAllocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currentAllocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currentAllocations` to be an array in the JSON string but got `%s`", jsonObj.get("currentAllocations").toString()));
          }

          // validate the optional field `currentAllocations` (array)
          for (int i = 0; i < jsonArraycurrentAllocations.size(); i++) {
            InventoryAllocationResponse.validateJsonObject(jsonArraycurrentAllocations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("futureAllocations") != null && !jsonObj.get("futureAllocations").isJsonNull()) {
        JsonArray jsonArrayfutureAllocations = jsonObj.getAsJsonArray("futureAllocations");
        if (jsonArrayfutureAllocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("futureAllocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `futureAllocations` to be an array in the JSON string but got `%s`", jsonObj.get("futureAllocations").toString()));
          }

          // validate the optional field `futureAllocations` (array)
          for (int i = 0; i < jsonArrayfutureAllocations.size(); i++) {
            InventoryAllocationResponse.validateJsonObject(jsonArrayfutureAllocations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentAllocationsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentAllocationsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentAllocationsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentAllocationsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentAllocationsResponse>() {
           @Override
           public void write(JsonWriter out, ShipmentAllocationsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentAllocationsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipmentAllocationsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipmentAllocationsResponse
  * @throws IOException if the JSON string is invalid with respect to ShipmentAllocationsResponse
  */
  public static ShipmentAllocationsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentAllocationsResponse.class);
  }

 /**
  * Convert an instance of ShipmentAllocationsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

