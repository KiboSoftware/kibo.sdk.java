/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.inventory.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.inventory.models.AdjustFutureDate404Response;
import com.kibocommerce.sdk.inventory.models.JobIDResponse;
import com.kibocommerce.sdk.inventory.models.JobQueueResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InventoryJobApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public InventoryJobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryJobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public InventoryJobApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public InventoryJobApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public InventoryJobApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAllOldInventory
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllOldInventoryCall(Integer xVolTenant, Integer months, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/deleteOldInventory/allSilo/{months}"
            .replaceAll("\\{" + "months" + "\\}", localVarApiClient.escapeString(months.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllOldInventoryValidateBeforeCall(Integer xVolTenant, Integer months, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteAllOldInventory(Async)");
        }
        
        // verify the required parameter 'months' is set
        if (months == null) {
            throw new ApiException("Missing the required parameter 'months' when calling deleteAllOldInventory(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAllOldInventoryCall(xVolTenant, months, _callback);
        return localVarCall;

    }

    /**
     * Delete All Old Inventory
     * Deletes older records from inventory table of all silos
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @return List&lt;JobIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<JobIDResponse> deleteAllOldInventory(Integer xVolTenant, Integer months) throws ApiException {
        ApiResponse<List<JobIDResponse>> localVarResp = deleteAllOldInventoryWithHttpInfo(xVolTenant, months);
        return localVarResp.getData();
    }

    /**
     * Delete All Old Inventory
     * Deletes older records from inventory table of all silos
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @return ApiResponse&lt;List&lt;JobIDResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobIDResponse>> deleteAllOldInventoryWithHttpInfo(Integer xVolTenant, Integer months) throws ApiException {
        okhttp3.Call localVarCall = deleteAllOldInventoryValidateBeforeCall(xVolTenant, months, null);
        Type localVarReturnType = new TypeToken<List<JobIDResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete All Old Inventory (asynchronously)
     * Deletes older records from inventory table of all silos
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAllOldInventoryAsync(Integer xVolTenant, Integer months, final ApiCallback<List<JobIDResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllOldInventoryValidateBeforeCall(xVolTenant, months, _callback);
        Type localVarReturnType = new TypeToken<List<JobIDResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOldInventory
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOldInventoryCall(Integer xVolTenant, Integer months, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/deleteOldInventory/{months}"
            .replaceAll("\\{" + "months" + "\\}", localVarApiClient.escapeString(months.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOldInventoryValidateBeforeCall(Integer xVolTenant, Integer months, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteOldInventory(Async)");
        }
        
        // verify the required parameter 'months' is set
        if (months == null) {
            throw new ApiException("Missing the required parameter 'months' when calling deleteOldInventory(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOldInventoryCall(xVolTenant, months, _callback);
        return localVarCall;

    }

    /**
     * Delete Old Inventory
     * Deletes older records from inventory table
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @return JobIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public JobIDResponse deleteOldInventory(Integer xVolTenant, Integer months) throws ApiException {
        ApiResponse<JobIDResponse> localVarResp = deleteOldInventoryWithHttpInfo(xVolTenant, months);
        return localVarResp.getData();
    }

    /**
     * Delete Old Inventory
     * Deletes older records from inventory table
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @return ApiResponse&lt;JobIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobIDResponse> deleteOldInventoryWithHttpInfo(Integer xVolTenant, Integer months) throws ApiException {
        okhttp3.Call localVarCall = deleteOldInventoryValidateBeforeCall(xVolTenant, months, null);
        Type localVarReturnType = new TypeToken<JobIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Old Inventory (asynchronously)
     * Deletes older records from inventory table
     * @param xVolTenant Tenant ID (required)
     * @param months The x months before which we want the records to get deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOldInventoryAsync(Integer xVolTenant, Integer months, final ApiCallback<JobIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOldInventoryValidateBeforeCall(xVolTenant, months, _callback);
        Type localVarReturnType = new TypeToken<JobIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param xVolTenant Tenant ID (required)
     * @param jobID Id of bin to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(Integer xVolTenant, Long jobID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/queue/{jobID}"
            .replaceAll("\\{" + "jobID" + "\\}", localVarApiClient.escapeString(jobID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(Integer xVolTenant, Long jobID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getJob(Async)");
        }
        
        // verify the required parameter 'jobID' is set
        if (jobID == null) {
            throw new ApiException("Missing the required parameter 'jobID' when calling getJob(Async)");
        }
        

        okhttp3.Call localVarCall = getJobCall(xVolTenant, jobID, _callback);
        return localVarCall;

    }

    /**
     * Get Job
     * Get the specified job
     * @param xVolTenant Tenant ID (required)
     * @param jobID Id of bin to get (required)
     * @return JobQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public JobQueueResponse getJob(Integer xVolTenant, Long jobID) throws ApiException {
        ApiResponse<JobQueueResponse> localVarResp = getJobWithHttpInfo(xVolTenant, jobID);
        return localVarResp.getData();
    }

    /**
     * Get Job
     * Get the specified job
     * @param xVolTenant Tenant ID (required)
     * @param jobID Id of bin to get (required)
     * @return ApiResponse&lt;JobQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobQueueResponse> getJobWithHttpInfo(Integer xVolTenant, Long jobID) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(xVolTenant, jobID, null);
        Type localVarReturnType = new TypeToken<JobQueueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Job (asynchronously)
     * Get the specified job
     * @param xVolTenant Tenant ID (required)
     * @param jobID Id of bin to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(Integer xVolTenant, Long jobID, final ApiCallback<JobQueueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(xVolTenant, jobID, _callback);
        Type localVarReturnType = new TypeToken<JobQueueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param xVolTenant Tenant ID (required)
     * @param locationCode Tenant specified unique Identifier of the owning location (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param owner User that owns the job (optional)
     * @param types Type of the Job Queue Request (optional)
     * @param originalFilename The full name of the file that was picked up at the secure droppoint server before being split up by location. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(Integer xVolTenant, String locationCode, Integer limit, String owner, List<String> types, String originalFilename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationCode", locationCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (owner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner", owner));
        }

        if (types != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "types", types));
        }

        if (originalFilename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalFilename", originalFilename));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(Integer xVolTenant, String locationCode, Integer limit, String owner, List<String> types, String originalFilename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getJobs(Async)");
        }
        

        okhttp3.Call localVarCall = getJobsCall(xVolTenant, locationCode, limit, owner, types, originalFilename, _callback);
        return localVarCall;

    }

    /**
     * Get Jobs
     * Get the requested jobs
     * @param xVolTenant Tenant ID (required)
     * @param locationCode Tenant specified unique Identifier of the owning location (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param owner User that owns the job (optional)
     * @param types Type of the Job Queue Request (optional)
     * @param originalFilename The full name of the file that was picked up at the secure droppoint server before being split up by location. (optional)
     * @return List&lt;JobQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<JobQueueResponse> getJobs(Integer xVolTenant, String locationCode, Integer limit, String owner, List<String> types, String originalFilename) throws ApiException {
        ApiResponse<List<JobQueueResponse>> localVarResp = getJobsWithHttpInfo(xVolTenant, locationCode, limit, owner, types, originalFilename);
        return localVarResp.getData();
    }

    /**
     * Get Jobs
     * Get the requested jobs
     * @param xVolTenant Tenant ID (required)
     * @param locationCode Tenant specified unique Identifier of the owning location (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param owner User that owns the job (optional)
     * @param types Type of the Job Queue Request (optional)
     * @param originalFilename The full name of the file that was picked up at the secure droppoint server before being split up by location. (optional)
     * @return ApiResponse&lt;List&lt;JobQueueResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobQueueResponse>> getJobsWithHttpInfo(Integer xVolTenant, String locationCode, Integer limit, String owner, List<String> types, String originalFilename) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(xVolTenant, locationCode, limit, owner, types, originalFilename, null);
        Type localVarReturnType = new TypeToken<List<JobQueueResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Jobs (asynchronously)
     * Get the requested jobs
     * @param xVolTenant Tenant ID (required)
     * @param locationCode Tenant specified unique Identifier of the owning location (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param owner User that owns the job (optional)
     * @param types Type of the Job Queue Request (optional)
     * @param originalFilename The full name of the file that was picked up at the secure droppoint server before being split up by location. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(Integer xVolTenant, String locationCode, Integer limit, String owner, List<String> types, String originalFilename, final ApiCallback<List<JobQueueResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(xVolTenant, locationCode, limit, owner, types, originalFilename, _callback);
        Type localVarReturnType = new TypeToken<List<JobQueueResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public InventoryJobApi build() {
            return new InventoryJobApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
