/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.models.MDeleteItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Delete Item Response
 */
@ApiModel(description = "Delete Item Response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DeleteItemResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_ITEMS_DELETED = "itemsDeleted";
  @SerializedName(SERIALIZED_NAME_ITEMS_DELETED)
  private List<MDeleteItem> itemsDeleted = null;

  public static final String SERIALIZED_NAME_TOTAL_AUDITS_DELETED = "totalAuditsDeleted";
  @SerializedName(SERIALIZED_NAME_TOTAL_AUDITS_DELETED)
  private Boolean totalAuditsDeleted;

  public static final String SERIALIZED_NAME_TOTAL_INVENTORY_ENTRIES_DELETED = "totalInventoryEntriesDeleted";
  @SerializedName(SERIALIZED_NAME_TOTAL_INVENTORY_ENTRIES_DELETED)
  private Boolean totalInventoryEntriesDeleted;

  public static final String SERIALIZED_NAME_TOTAL_LOCATIONS_AFFECTED = "totalLocationsAffected";
  @SerializedName(SERIALIZED_NAME_TOTAL_LOCATIONS_AFFECTED)
  private Boolean totalLocationsAffected;

  public static final String SERIALIZED_NAME_TOTAL_PICK_WAVES_DELETED = "totalPickWavesDeleted";
  @SerializedName(SERIALIZED_NAME_TOTAL_PICK_WAVES_DELETED)
  private Boolean totalPickWavesDeleted;

  public static final String SERIALIZED_NAME_TOTAL_PRODUCTS_DELETED = "totalProductsDeleted";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRODUCTS_DELETED)
  private Boolean totalProductsDeleted;

  public static final String SERIALIZED_NAME_JOB_I_DS = "jobIDs";
  @SerializedName(SERIALIZED_NAME_JOB_I_DS)
  private Boolean jobIDs;

  public DeleteItemResponse() {
  }

  public DeleteItemResponse dryRun(Boolean dryRun) {
    
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return dryRun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getDryRun() {
    return dryRun;
  }


  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public DeleteItemResponse itemsDeleted(List<MDeleteItem> itemsDeleted) {
    
    this.itemsDeleted = itemsDeleted;
    return this;
  }

  public DeleteItemResponse addItemsDeletedItem(MDeleteItem itemsDeletedItem) {
    if (this.itemsDeleted == null) {
      this.itemsDeleted = new ArrayList<>();
    }
    this.itemsDeleted.add(itemsDeletedItem);
    return this;
  }

   /**
   * Items deleted due to the request
   * @return itemsDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Items deleted due to the request")

  public List<MDeleteItem> getItemsDeleted() {
    return itemsDeleted;
  }


  public void setItemsDeleted(List<MDeleteItem> itemsDeleted) {
    this.itemsDeleted = itemsDeleted;
  }


  public DeleteItemResponse totalAuditsDeleted(Boolean totalAuditsDeleted) {
    
    this.totalAuditsDeleted = totalAuditsDeleted;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return totalAuditsDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getTotalAuditsDeleted() {
    return totalAuditsDeleted;
  }


  public void setTotalAuditsDeleted(Boolean totalAuditsDeleted) {
    this.totalAuditsDeleted = totalAuditsDeleted;
  }


  public DeleteItemResponse totalInventoryEntriesDeleted(Boolean totalInventoryEntriesDeleted) {
    
    this.totalInventoryEntriesDeleted = totalInventoryEntriesDeleted;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return totalInventoryEntriesDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getTotalInventoryEntriesDeleted() {
    return totalInventoryEntriesDeleted;
  }


  public void setTotalInventoryEntriesDeleted(Boolean totalInventoryEntriesDeleted) {
    this.totalInventoryEntriesDeleted = totalInventoryEntriesDeleted;
  }


  public DeleteItemResponse totalLocationsAffected(Boolean totalLocationsAffected) {
    
    this.totalLocationsAffected = totalLocationsAffected;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return totalLocationsAffected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getTotalLocationsAffected() {
    return totalLocationsAffected;
  }


  public void setTotalLocationsAffected(Boolean totalLocationsAffected) {
    this.totalLocationsAffected = totalLocationsAffected;
  }


  public DeleteItemResponse totalPickWavesDeleted(Boolean totalPickWavesDeleted) {
    
    this.totalPickWavesDeleted = totalPickWavesDeleted;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return totalPickWavesDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getTotalPickWavesDeleted() {
    return totalPickWavesDeleted;
  }


  public void setTotalPickWavesDeleted(Boolean totalPickWavesDeleted) {
    this.totalPickWavesDeleted = totalPickWavesDeleted;
  }


  public DeleteItemResponse totalProductsDeleted(Boolean totalProductsDeleted) {
    
    this.totalProductsDeleted = totalProductsDeleted;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return totalProductsDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getTotalProductsDeleted() {
    return totalProductsDeleted;
  }


  public void setTotalProductsDeleted(Boolean totalProductsDeleted) {
    this.totalProductsDeleted = totalProductsDeleted;
  }


  public DeleteItemResponse jobIDs(Boolean jobIDs) {
    
    this.jobIDs = jobIDs;
    return this;
  }

   /**
   * Flag used to differentiate between a test and a non-test run.
   * @return jobIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag used to differentiate between a test and a non-test run.")

  public Boolean getJobIDs() {
    return jobIDs;
  }


  public void setJobIDs(Boolean jobIDs) {
    this.jobIDs = jobIDs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteItemResponse deleteItemResponse = (DeleteItemResponse) o;
    return Objects.equals(this.dryRun, deleteItemResponse.dryRun) &&
        Objects.equals(this.itemsDeleted, deleteItemResponse.itemsDeleted) &&
        Objects.equals(this.totalAuditsDeleted, deleteItemResponse.totalAuditsDeleted) &&
        Objects.equals(this.totalInventoryEntriesDeleted, deleteItemResponse.totalInventoryEntriesDeleted) &&
        Objects.equals(this.totalLocationsAffected, deleteItemResponse.totalLocationsAffected) &&
        Objects.equals(this.totalPickWavesDeleted, deleteItemResponse.totalPickWavesDeleted) &&
        Objects.equals(this.totalProductsDeleted, deleteItemResponse.totalProductsDeleted) &&
        Objects.equals(this.jobIDs, deleteItemResponse.jobIDs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dryRun, itemsDeleted, totalAuditsDeleted, totalInventoryEntriesDeleted, totalLocationsAffected, totalPickWavesDeleted, totalProductsDeleted, jobIDs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteItemResponse {\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    itemsDeleted: ").append(toIndentedString(itemsDeleted)).append("\n");
    sb.append("    totalAuditsDeleted: ").append(toIndentedString(totalAuditsDeleted)).append("\n");
    sb.append("    totalInventoryEntriesDeleted: ").append(toIndentedString(totalInventoryEntriesDeleted)).append("\n");
    sb.append("    totalLocationsAffected: ").append(toIndentedString(totalLocationsAffected)).append("\n");
    sb.append("    totalPickWavesDeleted: ").append(toIndentedString(totalPickWavesDeleted)).append("\n");
    sb.append("    totalProductsDeleted: ").append(toIndentedString(totalProductsDeleted)).append("\n");
    sb.append("    jobIDs: ").append(toIndentedString(jobIDs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dryRun");
    openapiFields.add("itemsDeleted");
    openapiFields.add("totalAuditsDeleted");
    openapiFields.add("totalInventoryEntriesDeleted");
    openapiFields.add("totalLocationsAffected");
    openapiFields.add("totalPickWavesDeleted");
    openapiFields.add("totalProductsDeleted");
    openapiFields.add("jobIDs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeleteItemResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeleteItemResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteItemResponse is not found in the empty JSON string", DeleteItemResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!DeleteItemResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteItemResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("itemsDeleted") != null && !jsonObj.get("itemsDeleted").isJsonNull()) {
        JsonArray jsonArrayitemsDeleted = jsonObj.getAsJsonArray("itemsDeleted");
        if (jsonArrayitemsDeleted != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemsDeleted").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemsDeleted` to be an array in the JSON string but got `%s`", jsonObj.get("itemsDeleted").toString()));
          }

          // validate the optional field `itemsDeleted` (array)
          for (int i = 0; i < jsonArrayitemsDeleted.size(); i++) {
            MDeleteItem.validateJsonObject(jsonArrayitemsDeleted.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteItemResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteItemResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteItemResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteItemResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteItemResponse>() {
           @Override
           public void write(JsonWriter out, DeleteItemResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteItemResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeleteItemResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeleteItemResponse
  * @throws IOException if the JSON string is invalid with respect to DeleteItemResponse
  */
  public static DeleteItemResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteItemResponse.class);
  }

 /**
  * Convert an instance of DeleteItemResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

