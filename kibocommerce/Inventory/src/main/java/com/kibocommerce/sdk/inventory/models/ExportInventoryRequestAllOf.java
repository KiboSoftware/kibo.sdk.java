/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ExportInventoryRequestAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExportInventoryRequestAllOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_NAME = "exportSettingsName";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_NAME)
  private String exportSettingsName;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_F_T_P_NAME = "exportSettingsFTPName";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_F_T_P_NAME)
  private String exportSettingsFTPName;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_S3_NAME = "exportSettingsS3Name";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_S3_NAME)
  private String exportSettingsS3Name;

  public static final String SERIALIZED_NAME_DEVELOPMENT = "development";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT)
  private Boolean development;

  public ExportInventoryRequestAllOf() {
  }

  public ExportInventoryRequestAllOf exportSettingsName(String exportSettingsName) {
    
    this.exportSettingsName = exportSettingsName;
    return this;
  }

   /**
   * Name of the Export Settings to use
   * @return exportSettingsName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Export Settings to use")

  public String getExportSettingsName() {
    return exportSettingsName;
  }


  public void setExportSettingsName(String exportSettingsName) {
    this.exportSettingsName = exportSettingsName;
  }


  public ExportInventoryRequestAllOf exportSettingsFTPName(String exportSettingsFTPName) {
    
    this.exportSettingsFTPName = exportSettingsFTPName;
    return this;
  }

   /**
   * Name of the FTP Settings to use. Will only check for this if exportID is already set
   * @return exportSettingsFTPName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the FTP Settings to use. Will only check for this if exportID is already set")

  public String getExportSettingsFTPName() {
    return exportSettingsFTPName;
  }


  public void setExportSettingsFTPName(String exportSettingsFTPName) {
    this.exportSettingsFTPName = exportSettingsFTPName;
  }


  public ExportInventoryRequestAllOf exportSettingsS3Name(String exportSettingsS3Name) {
    
    this.exportSettingsS3Name = exportSettingsS3Name;
    return this;
  }

   /**
   * Name of the S3 Settings to use. Will only check for this if exportID is already set
   * @return exportSettingsS3Name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the S3 Settings to use. Will only check for this if exportID is already set")

  public String getExportSettingsS3Name() {
    return exportSettingsS3Name;
  }


  public void setExportSettingsS3Name(String exportSettingsS3Name) {
    this.exportSettingsS3Name = exportSettingsS3Name;
  }


  public ExportInventoryRequestAllOf development(Boolean development) {
    
    this.development = development;
    return this;
  }

   /**
   * Flag for sending the exports to the development droppoint
   * @return development
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for sending the exports to the development droppoint")

  public Boolean getDevelopment() {
    return development;
  }


  public void setDevelopment(Boolean development) {
    this.development = development;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportInventoryRequestAllOf exportInventoryRequestAllOf = (ExportInventoryRequestAllOf) o;
    return Objects.equals(this.exportSettingsName, exportInventoryRequestAllOf.exportSettingsName) &&
        Objects.equals(this.exportSettingsFTPName, exportInventoryRequestAllOf.exportSettingsFTPName) &&
        Objects.equals(this.exportSettingsS3Name, exportInventoryRequestAllOf.exportSettingsS3Name) &&
        Objects.equals(this.development, exportInventoryRequestAllOf.development);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportSettingsName, exportSettingsFTPName, exportSettingsS3Name, development);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportInventoryRequestAllOf {\n");
    sb.append("    exportSettingsName: ").append(toIndentedString(exportSettingsName)).append("\n");
    sb.append("    exportSettingsFTPName: ").append(toIndentedString(exportSettingsFTPName)).append("\n");
    sb.append("    exportSettingsS3Name: ").append(toIndentedString(exportSettingsS3Name)).append("\n");
    sb.append("    development: ").append(toIndentedString(development)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exportSettingsName");
    openapiFields.add("exportSettingsFTPName");
    openapiFields.add("exportSettingsS3Name");
    openapiFields.add("development");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportInventoryRequestAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportInventoryRequestAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportInventoryRequestAllOf is not found in the empty JSON string", ExportInventoryRequestAllOf.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ExportInventoryRequestAllOf.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportInventoryRequestAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("exportSettingsName") != null && !jsonObj.get("exportSettingsName").isJsonNull()) && !jsonObj.get("exportSettingsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportSettingsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportSettingsName").toString()));
      }
      if ((jsonObj.get("exportSettingsFTPName") != null && !jsonObj.get("exportSettingsFTPName").isJsonNull()) && !jsonObj.get("exportSettingsFTPName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportSettingsFTPName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportSettingsFTPName").toString()));
      }
      if ((jsonObj.get("exportSettingsS3Name") != null && !jsonObj.get("exportSettingsS3Name").isJsonNull()) && !jsonObj.get("exportSettingsS3Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportSettingsS3Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportSettingsS3Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportInventoryRequestAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportInventoryRequestAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportInventoryRequestAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportInventoryRequestAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportInventoryRequestAllOf>() {
           @Override
           public void write(JsonWriter out, ExportInventoryRequestAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportInventoryRequestAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportInventoryRequestAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportInventoryRequestAllOf
  * @throws IOException if the JSON string is invalid with respect to ExportInventoryRequestAllOf
  */
  public static ExportInventoryRequestAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportInventoryRequestAllOf.class);
  }

 /**
  * Convert an instance of ExportInventoryRequestAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

