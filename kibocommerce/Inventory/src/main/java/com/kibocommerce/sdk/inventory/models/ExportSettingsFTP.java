/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Export Settings FTP
 */
@ApiModel(description = "Export Settings FTP")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExportSettingsFTP implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_I_D = "exportSettingsID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_I_D)
  private Integer exportSettingsID;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_F_T_P_I_D = "exportSettingsFTPID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_F_T_P_I_D)
  private Integer exportSettingsFTPID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FTP_SERVER = "ftpServer";
  @SerializedName(SERIALIZED_NAME_FTP_SERVER)
  private String ftpServer;

  public static final String SERIALIZED_NAME_FTP_PORT = "ftpPort";
  @SerializedName(SERIALIZED_NAME_FTP_PORT)
  private Integer ftpPort;

  public static final String SERIALIZED_NAME_FTP_DIRECTORY = "ftpDirectory";
  @SerializedName(SERIALIZED_NAME_FTP_DIRECTORY)
  private String ftpDirectory;

  public static final String SERIALIZED_NAME_FTP_DIRECTORY_CONTROL_FILE = "ftpDirectoryControlFile";
  @SerializedName(SERIALIZED_NAME_FTP_DIRECTORY_CONTROL_FILE)
  private String ftpDirectoryControlFile;

  public static final String SERIALIZED_NAME_FTP_USER = "ftpUser";
  @SerializedName(SERIALIZED_NAME_FTP_USER)
  private String ftpUser;

  public static final String SERIALIZED_NAME_FTP_PASSWORD = "ftpPassword";
  @SerializedName(SERIALIZED_NAME_FTP_PASSWORD)
  private String ftpPassword;

  public static final String SERIALIZED_NAME_DELIVERY_CLASS = "deliveryClass";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CLASS)
  private String deliveryClass;

  public static final String SERIALIZED_NAME_CONTROL_FILE = "controlFile";
  @SerializedName(SERIALIZED_NAME_CONTROL_FILE)
  private String controlFile;

  public static final String SERIALIZED_NAME_CONTROL_FILE_EMAIL = "controlFileEmail";
  @SerializedName(SERIALIZED_NAME_CONTROL_FILE_EMAIL)
  private String controlFileEmail;

  public static final String SERIALIZED_NAME_REMOTE_FILE_NAME = "remoteFileName";
  @SerializedName(SERIALIZED_NAME_REMOTE_FILE_NAME)
  private String remoteFileName;

  public static final String SERIALIZED_NAME_CONTROL_FILE_NAME = "controlFileName";
  @SerializedName(SERIALIZED_NAME_CONTROL_FILE_NAME)
  private String controlFileName;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public ExportSettingsFTP() {
  }

  public ExportSettingsFTP active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Flag for Active State
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for Active State")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public ExportSettingsFTP exportSettingsID(Integer exportSettingsID) {
    
    this.exportSettingsID = exportSettingsID;
    return this;
  }

   /**
   * Export Settings ID
   * @return exportSettingsID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings ID")

  public Integer getExportSettingsID() {
    return exportSettingsID;
  }


  public void setExportSettingsID(Integer exportSettingsID) {
    this.exportSettingsID = exportSettingsID;
  }


  public ExportSettingsFTP exportSettingsFTPID(Integer exportSettingsFTPID) {
    
    this.exportSettingsFTPID = exportSettingsFTPID;
    return this;
  }

   /**
   * Export Settings FTP ID
   * @return exportSettingsFTPID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings FTP ID")

  public Integer getExportSettingsFTPID() {
    return exportSettingsFTPID;
  }


  public void setExportSettingsFTPID(Integer exportSettingsFTPID) {
    this.exportSettingsFTPID = exportSettingsFTPID;
  }


  public ExportSettingsFTP name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Export Settings FTP Name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Export Settings FTP Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ExportSettingsFTP ftpServer(String ftpServer) {
    
    this.ftpServer = ftpServer;
    return this;
  }

   /**
   * FTP Server Address
   * @return ftpServer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "FTP Server Address")

  public String getFtpServer() {
    return ftpServer;
  }


  public void setFtpServer(String ftpServer) {
    this.ftpServer = ftpServer;
  }


  public ExportSettingsFTP ftpPort(Integer ftpPort) {
    
    this.ftpPort = ftpPort;
    return this;
  }

   /**
   * FTP Server Port
   * @return ftpPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "FTP Server Port")

  public Integer getFtpPort() {
    return ftpPort;
  }


  public void setFtpPort(Integer ftpPort) {
    this.ftpPort = ftpPort;
  }


  public ExportSettingsFTP ftpDirectory(String ftpDirectory) {
    
    this.ftpDirectory = ftpDirectory;
    return this;
  }

   /**
   * FTP Server Directory
   * @return ftpDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "FTP Server Directory")

  public String getFtpDirectory() {
    return ftpDirectory;
  }


  public void setFtpDirectory(String ftpDirectory) {
    this.ftpDirectory = ftpDirectory;
  }


  public ExportSettingsFTP ftpDirectoryControlFile(String ftpDirectoryControlFile) {
    
    this.ftpDirectoryControlFile = ftpDirectoryControlFile;
    return this;
  }

   /**
   * FTP Server Control File Directory
   * @return ftpDirectoryControlFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP Server Control File Directory")

  public String getFtpDirectoryControlFile() {
    return ftpDirectoryControlFile;
  }


  public void setFtpDirectoryControlFile(String ftpDirectoryControlFile) {
    this.ftpDirectoryControlFile = ftpDirectoryControlFile;
  }


  public ExportSettingsFTP ftpUser(String ftpUser) {
    
    this.ftpUser = ftpUser;
    return this;
  }

   /**
   * FTP Username
   * @return ftpUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP Username")

  public String getFtpUser() {
    return ftpUser;
  }


  public void setFtpUser(String ftpUser) {
    this.ftpUser = ftpUser;
  }


  public ExportSettingsFTP ftpPassword(String ftpPassword) {
    
    this.ftpPassword = ftpPassword;
    return this;
  }

   /**
   * FTP Password
   * @return ftpPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP Password")

  public String getFtpPassword() {
    return ftpPassword;
  }


  public void setFtpPassword(String ftpPassword) {
    this.ftpPassword = ftpPassword;
  }


  public ExportSettingsFTP deliveryClass(String deliveryClass) {
    
    this.deliveryClass = deliveryClass;
    return this;
  }

   /**
   * FTP Delivery Class. Defaults to ExportDeliveryDefault
   * @return deliveryClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP Delivery Class. Defaults to ExportDeliveryDefault")

  public String getDeliveryClass() {
    return deliveryClass;
  }


  public void setDeliveryClass(String deliveryClass) {
    this.deliveryClass = deliveryClass;
  }


  public ExportSettingsFTP controlFile(String controlFile) {
    
    this.controlFile = controlFile;
    return this;
  }

   /**
   * Control File
   * @return controlFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Control File")

  public String getControlFile() {
    return controlFile;
  }


  public void setControlFile(String controlFile) {
    this.controlFile = controlFile;
  }


  public ExportSettingsFTP controlFileEmail(String controlFileEmail) {
    
    this.controlFileEmail = controlFileEmail;
    return this;
  }

   /**
   * Control File Email
   * @return controlFileEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Control File Email")

  public String getControlFileEmail() {
    return controlFileEmail;
  }


  public void setControlFileEmail(String controlFileEmail) {
    this.controlFileEmail = controlFileEmail;
  }


  public ExportSettingsFTP remoteFileName(String remoteFileName) {
    
    this.remoteFileName = remoteFileName;
    return this;
  }

   /**
   * Remote File Name
   * @return remoteFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Remote File Name")

  public String getRemoteFileName() {
    return remoteFileName;
  }


  public void setRemoteFileName(String remoteFileName) {
    this.remoteFileName = remoteFileName;
  }


  public ExportSettingsFTP controlFileName(String controlFileName) {
    
    this.controlFileName = controlFileName;
    return this;
  }

   /**
   * Control File Name
   * @return controlFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Control File Name")

  public String getControlFileName() {
    return controlFileName;
  }


  public void setControlFileName(String controlFileName) {
    this.controlFileName = controlFileName;
  }


  public ExportSettingsFTP endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Endpoint
   * @return endpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Endpoint")

  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public ExportSettingsFTP environment(String environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Environment")

  public String getEnvironment() {
    return environment;
  }


  public void setEnvironment(String environment) {
    this.environment = environment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSettingsFTP exportSettingsFTP = (ExportSettingsFTP) o;
    return Objects.equals(this.active, exportSettingsFTP.active) &&
        Objects.equals(this.exportSettingsID, exportSettingsFTP.exportSettingsID) &&
        Objects.equals(this.exportSettingsFTPID, exportSettingsFTP.exportSettingsFTPID) &&
        Objects.equals(this.name, exportSettingsFTP.name) &&
        Objects.equals(this.ftpServer, exportSettingsFTP.ftpServer) &&
        Objects.equals(this.ftpPort, exportSettingsFTP.ftpPort) &&
        Objects.equals(this.ftpDirectory, exportSettingsFTP.ftpDirectory) &&
        Objects.equals(this.ftpDirectoryControlFile, exportSettingsFTP.ftpDirectoryControlFile) &&
        Objects.equals(this.ftpUser, exportSettingsFTP.ftpUser) &&
        Objects.equals(this.ftpPassword, exportSettingsFTP.ftpPassword) &&
        Objects.equals(this.deliveryClass, exportSettingsFTP.deliveryClass) &&
        Objects.equals(this.controlFile, exportSettingsFTP.controlFile) &&
        Objects.equals(this.controlFileEmail, exportSettingsFTP.controlFileEmail) &&
        Objects.equals(this.remoteFileName, exportSettingsFTP.remoteFileName) &&
        Objects.equals(this.controlFileName, exportSettingsFTP.controlFileName) &&
        Objects.equals(this.endpoint, exportSettingsFTP.endpoint) &&
        Objects.equals(this.environment, exportSettingsFTP.environment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, exportSettingsID, exportSettingsFTPID, name, ftpServer, ftpPort, ftpDirectory, ftpDirectoryControlFile, ftpUser, ftpPassword, deliveryClass, controlFile, controlFileEmail, remoteFileName, controlFileName, endpoint, environment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSettingsFTP {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    exportSettingsID: ").append(toIndentedString(exportSettingsID)).append("\n");
    sb.append("    exportSettingsFTPID: ").append(toIndentedString(exportSettingsFTPID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ftpServer: ").append(toIndentedString(ftpServer)).append("\n");
    sb.append("    ftpPort: ").append(toIndentedString(ftpPort)).append("\n");
    sb.append("    ftpDirectory: ").append(toIndentedString(ftpDirectory)).append("\n");
    sb.append("    ftpDirectoryControlFile: ").append(toIndentedString(ftpDirectoryControlFile)).append("\n");
    sb.append("    ftpUser: ").append(toIndentedString(ftpUser)).append("\n");
    sb.append("    ftpPassword: ").append(toIndentedString(ftpPassword)).append("\n");
    sb.append("    deliveryClass: ").append(toIndentedString(deliveryClass)).append("\n");
    sb.append("    controlFile: ").append(toIndentedString(controlFile)).append("\n");
    sb.append("    controlFileEmail: ").append(toIndentedString(controlFileEmail)).append("\n");
    sb.append("    remoteFileName: ").append(toIndentedString(remoteFileName)).append("\n");
    sb.append("    controlFileName: ").append(toIndentedString(controlFileName)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("exportSettingsID");
    openapiFields.add("exportSettingsFTPID");
    openapiFields.add("name");
    openapiFields.add("ftpServer");
    openapiFields.add("ftpPort");
    openapiFields.add("ftpDirectory");
    openapiFields.add("ftpDirectoryControlFile");
    openapiFields.add("ftpUser");
    openapiFields.add("ftpPassword");
    openapiFields.add("deliveryClass");
    openapiFields.add("controlFile");
    openapiFields.add("controlFileEmail");
    openapiFields.add("remoteFileName");
    openapiFields.add("controlFileName");
    openapiFields.add("endpoint");
    openapiFields.add("environment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("ftpServer");
    openapiRequiredFields.add("ftpPort");
    openapiRequiredFields.add("ftpDirectory");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportSettingsFTP
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportSettingsFTP.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSettingsFTP is not found in the empty JSON string", ExportSettingsFTP.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ExportSettingsFTP.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSettingsFTP` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportSettingsFTP.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("ftpServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpServer").toString()));
      }
      if (!jsonObj.get("ftpDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpDirectory").toString()));
      }
      if ((jsonObj.get("ftpDirectoryControlFile") != null && !jsonObj.get("ftpDirectoryControlFile").isJsonNull()) && !jsonObj.get("ftpDirectoryControlFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpDirectoryControlFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpDirectoryControlFile").toString()));
      }
      if ((jsonObj.get("ftpUser") != null && !jsonObj.get("ftpUser").isJsonNull()) && !jsonObj.get("ftpUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpUser").toString()));
      }
      if ((jsonObj.get("ftpPassword") != null && !jsonObj.get("ftpPassword").isJsonNull()) && !jsonObj.get("ftpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftpPassword").toString()));
      }
      if ((jsonObj.get("deliveryClass") != null && !jsonObj.get("deliveryClass").isJsonNull()) && !jsonObj.get("deliveryClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryClass").toString()));
      }
      if ((jsonObj.get("controlFile") != null && !jsonObj.get("controlFile").isJsonNull()) && !jsonObj.get("controlFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlFile").toString()));
      }
      if ((jsonObj.get("controlFileEmail") != null && !jsonObj.get("controlFileEmail").isJsonNull()) && !jsonObj.get("controlFileEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlFileEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlFileEmail").toString()));
      }
      if ((jsonObj.get("remoteFileName") != null && !jsonObj.get("remoteFileName").isJsonNull()) && !jsonObj.get("remoteFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteFileName").toString()));
      }
      if ((jsonObj.get("controlFileName") != null && !jsonObj.get("controlFileName").isJsonNull()) && !jsonObj.get("controlFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlFileName").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSettingsFTP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSettingsFTP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSettingsFTP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSettingsFTP.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSettingsFTP>() {
           @Override
           public void write(JsonWriter out, ExportSettingsFTP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSettingsFTP read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportSettingsFTP given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportSettingsFTP
  * @throws IOException if the JSON string is invalid with respect to ExportSettingsFTP
  */
  public static ExportSettingsFTP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSettingsFTP.class);
  }

 /**
  * Convert an instance of ExportSettingsFTP to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

