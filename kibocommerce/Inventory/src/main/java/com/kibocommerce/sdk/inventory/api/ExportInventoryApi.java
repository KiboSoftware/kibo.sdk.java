/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.inventory.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.inventory.models.CreateExportSettingsFTPRequest;
import com.kibocommerce.sdk.inventory.models.CreateExportSettingsRequest;
import com.kibocommerce.sdk.inventory.models.CreateExportSettingsS3Request;
import com.kibocommerce.sdk.inventory.models.DeletedCountResponse;
import com.kibocommerce.sdk.inventory.models.ExportInventoryRequest;
import com.kibocommerce.sdk.inventory.models.ExportInventoryResponse;
import com.kibocommerce.sdk.inventory.models.ExportSettingsResponse;
import com.kibocommerce.sdk.inventory.models.GetExportSettingsResponse;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsFTPRequest;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsFTPResponse;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsRequest;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsResponse;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsS3Request;
import com.kibocommerce.sdk.inventory.models.UpdateExportSettingsS3Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExportInventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ExportInventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportInventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ExportInventoryApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ExportInventoryApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ExportInventoryApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsCall(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExportSettingsRequest;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExportSettingsValidateBeforeCall(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettings(Async)");
        }
        
        // verify the required parameter 'createExportSettingsRequest' is set
        if (createExportSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsRequest' when calling createExportSettings(Async)");
        }
        

        okhttp3.Call localVarCall = createExportSettingsCall(xVolTenant, createExportSettingsRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Export Settings
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @return ExportSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ExportSettingsResponse createExportSettings(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest) throws ApiException {
        ApiResponse<ExportSettingsResponse> localVarResp = createExportSettingsWithHttpInfo(xVolTenant, createExportSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Create Export Settings
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @return ApiResponse&lt;ExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportSettingsResponse> createExportSettingsWithHttpInfo(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = createExportSettingsValidateBeforeCall(xVolTenant, createExportSettingsRequest, null);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Export Settings (asynchronously)
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsAsync(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ApiCallback<ExportSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExportSettingsValidateBeforeCall(xVolTenant, createExportSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsFTPCall(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExportSettingsFTPRequest;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/ftp/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExportSettingsFTPValidateBeforeCall(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'createExportSettingsFTPRequest' is set
        if (createExportSettingsFTPRequest == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsFTPRequest' when calling createExportSettingsFTP(Async)");
        }
        

        okhttp3.Call localVarCall = createExportSettingsFTPCall(xVolTenant, createExportSettingsFTPRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Export Settings FTP
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @return ExportSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ExportSettingsResponse createExportSettingsFTP(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest) throws ApiException {
        ApiResponse<ExportSettingsResponse> localVarResp = createExportSettingsFTPWithHttpInfo(xVolTenant, createExportSettingsFTPRequest);
        return localVarResp.getData();
    }

    /**
     * Create Export Settings FTP
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @return ApiResponse&lt;ExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportSettingsResponse> createExportSettingsFTPWithHttpInfo(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest) throws ApiException {
        okhttp3.Call localVarCall = createExportSettingsFTPValidateBeforeCall(xVolTenant, createExportSettingsFTPRequest, null);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Export Settings FTP (asynchronously)
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsFTPAsync(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ApiCallback<ExportSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExportSettingsFTPValidateBeforeCall(xVolTenant, createExportSettingsFTPRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsS3Call(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createExportSettingsS3Request;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/s3/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExportSettingsS3ValidateBeforeCall(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'createExportSettingsS3Request' is set
        if (createExportSettingsS3Request == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsS3Request' when calling createExportSettingsS3(Async)");
        }
        

        okhttp3.Call localVarCall = createExportSettingsS3Call(xVolTenant, createExportSettingsS3Request, _callback);
        return localVarCall;

    }

    /**
     * Create Export Settings S3
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @return ExportSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ExportSettingsResponse createExportSettingsS3(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request) throws ApiException {
        ApiResponse<ExportSettingsResponse> localVarResp = createExportSettingsS3WithHttpInfo(xVolTenant, createExportSettingsS3Request);
        return localVarResp.getData();
    }

    /**
     * Create Export Settings S3
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @return ApiResponse&lt;ExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportSettingsResponse> createExportSettingsS3WithHttpInfo(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request) throws ApiException {
        okhttp3.Call localVarCall = createExportSettingsS3ValidateBeforeCall(xVolTenant, createExportSettingsS3Request, null);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Export Settings S3 (asynchronously)
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createExportSettingsS3Async(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ApiCallback<ExportSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExportSettingsS3ValidateBeforeCall(xVolTenant, createExportSettingsS3Request, _callback);
        Type localVarReturnType = new TypeToken<ExportSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsCall(Integer xVolTenant, String exportSettingsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/{exportSettingsName}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExportSettingsValidateBeforeCall(Integer xVolTenant, String exportSettingsName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettings(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettings(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExportSettingsCall(xVolTenant, exportSettingsName, _callback);
        return localVarCall;

    }

    /**
     * Delete Export Settings
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return DeletedCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeletedCountResponse deleteExportSettings(Integer xVolTenant, String exportSettingsName) throws ApiException {
        ApiResponse<DeletedCountResponse> localVarResp = deleteExportSettingsWithHttpInfo(xVolTenant, exportSettingsName);
        return localVarResp.getData();
    }

    /**
     * Delete Export Settings
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return ApiResponse&lt;DeletedCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedCountResponse> deleteExportSettingsWithHttpInfo(Integer xVolTenant, String exportSettingsName) throws ApiException {
        okhttp3.Call localVarCall = deleteExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, null);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Export Settings (asynchronously)
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsAsync(Integer xVolTenant, String exportSettingsName, final ApiCallback<DeletedCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, _callback);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsFTPCall(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}"
            .replaceAll("\\{" + "exportSettingsFTPName" + "\\}", localVarApiClient.escapeString(exportSettingsFTPName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExportSettingsFTPValidateBeforeCall(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsFTP(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExportSettingsFTPCall(xVolTenant, exportSettingsName, exportSettingsFTPName, _callback);
        return localVarCall;

    }

    /**
     * Delete Export Settings FTP
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (optional)
     * @return DeletedCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeletedCountResponse deleteExportSettingsFTP(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName) throws ApiException {
        ApiResponse<DeletedCountResponse> localVarResp = deleteExportSettingsFTPWithHttpInfo(xVolTenant, exportSettingsName, exportSettingsFTPName);
        return localVarResp.getData();
    }

    /**
     * Delete Export Settings FTP
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (optional)
     * @return ApiResponse&lt;DeletedCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedCountResponse> deleteExportSettingsFTPWithHttpInfo(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName) throws ApiException {
        okhttp3.Call localVarCall = deleteExportSettingsFTPValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsFTPName, null);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Export Settings FTP (asynchronously)
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsFTPAsync(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ApiCallback<DeletedCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExportSettingsFTPValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsFTPName, _callback);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsS3Call(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}"
            .replaceAll("\\{" + "exportSettingsS3Name" + "\\}", localVarApiClient.escapeString(exportSettingsS3Name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExportSettingsS3ValidateBeforeCall(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsS3(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExportSettingsS3Call(xVolTenant, exportSettingsName, exportSettingsS3Name, _callback);
        return localVarCall;

    }

    /**
     * Delete Export Settings S3
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (optional)
     * @return DeletedCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeletedCountResponse deleteExportSettingsS3(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name) throws ApiException {
        ApiResponse<DeletedCountResponse> localVarResp = deleteExportSettingsS3WithHttpInfo(xVolTenant, exportSettingsName, exportSettingsS3Name);
        return localVarResp.getData();
    }

    /**
     * Delete Export Settings S3
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (optional)
     * @return ApiResponse&lt;DeletedCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedCountResponse> deleteExportSettingsS3WithHttpInfo(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name) throws ApiException {
        okhttp3.Call localVarCall = deleteExportSettingsS3ValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsS3Name, null);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Export Settings S3 (asynchronously)
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExportSettingsS3Async(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ApiCallback<DeletedCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExportSettingsS3ValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsS3Name, _callback);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Export Setting Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportSettingsCall(Integer xVolTenant, String exportSettingsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportSettingsName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportSettingsValidateBeforeCall(Integer xVolTenant, String exportSettingsName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getExportSettings(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling getExportSettings(Async)");
        }
        

        okhttp3.Call localVarCall = getExportSettingsCall(xVolTenant, exportSettingsName, _callback);
        return localVarCall;

    }

    /**
     * Get Export Settings
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return List&lt;GetExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Export Setting Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<GetExportSettingsResponse> getExportSettings(Integer xVolTenant, String exportSettingsName) throws ApiException {
        ApiResponse<List<GetExportSettingsResponse>> localVarResp = getExportSettingsWithHttpInfo(xVolTenant, exportSettingsName);
        return localVarResp.getData();
    }

    /**
     * Get Export Settings
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return ApiResponse&lt;List&lt;GetExportSettingsResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Export Setting Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetExportSettingsResponse>> getExportSettingsWithHttpInfo(Integer xVolTenant, String exportSettingsName) throws ApiException {
        okhttp3.Call localVarCall = getExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, null);
        Type localVarReturnType = new TypeToken<List<GetExportSettingsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Export Settings (asynchronously)
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Export Setting Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportSettingsAsync(Integer xVolTenant, String exportSettingsName, final ApiCallback<List<GetExportSettingsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, _callback);
        Type localVarReturnType = new TypeToken<List<GetExportSettingsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runExport
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runExportCall(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportInventoryRequest;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runExportValidateBeforeCall(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling runExport(Async)");
        }
        
        // verify the required parameter 'exportInventoryRequest' is set
        if (exportInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'exportInventoryRequest' when calling runExport(Async)");
        }
        

        okhttp3.Call localVarCall = runExportCall(xVolTenant, exportInventoryRequest, _callback);
        return localVarCall;

    }

    /**
     * Run Export
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @return ExportInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ExportInventoryResponse runExport(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest) throws ApiException {
        ApiResponse<ExportInventoryResponse> localVarResp = runExportWithHttpInfo(xVolTenant, exportInventoryRequest);
        return localVarResp.getData();
    }

    /**
     * Run Export
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @return ApiResponse&lt;ExportInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportInventoryResponse> runExportWithHttpInfo(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest) throws ApiException {
        okhttp3.Call localVarCall = runExportValidateBeforeCall(xVolTenant, exportInventoryRequest, null);
        Type localVarReturnType = new TypeToken<ExportInventoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run Export (asynchronously)
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runExportAsync(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ApiCallback<ExportInventoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runExportValidateBeforeCall(xVolTenant, exportInventoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ExportInventoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsCall(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExportSettingsRequest;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExportSettingsValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettings(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsRequest' is set
        if (updateExportSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsRequest' when calling updateExportSettings(Async)");
        }
        

        okhttp3.Call localVarCall = updateExportSettingsCall(xVolTenant, updateExportSettingsRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Export Settings
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @return UpdateExportSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExportSettingsResponse updateExportSettings(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest) throws ApiException {
        ApiResponse<UpdateExportSettingsResponse> localVarResp = updateExportSettingsWithHttpInfo(xVolTenant, updateExportSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update Export Settings
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @return ApiResponse&lt;UpdateExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateExportSettingsResponse> updateExportSettingsWithHttpInfo(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExportSettingsValidateBeforeCall(xVolTenant, updateExportSettingsRequest, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Export Settings (asynchronously)
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsAsync(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ApiCallback<UpdateExportSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExportSettingsValidateBeforeCall(xVolTenant, updateExportSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsFTPCall(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExportSettingsFTPRequest;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/ftp/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExportSettingsFTPValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsFTPRequest' is set
        if (updateExportSettingsFTPRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsFTPRequest' when calling updateExportSettingsFTP(Async)");
        }
        

        okhttp3.Call localVarCall = updateExportSettingsFTPCall(xVolTenant, updateExportSettingsFTPRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Export Settings FTP
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @return UpdateExportSettingsFTPResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExportSettingsFTPResponse updateExportSettingsFTP(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest) throws ApiException {
        ApiResponse<UpdateExportSettingsFTPResponse> localVarResp = updateExportSettingsFTPWithHttpInfo(xVolTenant, updateExportSettingsFTPRequest);
        return localVarResp.getData();
    }

    /**
     * Update Export Settings FTP
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @return ApiResponse&lt;UpdateExportSettingsFTPResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateExportSettingsFTPResponse> updateExportSettingsFTPWithHttpInfo(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExportSettingsFTPValidateBeforeCall(xVolTenant, updateExportSettingsFTPRequest, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsFTPResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Export Settings FTP (asynchronously)
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsFTPAsync(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ApiCallback<UpdateExportSettingsFTPResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExportSettingsFTPValidateBeforeCall(xVolTenant, updateExportSettingsFTPRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsFTPResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsS3Call(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExportSettingsS3Request;

        // create path and map variables
        String localVarPath = "/commerce/inventory/v1/export/s3/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExportSettingsS3ValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsS3Request' is set
        if (updateExportSettingsS3Request == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsS3Request' when calling updateExportSettingsS3(Async)");
        }
        

        okhttp3.Call localVarCall = updateExportSettingsS3Call(xVolTenant, updateExportSettingsS3Request, _callback);
        return localVarCall;

    }

    /**
     * Update Export Settings S3
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @return UpdateExportSettingsS3Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExportSettingsS3Response updateExportSettingsS3(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request) throws ApiException {
        ApiResponse<UpdateExportSettingsS3Response> localVarResp = updateExportSettingsS3WithHttpInfo(xVolTenant, updateExportSettingsS3Request);
        return localVarResp.getData();
    }

    /**
     * Update Export Settings S3
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @return ApiResponse&lt;UpdateExportSettingsS3Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateExportSettingsS3Response> updateExportSettingsS3WithHttpInfo(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request) throws ApiException {
        okhttp3.Call localVarCall = updateExportSettingsS3ValidateBeforeCall(xVolTenant, updateExportSettingsS3Request, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsS3Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Export Settings S3 (asynchronously)
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Settings Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Service Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExportSettingsS3Async(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ApiCallback<UpdateExportSettingsS3Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExportSettingsS3ValidateBeforeCall(xVolTenant, updateExportSettingsS3Request, _callback);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsS3Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ExportInventoryApi build() {
            return new ExportInventoryApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
