/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Export Settings S3
 */
@ApiModel(description = "Export Settings S3")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExportSettingsS3 implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_I_D = "exportSettingsID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_I_D)
  private Integer exportSettingsID;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_S3_I_D = "exportSettingsS3ID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_S3_I_D)
  private Integer exportSettingsS3ID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public ExportSettingsS3() {
  }

  public ExportSettingsS3 exportSettingsID(Integer exportSettingsID) {
    
    this.exportSettingsID = exportSettingsID;
    return this;
  }

   /**
   * Export Settings ID
   * @return exportSettingsID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings ID")

  public Integer getExportSettingsID() {
    return exportSettingsID;
  }


  public void setExportSettingsID(Integer exportSettingsID) {
    this.exportSettingsID = exportSettingsID;
  }


  public ExportSettingsS3 exportSettingsS3ID(Integer exportSettingsS3ID) {
    
    this.exportSettingsS3ID = exportSettingsS3ID;
    return this;
  }

   /**
   * Export Settings S3 ID
   * @return exportSettingsS3ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings S3 ID")

  public Integer getExportSettingsS3ID() {
    return exportSettingsS3ID;
  }


  public void setExportSettingsS3ID(Integer exportSettingsS3ID) {
    this.exportSettingsS3ID = exportSettingsS3ID;
  }


  public ExportSettingsS3 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Export Settings S3 Name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Export Settings S3 Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ExportSettingsS3 active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Flag for Active State
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag for Active State")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public ExportSettingsS3 region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * S3 Region
   * @return region
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "S3 Region")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public ExportSettingsS3 bucket(String bucket) {
    
    this.bucket = bucket;
    return this;
  }

   /**
   * S3 Bucket (directory)
   * @return bucket
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "S3 Bucket (directory)")

  public String getBucket() {
    return bucket;
  }


  public void setBucket(String bucket) {
    this.bucket = bucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSettingsS3 exportSettingsS3 = (ExportSettingsS3) o;
    return Objects.equals(this.exportSettingsID, exportSettingsS3.exportSettingsID) &&
        Objects.equals(this.exportSettingsS3ID, exportSettingsS3.exportSettingsS3ID) &&
        Objects.equals(this.name, exportSettingsS3.name) &&
        Objects.equals(this.active, exportSettingsS3.active) &&
        Objects.equals(this.region, exportSettingsS3.region) &&
        Objects.equals(this.bucket, exportSettingsS3.bucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportSettingsID, exportSettingsS3ID, name, active, region, bucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSettingsS3 {\n");
    sb.append("    exportSettingsID: ").append(toIndentedString(exportSettingsID)).append("\n");
    sb.append("    exportSettingsS3ID: ").append(toIndentedString(exportSettingsS3ID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exportSettingsID");
    openapiFields.add("exportSettingsS3ID");
    openapiFields.add("name");
    openapiFields.add("active");
    openapiFields.add("region");
    openapiFields.add("bucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("bucket");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportSettingsS3
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportSettingsS3.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSettingsS3 is not found in the empty JSON string", ExportSettingsS3.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ExportSettingsS3.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSettingsS3` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportSettingsS3.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (!jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSettingsS3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSettingsS3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSettingsS3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSettingsS3.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSettingsS3>() {
           @Override
           public void write(JsonWriter out, ExportSettingsS3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSettingsS3 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportSettingsS3 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportSettingsS3
  * @throws IOException if the JSON string is invalid with respect to ExportSettingsS3
  */
  public static ExportSettingsS3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSettingsS3.class);
  }

 /**
  * Convert an instance of ExportSettingsS3 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

