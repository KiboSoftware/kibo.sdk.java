/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Item for Transitioning Cart allocations
 */
@ApiModel(description = "Item for Transitioning Cart allocations")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransitionCartItem implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ORDER_ITEM_I_D = "orderItemID";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_I_D)
  private Integer orderItemID;

  public static final String SERIALIZED_NAME_CART_ITEM_I_D = "cartItemID";
  @SerializedName(SERIALIZED_NAME_CART_ITEM_I_D)
  private String cartItemID;

  public static final String SERIALIZED_NAME_SHIPMENT_I_D = "shipmentID";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_I_D)
  private Integer shipmentID;

  public TransitionCartItem() {
  }

  public TransitionCartItem orderItemID(Integer orderItemID) {
    
    this.orderItemID = orderItemID;
    return this;
  }

   /**
   * order item ID
   * @return orderItemID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "order item ID")

  public Integer getOrderItemID() {
    return orderItemID;
  }


  public void setOrderItemID(Integer orderItemID) {
    this.orderItemID = orderItemID;
  }


  public TransitionCartItem cartItemID(String cartItemID) {
    
    this.cartItemID = cartItemID;
    return this;
  }

   /**
   * Cart Item ID (GUID)
   * @return cartItemID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cart Item ID (GUID)")

  public String getCartItemID() {
    return cartItemID;
  }


  public void setCartItemID(String cartItemID) {
    this.cartItemID = cartItemID;
  }


  public TransitionCartItem shipmentID(Integer shipmentID) {
    
    this.shipmentID = shipmentID;
    return this;
  }

   /**
   * shipment ID
   * @return shipmentID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "shipment ID")

  public Integer getShipmentID() {
    return shipmentID;
  }


  public void setShipmentID(Integer shipmentID) {
    this.shipmentID = shipmentID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitionCartItem transitionCartItem = (TransitionCartItem) o;
    return Objects.equals(this.orderItemID, transitionCartItem.orderItemID) &&
        Objects.equals(this.cartItemID, transitionCartItem.cartItemID) &&
        Objects.equals(this.shipmentID, transitionCartItem.shipmentID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderItemID, cartItemID, shipmentID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitionCartItem {\n");
    sb.append("    orderItemID: ").append(toIndentedString(orderItemID)).append("\n");
    sb.append("    cartItemID: ").append(toIndentedString(cartItemID)).append("\n");
    sb.append("    shipmentID: ").append(toIndentedString(shipmentID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderItemID");
    openapiFields.add("cartItemID");
    openapiFields.add("shipmentID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orderItemID");
    openapiRequiredFields.add("cartItemID");
    openapiRequiredFields.add("shipmentID");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransitionCartItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransitionCartItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitionCartItem is not found in the empty JSON string", TransitionCartItem.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!TransitionCartItem.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitionCartItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransitionCartItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("cartItemID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartItemID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartItemID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitionCartItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitionCartItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitionCartItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitionCartItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitionCartItem>() {
           @Override
           public void write(JsonWriter out, TransitionCartItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitionCartItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransitionCartItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransitionCartItem
  * @throws IOException if the JSON string is invalid with respect to TransitionCartItem
  */
  public static TransitionCartItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitionCartItem.class);
  }

 /**
  * Convert an instance of TransitionCartItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

