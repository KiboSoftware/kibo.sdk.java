/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.models.ProductIdentifier;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Delete Item Model
 */
@ApiModel(description = "Delete Item Model")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MDeleteItem implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_I_D = "productID";
  @SerializedName(SERIALIZED_NAME_PRODUCT_I_D)
  private Integer productID;

  public static final String SERIALIZED_NAME_INVENTORY_I_DS = "inventoryIDs";
  @SerializedName(SERIALIZED_NAME_INVENTORY_I_DS)
  private List<Integer> inventoryIDs = null;

  public static final String SERIALIZED_NAME_LOCATION_I_DS = "locationIDs";
  @SerializedName(SERIALIZED_NAME_LOCATION_I_DS)
  private List<Integer> locationIDs = null;

  public static final String SERIALIZED_NAME_LOCATION_CODES = "locationCodes";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODES)
  private List<String> locationCodes = null;

  public static final String SERIALIZED_NAME_AUDIT_I_DS = "auditIDs";
  @SerializedName(SERIALIZED_NAME_AUDIT_I_DS)
  private List<Integer> auditIDs = null;

  public static final String SERIALIZED_NAME_ITEM_IDENTIFIER = "itemIdentifier";
  @SerializedName(SERIALIZED_NAME_ITEM_IDENTIFIER)
  private ProductIdentifier itemIdentifier;

  public MDeleteItem() {
  }

  public MDeleteItem productID(Integer productID) {
    
    this.productID = productID;
    return this;
  }

   /**
   * Product Identifier
   * @return productID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product Identifier")

  public Integer getProductID() {
    return productID;
  }


  public void setProductID(Integer productID) {
    this.productID = productID;
  }


  public MDeleteItem inventoryIDs(List<Integer> inventoryIDs) {
    
    this.inventoryIDs = inventoryIDs;
    return this;
  }

  public MDeleteItem addInventoryIDsItem(Integer inventoryIDsItem) {
    if (this.inventoryIDs == null) {
      this.inventoryIDs = new ArrayList<>();
    }
    this.inventoryIDs.add(inventoryIDsItem);
    return this;
  }

   /**
   * List of inventory identifiers associated with the deleted item
   * @return inventoryIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of inventory identifiers associated with the deleted item")

  public List<Integer> getInventoryIDs() {
    return inventoryIDs;
  }


  public void setInventoryIDs(List<Integer> inventoryIDs) {
    this.inventoryIDs = inventoryIDs;
  }


  public MDeleteItem locationIDs(List<Integer> locationIDs) {
    
    this.locationIDs = locationIDs;
    return this;
  }

  public MDeleteItem addLocationIDsItem(Integer locationIDsItem) {
    if (this.locationIDs == null) {
      this.locationIDs = new ArrayList<>();
    }
    this.locationIDs.add(locationIDsItem);
    return this;
  }

   /**
   * List of location identifiers associated with the deleted item
   * @return locationIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of location identifiers associated with the deleted item")

  public List<Integer> getLocationIDs() {
    return locationIDs;
  }


  public void setLocationIDs(List<Integer> locationIDs) {
    this.locationIDs = locationIDs;
  }


  public MDeleteItem locationCodes(List<String> locationCodes) {
    
    this.locationCodes = locationCodes;
    return this;
  }

  public MDeleteItem addLocationCodesItem(String locationCodesItem) {
    if (this.locationCodes == null) {
      this.locationCodes = new ArrayList<>();
    }
    this.locationCodes.add(locationCodesItem);
    return this;
  }

   /**
   * List of location codes associated with the deleted item
   * @return locationCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of location codes associated with the deleted item")

  public List<String> getLocationCodes() {
    return locationCodes;
  }


  public void setLocationCodes(List<String> locationCodes) {
    this.locationCodes = locationCodes;
  }


  public MDeleteItem auditIDs(List<Integer> auditIDs) {
    
    this.auditIDs = auditIDs;
    return this;
  }

  public MDeleteItem addAuditIDsItem(Integer auditIDsItem) {
    if (this.auditIDs == null) {
      this.auditIDs = new ArrayList<>();
    }
    this.auditIDs.add(auditIDsItem);
    return this;
  }

   /**
   * List of audit identifiers associated with the deleted item
   * @return auditIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of audit identifiers associated with the deleted item")

  public List<Integer> getAuditIDs() {
    return auditIDs;
  }


  public void setAuditIDs(List<Integer> auditIDs) {
    this.auditIDs = auditIDs;
  }


  public MDeleteItem itemIdentifier(ProductIdentifier itemIdentifier) {
    
    this.itemIdentifier = itemIdentifier;
    return this;
  }

   /**
   * Get itemIdentifier
   * @return itemIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductIdentifier getItemIdentifier() {
    return itemIdentifier;
  }


  public void setItemIdentifier(ProductIdentifier itemIdentifier) {
    this.itemIdentifier = itemIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MDeleteItem mDeleteItem = (MDeleteItem) o;
    return Objects.equals(this.productID, mDeleteItem.productID) &&
        Objects.equals(this.inventoryIDs, mDeleteItem.inventoryIDs) &&
        Objects.equals(this.locationIDs, mDeleteItem.locationIDs) &&
        Objects.equals(this.locationCodes, mDeleteItem.locationCodes) &&
        Objects.equals(this.auditIDs, mDeleteItem.auditIDs) &&
        Objects.equals(this.itemIdentifier, mDeleteItem.itemIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productID, inventoryIDs, locationIDs, locationCodes, auditIDs, itemIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MDeleteItem {\n");
    sb.append("    productID: ").append(toIndentedString(productID)).append("\n");
    sb.append("    inventoryIDs: ").append(toIndentedString(inventoryIDs)).append("\n");
    sb.append("    locationIDs: ").append(toIndentedString(locationIDs)).append("\n");
    sb.append("    locationCodes: ").append(toIndentedString(locationCodes)).append("\n");
    sb.append("    auditIDs: ").append(toIndentedString(auditIDs)).append("\n");
    sb.append("    itemIdentifier: ").append(toIndentedString(itemIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productID");
    openapiFields.add("inventoryIDs");
    openapiFields.add("locationIDs");
    openapiFields.add("locationCodes");
    openapiFields.add("auditIDs");
    openapiFields.add("itemIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MDeleteItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MDeleteItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MDeleteItem is not found in the empty JSON string", MDeleteItem.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!MDeleteItem.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MDeleteItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // ensure the json data is an array
      if (!jsonObj.get("inventoryIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryIDs` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryIDs").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("locationIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationIDs` to be an array in the JSON string but got `%s`", jsonObj.get("locationIDs").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("locationCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCodes` to be an array in the JSON string but got `%s`", jsonObj.get("locationCodes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("auditIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditIDs` to be an array in the JSON string but got `%s`", jsonObj.get("auditIDs").toString()));
      }
      // validate the optional field `itemIdentifier`
      if (jsonObj.get("itemIdentifier") != null && !jsonObj.get("itemIdentifier").isJsonNull()) {
        ProductIdentifier.validateJsonObject(jsonObj.getAsJsonObject("itemIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MDeleteItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MDeleteItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MDeleteItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MDeleteItem.class));

       return (TypeAdapter<T>) new TypeAdapter<MDeleteItem>() {
           @Override
           public void write(JsonWriter out, MDeleteItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MDeleteItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MDeleteItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MDeleteItem
  * @throws IOException if the JSON string is invalid with respect to MDeleteItem
  */
  public static MDeleteItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MDeleteItem.class);
  }

 /**
  * Convert an instance of MDeleteItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

