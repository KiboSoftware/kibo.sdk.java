/*
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingadmin.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ShippingAdminHttpStatusCode
 */
@JsonAdapter(ShippingAdminHttpStatusCode.Adapter.class)
public enum ShippingAdminHttpStatusCode {
  
  CONTINUE("Continue"),
  
  SWITCHINGPROTOCOLS("SwitchingProtocols"),
  
  PROCESSING("Processing"),
  
  EARLYHINTS("EarlyHints"),
  
  OK("OK"),
  
  CREATED("Created"),
  
  ACCEPTED("Accepted"),
  
  NONAUTHORITATIVEINFORMATION("NonAuthoritativeInformation"),
  
  NOCONTENT("NoContent"),
  
  RESETCONTENT("ResetContent"),
  
  PARTIALCONTENT("PartialContent"),
  
  MULTISTATUS("MultiStatus"),
  
  ALREADYREPORTED("AlreadyReported"),
  
  IMUSED("IMUsed"),
  
  MULTIPLECHOICES("MultipleChoices"),
  
  AMBIGUOUS("Ambiguous"),
  
  MOVEDPERMANENTLY("MovedPermanently"),
  
  MOVED("Moved"),
  
  FOUND("Found"),
  
  REDIRECT("Redirect"),
  
  SEEOTHER("SeeOther"),
  
  REDIRECTMETHOD("RedirectMethod"),
  
  NOTMODIFIED("NotModified"),
  
  USEPROXY("UseProxy"),
  
  UNUSED("Unused"),
  
  TEMPORARYREDIRECT("TemporaryRedirect"),
  
  REDIRECTKEEPVERB("RedirectKeepVerb"),
  
  PERMANENTREDIRECT("PermanentRedirect"),
  
  BADREQUEST("BadRequest"),
  
  UNAUTHORIZED("Unauthorized"),
  
  PAYMENTREQUIRED("PaymentRequired"),
  
  FORBIDDEN("Forbidden"),
  
  NOTFOUND("NotFound"),
  
  METHODNOTALLOWED("MethodNotAllowed"),
  
  NOTACCEPTABLE("NotAcceptable"),
  
  PROXYAUTHENTICATIONREQUIRED("ProxyAuthenticationRequired"),
  
  REQUESTTIMEOUT("RequestTimeout"),
  
  CONFLICT("Conflict"),
  
  GONE("Gone"),
  
  LENGTHREQUIRED("LengthRequired"),
  
  PRECONDITIONFAILED("PreconditionFailed"),
  
  REQUESTENTITYTOOLARGE("RequestEntityTooLarge"),
  
  REQUESTURITOOLONG("RequestUriTooLong"),
  
  UNSUPPORTEDMEDIATYPE("UnsupportedMediaType"),
  
  REQUESTEDRANGENOTSATISFIABLE("RequestedRangeNotSatisfiable"),
  
  EXPECTATIONFAILED("ExpectationFailed"),
  
  MISDIRECTEDREQUEST("MisdirectedRequest"),
  
  UNPROCESSABLEENTITY("UnprocessableEntity"),
  
  LOCKED("Locked"),
  
  FAILEDDEPENDENCY("FailedDependency"),
  
  UPGRADEREQUIRED("UpgradeRequired"),
  
  PRECONDITIONREQUIRED("PreconditionRequired"),
  
  TOOMANYREQUESTS("TooManyRequests"),
  
  REQUESTHEADERFIELDSTOOLARGE("RequestHeaderFieldsTooLarge"),
  
  UNAVAILABLEFORLEGALREASONS("UnavailableForLegalReasons"),
  
  INTERNALSERVERERROR("InternalServerError"),
  
  NOTIMPLEMENTED("NotImplemented"),
  
  BADGATEWAY("BadGateway"),
  
  SERVICEUNAVAILABLE("ServiceUnavailable"),
  
  GATEWAYTIMEOUT("GatewayTimeout"),
  
  HTTPVERSIONNOTSUPPORTED("HttpVersionNotSupported"),
  
  VARIANTALSONEGOTIATES("VariantAlsoNegotiates"),
  
  INSUFFICIENTSTORAGE("InsufficientStorage"),
  
  LOOPDETECTED("LoopDetected"),
  
  NOTEXTENDED("NotExtended"),
  
  NETWORKAUTHENTICATIONREQUIRED("NetworkAuthenticationRequired");

  private String value;

  ShippingAdminHttpStatusCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ShippingAdminHttpStatusCode fromValue(String value) {
    for (ShippingAdminHttpStatusCode b : ShippingAdminHttpStatusCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ShippingAdminHttpStatusCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final ShippingAdminHttpStatusCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ShippingAdminHttpStatusCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ShippingAdminHttpStatusCode.fromValue(value);
    }
  }
}

