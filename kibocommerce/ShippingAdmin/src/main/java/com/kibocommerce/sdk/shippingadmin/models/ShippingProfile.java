/*
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingadmin.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingadmin.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.shippingadmin.models.HandlingFeeRule;
import com.kibocommerce.sdk.shippingadmin.models.ShippingInclusionRule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShippingProfile implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_TARGETED_SITE_IDS = "targetedSiteIds";
  @SerializedName(SERIALIZED_NAME_TARGETED_SITE_IDS)
  private List<Integer> targetedSiteIds = null;

  public static final String SERIALIZED_NAME_SHIPPING_INCLUSION_RULES = "shippingInclusionRules";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INCLUSION_RULES)
  private List<ShippingInclusionRule> shippingInclusionRules = null;

  public static final String SERIALIZED_NAME_PRODUCT_HANDLING_FEE_RULES = "productHandlingFeeRules";
  @SerializedName(SERIALIZED_NAME_PRODUCT_HANDLING_FEE_RULES)
  private List<HandlingFeeRule> productHandlingFeeRules = null;

  public static final String SERIALIZED_NAME_ORDER_HANDLING_FEE_RULES = "orderHandlingFeeRules";
  @SerializedName(SERIALIZED_NAME_ORDER_HANDLING_FEE_RULES)
  private List<HandlingFeeRule> orderHandlingFeeRules = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public ShippingProfile() {
  }

  public ShippingProfile code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Merchant entered unique identifier for a ShippingProfile
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant entered unique identifier for a ShippingProfile")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ShippingProfile targetedSiteIds(List<Integer> targetedSiteIds) {
    
    this.targetedSiteIds = targetedSiteIds;
    return this;
  }

  public ShippingProfile addTargetedSiteIdsItem(Integer targetedSiteIdsItem) {
    if (this.targetedSiteIds == null) {
      this.targetedSiteIds = new ArrayList<>();
    }
    this.targetedSiteIds.add(targetedSiteIdsItem);
    return this;
  }

   /**
   * The siteid&#39;s for which this profile applies  &lt;remarks&gt;for now there is a 1-1 relationship between this profile and site so only 1 siteid should be in this list&lt;/remarks&gt;
   * @return targetedSiteIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The siteid's for which this profile applies  <remarks>for now there is a 1-1 relationship between this profile and site so only 1 siteid should be in this list</remarks>")

  public List<Integer> getTargetedSiteIds() {
    return targetedSiteIds;
  }


  public void setTargetedSiteIds(List<Integer> targetedSiteIds) {
    this.targetedSiteIds = targetedSiteIds;
  }


  public ShippingProfile shippingInclusionRules(List<ShippingInclusionRule> shippingInclusionRules) {
    
    this.shippingInclusionRules = shippingInclusionRules;
    return this;
  }

  public ShippingProfile addShippingInclusionRulesItem(ShippingInclusionRule shippingInclusionRulesItem) {
    if (this.shippingInclusionRules == null) {
      this.shippingInclusionRules = new ArrayList<>();
    }
    this.shippingInclusionRules.add(shippingInclusionRulesItem);
    return this;
  }

   /**
   * 
   * @return shippingInclusionRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ShippingInclusionRule> getShippingInclusionRules() {
    return shippingInclusionRules;
  }


  public void setShippingInclusionRules(List<ShippingInclusionRule> shippingInclusionRules) {
    this.shippingInclusionRules = shippingInclusionRules;
  }


  public ShippingProfile productHandlingFeeRules(List<HandlingFeeRule> productHandlingFeeRules) {
    
    this.productHandlingFeeRules = productHandlingFeeRules;
    return this;
  }

  public ShippingProfile addProductHandlingFeeRulesItem(HandlingFeeRule productHandlingFeeRulesItem) {
    if (this.productHandlingFeeRules == null) {
      this.productHandlingFeeRules = new ArrayList<>();
    }
    this.productHandlingFeeRules.add(productHandlingFeeRulesItem);
    return this;
  }

   /**
   * 
   * @return productHandlingFeeRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HandlingFeeRule> getProductHandlingFeeRules() {
    return productHandlingFeeRules;
  }


  public void setProductHandlingFeeRules(List<HandlingFeeRule> productHandlingFeeRules) {
    this.productHandlingFeeRules = productHandlingFeeRules;
  }


  public ShippingProfile orderHandlingFeeRules(List<HandlingFeeRule> orderHandlingFeeRules) {
    
    this.orderHandlingFeeRules = orderHandlingFeeRules;
    return this;
  }

  public ShippingProfile addOrderHandlingFeeRulesItem(HandlingFeeRule orderHandlingFeeRulesItem) {
    if (this.orderHandlingFeeRules == null) {
      this.orderHandlingFeeRules = new ArrayList<>();
    }
    this.orderHandlingFeeRules.add(orderHandlingFeeRulesItem);
    return this;
  }

   /**
   * 
   * @return orderHandlingFeeRules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HandlingFeeRule> getOrderHandlingFeeRules() {
    return orderHandlingFeeRules;
  }


  public void setOrderHandlingFeeRules(List<HandlingFeeRule> orderHandlingFeeRules) {
    this.orderHandlingFeeRules = orderHandlingFeeRules;
  }


  public ShippingProfile auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingProfile shippingProfile = (ShippingProfile) o;
    return Objects.equals(this.code, shippingProfile.code) &&
        Objects.equals(this.targetedSiteIds, shippingProfile.targetedSiteIds) &&
        Objects.equals(this.shippingInclusionRules, shippingProfile.shippingInclusionRules) &&
        Objects.equals(this.productHandlingFeeRules, shippingProfile.productHandlingFeeRules) &&
        Objects.equals(this.orderHandlingFeeRules, shippingProfile.orderHandlingFeeRules) &&
        Objects.equals(this.auditInfo, shippingProfile.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, targetedSiteIds, shippingInclusionRules, productHandlingFeeRules, orderHandlingFeeRules, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingProfile {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    targetedSiteIds: ").append(toIndentedString(targetedSiteIds)).append("\n");
    sb.append("    shippingInclusionRules: ").append(toIndentedString(shippingInclusionRules)).append("\n");
    sb.append("    productHandlingFeeRules: ").append(toIndentedString(productHandlingFeeRules)).append("\n");
    sb.append("    orderHandlingFeeRules: ").append(toIndentedString(orderHandlingFeeRules)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("targetedSiteIds");
    openapiFields.add("shippingInclusionRules");
    openapiFields.add("productHandlingFeeRules");
    openapiFields.add("orderHandlingFeeRules");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShippingProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShippingProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingProfile is not found in the empty JSON string", ShippingProfile.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShippingProfile.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingProfile` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("targetedSiteIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetedSiteIds` to be an array in the JSON string but got `%s`", jsonObj.get("targetedSiteIds").toString()));
      }
      if (jsonObj.get("shippingInclusionRules") != null && !jsonObj.get("shippingInclusionRules").isJsonNull()) {
        JsonArray jsonArrayshippingInclusionRules = jsonObj.getAsJsonArray("shippingInclusionRules");
        if (jsonArrayshippingInclusionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingInclusionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingInclusionRules` to be an array in the JSON string but got `%s`", jsonObj.get("shippingInclusionRules").toString()));
          }

          // validate the optional field `shippingInclusionRules` (array)
          for (int i = 0; i < jsonArrayshippingInclusionRules.size(); i++) {
            ShippingInclusionRule.validateJsonObject(jsonArrayshippingInclusionRules.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("productHandlingFeeRules") != null && !jsonObj.get("productHandlingFeeRules").isJsonNull()) {
        JsonArray jsonArrayproductHandlingFeeRules = jsonObj.getAsJsonArray("productHandlingFeeRules");
        if (jsonArrayproductHandlingFeeRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productHandlingFeeRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productHandlingFeeRules` to be an array in the JSON string but got `%s`", jsonObj.get("productHandlingFeeRules").toString()));
          }

          // validate the optional field `productHandlingFeeRules` (array)
          for (int i = 0; i < jsonArrayproductHandlingFeeRules.size(); i++) {
            HandlingFeeRule.validateJsonObject(jsonArrayproductHandlingFeeRules.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("orderHandlingFeeRules") != null && !jsonObj.get("orderHandlingFeeRules").isJsonNull()) {
        JsonArray jsonArrayorderHandlingFeeRules = jsonObj.getAsJsonArray("orderHandlingFeeRules");
        if (jsonArrayorderHandlingFeeRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderHandlingFeeRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderHandlingFeeRules` to be an array in the JSON string but got `%s`", jsonObj.get("orderHandlingFeeRules").toString()));
          }

          // validate the optional field `orderHandlingFeeRules` (array)
          for (int i = 0; i < jsonArrayorderHandlingFeeRules.size(); i++) {
            HandlingFeeRule.validateJsonObject(jsonArrayorderHandlingFeeRules.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingProfile>() {
           @Override
           public void write(JsonWriter out, ShippingProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShippingProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShippingProfile
  * @throws IOException if the JSON string is invalid with respect to ShippingProfile
  */
  public static ShippingProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingProfile.class);
  }

 /**
  * Convert an instance of ShippingProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

