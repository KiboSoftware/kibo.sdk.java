/*
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingadmin.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.shippingadmin.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.shippingadmin.models.CarrierCredential;
import com.kibocommerce.sdk.shippingadmin.models.CarrierCredentialCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CarrierCredentialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CarrierCredentialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CarrierCredentialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CarrierCredentialApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CarrierCredentialApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CarrierCredentialApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCarrierCredential
     * @param carrierId The carrier ID. (required)
     * @param carrierCredential The carrier credential data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCarrierCredentialCall(String carrierId, CarrierCredential carrierCredential, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = carrierCredential;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/carriers/credentials/{carrierId}"
            .replaceAll("\\{" + "carrierId" + "\\}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCarrierCredentialValidateBeforeCall(String carrierId, CarrierCredential carrierCredential, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling createCarrierCredential(Async)");
        }
        

        okhttp3.Call localVarCall = createCarrierCredentialCall(carrierId, carrierCredential, _callback);
        return localVarCall;

    }

    /**
     * Creates a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * @param carrierId The carrier ID. (required)
     * @param carrierCredential The carrier credential data. (optional)
     * @return CarrierCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierCredential createCarrierCredential(String carrierId, CarrierCredential carrierCredential) throws ApiException {
        ApiResponse<CarrierCredential> localVarResp = createCarrierCredentialWithHttpInfo(carrierId, carrierCredential);
        return localVarResp.getData();
    }

    /**
     * Creates a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * @param carrierId The carrier ID. (required)
     * @param carrierCredential The carrier credential data. (optional)
     * @return ApiResponse&lt;CarrierCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierCredential> createCarrierCredentialWithHttpInfo(String carrierId, CarrierCredential carrierCredential) throws ApiException {
        okhttp3.Call localVarCall = createCarrierCredentialValidateBeforeCall(carrierId, carrierCredential, null);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Mozu (asynchronously)
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * @param carrierId The carrier ID. (required)
     * @param carrierCredential The carrier credential data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCarrierCredentialAsync(String carrierId, CarrierCredential carrierCredential, final ApiCallback<CarrierCredential> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCarrierCredentialValidateBeforeCall(carrierId, carrierCredential, _callback);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCarrierCredential
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCarrierCredentialCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/carriers/credentials/{carrierId}"
            .replaceAll("\\{" + "carrierId" + "\\}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (locationGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationGroupCode", locationGroupCode));
        }

        if (locationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationCode", locationCode));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCarrierCredentialValidateBeforeCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling deleteCarrierCredential(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCarrierCredentialCall(carrierId, siteId, locationGroupCode, locationCode, _callback);
        return localVarCall;

    }

    /**
     * Deletes a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCarrierCredential(String carrierId, Integer siteId, String locationGroupCode, String locationCode) throws ApiException {
        deleteCarrierCredentialWithHttpInfo(carrierId, siteId, locationGroupCode, locationCode);
    }

    /**
     * Deletes a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCarrierCredentialWithHttpInfo(String carrierId, Integer siteId, String locationGroupCode, String locationCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Mozu (asynchronously)
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCarrierCredentialAsync(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarrierCredential
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierCredentialCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/carriers/credentials/{carrierId}"
            .replaceAll("\\{" + "carrierId" + "\\}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (locationGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationGroupCode", locationGroupCode));
        }

        if (locationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationCode", locationCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierCredentialValidateBeforeCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getCarrierCredential(Async)");
        }
        

        okhttp3.Call localVarCall = getCarrierCredentialCall(carrierId, siteId, locationGroupCode, locationCode, _callback);
        return localVarCall;

    }

    /**
     * Gets a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @return CarrierCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierCredential getCarrierCredential(String carrierId, Integer siteId, String locationGroupCode, String locationCode) throws ApiException {
        ApiResponse<CarrierCredential> localVarResp = getCarrierCredentialWithHttpInfo(carrierId, siteId, locationGroupCode, locationCode);
        return localVarResp.getData();
    }

    /**
     * Gets a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @return ApiResponse&lt;CarrierCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierCredential> getCarrierCredentialWithHttpInfo(String carrierId, Integer siteId, String locationGroupCode, String locationCode) throws ApiException {
        okhttp3.Call localVarCall = getCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, null);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Mozu (asynchronously)
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierCredentialAsync(String carrierId, Integer siteId, String locationGroupCode, String locationCode, final ApiCallback<CarrierCredential> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, _callback);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCarrierCredentials
     * @param startIndex The starting index. (optional)
     * @param pageSize The page size. (optional)
     * @param sortBy Any sorting filters. (optional)
     * @param filter Any query filters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierCredentialsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/carriers/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCarrierCredentialsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCarrierCredentialsCall(startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Returns a &lt;see cref&#x3D;\&quot;T:Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\&quot;&gt;collection&lt;/see&gt; of &lt;see cref&#x3D;\&quot;T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\&quot;&gt;carrier credential&lt;/see&gt; with the specified filters and options.
     * @param startIndex The starting index. (optional)
     * @param pageSize The page size. (optional)
     * @param sortBy Any sorting filters. (optional)
     * @param filter Any query filters. (optional)
     * @return CarrierCredentialCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierCredentialCollection getCarrierCredentials(Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<CarrierCredentialCollection> localVarResp = getCarrierCredentialsWithHttpInfo(startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Returns a &lt;see cref&#x3D;\&quot;T:Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\&quot;&gt;collection&lt;/see&gt; of &lt;see cref&#x3D;\&quot;T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\&quot;&gt;carrier credential&lt;/see&gt; with the specified filters and options.
     * @param startIndex The starting index. (optional)
     * @param pageSize The page size. (optional)
     * @param sortBy Any sorting filters. (optional)
     * @param filter Any query filters. (optional)
     * @return ApiResponse&lt;CarrierCredentialCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierCredentialCollection> getCarrierCredentialsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCarrierCredentialsValidateBeforeCall(startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<CarrierCredentialCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a &lt;see cref&#x3D;\&quot;T:Mozu (asynchronously)
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\&quot;&gt;collection&lt;/see&gt; of &lt;see cref&#x3D;\&quot;T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\&quot;&gt;carrier credential&lt;/see&gt; with the specified filters and options.
     * @param startIndex The starting index. (optional)
     * @param pageSize The page size. (optional)
     * @param sortBy Any sorting filters. (optional)
     * @param filter Any query filters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCarrierCredentialsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<CarrierCredentialCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCarrierCredentialsValidateBeforeCall(startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<CarrierCredentialCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCarrierCredential
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param carrierCredential The carrier credential data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCarrierCredentialCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, CarrierCredential carrierCredential, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = carrierCredential;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/carriers/credentials/{carrierId}"
            .replaceAll("\\{" + "carrierId" + "\\}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        if (locationGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationGroupCode", locationGroupCode));
        }

        if (locationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationCode", locationCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCarrierCredentialValidateBeforeCall(String carrierId, Integer siteId, String locationGroupCode, String locationCode, CarrierCredential carrierCredential, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling updateCarrierCredential(Async)");
        }
        

        okhttp3.Call localVarCall = updateCarrierCredentialCall(carrierId, siteId, locationGroupCode, locationCode, carrierCredential, _callback);
        return localVarCall;

    }

    /**
     * Updates a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param carrierCredential The carrier credential data. (optional)
     * @return CarrierCredential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierCredential updateCarrierCredential(String carrierId, Integer siteId, String locationGroupCode, String locationCode, CarrierCredential carrierCredential) throws ApiException {
        ApiResponse<CarrierCredential> localVarResp = updateCarrierCredentialWithHttpInfo(carrierId, siteId, locationGroupCode, locationCode, carrierCredential);
        return localVarResp.getData();
    }

    /**
     * Updates a Mozu
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param carrierCredential The carrier credential data. (optional)
     * @return ApiResponse&lt;CarrierCredential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierCredential> updateCarrierCredentialWithHttpInfo(String carrierId, Integer siteId, String locationGroupCode, String locationCode, CarrierCredential carrierCredential) throws ApiException {
        okhttp3.Call localVarCall = updateCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, carrierCredential, null);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a Mozu (asynchronously)
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @param carrierId The carrier ID. (required)
     * @param siteId The site ID, if any. (optional)
     * @param locationGroupCode The location group code, if any. (optional)
     * @param locationCode The location code, if any. (optional)
     * @param carrierCredential The carrier credential data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCarrierCredentialAsync(String carrierId, Integer siteId, String locationGroupCode, String locationCode, CarrierCredential carrierCredential, final ApiCallback<CarrierCredential> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCarrierCredentialValidateBeforeCall(carrierId, siteId, locationGroupCode, locationCode, carrierCredential, _callback);
        Type localVarReturnType = new TypeToken<CarrierCredential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CarrierCredentialApi build() {
            return new CarrierCredentialApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
