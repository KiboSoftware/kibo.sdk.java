/*
 * Kibo Reservation Web API
 * OpenAPI Spec for Kibo Reservation Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.reservation.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.reservation.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.reservation.models.OrderReservati;
import com.kibocommerce.sdk.reservation.models.Reservati;
import com.kibocommerce.sdk.reservation.models.ReservationCollecti;
import com.kibocommerce.sdk.reservation.models.ReservationItem;
import com.kibocommerce.sdk.reservation.models.ReservationWebAPIOrderAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReservationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ReservationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ReservationApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ReservationApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ReservationApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateReservation
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateReservationCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/activate"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateReservationValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling activateReservation(Async)");
        }
        

        okhttp3.Call localVarCall = activateReservationCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Activate Reservation
     * Activate Reservation
     * @param reservationId  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati activateReservation(String reservationId) throws ApiException {
        ApiResponse<Reservati> localVarResp = activateReservationWithHttpInfo(reservationId);
        return localVarResp.getData();
    }

    /**
     * Activate Reservation
     * Activate Reservation
     * @param reservationId  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> activateReservationWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = activateReservationValidateBeforeCall(reservationId, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate Reservation (asynchronously)
     * Activate Reservation
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateReservationAsync(String reservationId, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateReservationValidateBeforeCall(reservationId, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addItem
     * @param reservationId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemCall(String reservationId, String zipCode, ReservationItem reservationItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservationItem;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/items"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemValidateBeforeCall(String reservationId, String zipCode, ReservationItem reservationItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling addItem(Async)");
        }
        

        okhttp3.Call localVarCall = addItemCall(reservationId, zipCode, reservationItem, _callback);
        return localVarCall;

    }

    /**
     * Add Item
     * Add Item
     * @param reservationId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati addItem(String reservationId, String zipCode, ReservationItem reservationItem) throws ApiException {
        ApiResponse<Reservati> localVarResp = addItemWithHttpInfo(reservationId, zipCode, reservationItem);
        return localVarResp.getData();
    }

    /**
     * Add Item
     * Add Item
     * @param reservationId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> addItemWithHttpInfo(String reservationId, String zipCode, ReservationItem reservationItem) throws ApiException {
        okhttp3.Call localVarCall = addItemValidateBeforeCall(reservationId, zipCode, reservationItem, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Item (asynchronously)
     * Add Item
     * @param reservationId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemAsync(String reservationId, String zipCode, ReservationItem reservationItem, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemValidateBeforeCall(reservationId, zipCode, reservationItem, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closeReservation
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeReservationCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/close"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeReservationValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling closeReservation(Async)");
        }
        

        okhttp3.Call localVarCall = closeReservationCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Close Reservation
     * Close Reservation
     * @param reservationId  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati closeReservation(String reservationId) throws ApiException {
        ApiResponse<Reservati> localVarResp = closeReservationWithHttpInfo(reservationId);
        return localVarResp.getData();
    }

    /**
     * Close Reservation
     * Close Reservation
     * @param reservationId  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> closeReservationWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = closeReservationValidateBeforeCall(reservationId, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Close Reservation (asynchronously)
     * Close Reservation
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closeReservationAsync(String reservationId, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeReservationValidateBeforeCall(reservationId, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertToOrderReservation
     * @param reservationId  (required)
     * @param orderReservati  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToOrderReservationCall(String reservationId, OrderReservati orderReservati, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderReservati;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/converttoorderreservation"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertToOrderReservationValidateBeforeCall(String reservationId, OrderReservati orderReservati, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling convertToOrderReservation(Async)");
        }
        

        okhttp3.Call localVarCall = convertToOrderReservationCall(reservationId, orderReservati, _callback);
        return localVarCall;

    }

    /**
     * Convert To Order Reservation
     * Convert To Order Reservation
     * @param reservationId  (required)
     * @param orderReservati  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati convertToOrderReservation(String reservationId, OrderReservati orderReservati) throws ApiException {
        ApiResponse<Reservati> localVarResp = convertToOrderReservationWithHttpInfo(reservationId, orderReservati);
        return localVarResp.getData();
    }

    /**
     * Convert To Order Reservation
     * Convert To Order Reservation
     * @param reservationId  (required)
     * @param orderReservati  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> convertToOrderReservationWithHttpInfo(String reservationId, OrderReservati orderReservati) throws ApiException {
        okhttp3.Call localVarCall = convertToOrderReservationValidateBeforeCall(reservationId, orderReservati, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert To Order Reservation (asynchronously)
     * Convert To Order Reservation
     * @param reservationId  (required)
     * @param orderReservati  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToOrderReservationAsync(String reservationId, OrderReservati orderReservati, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertToOrderReservationValidateBeforeCall(reservationId, orderReservati, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReservation
     * @param reservati  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationCall(Reservati reservati, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservati;

        // create path and map variables
        String localVarPath = "/commerce/reservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReservationValidateBeforeCall(Reservati reservati, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createReservationCall(reservati, _callback);
        return localVarCall;

    }

    /**
     * Create Reservation
     * Create Reservation
     * @param reservati  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati createReservation(Reservati reservati) throws ApiException {
        ApiResponse<Reservati> localVarResp = createReservationWithHttpInfo(reservati);
        return localVarResp.getData();
    }

    /**
     * Create Reservation
     * Create Reservation
     * @param reservati  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> createReservationWithHttpInfo(Reservati reservati) throws ApiException {
        okhttp3.Call localVarCall = createReservationValidateBeforeCall(reservati, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Reservation (asynchronously)
     * Create Reservation
     * @param reservati  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationAsync(Reservati reservati, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReservationValidateBeforeCall(reservati, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReservation
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReservationValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling deleteReservation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReservationCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Delete Reservation
     * Delete Reservation
     * @param reservationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReservation(String reservationId) throws ApiException {
        deleteReservationWithHttpInfo(reservationId);
    }

    /**
     * Delete Reservation
     * Delete Reservation
     * @param reservationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReservationWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = deleteReservationValidateBeforeCall(reservationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Reservation (asynchronously)
     * Delete Reservation
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReservationAsync(String reservationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReservationValidateBeforeCall(reservationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllocationStatus
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllocationStatusCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/getallocationstatus"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllocationStatusValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling getAllocationStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getAllocationStatusCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Get Allocation Status
     * Get Allocation Status
     * @param reservationId  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getAllocationStatus(String reservationId) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getAllocationStatusWithHttpInfo(reservationId);
        return localVarResp.getData();
    }

    /**
     * Get Allocation Status
     * Get Allocation Status
     * @param reservationId  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getAllocationStatusWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = getAllocationStatusValidateBeforeCall(reservationId, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Allocation Status (asynchronously)
     * Get Allocation Status
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllocationStatusAsync(String reservationId, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllocationStatusValidateBeforeCall(reservationId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservationById
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationByIdValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling getReservationById(Async)");
        }
        

        okhttp3.Call localVarCall = getReservationByIdCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Get Reservation By Id
     * Get Reservation By Id
     * @param reservationId  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati getReservationById(String reservationId) throws ApiException {
        ApiResponse<Reservati> localVarResp = getReservationByIdWithHttpInfo(reservationId);
        return localVarResp.getData();
    }

    /**
     * Get Reservation By Id
     * Get Reservation By Id
     * @param reservationId  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> getReservationByIdWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = getReservationByIdValidateBeforeCall(reservationId, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reservation By Id (asynchronously)
     * Get Reservation By Id
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationByIdAsync(String reservationId, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationByIdValidateBeforeCall(reservationId, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReservationsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Reservations
     * Get Reservations
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati getReservations() throws ApiException {
        ApiResponse<Reservati> localVarResp = getReservationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Reservations
     * Get Reservations
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> getReservationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getReservationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reservations (asynchronously)
     * Get Reservations
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsAsync(final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReservationsByCartId
     * @param cartId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param qLimit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsByCartIdCall(String cartId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/cart/{cartId}"
            .replaceAll("\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReservationsByCartIdValidateBeforeCall(String cartId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling getReservationsByCartId(Async)");
        }
        

        okhttp3.Call localVarCall = getReservationsByCartIdCall(cartId, startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        return localVarCall;

    }

    /**
     * Get Reservations By Cart Id
     * Get Reservations By Cart Id
     * @param cartId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param qLimit  (optional)
     * @return ReservationCollecti
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReservationCollecti getReservationsByCartId(String cartId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        ApiResponse<ReservationCollecti> localVarResp = getReservationsByCartIdWithHttpInfo(cartId, startIndex, pageSize, sortBy, filter, q, qLimit);
        return localVarResp.getData();
    }

    /**
     * Get Reservations By Cart Id
     * Get Reservations By Cart Id
     * @param cartId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param qLimit  (optional)
     * @return ApiResponse&lt;ReservationCollecti&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationCollecti> getReservationsByCartIdWithHttpInfo(String cartId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        okhttp3.Call localVarCall = getReservationsByCartIdValidateBeforeCall(cartId, startIndex, pageSize, sortBy, filter, q, qLimit, null);
        Type localVarReturnType = new TypeToken<ReservationCollecti>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reservations By Cart Id (asynchronously)
     * Get Reservations By Cart Id
     * @param cartId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param qLimit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReservationsByCartIdAsync(String cartId, Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback<ReservationCollecti> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReservationsByCartIdValidateBeforeCall(cartId, startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        Type localVarReturnType = new TypeToken<ReservationCollecti>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeItem
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeItemCall(String reservationId, String reservationItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/items/{reservationItemId}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "reservationItemId" + "\\}", localVarApiClient.escapeString(reservationItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemValidateBeforeCall(String reservationId, String reservationItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling removeItem(Async)");
        }
        
        // verify the required parameter 'reservationItemId' is set
        if (reservationItemId == null) {
            throw new ApiException("Missing the required parameter 'reservationItemId' when calling removeItem(Async)");
        }
        

        okhttp3.Call localVarCall = removeItemCall(reservationId, reservationItemId, _callback);
        return localVarCall;

    }

    /**
     * Remove Item
     * Remove Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati removeItem(String reservationId, String reservationItemId) throws ApiException {
        ApiResponse<Reservati> localVarResp = removeItemWithHttpInfo(reservationId, reservationItemId);
        return localVarResp.getData();
    }

    /**
     * Remove Item
     * Remove Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> removeItemWithHttpInfo(String reservationId, String reservationItemId) throws ApiException {
        okhttp3.Call localVarCall = removeItemValidateBeforeCall(reservationId, reservationItemId, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Item (asynchronously)
     * Remove Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeItemAsync(String reservationId, String reservationItemId, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemValidateBeforeCall(reservationId, reservationItemId, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemQuantity
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param quantity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityCall(String reservationId, String reservationItemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/items/{reservationItemId}/quantity/{quantity}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "reservationItemId" + "\\}", localVarApiClient.escapeString(reservationItemId.toString()))
            .replaceAll("\\{" + "quantity" + "\\}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemQuantityValidateBeforeCall(String reservationId, String reservationItemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'reservationItemId' is set
        if (reservationItemId == null) {
            throw new ApiException("Missing the required parameter 'reservationItemId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling updateItemQuantity(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemQuantityCall(reservationId, reservationItemId, quantity, _callback);
        return localVarCall;

    }

    /**
     * Update Item Quantity
     * Update Item Quantity
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param quantity  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati updateItemQuantity(String reservationId, String reservationItemId, Integer quantity) throws ApiException {
        ApiResponse<Reservati> localVarResp = updateItemQuantityWithHttpInfo(reservationId, reservationItemId, quantity);
        return localVarResp.getData();
    }

    /**
     * Update Item Quantity
     * Update Item Quantity
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param quantity  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> updateItemQuantityWithHttpInfo(String reservationId, String reservationItemId, Integer quantity) throws ApiException {
        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(reservationId, reservationItemId, quantity, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Quantity (asynchronously)
     * Update Item Quantity
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param quantity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityAsync(String reservationId, String reservationItemId, Integer quantity, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(reservationId, reservationItemId, quantity, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReservation
     * @param reservationId  (required)
     * @param reservati  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationCall(String reservationId, Reservati reservati, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservati;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReservationValidateBeforeCall(String reservationId, Reservati reservati, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling updateReservation(Async)");
        }
        

        okhttp3.Call localVarCall = updateReservationCall(reservationId, reservati, _callback);
        return localVarCall;

    }

    /**
     * Update Reservation
     * Update Reservation
     * @param reservationId  (required)
     * @param reservati  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati updateReservation(String reservationId, Reservati reservati) throws ApiException {
        ApiResponse<Reservati> localVarResp = updateReservationWithHttpInfo(reservationId, reservati);
        return localVarResp.getData();
    }

    /**
     * Update Reservation
     * Update Reservation
     * @param reservationId  (required)
     * @param reservati  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> updateReservationWithHttpInfo(String reservationId, Reservati reservati) throws ApiException {
        okhttp3.Call localVarCall = updateReservationValidateBeforeCall(reservationId, reservati, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reservation (asynchronously)
     * Update Reservation
     * @param reservationId  (required)
     * @param reservati  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationAsync(String reservationId, Reservati reservati, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReservationValidateBeforeCall(reservationId, reservati, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReservationItem
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationItemCall(String reservationId, String reservationItemId, String zipCode, ReservationItem reservationItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservationItem;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/items/{reservationItemId}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "reservationItemId" + "\\}", localVarApiClient.escapeString(reservationItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReservationItemValidateBeforeCall(String reservationId, String reservationItemId, String zipCode, ReservationItem reservationItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling updateReservationItem(Async)");
        }
        
        // verify the required parameter 'reservationItemId' is set
        if (reservationItemId == null) {
            throw new ApiException("Missing the required parameter 'reservationItemId' when calling updateReservationItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateReservationItemCall(reservationId, reservationItemId, zipCode, reservationItem, _callback);
        return localVarCall;

    }

    /**
     * Update Reservation Item
     * Update Reservation Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati updateReservationItem(String reservationId, String reservationItemId, String zipCode, ReservationItem reservationItem) throws ApiException {
        ApiResponse<Reservati> localVarResp = updateReservationItemWithHttpInfo(reservationId, reservationItemId, zipCode, reservationItem);
        return localVarResp.getData();
    }

    /**
     * Update Reservation Item
     * Update Reservation Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> updateReservationItemWithHttpInfo(String reservationId, String reservationItemId, String zipCode, ReservationItem reservationItem) throws ApiException {
        okhttp3.Call localVarCall = updateReservationItemValidateBeforeCall(reservationId, reservationItemId, zipCode, reservationItem, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reservation Item (asynchronously)
     * Update Reservation Item
     * @param reservationId  (required)
     * @param reservationItemId  (required)
     * @param zipCode  (optional)
     * @param reservationItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReservationItemAsync(String reservationId, String reservationItemId, String zipCode, ReservationItem reservationItem, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReservationItemValidateBeforeCall(reservationId, reservationItemId, zipCode, reservationItem, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTimer
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimerCall(String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/updatetimer"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimerValidateBeforeCall(String reservationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling updateTimer(Async)");
        }
        

        okhttp3.Call localVarCall = updateTimerCall(reservationId, _callback);
        return localVarCall;

    }

    /**
     * Update Timer
     * Update Timer
     * @param reservationId  (required)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati updateTimer(String reservationId) throws ApiException {
        ApiResponse<Reservati> localVarResp = updateTimerWithHttpInfo(reservationId);
        return localVarResp.getData();
    }

    /**
     * Update Timer
     * Update Timer
     * @param reservationId  (required)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> updateTimerWithHttpInfo(String reservationId) throws ApiException {
        okhttp3.Call localVarCall = updateTimerValidateBeforeCall(reservationId, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Timer (asynchronously)
     * Update Timer
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimerAsync(String reservationId, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimerValidateBeforeCall(reservationId, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateZipCode
     * @param reservationId  (required)
     * @param zipCode  (required)
     * @param reservationWebAPIOrderAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZipCodeCall(String reservationId, String zipCode, List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reservationWebAPIOrderAttribute;

        // create path and map variables
        String localVarPath = "/commerce/reservation/{reservationId}/zipcode/{zipCode}"
            .replaceAll("\\{" + "reservationId" + "\\}", localVarApiClient.escapeString(reservationId.toString()))
            .replaceAll("\\{" + "zipCode" + "\\}", localVarApiClient.escapeString(zipCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateZipCodeValidateBeforeCall(String reservationId, String zipCode, List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling updateZipCode(Async)");
        }
        
        // verify the required parameter 'zipCode' is set
        if (zipCode == null) {
            throw new ApiException("Missing the required parameter 'zipCode' when calling updateZipCode(Async)");
        }
        

        okhttp3.Call localVarCall = updateZipCodeCall(reservationId, zipCode, reservationWebAPIOrderAttribute, _callback);
        return localVarCall;

    }

    /**
     * Update Zip Code
     * Update Zip Code
     * @param reservationId  (required)
     * @param zipCode  (required)
     * @param reservationWebAPIOrderAttribute  (optional)
     * @return Reservati
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Reservati updateZipCode(String reservationId, String zipCode, List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute) throws ApiException {
        ApiResponse<Reservati> localVarResp = updateZipCodeWithHttpInfo(reservationId, zipCode, reservationWebAPIOrderAttribute);
        return localVarResp.getData();
    }

    /**
     * Update Zip Code
     * Update Zip Code
     * @param reservationId  (required)
     * @param zipCode  (required)
     * @param reservationWebAPIOrderAttribute  (optional)
     * @return ApiResponse&lt;Reservati&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reservati> updateZipCodeWithHttpInfo(String reservationId, String zipCode, List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateZipCodeValidateBeforeCall(reservationId, zipCode, reservationWebAPIOrderAttribute, null);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Zip Code (asynchronously)
     * Update Zip Code
     * @param reservationId  (required)
     * @param zipCode  (required)
     * @param reservationWebAPIOrderAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateZipCodeAsync(String reservationId, String zipCode, List<ReservationWebAPIOrderAttribute> reservationWebAPIOrderAttribute, final ApiCallback<Reservati> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateZipCodeValidateBeforeCall(reservationId, zipCode, reservationWebAPIOrderAttribute, _callback);
        Type localVarReturnType = new TypeToken<Reservati>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ReservationApi build() {
            return new ReservationApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
