/*
 * Kibo PricingRuntime Service
 * OpenAPI Spec for Kibo PricingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.pricingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * The tax applied to an individual order item.
 */
@ApiModel(description = "The tax applied to an individual order item.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ItemTaxContext implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_SHIPPING_TAX = "shippingTax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX)
  private Double shippingTax;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData = null;

  public ItemTaxContext() {
  }

  public ItemTaxContext id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the line item.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the line item.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ItemTaxContext productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * Merchant-created code that uniquely identifies the product.
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant-created code that uniquely identifies the product.")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public ItemTaxContext quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The number of products in this lineitem
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of products in this lineitem")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public ItemTaxContext tax(Double tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * Line item tax amount not including shipping
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Line item tax amount not including shipping")

  public Double getTax() {
    return tax;
  }


  public void setTax(Double tax) {
    this.tax = tax;
  }


  public ItemTaxContext shippingTax(Double shippingTax) {
    
    this.shippingTax = shippingTax;
    return this;
  }

   /**
   * The shipping tax amount for this line item
   * @return shippingTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The shipping tax amount for this line item")

  public Double getShippingTax() {
    return shippingTax;
  }


  public void setShippingTax(Double shippingTax) {
    this.shippingTax = shippingTax;
  }


  public ItemTaxContext taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Storage for any additional/custom tax data.
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage for any additional/custom tax data.")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemTaxContext itemTaxContext = (ItemTaxContext) o;
    return Objects.equals(this.id, itemTaxContext.id) &&
        Objects.equals(this.productCode, itemTaxContext.productCode) &&
        Objects.equals(this.quantity, itemTaxContext.quantity) &&
        Objects.equals(this.tax, itemTaxContext.tax) &&
        Objects.equals(this.shippingTax, itemTaxContext.shippingTax) &&
        Objects.equals(this.taxData, itemTaxContext.taxData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, productCode, quantity, tax, shippingTax, taxData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemTaxContext {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    shippingTax: ").append(toIndentedString(shippingTax)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("productCode");
    openapiFields.add("quantity");
    openapiFields.add("tax");
    openapiFields.add("shippingTax");
    openapiFields.add("taxData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemTaxContext
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ItemTaxContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemTaxContext is not found in the empty JSON string", ItemTaxContext.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ItemTaxContext.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemTaxContext` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemTaxContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemTaxContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemTaxContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemTaxContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemTaxContext>() {
           @Override
           public void write(JsonWriter out, ItemTaxContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemTaxContext read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemTaxContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemTaxContext
  * @throws IOException if the JSON string is invalid with respect to ItemTaxContext
  */
  public static ItemTaxContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemTaxContext.class);
  }

 /**
  * Convert an instance of ItemTaxContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

