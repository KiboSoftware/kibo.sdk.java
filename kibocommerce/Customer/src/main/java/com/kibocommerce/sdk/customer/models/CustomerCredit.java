/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.AdminUserAuditInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Represetation of a store credit or gift card.
 */
@ApiModel(description = "Represetation of a store credit or gift card.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerCredit implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "activationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private OffsetDateTime activationDate;

  public static final String SERIALIZED_NAME_CREDIT_TYPE = "creditType";
  @SerializedName(SERIALIZED_NAME_CREDIT_TYPE)
  private String creditType;

  public static final String SERIALIZED_NAME_CUSTOM_CREDIT_TYPE = "customCreditType";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CREDIT_TYPE)
  private String customCreditType;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INITIAL_BALANCE = "initialBalance";
  @SerializedName(SERIALIZED_NAME_INITIAL_BALANCE)
  private Double initialBalance;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "currentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private Double currentBalance;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_CREDIT_TYPE_ID = "creditTypeId";
  @SerializedName(SERIALIZED_NAME_CREDIT_TYPE_ID)
  private Integer creditTypeId;

  public CustomerCredit() {
  }

  public CustomerCredit code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Unique number identifier representing this credit.  Number may be generated or set by the Tenant  Number is unique within the Tenant context.  ReadOnly after credit creation
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique number identifier representing this credit.  Number may be generated or set by the Tenant  Number is unique within the Tenant context.  ReadOnly after credit creation")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public CustomerCredit activationDate(OffsetDateTime activationDate) {
    
    this.activationDate = activationDate;
    return this;
  }

   /**
   * Date the credit was activated.  Null if card is not active.  Credits must be activated before they can be used.  ReadOnly after activation
   * @return activationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the credit was activated.  Null if card is not active.  Credits must be activated before they can be used.  ReadOnly after activation")

  public OffsetDateTime getActivationDate() {
    return activationDate;
  }


  public void setActivationDate(OffsetDateTime activationDate) {
    this.activationDate = activationDate;
  }


  public CustomerCredit creditType(String creditType) {
    
    this.creditType = creditType;
    return this;
  }

   /**
   * Type of Credit.  Mozu.Customer.Contracts.Credit.Credit.CreditTypeConst  Required.  ReadOnly after credit creation
   * @return creditType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of Credit.  Mozu.Customer.Contracts.Credit.Credit.CreditTypeConst  Required.  ReadOnly after credit creation")

  public String getCreditType() {
    return creditType;
  }


  public void setCreditType(String creditType) {
    this.creditType = creditType;
  }


  public CustomerCredit customCreditType(String customCreditType) {
    
    this.customCreditType = customCreditType;
    return this;
  }

   /**
   * Name of custom credit type  Optional.
   * @return customCreditType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of custom credit type  Optional.")

  public String getCustomCreditType() {
    return customCreditType;
  }


  public void setCustomCreditType(String customCreditType) {
    this.customCreditType = customCreditType;
  }


  public CustomerCredit currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Currency Code
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency Code")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CustomerCredit initialBalance(Double initialBalance) {
    
    this.initialBalance = initialBalance;
    return this;
  }

   /**
   * Balance assigned when credit was initially created.  May be zero and updated later.  ReadOnly after intial credit creation
   * @return initialBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Balance assigned when credit was initially created.  May be zero and updated later.  ReadOnly after intial credit creation")

  public Double getInitialBalance() {
    return initialBalance;
  }


  public void setInitialBalance(Double initialBalance) {
    this.initialBalance = initialBalance;
  }


  public CustomerCredit currentBalance(Double currentBalance) {
    
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * Do we want to track this here?  Current Balance  ReadOnly
   * @return currentBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Do we want to track this here?  Current Balance  ReadOnly")

  public Double getCurrentBalance() {
    return currentBalance;
  }


  public void setCurrentBalance(Double currentBalance) {
    this.currentBalance = currentBalance;
  }


  public CustomerCredit expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Date after which this credit is no longer valid  Optional  Defaults to 365 days
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date after which this credit is no longer valid  Optional  Defaults to 365 days")

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public CustomerCredit customerId(Integer customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Id of the N:Mozu.Customer  that this credit is assigned to.  Optional.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the N:Mozu.Customer  that this credit is assigned to.  Optional.")

  public Integer getCustomerId() {
    return customerId;
  }


  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public CustomerCredit auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public CustomerCredit creditTypeId(Integer creditTypeId) {
    
    this.creditTypeId = creditTypeId;
    return this;
  }

   /**
   * Get creditTypeId
   * @return creditTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreditTypeId() {
    return creditTypeId;
  }


  public void setCreditTypeId(Integer creditTypeId) {
    this.creditTypeId = creditTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerCredit customerCredit = (CustomerCredit) o;
    return Objects.equals(this.code, customerCredit.code) &&
        Objects.equals(this.activationDate, customerCredit.activationDate) &&
        Objects.equals(this.creditType, customerCredit.creditType) &&
        Objects.equals(this.customCreditType, customerCredit.customCreditType) &&
        Objects.equals(this.currencyCode, customerCredit.currencyCode) &&
        Objects.equals(this.initialBalance, customerCredit.initialBalance) &&
        Objects.equals(this.currentBalance, customerCredit.currentBalance) &&
        Objects.equals(this.expirationDate, customerCredit.expirationDate) &&
        Objects.equals(this.customerId, customerCredit.customerId) &&
        Objects.equals(this.auditInfo, customerCredit.auditInfo) &&
        Objects.equals(this.creditTypeId, customerCredit.creditTypeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, activationDate, creditType, customCreditType, currencyCode, initialBalance, currentBalance, expirationDate, customerId, auditInfo, creditTypeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerCredit {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    creditType: ").append(toIndentedString(creditType)).append("\n");
    sb.append("    customCreditType: ").append(toIndentedString(customCreditType)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    initialBalance: ").append(toIndentedString(initialBalance)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    creditTypeId: ").append(toIndentedString(creditTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("activationDate");
    openapiFields.add("creditType");
    openapiFields.add("customCreditType");
    openapiFields.add("currencyCode");
    openapiFields.add("initialBalance");
    openapiFields.add("currentBalance");
    openapiFields.add("expirationDate");
    openapiFields.add("customerId");
    openapiFields.add("auditInfo");
    openapiFields.add("creditTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerCredit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerCredit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerCredit is not found in the empty JSON string", CustomerCredit.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomerCredit.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerCredit` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("creditType") != null && !jsonObj.get("creditType").isJsonNull()) && !jsonObj.get("creditType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditType").toString()));
      }
      if ((jsonObj.get("customCreditType") != null && !jsonObj.get("customCreditType").isJsonNull()) && !jsonObj.get("customCreditType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCreditType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCreditType").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerCredit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerCredit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerCredit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerCredit.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerCredit>() {
           @Override
           public void write(JsonWriter out, CustomerCredit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerCredit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerCredit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerCredit
  * @throws IOException if the JSON string is invalid with respect to CustomerCredit
  */
  public static CustomerCredit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerCredit.class);
  }

 /**
  * Convert an instance of CustomerCredit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

