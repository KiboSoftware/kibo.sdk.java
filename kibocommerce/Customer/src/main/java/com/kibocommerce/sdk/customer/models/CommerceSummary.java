/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.CurrencyAmount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Commerce (orders and wishlists) on a customer account which lists all the orders the customer has made with the order date, order amount, and status. Includes cancellations and returns.  Also includes wishlist information.
 */
@ApiModel(description = "Commerce (orders and wishlists) on a customer account which lists all the orders the customer has made with the order date, order amount, and status. Includes cancellations and returns.  Also includes wishlist information.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommerceSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TOTAL_ORDER_AMOUNT = "totalOrderAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ORDER_AMOUNT)
  private CurrencyAmount totalOrderAmount;

  public static final String SERIALIZED_NAME_ORDER_COUNT = "orderCount";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
  private Integer orderCount;

  public static final String SERIALIZED_NAME_LAST_ORDER_DATE = "lastOrderDate";
  @SerializedName(SERIALIZED_NAME_LAST_ORDER_DATE)
  private OffsetDateTime lastOrderDate;

  public static final String SERIALIZED_NAME_WISHLIST_COUNT = "wishlistCount";
  @SerializedName(SERIALIZED_NAME_WISHLIST_COUNT)
  private Integer wishlistCount;

  public static final String SERIALIZED_NAME_VISITS_COUNT = "visitsCount";
  @SerializedName(SERIALIZED_NAME_VISITS_COUNT)
  private Integer visitsCount;

  public CommerceSummary() {
  }

  public CommerceSummary totalOrderAmount(CurrencyAmount totalOrderAmount) {
    
    this.totalOrderAmount = totalOrderAmount;
    return this;
  }

   /**
   * Get totalOrderAmount
   * @return totalOrderAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CurrencyAmount getTotalOrderAmount() {
    return totalOrderAmount;
  }


  public void setTotalOrderAmount(CurrencyAmount totalOrderAmount) {
    this.totalOrderAmount = totalOrderAmount;
  }


  public CommerceSummary orderCount(Integer orderCount) {
    
    this.orderCount = orderCount;
    return this;
  }

   /**
   * Number of orders listed in the order history of a customer account.
   * @return orderCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of orders listed in the order history of a customer account.")

  public Integer getOrderCount() {
    return orderCount;
  }


  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }


  public CommerceSummary lastOrderDate(OffsetDateTime lastOrderDate) {
    
    this.lastOrderDate = lastOrderDate;
    return this;
  }

   /**
   * When the last order was placed.
   * @return lastOrderDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the last order was placed.")

  public OffsetDateTime getLastOrderDate() {
    return lastOrderDate;
  }


  public void setLastOrderDate(OffsetDateTime lastOrderDate) {
    this.lastOrderDate = lastOrderDate;
  }


  public CommerceSummary wishlistCount(Integer wishlistCount) {
    
    this.wishlistCount = wishlistCount;
    return this;
  }

   /**
   * Number of wishlists listed in the wishlist count of a customer account
   * @return wishlistCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of wishlists listed in the wishlist count of a customer account")

  public Integer getWishlistCount() {
    return wishlistCount;
  }


  public void setWishlistCount(Integer wishlistCount) {
    this.wishlistCount = wishlistCount;
  }


  public CommerceSummary visitsCount(Integer visitsCount) {
    
    this.visitsCount = visitsCount;
    return this;
  }

   /**
   * Number of visits for this customer across the entire tenant.
   * @return visitsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of visits for this customer across the entire tenant.")

  public Integer getVisitsCount() {
    return visitsCount;
  }


  public void setVisitsCount(Integer visitsCount) {
    this.visitsCount = visitsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommerceSummary commerceSummary = (CommerceSummary) o;
    return Objects.equals(this.totalOrderAmount, commerceSummary.totalOrderAmount) &&
        Objects.equals(this.orderCount, commerceSummary.orderCount) &&
        Objects.equals(this.lastOrderDate, commerceSummary.lastOrderDate) &&
        Objects.equals(this.wishlistCount, commerceSummary.wishlistCount) &&
        Objects.equals(this.visitsCount, commerceSummary.visitsCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalOrderAmount, orderCount, lastOrderDate, wishlistCount, visitsCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommerceSummary {\n");
    sb.append("    totalOrderAmount: ").append(toIndentedString(totalOrderAmount)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    lastOrderDate: ").append(toIndentedString(lastOrderDate)).append("\n");
    sb.append("    wishlistCount: ").append(toIndentedString(wishlistCount)).append("\n");
    sb.append("    visitsCount: ").append(toIndentedString(visitsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalOrderAmount");
    openapiFields.add("orderCount");
    openapiFields.add("lastOrderDate");
    openapiFields.add("wishlistCount");
    openapiFields.add("visitsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommerceSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommerceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommerceSummary is not found in the empty JSON string", CommerceSummary.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CommerceSummary.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommerceSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `totalOrderAmount`
      if (jsonObj.get("totalOrderAmount") != null && !jsonObj.get("totalOrderAmount").isJsonNull()) {
        CurrencyAmount.validateJsonObject(jsonObj.getAsJsonObject("totalOrderAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommerceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommerceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommerceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommerceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CommerceSummary>() {
           @Override
           public void write(JsonWriter out, CommerceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommerceSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommerceSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommerceSummary
  * @throws IOException if the JSON string is invalid with respect to CommerceSummary
  */
  public static CommerceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommerceSummary.class);
  }

 /**
  * Convert an instance of CommerceSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

