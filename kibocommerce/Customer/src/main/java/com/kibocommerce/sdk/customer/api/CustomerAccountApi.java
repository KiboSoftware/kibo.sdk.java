/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.customer.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.customer.models.AccountPasswordInfoCollection;
import com.kibocommerce.sdk.customer.models.Card;
import com.kibocommerce.sdk.customer.models.CardCollection;
import com.kibocommerce.sdk.customer.models.ChangePasswordResultCollection;
import com.kibocommerce.sdk.customer.models.ConfirmationInfo;
import com.kibocommerce.sdk.customer.models.CustomerAccount;
import com.kibocommerce.sdk.customer.models.CustomerAccountAndAuthInfo;
import com.kibocommerce.sdk.customer.models.CustomerAccountCollection;
import com.kibocommerce.sdk.customer.models.CustomerAttribute;
import com.kibocommerce.sdk.customer.models.CustomerAttributeCollection;
import com.kibocommerce.sdk.customer.models.CustomerAuditEntryCollection;
import com.kibocommerce.sdk.customer.models.CustomerAuthTicket;
import com.kibocommerce.sdk.customer.models.CustomerContact;
import com.kibocommerce.sdk.customer.models.CustomerContactCollection;
import com.kibocommerce.sdk.customer.models.CustomerLoginInfo;
import com.kibocommerce.sdk.customer.models.CustomerNote;
import com.kibocommerce.sdk.customer.models.CustomerNoteCollection;
import com.kibocommerce.sdk.customer.models.CustomerPasswordInfo;
import com.kibocommerce.sdk.customer.models.CustomerPurchaseOrderAccount;
import com.kibocommerce.sdk.customer.models.CustomerPurchaseOrderAccountCollection;
import com.kibocommerce.sdk.customer.models.CustomerResetPasswordInfo;
import com.kibocommerce.sdk.customer.models.CustomerSegmentCollection;
import com.kibocommerce.sdk.customer.models.LoginState;
import com.kibocommerce.sdk.customer.models.PurchaseOrderTransaction;
import com.kibocommerce.sdk.customer.models.PurchaseOrderTransactionCollection;
import com.kibocommerce.sdk.customer.models.Transaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomerAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CustomerAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CustomerAccountApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CustomerAccountApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CustomerAccountApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAccount
     * @param customerAccount Properties of the new customer account to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountCall(CustomerAccount customerAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAccount;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountValidateBeforeCall(CustomerAccount customerAccount, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addAccountCall(customerAccount, _callback);
        return localVarCall;

    }

    /**
     * Add Account
     * Creates a new customer account.
     * @param customerAccount Properties of the new customer account to create. (optional)
     * @return CustomerAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccount addAccount(CustomerAccount customerAccount) throws ApiException {
        ApiResponse<CustomerAccount> localVarResp = addAccountWithHttpInfo(customerAccount);
        return localVarResp.getData();
    }

    /**
     * Add Account
     * Creates a new customer account.
     * @param customerAccount Properties of the new customer account to create. (optional)
     * @return ApiResponse&lt;CustomerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccount> addAccountWithHttpInfo(CustomerAccount customerAccount) throws ApiException {
        okhttp3.Call localVarCall = addAccountValidateBeforeCall(customerAccount, null);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account (asynchronously)
     * Creates a new customer account.
     * @param customerAccount Properties of the new customer account to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAsync(CustomerAccount customerAccount, final ApiCallback<CustomerAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountValidateBeforeCall(customerAccount, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountAndLogin
     * @param customerAccountAndAuthInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAndLoginCall(CustomerAccountAndAuthInfo customerAccountAndAuthInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAccountAndAuthInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/Add-Account-And-Login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountAndLoginValidateBeforeCall(CustomerAccountAndAuthInfo customerAccountAndAuthInfo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addAccountAndLoginCall(customerAccountAndAuthInfo, _callback);
        return localVarCall;

    }

    /**
     * Add Account And Login
     * Adds a customer to the account.
     * @param customerAccountAndAuthInfo  (optional)
     * @return CustomerAuthTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAuthTicket addAccountAndLogin(CustomerAccountAndAuthInfo customerAccountAndAuthInfo) throws ApiException {
        ApiResponse<CustomerAuthTicket> localVarResp = addAccountAndLoginWithHttpInfo(customerAccountAndAuthInfo);
        return localVarResp.getData();
    }

    /**
     * Add Account And Login
     * Adds a customer to the account.
     * @param customerAccountAndAuthInfo  (optional)
     * @return ApiResponse&lt;CustomerAuthTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAuthTicket> addAccountAndLoginWithHttpInfo(CustomerAccountAndAuthInfo customerAccountAndAuthInfo) throws ApiException {
        okhttp3.Call localVarCall = addAccountAndLoginValidateBeforeCall(customerAccountAndAuthInfo, null);
        Type localVarReturnType = new TypeToken<CustomerAuthTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account And Login (asynchronously)
     * Adds a customer to the account.
     * @param customerAccountAndAuthInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAndLoginAsync(CustomerAccountAndAuthInfo customerAccountAndAuthInfo, final ApiCallback<CustomerAuthTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountAndLoginValidateBeforeCall(customerAccountAndAuthInfo, _callback);
        Type localVarReturnType = new TypeToken<CustomerAuthTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountAttribute
     * @param accountId  (required)
     * @param userId  (optional)
     * @param customerAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAttributeCall(Integer accountId, String userId, CustomerAttribute customerAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAttribute;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/attributes"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountAttributeValidateBeforeCall(Integer accountId, String userId, CustomerAttribute customerAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = addAccountAttributeCall(accountId, userId, customerAttribute, _callback);
        return localVarCall;

    }

    /**
     * Add Account Attribute
     * Adds a new account attribute.
     * @param accountId  (required)
     * @param userId  (optional)
     * @param customerAttribute  (optional)
     * @return CustomerAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAttribute addAccountAttribute(Integer accountId, String userId, CustomerAttribute customerAttribute) throws ApiException {
        ApiResponse<CustomerAttribute> localVarResp = addAccountAttributeWithHttpInfo(accountId, userId, customerAttribute);
        return localVarResp.getData();
    }

    /**
     * Add Account Attribute
     * Adds a new account attribute.
     * @param accountId  (required)
     * @param userId  (optional)
     * @param customerAttribute  (optional)
     * @return ApiResponse&lt;CustomerAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAttribute> addAccountAttributeWithHttpInfo(Integer accountId, String userId, CustomerAttribute customerAttribute) throws ApiException {
        okhttp3.Call localVarCall = addAccountAttributeValidateBeforeCall(accountId, userId, customerAttribute, null);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Attribute (asynchronously)
     * Adds a new account attribute.
     * @param accountId  (required)
     * @param userId  (optional)
     * @param customerAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAttributeAsync(Integer accountId, String userId, CustomerAttribute customerAttribute, final ApiCallback<CustomerAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountAttributeValidateBeforeCall(accountId, userId, customerAttribute, _callback);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountCard
     * @param accountId  (required)
     * @param card  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountCardCall(Integer accountId, Card card, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = card;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/cards"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountCardValidateBeforeCall(Integer accountId, Card card, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountCard(Async)");
        }
        

        okhttp3.Call localVarCall = addAccountCardCall(accountId, card, _callback);
        return localVarCall;

    }

    /**
     * Add Account Card
     * Creates a card on the specific customer account.
     * @param accountId  (required)
     * @param card  (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Card addAccountCard(Integer accountId, Card card) throws ApiException {
        ApiResponse<Card> localVarResp = addAccountCardWithHttpInfo(accountId, card);
        return localVarResp.getData();
    }

    /**
     * Add Account Card
     * Creates a card on the specific customer account.
     * @param accountId  (required)
     * @param card  (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> addAccountCardWithHttpInfo(Integer accountId, Card card) throws ApiException {
        okhttp3.Call localVarCall = addAccountCardValidateBeforeCall(accountId, card, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Card (asynchronously)
     * Creates a card on the specific customer account.
     * @param accountId  (required)
     * @param card  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountCardAsync(Integer accountId, Card card, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountCardValidateBeforeCall(accountId, card, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountContact
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountContactCall(Integer accountId, CustomerContact customerContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerContact;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountContactValidateBeforeCall(Integer accountId, CustomerContact customerContact, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountContact(Async)");
        }
        

        okhttp3.Call localVarCall = addAccountContactCall(accountId, customerContact, _callback);
        return localVarCall;

    }

    /**
     * Add Account Contact
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @return CustomerContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContact addAccountContact(Integer accountId, CustomerContact customerContact) throws ApiException {
        ApiResponse<CustomerContact> localVarResp = addAccountContactWithHttpInfo(accountId, customerContact);
        return localVarResp.getData();
    }

    /**
     * Add Account Contact
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @return ApiResponse&lt;CustomerContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContact> addAccountContactWithHttpInfo(Integer accountId, CustomerContact customerContact) throws ApiException {
        okhttp3.Call localVarCall = addAccountContactValidateBeforeCall(accountId, customerContact, null);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Contact (asynchronously)
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountContactAsync(Integer accountId, CustomerContact customerContact, final ApiCallback<CustomerContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountContactValidateBeforeCall(accountId, customerContact, _callback);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountContactList
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountContactListCall(Integer accountId, List<CustomerContact> customerContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerContact;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountContactListValidateBeforeCall(Integer accountId, List<CustomerContact> customerContact, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountContactList(Async)");
        }
        

        okhttp3.Call localVarCall = addAccountContactListCall(accountId, customerContact, _callback);
        return localVarCall;

    }

    /**
     * Add Account Contact List
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @return CustomerContactCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContactCollection addAccountContactList(Integer accountId, List<CustomerContact> customerContact) throws ApiException {
        ApiResponse<CustomerContactCollection> localVarResp = addAccountContactListWithHttpInfo(accountId, customerContact);
        return localVarResp.getData();
    }

    /**
     * Add Account Contact List
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @return ApiResponse&lt;CustomerContactCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContactCollection> addAccountContactListWithHttpInfo(Integer accountId, List<CustomerContact> customerContact) throws ApiException {
        okhttp3.Call localVarCall = addAccountContactListValidateBeforeCall(accountId, customerContact, null);
        Type localVarReturnType = new TypeToken<CustomerContactCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Contact List (asynchronously)
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * @param accountId Unique identifier of the customer account to contain the new CustomerContact. (required)
     * @param customerContact List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountContactListAsync(Integer accountId, List<CustomerContact> customerContact, final ApiCallback<CustomerContactCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountContactListValidateBeforeCall(accountId, customerContact, _callback);
        Type localVarReturnType = new TypeToken<CustomerContactCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccountNote
     * @param accountId Unique identifier of the customer account for which to create the note. (required)
     * @param customerNote Contents of the new note. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountNoteCall(Integer accountId, CustomerNote customerNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerNote;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/notes"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountNoteValidateBeforeCall(Integer accountId, CustomerNote customerNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addAccountNote(Async)");
        }
        

        okhttp3.Call localVarCall = addAccountNoteCall(accountId, customerNote, _callback);
        return localVarCall;

    }

    /**
     * Add Account Note
     * Adds a new note to the specified customer account.
     * @param accountId Unique identifier of the customer account for which to create the note. (required)
     * @param customerNote Contents of the new note. (optional)
     * @return CustomerNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerNote addAccountNote(Integer accountId, CustomerNote customerNote) throws ApiException {
        ApiResponse<CustomerNote> localVarResp = addAccountNoteWithHttpInfo(accountId, customerNote);
        return localVarResp.getData();
    }

    /**
     * Add Account Note
     * Adds a new note to the specified customer account.
     * @param accountId Unique identifier of the customer account for which to create the note. (required)
     * @param customerNote Contents of the new note. (optional)
     * @return ApiResponse&lt;CustomerNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerNote> addAccountNoteWithHttpInfo(Integer accountId, CustomerNote customerNote) throws ApiException {
        okhttp3.Call localVarCall = addAccountNoteValidateBeforeCall(accountId, customerNote, null);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Account Note (asynchronously)
     * Adds a new note to the specified customer account.
     * @param accountId Unique identifier of the customer account for which to create the note. (required)
     * @param customerNote Contents of the new note. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountNoteAsync(Integer accountId, CustomerNote customerNote, final ApiCallback<CustomerNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountNoteValidateBeforeCall(accountId, customerNote, _callback);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccounts
     * @param customerAccountAndAuthInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountsCall(List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAccountAndAuthInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/Bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountsValidateBeforeCall(List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addAccountsCall(customerAccountAndAuthInfo, _callback);
        return localVarCall;

    }

    /**
     * Add Accounts
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * @param customerAccountAndAuthInfo  (optional)
     * @return CustomerAccountCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccountCollection addAccounts(List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo) throws ApiException {
        ApiResponse<CustomerAccountCollection> localVarResp = addAccountsWithHttpInfo(customerAccountAndAuthInfo);
        return localVarResp.getData();
    }

    /**
     * Add Accounts
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * @param customerAccountAndAuthInfo  (optional)
     * @return ApiResponse&lt;CustomerAccountCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccountCollection> addAccountsWithHttpInfo(List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo) throws ApiException {
        okhttp3.Call localVarCall = addAccountsValidateBeforeCall(customerAccountAndAuthInfo, null);
        Type localVarReturnType = new TypeToken<CustomerAccountCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Accounts (asynchronously)
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * @param customerAccountAndAuthInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountsAsync(List<CustomerAccountAndAuthInfo> customerAccountAndAuthInfo, final ApiCallback<CustomerAccountCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountsValidateBeforeCall(customerAccountAndAuthInfo, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLoginToExistingCustomer
     * @param accountId  (required)
     * @param customerLoginInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLoginToExistingCustomerCall(Integer accountId, CustomerLoginInfo customerLoginInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerLoginInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/Create-Login"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLoginToExistingCustomerValidateBeforeCall(Integer accountId, CustomerLoginInfo customerLoginInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addLoginToExistingCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = addLoginToExistingCustomerCall(accountId, customerLoginInfo, _callback);
        return localVarCall;

    }

    /**
     * Add Login To Existing Customer
     * Creates a login for an existing customer and logs them in automatically.
     * @param accountId  (required)
     * @param customerLoginInfo  (optional)
     * @return CustomerAuthTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAuthTicket addLoginToExistingCustomer(Integer accountId, CustomerLoginInfo customerLoginInfo) throws ApiException {
        ApiResponse<CustomerAuthTicket> localVarResp = addLoginToExistingCustomerWithHttpInfo(accountId, customerLoginInfo);
        return localVarResp.getData();
    }

    /**
     * Add Login To Existing Customer
     * Creates a login for an existing customer and logs them in automatically.
     * @param accountId  (required)
     * @param customerLoginInfo  (optional)
     * @return ApiResponse&lt;CustomerAuthTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAuthTicket> addLoginToExistingCustomerWithHttpInfo(Integer accountId, CustomerLoginInfo customerLoginInfo) throws ApiException {
        okhttp3.Call localVarCall = addLoginToExistingCustomerValidateBeforeCall(accountId, customerLoginInfo, null);
        Type localVarReturnType = new TypeToken<CustomerAuthTicket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Login To Existing Customer (asynchronously)
     * Creates a login for an existing customer and logs them in automatically.
     * @param accountId  (required)
     * @param customerLoginInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLoginToExistingCustomerAsync(Integer accountId, CustomerLoginInfo customerLoginInfo, final ApiCallback<CustomerAuthTicket> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLoginToExistingCustomerValidateBeforeCall(accountId, customerLoginInfo, _callback);
        Type localVarReturnType = new TypeToken<CustomerAuthTicket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTransaction
     * @param accountId  (required)
     * @param transaction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTransactionCall(Integer accountId, Transaction transaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transaction;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/transactions"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTransactionValidateBeforeCall(Integer accountId, Transaction transaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = addTransactionCall(accountId, transaction, _callback);
        return localVarCall;

    }

    /**
     * Add Transaction
     * Add a transaction on customer account.
     * @param accountId  (required)
     * @param transaction  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Transaction addTransaction(Integer accountId, Transaction transaction) throws ApiException {
        ApiResponse<Transaction> localVarResp = addTransactionWithHttpInfo(accountId, transaction);
        return localVarResp.getData();
    }

    /**
     * Add Transaction
     * Add a transaction on customer account.
     * @param accountId  (required)
     * @param transaction  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> addTransactionWithHttpInfo(Integer accountId, Transaction transaction) throws ApiException {
        okhttp3.Call localVarCall = addTransactionValidateBeforeCall(accountId, transaction, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Transaction (asynchronously)
     * Add a transaction on customer account.
     * @param accountId  (required)
     * @param transaction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTransactionAsync(Integer accountId, Transaction transaction, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTransactionValidateBeforeCall(accountId, transaction, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePassword
     * @param accountId Unique identifier of the shopper for whom to change the password. (required)
     * @param unlockAccount inidicates that the account should be unlocked on a successful password change. (optional, default to false)
     * @param userId  (optional)
     * @param customerPasswordInfo Old password and new password. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(Integer accountId, Boolean unlockAccount, String userId, CustomerPasswordInfo customerPasswordInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerPasswordInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/Change-Password"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unlockAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unlockAccount", unlockAccount));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(Integer accountId, Boolean unlockAccount, String userId, CustomerPasswordInfo customerPasswordInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling changePassword(Async)");
        }
        

        okhttp3.Call localVarCall = changePasswordCall(accountId, unlockAccount, userId, customerPasswordInfo, _callback);
        return localVarCall;

    }

    /**
     * Change Password
     * Changes a shopper&#39;s password.
     * @param accountId Unique identifier of the shopper for whom to change the password. (required)
     * @param unlockAccount inidicates that the account should be unlocked on a successful password change. (optional, default to false)
     * @param userId  (optional)
     * @param customerPasswordInfo Old password and new password. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void changePassword(Integer accountId, Boolean unlockAccount, String userId, CustomerPasswordInfo customerPasswordInfo) throws ApiException {
        changePasswordWithHttpInfo(accountId, unlockAccount, userId, customerPasswordInfo);
    }

    /**
     * Change Password
     * Changes a shopper&#39;s password.
     * @param accountId Unique identifier of the shopper for whom to change the password. (required)
     * @param unlockAccount inidicates that the account should be unlocked on a successful password change. (optional, default to false)
     * @param userId  (optional)
     * @param customerPasswordInfo Old password and new password. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(Integer accountId, Boolean unlockAccount, String userId, CustomerPasswordInfo customerPasswordInfo) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(accountId, unlockAccount, userId, customerPasswordInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Password (asynchronously)
     * Changes a shopper&#39;s password.
     * @param accountId Unique identifier of the shopper for whom to change the password. (required)
     * @param unlockAccount inidicates that the account should be unlocked on a successful password change. (optional, default to false)
     * @param userId  (optional)
     * @param customerPasswordInfo Old password and new password. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(Integer accountId, Boolean unlockAccount, String userId, CustomerPasswordInfo customerPasswordInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(accountId, unlockAccount, userId, customerPasswordInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePasswords
     * @param accountPasswordInfoCollection The collection of AccountPasswordInfo which are to be processed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordsCall(AccountPasswordInfoCollection accountPasswordInfoCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountPasswordInfoCollection;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/Change-Passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordsValidateBeforeCall(AccountPasswordInfoCollection accountPasswordInfoCollection, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = changePasswordsCall(accountPasswordInfoCollection, _callback);
        return localVarCall;

    }

    /**
     * Change Passwords
     * Changes a collection of shopper passwords
     * @param accountPasswordInfoCollection The collection of AccountPasswordInfo which are to be processed (optional)
     * @return ChangePasswordResultCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ChangePasswordResultCollection changePasswords(AccountPasswordInfoCollection accountPasswordInfoCollection) throws ApiException {
        ApiResponse<ChangePasswordResultCollection> localVarResp = changePasswordsWithHttpInfo(accountPasswordInfoCollection);
        return localVarResp.getData();
    }

    /**
     * Change Passwords
     * Changes a collection of shopper passwords
     * @param accountPasswordInfoCollection The collection of AccountPasswordInfo which are to be processed (optional)
     * @return ApiResponse&lt;ChangePasswordResultCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangePasswordResultCollection> changePasswordsWithHttpInfo(AccountPasswordInfoCollection accountPasswordInfoCollection) throws ApiException {
        okhttp3.Call localVarCall = changePasswordsValidateBeforeCall(accountPasswordInfoCollection, null);
        Type localVarReturnType = new TypeToken<ChangePasswordResultCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Passwords (asynchronously)
     * Changes a collection of shopper passwords
     * @param accountPasswordInfoCollection The collection of AccountPasswordInfo which are to be processed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordsAsync(AccountPasswordInfoCollection accountPasswordInfoCollection, final ApiCallback<ChangePasswordResultCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordsValidateBeforeCall(accountPasswordInfoCollection, _callback);
        Type localVarReturnType = new TypeToken<ChangePasswordResultCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerPurchaseOrderAccount
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerPurchaseOrderAccountCall(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerPurchaseOrderAccount;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/purchaseOrderAccount"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerPurchaseOrderAccountValidateBeforeCall(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createCustomerPurchaseOrderAccount(Async)");
        }
        

        okhttp3.Call localVarCall = createCustomerPurchaseOrderAccountCall(accountId, customerPurchaseOrderAccount, _callback);
        return localVarCall;

    }

    /**
     * Create Customer Purchase Order Account
     * Creates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @return CustomerPurchaseOrderAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPurchaseOrderAccount createCustomerPurchaseOrderAccount(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount) throws ApiException {
        ApiResponse<CustomerPurchaseOrderAccount> localVarResp = createCustomerPurchaseOrderAccountWithHttpInfo(accountId, customerPurchaseOrderAccount);
        return localVarResp.getData();
    }

    /**
     * Create Customer Purchase Order Account
     * Creates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @return ApiResponse&lt;CustomerPurchaseOrderAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPurchaseOrderAccount> createCustomerPurchaseOrderAccountWithHttpInfo(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount) throws ApiException {
        okhttp3.Call localVarCall = createCustomerPurchaseOrderAccountValidateBeforeCall(accountId, customerPurchaseOrderAccount, null);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Customer Purchase Order Account (asynchronously)
     * Creates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerPurchaseOrderAccountAsync(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback<CustomerPurchaseOrderAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerPurchaseOrderAccountValidateBeforeCall(accountId, customerPurchaseOrderAccount, _callback);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPurchaseOrderTransaction
     * @param accountId Unique identifier of the customer account. (required)
     * @param purchaseOrderTransaction transaction log that needs to be created (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderTransactionCall(Integer accountId, PurchaseOrderTransaction purchaseOrderTransaction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseOrderTransaction;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPurchaseOrderTransactionValidateBeforeCall(Integer accountId, PurchaseOrderTransaction purchaseOrderTransaction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createPurchaseOrderTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = createPurchaseOrderTransactionCall(accountId, purchaseOrderTransaction, _callback);
        return localVarCall;

    }

    /**
     * Create Purchase Order Transaction
     * Creates a purchase order transaction log (for public api use).
     * @param accountId Unique identifier of the customer account. (required)
     * @param purchaseOrderTransaction transaction log that needs to be created (optional)
     * @return PurchaseOrderTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrderTransaction createPurchaseOrderTransaction(Integer accountId, PurchaseOrderTransaction purchaseOrderTransaction) throws ApiException {
        ApiResponse<PurchaseOrderTransaction> localVarResp = createPurchaseOrderTransactionWithHttpInfo(accountId, purchaseOrderTransaction);
        return localVarResp.getData();
    }

    /**
     * Create Purchase Order Transaction
     * Creates a purchase order transaction log (for public api use).
     * @param accountId Unique identifier of the customer account. (required)
     * @param purchaseOrderTransaction transaction log that needs to be created (optional)
     * @return ApiResponse&lt;PurchaseOrderTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrderTransaction> createPurchaseOrderTransactionWithHttpInfo(Integer accountId, PurchaseOrderTransaction purchaseOrderTransaction) throws ApiException {
        okhttp3.Call localVarCall = createPurchaseOrderTransactionValidateBeforeCall(accountId, purchaseOrderTransaction, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Purchase Order Transaction (asynchronously)
     * Creates a purchase order transaction log (for public api use).
     * @param accountId Unique identifier of the customer account. (required)
     * @param purchaseOrderTransaction transaction log that needs to be created (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPurchaseOrderTransactionAsync(Integer accountId, PurchaseOrderTransaction purchaseOrderTransaction, final ApiCallback<PurchaseOrderTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPurchaseOrderTransactionValidateBeforeCall(accountId, purchaseOrderTransaction, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccount
     * @param accountId Unique identifier of the customer account to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccount(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Delete Account
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * @param accountId Unique identifier of the customer account to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccount(Integer accountId) throws ApiException {
        deleteAccountWithHttpInfo(accountId);
    }

    /**
     * Delete Account
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * @param accountId Unique identifier of the customer account to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Account (asynchronously)
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * @param accountId Unique identifier of the customer account to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(Integer accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountAttribute
     * @param accountId  (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAttributeCall(Integer accountId, String attributeFQN, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountAttributeValidateBeforeCall(Integer accountId, String attributeFQN, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteAccountAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountAttributeCall(accountId, attributeFQN, userId, _callback);
        return localVarCall;

    }

    /**
     * Delete Account Attribute
     * Deletes an account attribute specified by attributeFQN.
     * @param accountId  (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountAttribute(Integer accountId, String attributeFQN, String userId) throws ApiException {
        deleteAccountAttributeWithHttpInfo(accountId, attributeFQN, userId);
    }

    /**
     * Delete Account Attribute
     * Deletes an account attribute specified by attributeFQN.
     * @param accountId  (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountAttributeWithHttpInfo(Integer accountId, String attributeFQN, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Account Attribute (asynchronously)
     * Deletes an account attribute specified by attributeFQN.
     * @param accountId  (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAttributeAsync(Integer accountId, String attributeFQN, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountCard
     * @param accountId  (required)
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCardCall(Integer accountId, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/cards/{cardId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountCardValidateBeforeCall(Integer accountId, String cardId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountCard(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling deleteAccountCard(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountCardCall(accountId, cardId, _callback);
        return localVarCall;

    }

    /**
     * Delete Account Card
     * Removes a card from the specified customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountCard(Integer accountId, String cardId) throws ApiException {
        deleteAccountCardWithHttpInfo(accountId, cardId);
    }

    /**
     * Delete Account Card
     * Removes a card from the specified customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountCardWithHttpInfo(Integer accountId, String cardId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountCardValidateBeforeCall(accountId, cardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Account Card (asynchronously)
     * Removes a card from the specified customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCardAsync(Integer accountId, String cardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountCardValidateBeforeCall(accountId, cardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountContact
     * @param accountId Unique identifier of the customer account whose CustomerContact you want to delete. (required)
     * @param contactId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountContactCall(Integer accountId, Integer contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts/{contactId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountContactValidateBeforeCall(Integer accountId, Integer contactId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountContact(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling deleteAccountContact(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountContactCall(accountId, contactId, _callback);
        return localVarCall;

    }

    /**
     * Delete Account Contact
     * Deletes a CustomerContact for the specified customer account.
     * @param accountId Unique identifier of the customer account whose CustomerContact you want to delete. (required)
     * @param contactId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountContact(Integer accountId, Integer contactId) throws ApiException {
        deleteAccountContactWithHttpInfo(accountId, contactId);
    }

    /**
     * Delete Account Contact
     * Deletes a CustomerContact for the specified customer account.
     * @param accountId Unique identifier of the customer account whose CustomerContact you want to delete. (required)
     * @param contactId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountContactWithHttpInfo(Integer accountId, Integer contactId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountContactValidateBeforeCall(accountId, contactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Account Contact (asynchronously)
     * Deletes a CustomerContact for the specified customer account.
     * @param accountId Unique identifier of the customer account whose CustomerContact you want to delete. (required)
     * @param contactId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountContactAsync(Integer accountId, Integer contactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountContactValidateBeforeCall(accountId, contactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccountNote
     * @param accountId Unique identifier of the customer account that contains the note you want to delete. (required)
     * @param noteId Unique identifier of the note to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountNoteCall(Integer accountId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/notes/{noteId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountNoteValidateBeforeCall(Integer accountId, Integer noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteAccountNote(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountNoteCall(accountId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Delete Account Note
     * Removes a note from the specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note you want to delete. (required)
     * @param noteId Unique identifier of the note to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccountNote(Integer accountId, Integer noteId) throws ApiException {
        deleteAccountNoteWithHttpInfo(accountId, noteId);
    }

    /**
     * Delete Account Note
     * Removes a note from the specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note you want to delete. (required)
     * @param noteId Unique identifier of the note to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountNoteWithHttpInfo(Integer accountId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountNoteValidateBeforeCall(accountId, noteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Account Note (asynchronously)
     * Removes a note from the specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note you want to delete. (required)
     * @param noteId Unique identifier of the note to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountNoteAsync(Integer accountId, Integer noteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountNoteValidateBeforeCall(accountId, noteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccount
     * @param accountId Unique identifier of the customer account whose details you want to retrieve. (required)
     * @param responseGroups  (optional)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCall(Integer accountId, String responseGroups, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(Integer accountId, String responseGroups, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountCall(accountId, responseGroups, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Account
     * Retrieves the details of a customer account specified by its unique identifier.
     * @param accountId Unique identifier of the customer account whose details you want to retrieve. (required)
     * @param responseGroups  (optional)
     * @param userId  (optional)
     * @return CustomerAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccount getAccount(Integer accountId, String responseGroups, String userId) throws ApiException {
        ApiResponse<CustomerAccount> localVarResp = getAccountWithHttpInfo(accountId, responseGroups, userId);
        return localVarResp.getData();
    }

    /**
     * Get Account
     * Retrieves the details of a customer account specified by its unique identifier.
     * @param accountId Unique identifier of the customer account whose details you want to retrieve. (required)
     * @param responseGroups  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;CustomerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccount> getAccountWithHttpInfo(Integer accountId, String responseGroups, String userId) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, responseGroups, userId, null);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account (asynchronously)
     * Retrieves the details of a customer account specified by its unique identifier.
     * @param accountId Unique identifier of the customer account whose details you want to retrieve. (required)
     * @param responseGroups  (optional)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAsync(Integer accountId, String responseGroups, String userId, final ApiCallback<CustomerAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, responseGroups, userId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAttribute
     * @param accountId Unique identifier of the account that contains the attribute to retrieve. (required)
     * @param attributeFQN Fully qualified name of the attribute that you want to retrieve. (required)
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttributeCall(Integer accountId, String attributeFQN, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAttributeValidateBeforeCall(Integer accountId, String attributeFQN, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getAccountAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountAttributeCall(accountId, attributeFQN, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Attribute
     * Retrieves the contents of a particular attribute attached to a specified account.
     * @param accountId Unique identifier of the account that contains the attribute to retrieve. (required)
     * @param attributeFQN Fully qualified name of the attribute that you want to retrieve. (required)
     * @param userId  (optional)
     * @return CustomerAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAttribute getAccountAttribute(Integer accountId, String attributeFQN, String userId) throws ApiException {
        ApiResponse<CustomerAttribute> localVarResp = getAccountAttributeWithHttpInfo(accountId, attributeFQN, userId);
        return localVarResp.getData();
    }

    /**
     * Get Account Attribute
     * Retrieves the contents of a particular attribute attached to a specified account.
     * @param accountId Unique identifier of the account that contains the attribute to retrieve. (required)
     * @param attributeFQN Fully qualified name of the attribute that you want to retrieve. (required)
     * @param userId  (optional)
     * @return ApiResponse&lt;CustomerAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAttribute> getAccountAttributeWithHttpInfo(Integer accountId, String attributeFQN, String userId) throws ApiException {
        okhttp3.Call localVarCall = getAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, null);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Attribute (asynchronously)
     * Retrieves the contents of a particular attribute attached to a specified account.
     * @param accountId Unique identifier of the account that contains the attribute to retrieve. (required)
     * @param attributeFQN Fully qualified name of the attribute that you want to retrieve. (required)
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttributeAsync(Integer accountId, String attributeFQN, String userId, final ApiCallback<CustomerAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAttributes
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param userId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttributesCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/attributes"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAttributesValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountAttributesCall(accountId, startIndex, pageSize, sortBy, filter, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Attributes
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param userId  (optional)
     * @return CustomerAttributeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAttributeCollection getAccountAttributes(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId) throws ApiException {
        ApiResponse<CustomerAttributeCollection> localVarResp = getAccountAttributesWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter, userId);
        return localVarResp.getData();
    }

    /**
     * Get Account Attributes
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param userId  (optional)
     * @return ApiResponse&lt;CustomerAttributeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAttributeCollection> getAccountAttributesWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId) throws ApiException {
        okhttp3.Call localVarCall = getAccountAttributesValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, userId, null);
        Type localVarReturnType = new TypeToken<CustomerAttributeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Attributes (asynchronously)
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param userId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAttributesAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback<CustomerAttributeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAttributesValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, userId, _callback);
        Type localVarReturnType = new TypeToken<CustomerAttributeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountAuditLog
     * @param accountId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAuditLogCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/AuditLog/Entries"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountAuditLogValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAuditLog(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountAuditLogCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     * @param accountId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return CustomerAuditEntryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAuditEntryCollection getAccountAuditLog(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<CustomerAuditEntryCollection> localVarResp = getAccountAuditLogWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     * @param accountId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;CustomerAuditEntryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAuditEntryCollection> getAccountAuditLogWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAccountAuditLogValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<CustomerAuditEntryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Audit Log (asynchronously)
     * Get Account Audit Log
     * @param accountId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAuditLogAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<CustomerAuditEntryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountAuditLogValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<CustomerAuditEntryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountCard
     * @param accountId  (required)
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCardCall(Integer accountId, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/cards/{cardId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountCardValidateBeforeCall(Integer accountId, String cardId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountCard(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getAccountCard(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountCardCall(accountId, cardId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Card
     * Retrieves a card for the specified customer account and card ID.
     * @param accountId  (required)
     * @param cardId  (required)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Card getAccountCard(Integer accountId, String cardId) throws ApiException {
        ApiResponse<Card> localVarResp = getAccountCardWithHttpInfo(accountId, cardId);
        return localVarResp.getData();
    }

    /**
     * Get Account Card
     * Retrieves a card for the specified customer account and card ID.
     * @param accountId  (required)
     * @param cardId  (required)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> getAccountCardWithHttpInfo(Integer accountId, String cardId) throws ApiException {
        okhttp3.Call localVarCall = getAccountCardValidateBeforeCall(accountId, cardId, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Card (asynchronously)
     * Retrieves a card for the specified customer account and card ID.
     * @param accountId  (required)
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCardAsync(Integer accountId, String cardId, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountCardValidateBeforeCall(accountId, cardId, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountCards
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCardsCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/cards"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountCardsValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountCards(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountCardsCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Cards
     * Retrieves a list of cards for the specified customer account.
     * @param accountId  (required)
     * @return CardCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CardCollection getAccountCards(Integer accountId) throws ApiException {
        ApiResponse<CardCollection> localVarResp = getAccountCardsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Account Cards
     * Retrieves a list of cards for the specified customer account.
     * @param accountId  (required)
     * @return ApiResponse&lt;CardCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardCollection> getAccountCardsWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountCardsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<CardCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Cards (asynchronously)
     * Retrieves a list of cards for the specified customer account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCardsAsync(Integer accountId, final ApiCallback<CardCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountCardsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<CardCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountContact
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param contactId Unique identifier of the CustomerContact whose details you want to retrieve. (required)
     * @param userId If provided, the primary markings on the contact will be based on the user&#39;s preferred primary overrides (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountContactCall(Integer accountId, Integer contactId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts/{contactId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountContactValidateBeforeCall(Integer accountId, Integer contactId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountContact(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getAccountContact(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountContactCall(accountId, contactId, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Contact
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param contactId Unique identifier of the CustomerContact whose details you want to retrieve. (required)
     * @param userId If provided, the primary markings on the contact will be based on the user&#39;s preferred primary overrides (optional)
     * @return CustomerContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContact getAccountContact(Integer accountId, Integer contactId, String userId) throws ApiException {
        ApiResponse<CustomerContact> localVarResp = getAccountContactWithHttpInfo(accountId, contactId, userId);
        return localVarResp.getData();
    }

    /**
     * Get Account Contact
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param contactId Unique identifier of the CustomerContact whose details you want to retrieve. (required)
     * @param userId If provided, the primary markings on the contact will be based on the user&#39;s preferred primary overrides (optional)
     * @return ApiResponse&lt;CustomerContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContact> getAccountContactWithHttpInfo(Integer accountId, Integer contactId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getAccountContactValidateBeforeCall(accountId, contactId, userId, null);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Contact (asynchronously)
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param contactId Unique identifier of the CustomerContact whose details you want to retrieve. (required)
     * @param userId If provided, the primary markings on the contact will be based on the user&#39;s preferred primary overrides (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountContactAsync(Integer accountId, Integer contactId, String userId, final ApiCallback<CustomerContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountContactValidateBeforeCall(accountId, contactId, userId, _callback);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountContacts
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param userId If provided, the primary markings on the contacts will be based on the user&#39;s preferred primary overrides (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountContactsCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountContactsValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountContacts(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountContactsCall(accountId, startIndex, pageSize, sortBy, filter, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Contacts
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param userId If provided, the primary markings on the contacts will be based on the user&#39;s preferred primary overrides (optional)
     * @return CustomerContactCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContactCollection getAccountContacts(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId) throws ApiException {
        ApiResponse<CustomerContactCollection> localVarResp = getAccountContactsWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter, userId);
        return localVarResp.getData();
    }

    /**
     * Get Account Contacts
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param userId If provided, the primary markings on the contacts will be based on the user&#39;s preferred primary overrides (optional)
     * @return ApiResponse&lt;CustomerContactCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContactCollection> getAccountContactsWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId) throws ApiException {
        okhttp3.Call localVarCall = getAccountContactsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, userId, null);
        Type localVarReturnType = new TypeToken<CustomerContactCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Contacts (asynchronously)
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param userId If provided, the primary markings on the contacts will be based on the user&#39;s preferred primary overrides (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountContactsAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, String userId, final ApiCallback<CustomerContactCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountContactsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, userId, _callback);
        Type localVarReturnType = new TypeToken<CustomerContactCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountNote
     * @param accountId Unique identifier of the customer account that contains the note to retrieve. (required)
     * @param noteId Unique identifier of a particular note that you want to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNoteCall(Integer accountId, Integer noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/notes/{noteId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountNoteValidateBeforeCall(Integer accountId, Integer noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getAccountNote(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountNoteCall(accountId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Get Account Note
     * Retrieves the contents of a particular note attached to a specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note to retrieve. (required)
     * @param noteId Unique identifier of a particular note that you want to retrieve. (required)
     * @return CustomerNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerNote getAccountNote(Integer accountId, Integer noteId) throws ApiException {
        ApiResponse<CustomerNote> localVarResp = getAccountNoteWithHttpInfo(accountId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get Account Note
     * Retrieves the contents of a particular note attached to a specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note to retrieve. (required)
     * @param noteId Unique identifier of a particular note that you want to retrieve. (required)
     * @return ApiResponse&lt;CustomerNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerNote> getAccountNoteWithHttpInfo(Integer accountId, Integer noteId) throws ApiException {
        okhttp3.Call localVarCall = getAccountNoteValidateBeforeCall(accountId, noteId, null);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Note (asynchronously)
     * Retrieves the contents of a particular note attached to a specified customer account.
     * @param accountId Unique identifier of the customer account that contains the note to retrieve. (required)
     * @param noteId Unique identifier of a particular note that you want to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNoteAsync(Integer accountId, Integer noteId, final ApiCallback<CustomerNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountNoteValidateBeforeCall(accountId, noteId, _callback);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountNotes
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNotesCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/notes"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountNotesValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountNotes(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountNotesCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Account Notes
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @return CustomerNoteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerNoteCollection getAccountNotes(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<CustomerNoteCollection> localVarResp = getAccountNotesWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Account Notes
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @return ApiResponse&lt;CustomerNoteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerNoteCollection> getAccountNotesWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAccountNotesValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<CustomerNoteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Notes (asynchronously)
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the customer account whose notes you want to retrieve. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountNotesAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<CustomerNoteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountNotesValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<CustomerNoteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountSegments
     * @param accountId Unique identifier of the account for which you want the list of groups. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.               Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSegmentsCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/segments"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountSegmentsValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountSegments(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountSegmentsCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Account Segments
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the account for which you want the list of groups. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.               Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @return CustomerSegmentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerSegmentCollection getAccountSegments(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<CustomerSegmentCollection> localVarResp = getAccountSegmentsWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Account Segments
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the account for which you want the list of groups. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.               Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @return ApiResponse&lt;CustomerSegmentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerSegmentCollection> getAccountSegmentsWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAccountSegmentsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<CustomerSegmentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Segments (asynchronously)
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * @param accountId Unique identifier of the account for which you want the list of groups. (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.               Optional. (optional, default to )
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSegmentsAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<CustomerSegmentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountSegmentsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<CustomerSegmentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccounts
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.                            For example, applications can filter on UserId to get the single record of the current customer. (optional, default to 0)
     * @param pageSize We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param fields  (optional)
     * @param q a quick filter which will search a predefined set of fields for a match (optional)
     * @param qLimit  (optional)
     * @param isAnonymous  (optional)
     * @param responseGroups Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        if (isAnonymous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnonymous", isAnonymous));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAccountsCall(startIndex, pageSize, sortBy, filter, fields, q, qLimit, isAnonymous, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get Accounts
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.                            For example, applications can filter on UserId to get the single record of the current customer. (optional, default to 0)
     * @param pageSize We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param fields  (optional)
     * @param q a quick filter which will search a predefined set of fields for a match (optional)
     * @param qLimit  (optional)
     * @param isAnonymous  (optional)
     * @param responseGroups Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional. (optional)
     * @return CustomerAccountCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccountCollection getAccounts(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseGroups) throws ApiException {
        ApiResponse<CustomerAccountCollection> localVarResp = getAccountsWithHttpInfo(startIndex, pageSize, sortBy, filter, fields, q, qLimit, isAnonymous, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get Accounts
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.                            For example, applications can filter on UserId to get the single record of the current customer. (optional, default to 0)
     * @param pageSize We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param fields  (optional)
     * @param q a quick filter which will search a predefined set of fields for a match (optional)
     * @param qLimit  (optional)
     * @param isAnonymous  (optional)
     * @param responseGroups Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional. (optional)
     * @return ApiResponse&lt;CustomerAccountCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccountCollection> getAccountsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(startIndex, pageSize, sortBy, filter, fields, q, qLimit, isAnonymous, responseGroups, null);
        Type localVarReturnType = new TypeToken<CustomerAccountCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Accounts (asynchronously)
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.                            For example, applications can filter on UserId to get the single record of the current customer. (optional, default to 0)
     * @param pageSize We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param fields  (optional)
     * @param q a quick filter which will search a predefined set of fields for a match (optional)
     * @param qLimit  (optional)
     * @param isAnonymous  (optional)
     * @param responseGroups Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String fields, String q, Integer qLimit, Boolean isAnonymous, String responseGroups, final ApiCallback<CustomerAccountCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(startIndex, pageSize, sortBy, filter, fields, q, qLimit, isAnonymous, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccountCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentAccount
     * @param responseGroups  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentAccountCall(String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentAccountValidateBeforeCall(String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCurrentAccountCall(responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     * @param responseGroups  (optional)
     * @return CustomerAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccount getCurrentAccount(String responseGroups) throws ApiException {
        ApiResponse<CustomerAccount> localVarResp = getCurrentAccountWithHttpInfo(responseGroups);
        return localVarResp.getData();
    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     * @param responseGroups  (optional)
     * @return ApiResponse&lt;CustomerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccount> getCurrentAccountWithHttpInfo(String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCurrentAccountValidateBeforeCall(responseGroups, null);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the details of a the current logged in customer account (asynchronously)
     * Retrieves the details of a the current logged in customer account
     * @param responseGroups  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrentAccountAsync(String responseGroups, final ApiCallback<CustomerAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentAccountValidateBeforeCall(responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPurchaseOrderAccount
     * @param accountId Unique identifier of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPurchaseOrderAccountCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/purchaseOrderAccount"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPurchaseOrderAccountValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCustomerPurchaseOrderAccount(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPurchaseOrderAccountCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Gets a customer&#39;s purchase order account.
     * Gets a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @return CustomerPurchaseOrderAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPurchaseOrderAccount getCustomerPurchaseOrderAccount(Integer accountId) throws ApiException {
        ApiResponse<CustomerPurchaseOrderAccount> localVarResp = getCustomerPurchaseOrderAccountWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Gets a customer&#39;s purchase order account.
     * Gets a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @return ApiResponse&lt;CustomerPurchaseOrderAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPurchaseOrderAccount> getCustomerPurchaseOrderAccountWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPurchaseOrderAccountValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a customer&#39;s purchase order account. (asynchronously)
     * Gets a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPurchaseOrderAccountAsync(Integer accountId, final ApiCallback<CustomerPurchaseOrderAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPurchaseOrderAccountValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPurchaseOrderTransactions
     * @param accountId Customer Account Id for which transaction logs need to be retreived (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query.               Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPurchaseOrderTransactionsCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPurchaseOrderTransactionsValidateBeforeCall(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getCustomerPurchaseOrderTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPurchaseOrderTransactionsCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Customer Purchase Order Transactions
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * @param accountId Customer Account Id for which transaction logs need to be retreived (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query.               Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter  (optional)
     * @return PurchaseOrderTransactionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseOrderTransactionCollection getCustomerPurchaseOrderTransactions(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<PurchaseOrderTransactionCollection> localVarResp = getCustomerPurchaseOrderTransactionsWithHttpInfo(accountId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Customer Purchase Order Transactions
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * @param accountId Customer Account Id for which transaction logs need to be retreived (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query.               Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter  (optional)
     * @return ApiResponse&lt;PurchaseOrderTransactionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseOrderTransactionCollection> getCustomerPurchaseOrderTransactionsWithHttpInfo(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPurchaseOrderTransactionsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<PurchaseOrderTransactionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Customer Purchase Order Transactions (asynchronously)
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * @param accountId Customer Account Id for which transaction logs need to be retreived (required)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query.               Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 20)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional, default to )
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPurchaseOrderTransactionsAsync(Integer accountId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<PurchaseOrderTransactionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPurchaseOrderTransactionsValidateBeforeCall(accountId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<PurchaseOrderTransactionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomersPurchaseOrderAccounts
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param accountType  (optional, default to B2C)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomersPurchaseOrderAccountsCall(Integer startIndex, Integer pageSize, String sortBy, String accountType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/purchaseOrderAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountType", accountType));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomersPurchaseOrderAccountsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String accountType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomersPurchaseOrderAccountsCall(startIndex, pageSize, sortBy, accountType, _callback);
        return localVarCall;

    }

    /**
     * Get Customers Purchase Order Accounts
     * Gets a collection of customer purchase order accounts.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param accountType  (optional, default to B2C)
     * @return CustomerPurchaseOrderAccountCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPurchaseOrderAccountCollection getCustomersPurchaseOrderAccounts(Integer startIndex, Integer pageSize, String sortBy, String accountType) throws ApiException {
        ApiResponse<CustomerPurchaseOrderAccountCollection> localVarResp = getCustomersPurchaseOrderAccountsWithHttpInfo(startIndex, pageSize, sortBy, accountType);
        return localVarResp.getData();
    }

    /**
     * Get Customers Purchase Order Accounts
     * Gets a collection of customer purchase order accounts.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param accountType  (optional, default to B2C)
     * @return ApiResponse&lt;CustomerPurchaseOrderAccountCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPurchaseOrderAccountCollection> getCustomersPurchaseOrderAccountsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String accountType) throws ApiException {
        okhttp3.Call localVarCall = getCustomersPurchaseOrderAccountsValidateBeforeCall(startIndex, pageSize, sortBy, accountType, null);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccountCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Customers Purchase Order Accounts (asynchronously)
     * Gets a collection of customer purchase order accounts.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param accountType  (optional, default to B2C)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomersPurchaseOrderAccountsAsync(Integer startIndex, Integer pageSize, String sortBy, String accountType, final ApiCallback<CustomerPurchaseOrderAccountCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomersPurchaseOrderAccountsValidateBeforeCall(startIndex, pageSize, sortBy, accountType, _callback);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccountCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoginState
     * @param accountId  (required)
     * @param userId EmailAddress of the customer whose details you want to view. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateCall(Integer accountId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/loginstate"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginStateValidateBeforeCall(Integer accountId, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getLoginState(Async)");
        }
        

        okhttp3.Call localVarCall = getLoginStateCall(accountId, userId, _callback);
        return localVarCall;

    }

    /**
     * Get Login State
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * @param accountId  (required)
     * @param userId EmailAddress of the customer whose details you want to view. (optional)
     * @return LoginState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LoginState getLoginState(Integer accountId, String userId) throws ApiException {
        ApiResponse<LoginState> localVarResp = getLoginStateWithHttpInfo(accountId, userId);
        return localVarResp.getData();
    }

    /**
     * Get Login State
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * @param accountId  (required)
     * @param userId EmailAddress of the customer whose details you want to view. (optional)
     * @return ApiResponse&lt;LoginState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginState> getLoginStateWithHttpInfo(Integer accountId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getLoginStateValidateBeforeCall(accountId, userId, null);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login State (asynchronously)
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * @param accountId  (required)
     * @param userId EmailAddress of the customer whose details you want to view. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateAsync(Integer accountId, String userId, final ApiCallback<LoginState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoginStateValidateBeforeCall(accountId, userId, _callback);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoginStateByEmailAddress
     * @param emailAddress  (optional)
     * @param customerSetCode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateByEmailAddressCall(String emailAddress, String customerSetCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/loginstatebyemailaddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (customerSetCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerSetCode", customerSetCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginStateByEmailAddressValidateBeforeCall(String emailAddress, String customerSetCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLoginStateByEmailAddressCall(emailAddress, customerSetCode, _callback);
        return localVarCall;

    }

    /**
     * Get Login State By Email Address
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * @param emailAddress  (optional)
     * @param customerSetCode  (optional)
     * @return LoginState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LoginState getLoginStateByEmailAddress(String emailAddress, String customerSetCode) throws ApiException {
        ApiResponse<LoginState> localVarResp = getLoginStateByEmailAddressWithHttpInfo(emailAddress, customerSetCode);
        return localVarResp.getData();
    }

    /**
     * Get Login State By Email Address
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * @param emailAddress  (optional)
     * @param customerSetCode  (optional)
     * @return ApiResponse&lt;LoginState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginState> getLoginStateByEmailAddressWithHttpInfo(String emailAddress, String customerSetCode) throws ApiException {
        okhttp3.Call localVarCall = getLoginStateByEmailAddressValidateBeforeCall(emailAddress, customerSetCode, null);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login State By Email Address (asynchronously)
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * @param emailAddress  (optional)
     * @param customerSetCode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateByEmailAddressAsync(String emailAddress, String customerSetCode, final ApiCallback<LoginState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoginStateByEmailAddressValidateBeforeCall(emailAddress, customerSetCode, _callback);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLoginStateByUserName
     * @param userName Unique userName of the customer whose details you want to view. (optional)
     * @param customerSetCode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateByUserNameCall(String userName, String customerSetCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/loginstatebyusername";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (customerSetCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerSetCode", customerSetCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoginStateByUserNameValidateBeforeCall(String userName, String customerSetCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLoginStateByUserNameCall(userName, customerSetCode, _callback);
        return localVarCall;

    }

    /**
     * Get Login State By UserName
     * Retrieves the log-in status details of a shopper specified by userName.
     * @param userName Unique userName of the customer whose details you want to view. (optional)
     * @param customerSetCode  (optional)
     * @return LoginState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LoginState getLoginStateByUserName(String userName, String customerSetCode) throws ApiException {
        ApiResponse<LoginState> localVarResp = getLoginStateByUserNameWithHttpInfo(userName, customerSetCode);
        return localVarResp.getData();
    }

    /**
     * Get Login State By UserName
     * Retrieves the log-in status details of a shopper specified by userName.
     * @param userName Unique userName of the customer whose details you want to view. (optional)
     * @param customerSetCode  (optional)
     * @return ApiResponse&lt;LoginState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginState> getLoginStateByUserNameWithHttpInfo(String userName, String customerSetCode) throws ApiException {
        okhttp3.Call localVarCall = getLoginStateByUserNameValidateBeforeCall(userName, customerSetCode, null);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Login State By UserName (asynchronously)
     * Retrieves the log-in status details of a shopper specified by userName.
     * @param userName Unique userName of the customer whose details you want to view. (optional)
     * @param customerSetCode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLoginStateByUserNameAsync(String userName, String customerSetCode, final ApiCallback<LoginState> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoginStateByUserNameValidateBeforeCall(userName, customerSetCode, _callback);
        Type localVarReturnType = new TypeToken<LoginState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactions
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/transactions"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getTransactionsCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get Transactions
     * Gets the list of transactions on customer account.
     * @param accountId  (required)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Transaction> getTransactions(Integer accountId) throws ApiException {
        ApiResponse<List<Transaction>> localVarResp = getTransactionsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get Transactions
     * Gets the list of transactions on customer account.
     * @param accountId  (required)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Transaction>> getTransactionsWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transactions (asynchronously)
     * Gets the list of transactions on customer account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsAsync(Integer accountId, final ApiCallback<List<Transaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recomputeCustomerLifetimeValue
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recomputeCustomerLifetimeValueCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/recomputelifetimevalue"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recomputeCustomerLifetimeValueValidateBeforeCall(Integer accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling recomputeCustomerLifetimeValue(Async)");
        }
        

        okhttp3.Call localVarCall = recomputeCustomerLifetimeValueCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Recompute Customer Lifetime Value
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void recomputeCustomerLifetimeValue(Integer accountId) throws ApiException {
        recomputeCustomerLifetimeValueWithHttpInfo(accountId);
    }

    /**
     * Recompute Customer Lifetime Value
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recomputeCustomerLifetimeValueWithHttpInfo(Integer accountId) throws ApiException {
        okhttp3.Call localVarCall = recomputeCustomerLifetimeValueValidateBeforeCall(accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Recompute Customer Lifetime Value (asynchronously)
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recomputeCustomerLifetimeValueAsync(Integer accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recomputeCustomerLifetimeValueValidateBeforeCall(accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTransaction
     * @param accountId  (required)
     * @param transactionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTransactionCall(Integer accountId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/transactions/{transactionId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTransactionValidateBeforeCall(Integer accountId, String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeTransaction(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling removeTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = removeTransactionCall(accountId, transactionId, _callback);
        return localVarCall;

    }

    /**
     * Remove Transaction
     * Removes a transaction on customer account.
     * @param accountId  (required)
     * @param transactionId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void removeTransaction(Integer accountId, String transactionId) throws ApiException {
        removeTransactionWithHttpInfo(accountId, transactionId);
    }

    /**
     * Remove Transaction
     * Removes a transaction on customer account.
     * @param accountId  (required)
     * @param transactionId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeTransactionWithHttpInfo(Integer accountId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = removeTransactionValidateBeforeCall(accountId, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Transaction (asynchronously)
     * Removes a transaction on customer account.
     * @param accountId  (required)
     * @param transactionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTransactionAsync(Integer accountId, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTransactionValidateBeforeCall(accountId, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPassword
     * @param customerResetPasswordInfo Username or EmailAddress of the shopper who has requested a password reset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordCall(CustomerResetPasswordInfo customerResetPasswordInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerResetPasswordInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/Reset-Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPasswordValidateBeforeCall(CustomerResetPasswordInfo customerResetPasswordInfo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resetPasswordCall(customerResetPasswordInfo, _callback);
        return localVarCall;

    }

    /**
     * Reset Password
     * Resets the password for a shopper specified by username or emailAddress.
     * @param customerResetPasswordInfo Username or EmailAddress of the shopper who has requested a password reset. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resetPassword(CustomerResetPasswordInfo customerResetPasswordInfo) throws ApiException {
        resetPasswordWithHttpInfo(customerResetPasswordInfo);
    }

    /**
     * Reset Password
     * Resets the password for a shopper specified by username or emailAddress.
     * @param customerResetPasswordInfo Username or EmailAddress of the shopper who has requested a password reset. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resetPasswordWithHttpInfo(CustomerResetPasswordInfo customerResetPasswordInfo) throws ApiException {
        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(customerResetPasswordInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset Password (asynchronously)
     * Resets the password for a shopper specified by username or emailAddress.
     * @param customerResetPasswordInfo Username or EmailAddress of the shopper who has requested a password reset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPasswordAsync(CustomerResetPasswordInfo customerResetPasswordInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPasswordValidateBeforeCall(customerResetPasswordInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLoginLocked
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body True for locking the login. False for unlocking the login (default). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginLockedCall(Integer accountId, String userId, Boolean body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/Set-Login-Locked"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLoginLockedValidateBeforeCall(Integer accountId, String userId, Boolean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setLoginLocked(Async)");
        }
        

        okhttp3.Call localVarCall = setLoginLockedCall(accountId, userId, body, _callback);
        return localVarCall;

    }

    /**
     * Set Login Locked
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body True for locking the login. False for unlocking the login (default). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setLoginLocked(Integer accountId, String userId, Boolean body) throws ApiException {
        setLoginLockedWithHttpInfo(accountId, userId, body);
    }

    /**
     * Set Login Locked
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body True for locking the login. False for unlocking the login (default). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setLoginLockedWithHttpInfo(Integer accountId, String userId, Boolean body) throws ApiException {
        okhttp3.Call localVarCall = setLoginLockedValidateBeforeCall(accountId, userId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Login Locked (asynchronously)
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body True for locking the login. False for unlocking the login (default). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLoginLockedAsync(Integer accountId, String userId, Boolean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLoginLockedValidateBeforeCall(accountId, userId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPasswordChangeRequired
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasswordChangeRequiredCall(Integer accountId, String userId, Boolean body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/Set-Password-Change-Required"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPasswordChangeRequiredValidateBeforeCall(Integer accountId, String userId, Boolean body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling setPasswordChangeRequired(Async)");
        }
        

        okhttp3.Call localVarCall = setPasswordChangeRequiredCall(accountId, userId, body, _callback);
        return localVarCall;

    }

    /**
     * Set Password Change Required
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void setPasswordChangeRequired(Integer accountId, String userId, Boolean body) throws ApiException {
        setPasswordChangeRequiredWithHttpInfo(accountId, userId, body);
    }

    /**
     * Set Password Change Required
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setPasswordChangeRequiredWithHttpInfo(Integer accountId, String userId, Boolean body) throws ApiException {
        okhttp3.Call localVarCall = setPasswordChangeRequiredValidateBeforeCall(accountId, userId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Password Change Required (asynchronously)
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * @param accountId The customer account id to operate on. (required)
     * @param userId  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasswordChangeRequiredAsync(Integer accountId, String userId, Boolean body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPasswordChangeRequiredValidateBeforeCall(accountId, userId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccount
     * @param accountId Unique identifier of the customer account. (required)
     * @param customerAccount Properties of the customer account to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCall(Integer accountId, CustomerAccount customerAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAccount;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(Integer accountId, CustomerAccount customerAccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccount(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountCall(accountId, customerAccount, _callback);
        return localVarCall;

    }

    /**
     * Update Account
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * @param accountId Unique identifier of the customer account. (required)
     * @param customerAccount Properties of the customer account to update. (optional)
     * @return CustomerAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAccount updateAccount(Integer accountId, CustomerAccount customerAccount) throws ApiException {
        ApiResponse<CustomerAccount> localVarResp = updateAccountWithHttpInfo(accountId, customerAccount);
        return localVarResp.getData();
    }

    /**
     * Update Account
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * @param accountId Unique identifier of the customer account. (required)
     * @param customerAccount Properties of the customer account to update. (optional)
     * @return ApiResponse&lt;CustomerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAccount> updateAccountWithHttpInfo(Integer accountId, CustomerAccount customerAccount) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, customerAccount, null);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account (asynchronously)
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * @param accountId Unique identifier of the customer account. (required)
     * @param customerAccount Properties of the customer account to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAsync(Integer accountId, CustomerAccount customerAccount, final ApiCallback<CustomerAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, customerAccount, _callback);
        Type localVarReturnType = new TypeToken<CustomerAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountAttribute
     * @param accountId Unique identifier of the account whose attribute you want to modify. (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param customerAttribute The new content to replace the existing attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAttributeCall(Integer accountId, String attributeFQN, String userId, CustomerAttribute customerAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAttribute;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountAttributeValidateBeforeCall(Integer accountId, String attributeFQN, String userId, CustomerAttribute customerAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateAccountAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountAttributeCall(accountId, attributeFQN, userId, customerAttribute, _callback);
        return localVarCall;

    }

    /**
     * Update Account Attribute
     * Modifies an existing attribute for an account.
     * @param accountId Unique identifier of the account whose attribute you want to modify. (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param customerAttribute The new content to replace the existing attribute. (optional)
     * @return CustomerAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAttribute updateAccountAttribute(Integer accountId, String attributeFQN, String userId, CustomerAttribute customerAttribute) throws ApiException {
        ApiResponse<CustomerAttribute> localVarResp = updateAccountAttributeWithHttpInfo(accountId, attributeFQN, userId, customerAttribute);
        return localVarResp.getData();
    }

    /**
     * Update Account Attribute
     * Modifies an existing attribute for an account.
     * @param accountId Unique identifier of the account whose attribute you want to modify. (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param customerAttribute The new content to replace the existing attribute. (optional)
     * @return ApiResponse&lt;CustomerAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAttribute> updateAccountAttributeWithHttpInfo(Integer accountId, String attributeFQN, String userId, CustomerAttribute customerAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, customerAttribute, null);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account Attribute (asynchronously)
     * Modifies an existing attribute for an account.
     * @param accountId Unique identifier of the account whose attribute you want to modify. (required)
     * @param attributeFQN  (required)
     * @param userId  (optional)
     * @param customerAttribute The new content to replace the existing attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAttributeAsync(Integer accountId, String attributeFQN, String userId, CustomerAttribute customerAttribute, final ApiCallback<CustomerAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountAttributeValidateBeforeCall(accountId, attributeFQN, userId, customerAttribute, _callback);
        Type localVarReturnType = new TypeToken<CustomerAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountCard
     * @param accountId  (required)
     * @param cardId  (required)
     * @param card  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCardCall(Integer accountId, String cardId, Card card, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = card;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/cards/{cardId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountCardValidateBeforeCall(Integer accountId, String cardId, Card card, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountCard(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling updateAccountCard(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountCardCall(accountId, cardId, card, _callback);
        return localVarCall;

    }

    /**
     * Update Account Card
     * Updates a card on the specific customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @param card  (optional)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Card updateAccountCard(Integer accountId, String cardId, Card card) throws ApiException {
        ApiResponse<Card> localVarResp = updateAccountCardWithHttpInfo(accountId, cardId, card);
        return localVarResp.getData();
    }

    /**
     * Update Account Card
     * Updates a card on the specific customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @param card  (optional)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Card> updateAccountCardWithHttpInfo(Integer accountId, String cardId, Card card) throws ApiException {
        okhttp3.Call localVarCall = updateAccountCardValidateBeforeCall(accountId, cardId, card, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account Card (asynchronously)
     * Updates a card on the specific customer account.
     * @param accountId  (required)
     * @param cardId  (required)
     * @param card  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCardAsync(Integer accountId, String cardId, Card card, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountCardValidateBeforeCall(accountId, cardId, card, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountContact
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to update. (required)
     * @param contactId  (required)
     * @param userId If provided, the primary markings on the contact will be stored as the user&#39;s preferred primary override (optional)
     * @param customerContact  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountContactCall(Integer accountId, Integer contactId, String userId, CustomerContact customerContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerContact;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/contacts/{contactId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountContactValidateBeforeCall(Integer accountId, Integer contactId, String userId, CustomerContact customerContact, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountContact(Async)");
        }
        
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling updateAccountContact(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountContactCall(accountId, contactId, userId, customerContact, _callback);
        return localVarCall;

    }

    /**
     * Update Account Contact
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to update. (required)
     * @param contactId  (required)
     * @param userId If provided, the primary markings on the contact will be stored as the user&#39;s preferred primary override (optional)
     * @param customerContact  (optional)
     * @return CustomerContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerContact updateAccountContact(Integer accountId, Integer contactId, String userId, CustomerContact customerContact) throws ApiException {
        ApiResponse<CustomerContact> localVarResp = updateAccountContactWithHttpInfo(accountId, contactId, userId, customerContact);
        return localVarResp.getData();
    }

    /**
     * Update Account Contact
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to update. (required)
     * @param contactId  (required)
     * @param userId If provided, the primary markings on the contact will be stored as the user&#39;s preferred primary override (optional)
     * @param customerContact  (optional)
     * @return ApiResponse&lt;CustomerContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerContact> updateAccountContactWithHttpInfo(Integer accountId, Integer contactId, String userId, CustomerContact customerContact) throws ApiException {
        okhttp3.Call localVarCall = updateAccountContactValidateBeforeCall(accountId, contactId, userId, customerContact, null);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account Contact (asynchronously)
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * @param accountId Unique identifier of the customer account whose CustomerContact information you want to update. (required)
     * @param contactId  (required)
     * @param userId If provided, the primary markings on the contact will be stored as the user&#39;s preferred primary override (optional)
     * @param customerContact  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountContactAsync(Integer accountId, Integer contactId, String userId, CustomerContact customerContact, final ApiCallback<CustomerContact> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountContactValidateBeforeCall(accountId, contactId, userId, customerContact, _callback);
        Type localVarReturnType = new TypeToken<CustomerContact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountNote
     * @param accountId Unique identifier of the customer account whose note you want to modify. (required)
     * @param noteId Unique identifier of the note to update. (required)
     * @param customerNote The new content to replace the existing note. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountNoteCall(Integer accountId, Integer noteId, CustomerNote customerNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerNote;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/notes/{noteId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountNoteValidateBeforeCall(Integer accountId, Integer noteId, CustomerNote customerNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateAccountNote(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccountNoteCall(accountId, noteId, customerNote, _callback);
        return localVarCall;

    }

    /**
     * Update Account Note
     * Modifies an existing note for a customer account.
     * @param accountId Unique identifier of the customer account whose note you want to modify. (required)
     * @param noteId Unique identifier of the note to update. (required)
     * @param customerNote The new content to replace the existing note. (optional)
     * @return CustomerNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerNote updateAccountNote(Integer accountId, Integer noteId, CustomerNote customerNote) throws ApiException {
        ApiResponse<CustomerNote> localVarResp = updateAccountNoteWithHttpInfo(accountId, noteId, customerNote);
        return localVarResp.getData();
    }

    /**
     * Update Account Note
     * Modifies an existing note for a customer account.
     * @param accountId Unique identifier of the customer account whose note you want to modify. (required)
     * @param noteId Unique identifier of the note to update. (required)
     * @param customerNote The new content to replace the existing note. (optional)
     * @return ApiResponse&lt;CustomerNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerNote> updateAccountNoteWithHttpInfo(Integer accountId, Integer noteId, CustomerNote customerNote) throws ApiException {
        okhttp3.Call localVarCall = updateAccountNoteValidateBeforeCall(accountId, noteId, customerNote, null);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Account Note (asynchronously)
     * Modifies an existing note for a customer account.
     * @param accountId Unique identifier of the customer account whose note you want to modify. (required)
     * @param noteId Unique identifier of the note to update. (required)
     * @param customerNote The new content to replace the existing note. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountNoteAsync(Integer accountId, Integer noteId, CustomerNote customerNote, final ApiCallback<CustomerNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountNoteValidateBeforeCall(accountId, noteId, customerNote, _callback);
        Type localVarReturnType = new TypeToken<CustomerNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerPurchaseOrderAccount
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerPurchaseOrderAccountCall(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerPurchaseOrderAccount;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/{accountId}/purchaseOrderAccount"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerPurchaseOrderAccountValidateBeforeCall(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateCustomerPurchaseOrderAccount(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomerPurchaseOrderAccountCall(accountId, customerPurchaseOrderAccount, _callback);
        return localVarCall;

    }

    /**
     * Update Customer Purchase Order Account
     * Updates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @return CustomerPurchaseOrderAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPurchaseOrderAccount updateCustomerPurchaseOrderAccount(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount) throws ApiException {
        ApiResponse<CustomerPurchaseOrderAccount> localVarResp = updateCustomerPurchaseOrderAccountWithHttpInfo(accountId, customerPurchaseOrderAccount);
        return localVarResp.getData();
    }

    /**
     * Update Customer Purchase Order Account
     * Updates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @return ApiResponse&lt;CustomerPurchaseOrderAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPurchaseOrderAccount> updateCustomerPurchaseOrderAccountWithHttpInfo(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerPurchaseOrderAccountValidateBeforeCall(accountId, customerPurchaseOrderAccount, null);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Customer Purchase Order Account (asynchronously)
     * Updates a customer&#39;s purchase order account.
     * @param accountId Unique identifier of the account. (required)
     * @param customerPurchaseOrderAccount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerPurchaseOrderAccountAsync(Integer accountId, CustomerPurchaseOrderAccount customerPurchaseOrderAccount, final ApiCallback<CustomerPurchaseOrderAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerPurchaseOrderAccountValidateBeforeCall(accountId, customerPurchaseOrderAccount, _callback);
        Type localVarReturnType = new TypeToken<CustomerPurchaseOrderAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateForgottenPassword
     * @param confirmationInfo Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateForgottenPasswordCall(ConfirmationInfo confirmationInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmationInfo;

        // create path and map variables
        String localVarPath = "/commerce/customer/accounts/Update-Forgotten-Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateForgottenPasswordValidateBeforeCall(ConfirmationInfo confirmationInfo, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateForgottenPasswordCall(confirmationInfo, _callback);
        return localVarCall;

    }

    /**
     * Update Forgotten Password
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * @param confirmationInfo Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateForgottenPassword(ConfirmationInfo confirmationInfo) throws ApiException {
        updateForgottenPasswordWithHttpInfo(confirmationInfo);
    }

    /**
     * Update Forgotten Password
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * @param confirmationInfo Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateForgottenPasswordWithHttpInfo(ConfirmationInfo confirmationInfo) throws ApiException {
        okhttp3.Call localVarCall = updateForgottenPasswordValidateBeforeCall(confirmationInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Forgotten Password (asynchronously)
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * @param confirmationInfo Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateForgottenPasswordAsync(ConfirmationInfo confirmationInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateForgottenPasswordValidateBeforeCall(confirmationInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CustomerAccountApi build() {
            return new CustomerAccountApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
