/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategoryAttribute;
import com.kibocommerce.sdk.catalogstorefront.models.CategoryContent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * The category hierarchy of your store as it appears on the storefront. This is the category heirarchy defined with the admin/category resource except for any categories with an IsDisplayed value set to false.
 */
@ApiModel(description = "The category hierarchy of your store as it appears on the storefront. This is the category heirarchy defined with the admin/category resource except for any categories with an IsDisplayed value set to false.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesCategory implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY = "parentCategory";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY)
  private CatalogRuntimesCategory parentCategory;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private CategoryContent content;

  public static final String SERIALIZED_NAME_CHILDREN_CATEGORIES = "childrenCategories";
  @SerializedName(SERIALIZED_NAME_CHILDREN_CATEGORIES)
  private List<CatalogRuntimesCategory> childrenCategories = null;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_IS_DISPLAYED = "isDisplayed";
  @SerializedName(SERIALIZED_NAME_IS_DISPLAYED)
  private Boolean isDisplayed;

  public static final String SERIALIZED_NAME_CATEGORY_CODE = "categoryCode";
  @SerializedName(SERIALIZED_NAME_CATEGORY_CODE)
  private String categoryCode;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_SHOULD_SLICE = "shouldSlice";
  @SerializedName(SERIALIZED_NAME_SHOULD_SLICE)
  private Boolean shouldSlice;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CatalogRuntimesCategoryAttribute> attributes = null;

  public CatalogRuntimesCategory() {
  }

  public CatalogRuntimesCategory categoryId(Integer categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Internal unique identifier of the category. System-supplied and read-only.
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal unique identifier of the category. System-supplied and read-only.")

  public Integer getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public CatalogRuntimesCategory parentCategory(CatalogRuntimesCategory parentCategory) {
    
    this.parentCategory = parentCategory;
    return this;
  }

   /**
   * Get parentCategory
   * @return parentCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesCategory getParentCategory() {
    return parentCategory;
  }


  public void setParentCategory(CatalogRuntimesCategory parentCategory) {
    this.parentCategory = parentCategory;
  }


  public CatalogRuntimesCategory content(CategoryContent content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CategoryContent getContent() {
    return content;
  }


  public void setContent(CategoryContent content) {
    this.content = content;
  }


  public CatalogRuntimesCategory childrenCategories(List<CatalogRuntimesCategory> childrenCategories) {
    
    this.childrenCategories = childrenCategories;
    return this;
  }

  public CatalogRuntimesCategory addChildrenCategoriesItem(CatalogRuntimesCategory childrenCategoriesItem) {
    if (this.childrenCategories == null) {
      this.childrenCategories = new ArrayList<>();
    }
    this.childrenCategories.add(childrenCategoriesItem);
    return this;
  }

   /**
   * List of subcategories that belong to this category.
   * @return childrenCategories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of subcategories that belong to this category.")

  public List<CatalogRuntimesCategory> getChildrenCategories() {
    return childrenCategories;
  }


  public void setChildrenCategories(List<CatalogRuntimesCategory> childrenCategories) {
    this.childrenCategories = childrenCategories;
  }


  public CatalogRuntimesCategory sequence(Integer sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Order in which categories appear when they are at the same level (siblings). For example, categories can be sequenced so that a specific category always appears first (or last).
   * @return sequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order in which categories appear when they are at the same level (siblings). For example, categories can be sequenced so that a specific category always appears first (or last).")

  public Integer getSequence() {
    return sequence;
  }


  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public CatalogRuntimesCategory isDisplayed(Boolean isDisplayed) {
    
    this.isDisplayed = isDisplayed;
    return this;
  }

   /**
   * Indicates whether the category should be displayed.
   * @return isDisplayed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the category should be displayed.")

  public Boolean getIsDisplayed() {
    return isDisplayed;
  }


  public void setIsDisplayed(Boolean isDisplayed) {
    this.isDisplayed = isDisplayed;
  }


  public CatalogRuntimesCategory categoryCode(String categoryCode) {
    
    this.categoryCode = categoryCode;
    return this;
  }

   /**
   * External unique identifier of the category.
   * @return categoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External unique identifier of the category.")

  public String getCategoryCode() {
    return categoryCode;
  }


  public void setCategoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
  }


  public CatalogRuntimesCategory count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Indicates whether the category should be displayed.
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the category should be displayed.")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public CatalogRuntimesCategory updateDate(OffsetDateTime updateDate) {
    
    this.updateDate = updateDate;
    return this;
  }

   /**
   * Last Modified Date Time
   * @return updateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last Modified Date Time")

  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }


  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public CatalogRuntimesCategory shouldSlice(Boolean shouldSlice) {
    
    this.shouldSlice = shouldSlice;
    return this;
  }

   /**
   * Indicates whether the category should be sliced
   * @return shouldSlice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the category should be sliced")

  public Boolean getShouldSlice() {
    return shouldSlice;
  }


  public void setShouldSlice(Boolean shouldSlice) {
    this.shouldSlice = shouldSlice;
  }


  public CatalogRuntimesCategory attributes(List<CatalogRuntimesCategoryAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CatalogRuntimesCategory addAttributesItem(CatalogRuntimesCategoryAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CatalogRuntimesCategoryAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CatalogRuntimesCategoryAttribute> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesCategory catalogRuntimesCategory = (CatalogRuntimesCategory) o;
    return Objects.equals(this.categoryId, catalogRuntimesCategory.categoryId) &&
        Objects.equals(this.parentCategory, catalogRuntimesCategory.parentCategory) &&
        Objects.equals(this.content, catalogRuntimesCategory.content) &&
        Objects.equals(this.childrenCategories, catalogRuntimesCategory.childrenCategories) &&
        Objects.equals(this.sequence, catalogRuntimesCategory.sequence) &&
        Objects.equals(this.isDisplayed, catalogRuntimesCategory.isDisplayed) &&
        Objects.equals(this.categoryCode, catalogRuntimesCategory.categoryCode) &&
        Objects.equals(this.count, catalogRuntimesCategory.count) &&
        Objects.equals(this.updateDate, catalogRuntimesCategory.updateDate) &&
        Objects.equals(this.shouldSlice, catalogRuntimesCategory.shouldSlice) &&
        Objects.equals(this.attributes, catalogRuntimesCategory.attributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, parentCategory, content, childrenCategories, sequence, isDisplayed, categoryCode, count, updateDate, shouldSlice, attributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesCategory {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    parentCategory: ").append(toIndentedString(parentCategory)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    childrenCategories: ").append(toIndentedString(childrenCategories)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    isDisplayed: ").append(toIndentedString(isDisplayed)).append("\n");
    sb.append("    categoryCode: ").append(toIndentedString(categoryCode)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    shouldSlice: ").append(toIndentedString(shouldSlice)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryId");
    openapiFields.add("parentCategory");
    openapiFields.add("content");
    openapiFields.add("childrenCategories");
    openapiFields.add("sequence");
    openapiFields.add("isDisplayed");
    openapiFields.add("categoryCode");
    openapiFields.add("count");
    openapiFields.add("updateDate");
    openapiFields.add("shouldSlice");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesCategory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesCategory is not found in the empty JSON string", CatalogRuntimesCategory.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesCategory.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesCategory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `parentCategory`
      if (jsonObj.get("parentCategory") != null && !jsonObj.get("parentCategory").isJsonNull()) {
        CatalogRuntimesCategory.validateJsonObject(jsonObj.getAsJsonObject("parentCategory"));
      }
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        CategoryContent.validateJsonObject(jsonObj.getAsJsonObject("content"));
      }
      if (jsonObj.get("childrenCategories") != null && !jsonObj.get("childrenCategories").isJsonNull()) {
        JsonArray jsonArraychildrenCategories = jsonObj.getAsJsonArray("childrenCategories");
        if (jsonArraychildrenCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childrenCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childrenCategories` to be an array in the JSON string but got `%s`", jsonObj.get("childrenCategories").toString()));
          }

          // validate the optional field `childrenCategories` (array)
          for (int i = 0; i < jsonArraychildrenCategories.size(); i++) {
            CatalogRuntimesCategory.validateJsonObject(jsonArraychildrenCategories.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("categoryCode") != null && !jsonObj.get("categoryCode").isJsonNull()) && !jsonObj.get("categoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryCode").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            CatalogRuntimesCategoryAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesCategory>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesCategory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesCategory
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesCategory
  */
  public static CatalogRuntimesCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesCategory.class);
  }

 /**
  * Convert an instance of CatalogRuntimesCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

