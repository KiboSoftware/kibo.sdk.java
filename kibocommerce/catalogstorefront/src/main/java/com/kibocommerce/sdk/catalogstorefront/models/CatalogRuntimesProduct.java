/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesBundledProduct;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesCategory;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesDiscount;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesPackageMeasurements;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductCollectionInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductImageGroup;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductInventoryInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductOption;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPrice;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductPricingBehaviorInfo;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductProperty;
import com.kibocommerce.sdk.catalogstorefront.models.ProductCollectionMember;
import com.kibocommerce.sdk.catalogstorefront.models.ProductContent;
import com.kibocommerce.sdk.catalogstorefront.models.ProductPriceRange;
import com.kibocommerce.sdk.catalogstorefront.models.ProductPurchasableState;
import com.kibocommerce.sdk.catalogstorefront.models.ProductVolumePrice;
import com.kibocommerce.sdk.catalogstorefront.models.VariationSummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Details of a product, including its product code, name, description, options (if any), and current state--whether the product can be purchased given the options selected currently.
 */
@ApiModel(description = "Details of a product, including its product code, name, description, options (if any), and current state--whether the product can be purchased given the options selected currently.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesProduct implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_PURCHASE_LOCATION = "purchaseLocation";
  @SerializedName(SERIALIZED_NAME_PURCHASE_LOCATION)
  private String purchaseLocation;

  public static final String SERIALIZED_NAME_PRODUCT_SEQUENCE = "productSequence";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SEQUENCE)
  private Integer productSequence;

  public static final String SERIALIZED_NAME_PRODUCT_USAGE = "productUsage";
  @SerializedName(SERIALIZED_NAME_PRODUCT_USAGE)
  private String productUsage;

  public static final String SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED = "fulfillmentTypesSupported";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TYPES_SUPPORTED)
  private List<String> fulfillmentTypesSupported = null;

  public static final String SERIALIZED_NAME_GOODS_TYPE = "goodsType";
  @SerializedName(SERIALIZED_NAME_GOODS_TYPE)
  private String goodsType;

  public static final String SERIALIZED_NAME_BUNDLED_PRODUCTS = "bundledProducts";
  @SerializedName(SERIALIZED_NAME_BUNDLED_PRODUCTS)
  private List<CatalogRuntimesBundledProduct> bundledProducts = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ProductContent content;

  public static final String SERIALIZED_NAME_PURCHASABLE_STATE = "purchasableState";
  @SerializedName(SERIALIZED_NAME_PURCHASABLE_STATE)
  private ProductPurchasableState purchasableState;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_PUBLISH_STATE = "publishState";
  @SerializedName(SERIALIZED_NAME_PUBLISH_STATE)
  private String publishState;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private CatalogRuntimesProductPrice price;

  public static final String SERIALIZED_NAME_PRICE_RANGE = "priceRange";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGE)
  private ProductPriceRange priceRange;

  public static final String SERIALIZED_NAME_VOLUME_PRICE_BANDS = "volumePriceBands";
  @SerializedName(SERIALIZED_NAME_VOLUME_PRICE_BANDS)
  private List<ProductVolumePrice> volumePriceBands = null;

  public static final String SERIALIZED_NAME_VOLUME_PRICE_RANGE = "volumePriceRange";
  @SerializedName(SERIALIZED_NAME_VOLUME_PRICE_RANGE)
  private ProductPriceRange volumePriceRange;

  public static final String SERIALIZED_NAME_AVAILABLE_SHIPPING_DISCOUNTS = "availableShippingDiscounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SHIPPING_DISCOUNTS)
  private List<CatalogRuntimesDiscount> availableShippingDiscounts = null;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_ID = "productTypeId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_ID)
  private Integer productTypeId;

  public static final String SERIALIZED_NAME_IS_TAXABLE = "isTaxable";
  @SerializedName(SERIALIZED_NAME_IS_TAXABLE)
  private Boolean isTaxable;

  public static final String SERIALIZED_NAME_IS_RECURRING = "isRecurring";
  @SerializedName(SERIALIZED_NAME_IS_RECURRING)
  private Boolean isRecurring;

  public static final String SERIALIZED_NAME_PRICING_BEHAVIOR = "pricingBehavior";
  @SerializedName(SERIALIZED_NAME_PRICING_BEHAVIOR)
  private CatalogRuntimesProductPricingBehaviorInfo pricingBehavior;

  public static final String SERIALIZED_NAME_INVENTORY_INFO = "inventoryInfo";
  @SerializedName(SERIALIZED_NAME_INVENTORY_INFO)
  private CatalogRuntimesProductInventoryInfo inventoryInfo;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_DATE_FIRST_AVAILABLE_IN_CATALOG = "dateFirstAvailableInCatalog";
  @SerializedName(SERIALIZED_NAME_DATE_FIRST_AVAILABLE_IN_CATALOG)
  private OffsetDateTime dateFirstAvailableInCatalog;

  public static final String SERIALIZED_NAME_CATALOG_START_DATE = "catalogStartDate";
  @SerializedName(SERIALIZED_NAME_CATALOG_START_DATE)
  private OffsetDateTime catalogStartDate;

  public static final String SERIALIZED_NAME_CATALOG_END_DATE = "catalogEndDate";
  @SerializedName(SERIALIZED_NAME_CATALOG_END_DATE)
  private OffsetDateTime catalogEndDate;

  public static final String SERIALIZED_NAME_DAYS_AVAILABLE_IN_CATALOG = "daysAvailableInCatalog";
  @SerializedName(SERIALIZED_NAME_DAYS_AVAILABLE_IN_CATALOG)
  private Integer daysAvailableInCatalog;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_UP_CS = "upCs";
  @SerializedName(SERIALIZED_NAME_UP_CS)
  private List<String> upCs = null;

  public static final String SERIALIZED_NAME_MFG_PART_NUMBER = "mfgPartNumber";
  @SerializedName(SERIALIZED_NAME_MFG_PART_NUMBER)
  private String mfgPartNumber;

  public static final String SERIALIZED_NAME_MFG_PART_NUMBERS = "mfgPartNumbers";
  @SerializedName(SERIALIZED_NAME_MFG_PART_NUMBERS)
  private List<String> mfgPartNumbers = null;

  public static final String SERIALIZED_NAME_VARIATION_PRODUCT_CODE = "variationProductCode";
  @SerializedName(SERIALIZED_NAME_VARIATION_PRODUCT_CODE)
  private String variationProductCode;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<CatalogRuntimesCategory> categories = null;

  public static final String SERIALIZED_NAME_MEASUREMENTS = "measurements";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS)
  private CatalogRuntimesPackageMeasurements measurements;

  public static final String SERIALIZED_NAME_IS_PACKAGED_STAND_ALONE = "isPackagedStandAlone";
  @SerializedName(SERIALIZED_NAME_IS_PACKAGED_STAND_ALONE)
  private Boolean isPackagedStandAlone;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<CatalogRuntimesProductProperty> properties = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CatalogRuntimesProductOption> options = null;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<VariationSummary> variations = null;

  public static final String SERIALIZED_NAME_VALID_PRICE_LISTS = "validPriceLists";
  @SerializedName(SERIALIZED_NAME_VALID_PRICE_LISTS)
  private List<String> validPriceLists = null;

  public static final String SERIALIZED_NAME_LOCATIONS_IN_STOCK = "locationsInStock";
  @SerializedName(SERIALIZED_NAME_LOCATIONS_IN_STOCK)
  private List<String> locationsInStock = null;

  public static final String SERIALIZED_NAME_SLICING_ATTRIBUTE_F_Q_N = "slicingAttributeFQN";
  @SerializedName(SERIALIZED_NAME_SLICING_ATTRIBUTE_F_Q_N)
  private String slicingAttributeFQN;

  public static final String SERIALIZED_NAME_PRODUCT_IMAGE_GROUPS = "productImageGroups";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGE_GROUPS)
  private List<CatalogRuntimesProductImageGroup> productImageGroups = null;

  public static final String SERIALIZED_NAME_SLICE_VALUE = "sliceValue";
  @SerializedName(SERIALIZED_NAME_SLICE_VALUE)
  private String sliceValue;

  public static final String SERIALIZED_NAME_PRODUCT_COLLECTIONS = "productCollections";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COLLECTIONS)
  private List<CatalogRuntimesProductCollectionInfo> productCollections = null;

  public static final String SERIALIZED_NAME_PRODUCT_COLLECTION_MEMBERS = "productCollectionMembers";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COLLECTION_MEMBERS)
  private List<ProductCollectionMember> productCollectionMembers = null;

  public static final String SERIALIZED_NAME_COLLECTION_MEMBERS_PRODUCT_CONTENT = "collectionMembersProductContent";
  @SerializedName(SERIALIZED_NAME_COLLECTION_MEMBERS_PRODUCT_CONTENT)
  private List<ProductContent> collectionMembersProductContent = null;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_PERSONALIZATION_SCORE = "personalizationScore";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_SCORE)
  private Double personalizationScore;

  public CatalogRuntimesProduct() {
  }

  public CatalogRuntimesProduct productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * Merchant-created code associated with the product, for example, a SKU.
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant-created code associated with the product, for example, a SKU.")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public CatalogRuntimesProduct purchaseLocation(String purchaseLocation) {
    
    this.purchaseLocation = purchaseLocation;
    return this;
  }

   /**
   * The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....
   * @return purchaseLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The location where the product is being purchased.. default is null. Products can have different prices  by purchaseLocation via custom priceListResolution....")

  public String getPurchaseLocation() {
    return purchaseLocation;
  }


  public void setPurchaseLocation(String purchaseLocation) {
    this.purchaseLocation = purchaseLocation;
  }


  public CatalogRuntimesProduct productSequence(Integer productSequence) {
    
    this.productSequence = productSequence;
    return this;
  }

   /**
   * System generated monotonically increasing sequence
   * @return productSequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "System generated monotonically increasing sequence")

  public Integer getProductSequence() {
    return productSequence;
  }


  public void setProductSequence(Integer productSequence) {
    this.productSequence = productSequence;
  }


  public CatalogRuntimesProduct productUsage(String productUsage) {
    
    this.productUsage = productUsage;
    return this;
  }

   /**
   * The UsageType of this product (Standard, Configurable, Bundle, Component, Collection)
   * @return productUsage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UsageType of this product (Standard, Configurable, Bundle, Component, Collection)")

  public String getProductUsage() {
    return productUsage;
  }


  public void setProductUsage(String productUsage) {
    this.productUsage = productUsage;
  }


  public CatalogRuntimesProduct fulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
    return this;
  }

  public CatalogRuntimesProduct addFulfillmentTypesSupportedItem(String fulfillmentTypesSupportedItem) {
    if (this.fulfillmentTypesSupported == null) {
      this.fulfillmentTypesSupported = new ArrayList<>();
    }
    this.fulfillmentTypesSupported.add(fulfillmentTypesSupportedItem);
    return this;
  }

   /**
   * Indicates the fulfillment types the product supports.
   * @return fulfillmentTypesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the fulfillment types the product supports.")

  public List<String> getFulfillmentTypesSupported() {
    return fulfillmentTypesSupported;
  }


  public void setFulfillmentTypesSupported(List<String> fulfillmentTypesSupported) {
    this.fulfillmentTypesSupported = fulfillmentTypesSupported;
  }


  public CatalogRuntimesProduct goodsType(String goodsType) {
    
    this.goodsType = goodsType;
    return this;
  }

   /**
   * The GoodsType of the product (Physical, Digital, DigitalCredit....)
   * @return goodsType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The GoodsType of the product (Physical, Digital, DigitalCredit....)")

  public String getGoodsType() {
    return goodsType;
  }


  public void setGoodsType(String goodsType) {
    this.goodsType = goodsType;
  }


  public CatalogRuntimesProduct bundledProducts(List<CatalogRuntimesBundledProduct> bundledProducts) {
    
    this.bundledProducts = bundledProducts;
    return this;
  }

  public CatalogRuntimesProduct addBundledProductsItem(CatalogRuntimesBundledProduct bundledProductsItem) {
    if (this.bundledProducts == null) {
      this.bundledProducts = new ArrayList<>();
    }
    this.bundledProducts.add(bundledProductsItem);
    return this;
  }

   /**
   * The list of Bundled products included in this product. This is only populated when ProductUsage&#x3D;Bundle
   * @return bundledProducts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of Bundled products included in this product. This is only populated when ProductUsage=Bundle")

  public List<CatalogRuntimesBundledProduct> getBundledProducts() {
    return bundledProducts;
  }


  public void setBundledProducts(List<CatalogRuntimesBundledProduct> bundledProducts) {
    this.bundledProducts = bundledProducts;
  }


  public CatalogRuntimesProduct content(ProductContent content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductContent getContent() {
    return content;
  }


  public void setContent(ProductContent content) {
    this.content = content;
  }


  public CatalogRuntimesProduct purchasableState(ProductPurchasableState purchasableState) {
    
    this.purchasableState = purchasableState;
    return this;
  }

   /**
   * Get purchasableState
   * @return purchasableState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPurchasableState getPurchasableState() {
    return purchasableState;
  }


  public void setPurchasableState(ProductPurchasableState purchasableState) {
    this.purchasableState = purchasableState;
  }


  public CatalogRuntimesProduct isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * If true, the product exists. If not, the product should not appear in search results.
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the product exists. If not, the product should not appear in search results.")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CatalogRuntimesProduct publishState(String publishState) {
    
    this.publishState = publishState;
    return this;
  }

   /**
   * Represents the published state of the product returned. Valid values for ValueType are defined in PublishStateConst.
   * @return publishState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the published state of the product returned. Valid values for ValueType are defined in PublishStateConst.")

  public String getPublishState() {
    return publishState;
  }


  public void setPublishState(String publishState) {
    this.publishState = publishState;
  }


  public CatalogRuntimesProduct price(CatalogRuntimesProductPrice price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductPrice getPrice() {
    return price;
  }


  public void setPrice(CatalogRuntimesProductPrice price) {
    this.price = price;
  }


  public CatalogRuntimesProduct priceRange(ProductPriceRange priceRange) {
    
    this.priceRange = priceRange;
    return this;
  }

   /**
   * Get priceRange
   * @return priceRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPriceRange getPriceRange() {
    return priceRange;
  }


  public void setPriceRange(ProductPriceRange priceRange) {
    this.priceRange = priceRange;
  }


  public CatalogRuntimesProduct volumePriceBands(List<ProductVolumePrice> volumePriceBands) {
    
    this.volumePriceBands = volumePriceBands;
    return this;
  }

  public CatalogRuntimesProduct addVolumePriceBandsItem(ProductVolumePrice volumePriceBandsItem) {
    if (this.volumePriceBands == null) {
      this.volumePriceBands = new ArrayList<>();
    }
    this.volumePriceBands.add(volumePriceBandsItem);
    return this;
  }

   /**
   * For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...
   * @return volumePriceBands
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For products with bulk pricing... this will be populated with pricebands, depending on what options have been selected...")

  public List<ProductVolumePrice> getVolumePriceBands() {
    return volumePriceBands;
  }


  public void setVolumePriceBands(List<ProductVolumePrice> volumePriceBands) {
    this.volumePriceBands = volumePriceBands;
  }


  public CatalogRuntimesProduct volumePriceRange(ProductPriceRange volumePriceRange) {
    
    this.volumePriceRange = volumePriceRange;
    return this;
  }

   /**
   * Get volumePriceRange
   * @return volumePriceRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPriceRange getVolumePriceRange() {
    return volumePriceRange;
  }


  public void setVolumePriceRange(ProductPriceRange volumePriceRange) {
    this.volumePriceRange = volumePriceRange;
  }


  public CatalogRuntimesProduct availableShippingDiscounts(List<CatalogRuntimesDiscount> availableShippingDiscounts) {
    
    this.availableShippingDiscounts = availableShippingDiscounts;
    return this;
  }

  public CatalogRuntimesProduct addAvailableShippingDiscountsItem(CatalogRuntimesDiscount availableShippingDiscountsItem) {
    if (this.availableShippingDiscounts == null) {
      this.availableShippingDiscounts = new ArrayList<>();
    }
    this.availableShippingDiscounts.add(availableShippingDiscountsItem);
    return this;
  }

   /**
   * List of potential shipping discounts available for this product.
   * @return availableShippingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of potential shipping discounts available for this product.")

  public List<CatalogRuntimesDiscount> getAvailableShippingDiscounts() {
    return availableShippingDiscounts;
  }


  public void setAvailableShippingDiscounts(List<CatalogRuntimesDiscount> availableShippingDiscounts) {
    this.availableShippingDiscounts = availableShippingDiscounts;
  }


  public CatalogRuntimesProduct productType(String productType) {
    
    this.productType = productType;
    return this;
  }

   /**
   * Get productType
   * @return productType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProductType() {
    return productType;
  }


  public void setProductType(String productType) {
    this.productType = productType;
  }


  public CatalogRuntimesProduct productTypeId(Integer productTypeId) {
    
    this.productTypeId = productTypeId;
    return this;
  }

   /**
   * Get productTypeId
   * @return productTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProductTypeId() {
    return productTypeId;
  }


  public void setProductTypeId(Integer productTypeId) {
    this.productTypeId = productTypeId;
  }


  public CatalogRuntimesProduct isTaxable(Boolean isTaxable) {
    
    this.isTaxable = isTaxable;
    return this;
  }

   /**
   * If true, the product is subject to tax.
   * @return isTaxable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the product is subject to tax.")

  public Boolean getIsTaxable() {
    return isTaxable;
  }


  public void setIsTaxable(Boolean isTaxable) {
    this.isTaxable = isTaxable;
  }


  public CatalogRuntimesProduct isRecurring(Boolean isRecurring) {
    
    this.isRecurring = isRecurring;
    return this;
  }

   /**
   * If true, the product can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.
   * @return isRecurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the product can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.")

  public Boolean getIsRecurring() {
    return isRecurring;
  }


  public void setIsRecurring(Boolean isRecurring) {
    this.isRecurring = isRecurring;
  }


  public CatalogRuntimesProduct pricingBehavior(CatalogRuntimesProductPricingBehaviorInfo pricingBehavior) {
    
    this.pricingBehavior = pricingBehavior;
    return this;
  }

   /**
   * Get pricingBehavior
   * @return pricingBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductPricingBehaviorInfo getPricingBehavior() {
    return pricingBehavior;
  }


  public void setPricingBehavior(CatalogRuntimesProductPricingBehaviorInfo pricingBehavior) {
    this.pricingBehavior = pricingBehavior;
  }


  public CatalogRuntimesProduct inventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    
    this.inventoryInfo = inventoryInfo;
    return this;
  }

   /**
   * Get inventoryInfo
   * @return inventoryInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesProductInventoryInfo getInventoryInfo() {
    return inventoryInfo;
  }


  public void setInventoryInfo(CatalogRuntimesProductInventoryInfo inventoryInfo) {
    this.inventoryInfo = inventoryInfo;
  }


  public CatalogRuntimesProduct createDate(OffsetDateTime createDate) {
    
    this.createDate = createDate;
    return this;
  }

   /**
   * When the product was created with the product admin resource.
   * @return createDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the product was created with the product admin resource.")

  public OffsetDateTime getCreateDate() {
    return createDate;
  }


  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public CatalogRuntimesProduct updateDate(OffsetDateTime updateDate) {
    
    this.updateDate = updateDate;
    return this;
  }

   /**
   * When the product was last modified with the product admin resource.
   * @return updateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the product was last modified with the product admin resource.")

  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }


  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public CatalogRuntimesProduct dateFirstAvailableInCatalog(OffsetDateTime dateFirstAvailableInCatalog) {
    
    this.dateFirstAvailableInCatalog = dateFirstAvailableInCatalog;
    return this;
  }

   /**
   * Get dateFirstAvailableInCatalog
   * @return dateFirstAvailableInCatalog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateFirstAvailableInCatalog() {
    return dateFirstAvailableInCatalog;
  }


  public void setDateFirstAvailableInCatalog(OffsetDateTime dateFirstAvailableInCatalog) {
    this.dateFirstAvailableInCatalog = dateFirstAvailableInCatalog;
  }


  public CatalogRuntimesProduct catalogStartDate(OffsetDateTime catalogStartDate) {
    
    this.catalogStartDate = catalogStartDate;
    return this;
  }

   /**
   * Get catalogStartDate
   * @return catalogStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCatalogStartDate() {
    return catalogStartDate;
  }


  public void setCatalogStartDate(OffsetDateTime catalogStartDate) {
    this.catalogStartDate = catalogStartDate;
  }


  public CatalogRuntimesProduct catalogEndDate(OffsetDateTime catalogEndDate) {
    
    this.catalogEndDate = catalogEndDate;
    return this;
  }

   /**
   * Get catalogEndDate
   * @return catalogEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCatalogEndDate() {
    return catalogEndDate;
  }


  public void setCatalogEndDate(OffsetDateTime catalogEndDate) {
    this.catalogEndDate = catalogEndDate;
  }


  public CatalogRuntimesProduct daysAvailableInCatalog(Integer daysAvailableInCatalog) {
    
    this.daysAvailableInCatalog = daysAvailableInCatalog;
    return this;
  }

   /**
   * Get daysAvailableInCatalog
   * @return daysAvailableInCatalog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDaysAvailableInCatalog() {
    return daysAvailableInCatalog;
  }


  public void setDaysAvailableInCatalog(Integer daysAvailableInCatalog) {
    this.daysAvailableInCatalog = daysAvailableInCatalog;
  }


  public CatalogRuntimesProduct upc(String upc) {
    
    this.upc = upc;
    return this;
  }

   /**
   * UPC code of the product.
   * @return upc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UPC code of the product.")

  public String getUpc() {
    return upc;
  }


  public void setUpc(String upc) {
    this.upc = upc;
  }


  public CatalogRuntimesProduct upCs(List<String> upCs) {
    
    this.upCs = upCs;
    return this;
  }

  public CatalogRuntimesProduct addUpCsItem(String upCsItem) {
    if (this.upCs == null) {
      this.upCs = new ArrayList<>();
    }
    this.upCs.add(upCsItem);
    return this;
  }

   /**
   * UPC code of the products (populated for configurable products).
   * @return upCs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UPC code of the products (populated for configurable products).")

  public List<String> getUpCs() {
    return upCs;
  }


  public void setUpCs(List<String> upCs) {
    this.upCs = upCs;
  }


  public CatalogRuntimesProduct mfgPartNumber(String mfgPartNumber) {
    
    this.mfgPartNumber = mfgPartNumber;
    return this;
  }

   /**
   * Manufacturer part number.
   * @return mfgPartNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manufacturer part number.")

  public String getMfgPartNumber() {
    return mfgPartNumber;
  }


  public void setMfgPartNumber(String mfgPartNumber) {
    this.mfgPartNumber = mfgPartNumber;
  }


  public CatalogRuntimesProduct mfgPartNumbers(List<String> mfgPartNumbers) {
    
    this.mfgPartNumbers = mfgPartNumbers;
    return this;
  }

  public CatalogRuntimesProduct addMfgPartNumbersItem(String mfgPartNumbersItem) {
    if (this.mfgPartNumbers == null) {
      this.mfgPartNumbers = new ArrayList<>();
    }
    this.mfgPartNumbers.add(mfgPartNumbersItem);
    return this;
  }

   /**
   * Manufacturer part numbers (populated for configurable products).
   * @return mfgPartNumbers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Manufacturer part numbers (populated for configurable products).")

  public List<String> getMfgPartNumbers() {
    return mfgPartNumbers;
  }


  public void setMfgPartNumbers(List<String> mfgPartNumbers) {
    this.mfgPartNumbers = mfgPartNumbers;
  }


  public CatalogRuntimesProduct variationProductCode(String variationProductCode) {
    
    this.variationProductCode = variationProductCode;
    return this;
  }

   /**
   * When a configurable product has IsPurchasable&#x3D;true on a GetProduct, this property will be populated for submission to cart.
   * @return variationProductCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When a configurable product has IsPurchasable=true on a GetProduct, this property will be populated for submission to cart.")

  public String getVariationProductCode() {
    return variationProductCode;
  }


  public void setVariationProductCode(String variationProductCode) {
    this.variationProductCode = variationProductCode;
  }


  public CatalogRuntimesProduct categories(List<CatalogRuntimesCategory> categories) {
    
    this.categories = categories;
    return this;
  }

  public CatalogRuntimesProduct addCategoriesItem(CatalogRuntimesCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * List of categories to which this product belongs.
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of categories to which this product belongs.")

  public List<CatalogRuntimesCategory> getCategories() {
    return categories;
  }


  public void setCategories(List<CatalogRuntimesCategory> categories) {
    this.categories = categories;
  }


  public CatalogRuntimesProduct measurements(CatalogRuntimesPackageMeasurements measurements) {
    
    this.measurements = measurements;
    return this;
  }

   /**
   * Get measurements
   * @return measurements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogRuntimesPackageMeasurements getMeasurements() {
    return measurements;
  }


  public void setMeasurements(CatalogRuntimesPackageMeasurements measurements) {
    this.measurements = measurements;
  }


  public CatalogRuntimesProduct isPackagedStandAlone(Boolean isPackagedStandAlone) {
    
    this.isPackagedStandAlone = isPackagedStandAlone;
    return this;
  }

   /**
   * Is this product shipped in its own package
   * @return isPackagedStandAlone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this product shipped in its own package")

  public Boolean getIsPackagedStandAlone() {
    return isPackagedStandAlone;
  }


  public void setIsPackagedStandAlone(Boolean isPackagedStandAlone) {
    this.isPackagedStandAlone = isPackagedStandAlone;
  }


  public CatalogRuntimesProduct properties(List<CatalogRuntimesProductProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public CatalogRuntimesProduct addPropertiesItem(CatalogRuntimesProductProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * List of product properties. These are attributes that might apply to multiple products, for example, price, size, manufacturer. These attributes cannot be configured by the shopper.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of product properties. These are attributes that might apply to multiple products, for example, price, size, manufacturer. These attributes cannot be configured by the shopper.")

  public List<CatalogRuntimesProductProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<CatalogRuntimesProductProperty> properties) {
    this.properties = properties;
  }


  public CatalogRuntimesProduct options(List<CatalogRuntimesProductOption> options) {
    
    this.options = options;
    return this;
  }

  public CatalogRuntimesProduct addOptionsItem(CatalogRuntimesProductOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * List of the product&#39;s configurable options and extras.   Includes whether an option is configurable (for example, a T-shirt) or an Extra (for example, monogram or gift-wrapping).
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the product's configurable options and extras.   Includes whether an option is configurable (for example, a T-shirt) or an Extra (for example, monogram or gift-wrapping).")

  public List<CatalogRuntimesProductOption> getOptions() {
    return options;
  }


  public void setOptions(List<CatalogRuntimesProductOption> options) {
    this.options = options;
  }


  public CatalogRuntimesProduct variations(List<VariationSummary> variations) {
    
    this.variations = variations;
    return this;
  }

  public CatalogRuntimesProduct addVariationsItem(VariationSummary variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Get variations
   * @return variations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VariationSummary> getVariations() {
    return variations;
  }


  public void setVariations(List<VariationSummary> variations) {
    this.variations = variations;
  }


  public CatalogRuntimesProduct validPriceLists(List<String> validPriceLists) {
    
    this.validPriceLists = validPriceLists;
    return this;
  }

  public CatalogRuntimesProduct addValidPriceListsItem(String validPriceListsItem) {
    if (this.validPriceLists == null) {
      this.validPriceLists = new ArrayList<>();
    }
    this.validPriceLists.add(validPriceListsItem);
    return this;
  }

   /**
   * List of valid pricelists for the product
   * @return validPriceLists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of valid pricelists for the product")

  public List<String> getValidPriceLists() {
    return validPriceLists;
  }


  public void setValidPriceLists(List<String> validPriceLists) {
    this.validPriceLists = validPriceLists;
  }


  public CatalogRuntimesProduct locationsInStock(List<String> locationsInStock) {
    
    this.locationsInStock = locationsInStock;
    return this;
  }

  public CatalogRuntimesProduct addLocationsInStockItem(String locationsInStockItem) {
    if (this.locationsInStock == null) {
      this.locationsInStock = new ArrayList<>();
    }
    this.locationsInStock.add(locationsInStockItem);
    return this;
  }

   /**
   * Any location code (eq) or array of location codes which are in stock.
   * @return locationsInStock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any location code (eq) or array of location codes which are in stock.")

  public List<String> getLocationsInStock() {
    return locationsInStock;
  }


  public void setLocationsInStock(List<String> locationsInStock) {
    this.locationsInStock = locationsInStock;
  }


  public CatalogRuntimesProduct slicingAttributeFQN(String slicingAttributeFQN) {
    
    this.slicingAttributeFQN = slicingAttributeFQN;
    return this;
  }

   /**
   * Get slicingAttributeFQN
   * @return slicingAttributeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSlicingAttributeFQN() {
    return slicingAttributeFQN;
  }


  public void setSlicingAttributeFQN(String slicingAttributeFQN) {
    this.slicingAttributeFQN = slicingAttributeFQN;
  }


  public CatalogRuntimesProduct productImageGroups(List<CatalogRuntimesProductImageGroup> productImageGroups) {
    
    this.productImageGroups = productImageGroups;
    return this;
  }

  public CatalogRuntimesProduct addProductImageGroupsItem(CatalogRuntimesProductImageGroup productImageGroupsItem) {
    if (this.productImageGroups == null) {
      this.productImageGroups = new ArrayList<>();
    }
    this.productImageGroups.add(productImageGroupsItem);
    return this;
  }

   /**
   * List of the image groups this product uses.  Image groups are used to map different images to different product options.  If the product doesn&#39;t have options then all images will be in the default  image group.
   * @return productImageGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the image groups this product uses.  Image groups are used to map different images to different product options.  If the product doesn't have options then all images will be in the default  image group.")

  public List<CatalogRuntimesProductImageGroup> getProductImageGroups() {
    return productImageGroups;
  }


  public void setProductImageGroups(List<CatalogRuntimesProductImageGroup> productImageGroups) {
    this.productImageGroups = productImageGroups;
  }


  public CatalogRuntimesProduct sliceValue(String sliceValue) {
    
    this.sliceValue = sliceValue;
    return this;
  }

   /**
   * Readonly value of the selected value of the option corresponding to the Mozu.ProductRuntime.Contracts.Product.SlicingAttributeFQN
   * @return sliceValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Readonly value of the selected value of the option corresponding to the Mozu.ProductRuntime.Contracts.Product.SlicingAttributeFQN")

  public String getSliceValue() {
    return sliceValue;
  }


  public void setSliceValue(String sliceValue) {
    this.sliceValue = sliceValue;
  }


  public CatalogRuntimesProduct productCollections(List<CatalogRuntimesProductCollectionInfo> productCollections) {
    
    this.productCollections = productCollections;
    return this;
  }

  public CatalogRuntimesProduct addProductCollectionsItem(CatalogRuntimesProductCollectionInfo productCollectionsItem) {
    if (this.productCollections == null) {
      this.productCollections = new ArrayList<>();
    }
    this.productCollections.add(productCollectionsItem);
    return this;
  }

   /**
   * List of product codes of product collections that this product is a member of.
   * @return productCollections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of product codes of product collections that this product is a member of.")

  public List<CatalogRuntimesProductCollectionInfo> getProductCollections() {
    return productCollections;
  }


  public void setProductCollections(List<CatalogRuntimesProductCollectionInfo> productCollections) {
    this.productCollections = productCollections;
  }


  public CatalogRuntimesProduct productCollectionMembers(List<ProductCollectionMember> productCollectionMembers) {
    
    this.productCollectionMembers = productCollectionMembers;
    return this;
  }

  public CatalogRuntimesProduct addProductCollectionMembersItem(ProductCollectionMember productCollectionMembersItem) {
    if (this.productCollectionMembers == null) {
      this.productCollectionMembers = new ArrayList<>();
    }
    this.productCollectionMembers.add(productCollectionMembersItem);
    return this;
  }

   /**
   * list of member products that are part of the collection  This requires that the ProductUsage be set to Collection
   * @return productCollectionMembers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of member products that are part of the collection  This requires that the ProductUsage be set to Collection")

  public List<ProductCollectionMember> getProductCollectionMembers() {
    return productCollectionMembers;
  }


  public void setProductCollectionMembers(List<ProductCollectionMember> productCollectionMembers) {
    this.productCollectionMembers = productCollectionMembers;
  }


  public CatalogRuntimesProduct collectionMembersProductContent(List<ProductContent> collectionMembersProductContent) {
    
    this.collectionMembersProductContent = collectionMembersProductContent;
    return this;
  }

  public CatalogRuntimesProduct addCollectionMembersProductContentItem(ProductContent collectionMembersProductContentItem) {
    if (this.collectionMembersProductContent == null) {
      this.collectionMembersProductContent = new ArrayList<>();
    }
    this.collectionMembersProductContent.add(collectionMembersProductContentItem);
    return this;
  }

   /**
   * Only used for indexing
   * @return collectionMembersProductContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only used for indexing")

  public List<ProductContent> getCollectionMembersProductContent() {
    return collectionMembersProductContent;
  }


  public void setCollectionMembersProductContent(List<ProductContent> collectionMembersProductContent) {
    this.collectionMembersProductContent = collectionMembersProductContent;
  }


  public CatalogRuntimesProduct score(Double score) {
    
    this.score = score;
    return this;
  }

   /**
   * The item&#39;s search engine relevancy score.
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item's search engine relevancy score.")

  public Double getScore() {
    return score;
  }


  public void setScore(Double score) {
    this.score = score;
  }


  public CatalogRuntimesProduct personalizationScore(Double personalizationScore) {
    
    this.personalizationScore = personalizationScore;
    return this;
  }

   /**
   * Get personalizationScore
   * @return personalizationScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPersonalizationScore() {
    return personalizationScore;
  }


  public void setPersonalizationScore(Double personalizationScore) {
    this.personalizationScore = personalizationScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesProduct catalogRuntimesProduct = (CatalogRuntimesProduct) o;
    return Objects.equals(this.productCode, catalogRuntimesProduct.productCode) &&
        Objects.equals(this.purchaseLocation, catalogRuntimesProduct.purchaseLocation) &&
        Objects.equals(this.productSequence, catalogRuntimesProduct.productSequence) &&
        Objects.equals(this.productUsage, catalogRuntimesProduct.productUsage) &&
        Objects.equals(this.fulfillmentTypesSupported, catalogRuntimesProduct.fulfillmentTypesSupported) &&
        Objects.equals(this.goodsType, catalogRuntimesProduct.goodsType) &&
        Objects.equals(this.bundledProducts, catalogRuntimesProduct.bundledProducts) &&
        Objects.equals(this.content, catalogRuntimesProduct.content) &&
        Objects.equals(this.purchasableState, catalogRuntimesProduct.purchasableState) &&
        Objects.equals(this.isActive, catalogRuntimesProduct.isActive) &&
        Objects.equals(this.publishState, catalogRuntimesProduct.publishState) &&
        Objects.equals(this.price, catalogRuntimesProduct.price) &&
        Objects.equals(this.priceRange, catalogRuntimesProduct.priceRange) &&
        Objects.equals(this.volumePriceBands, catalogRuntimesProduct.volumePriceBands) &&
        Objects.equals(this.volumePriceRange, catalogRuntimesProduct.volumePriceRange) &&
        Objects.equals(this.availableShippingDiscounts, catalogRuntimesProduct.availableShippingDiscounts) &&
        Objects.equals(this.productType, catalogRuntimesProduct.productType) &&
        Objects.equals(this.productTypeId, catalogRuntimesProduct.productTypeId) &&
        Objects.equals(this.isTaxable, catalogRuntimesProduct.isTaxable) &&
        Objects.equals(this.isRecurring, catalogRuntimesProduct.isRecurring) &&
        Objects.equals(this.pricingBehavior, catalogRuntimesProduct.pricingBehavior) &&
        Objects.equals(this.inventoryInfo, catalogRuntimesProduct.inventoryInfo) &&
        Objects.equals(this.createDate, catalogRuntimesProduct.createDate) &&
        Objects.equals(this.updateDate, catalogRuntimesProduct.updateDate) &&
        Objects.equals(this.dateFirstAvailableInCatalog, catalogRuntimesProduct.dateFirstAvailableInCatalog) &&
        Objects.equals(this.catalogStartDate, catalogRuntimesProduct.catalogStartDate) &&
        Objects.equals(this.catalogEndDate, catalogRuntimesProduct.catalogEndDate) &&
        Objects.equals(this.daysAvailableInCatalog, catalogRuntimesProduct.daysAvailableInCatalog) &&
        Objects.equals(this.upc, catalogRuntimesProduct.upc) &&
        Objects.equals(this.upCs, catalogRuntimesProduct.upCs) &&
        Objects.equals(this.mfgPartNumber, catalogRuntimesProduct.mfgPartNumber) &&
        Objects.equals(this.mfgPartNumbers, catalogRuntimesProduct.mfgPartNumbers) &&
        Objects.equals(this.variationProductCode, catalogRuntimesProduct.variationProductCode) &&
        Objects.equals(this.categories, catalogRuntimesProduct.categories) &&
        Objects.equals(this.measurements, catalogRuntimesProduct.measurements) &&
        Objects.equals(this.isPackagedStandAlone, catalogRuntimesProduct.isPackagedStandAlone) &&
        Objects.equals(this.properties, catalogRuntimesProduct.properties) &&
        Objects.equals(this.options, catalogRuntimesProduct.options) &&
        Objects.equals(this.variations, catalogRuntimesProduct.variations) &&
        Objects.equals(this.validPriceLists, catalogRuntimesProduct.validPriceLists) &&
        Objects.equals(this.locationsInStock, catalogRuntimesProduct.locationsInStock) &&
        Objects.equals(this.slicingAttributeFQN, catalogRuntimesProduct.slicingAttributeFQN) &&
        Objects.equals(this.productImageGroups, catalogRuntimesProduct.productImageGroups) &&
        Objects.equals(this.sliceValue, catalogRuntimesProduct.sliceValue) &&
        Objects.equals(this.productCollections, catalogRuntimesProduct.productCollections) &&
        Objects.equals(this.productCollectionMembers, catalogRuntimesProduct.productCollectionMembers) &&
        Objects.equals(this.collectionMembersProductContent, catalogRuntimesProduct.collectionMembersProductContent) &&
        Objects.equals(this.score, catalogRuntimesProduct.score) &&
        Objects.equals(this.personalizationScore, catalogRuntimesProduct.personalizationScore);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productCode, purchaseLocation, productSequence, productUsage, fulfillmentTypesSupported, goodsType, bundledProducts, content, purchasableState, isActive, publishState, price, priceRange, volumePriceBands, volumePriceRange, availableShippingDiscounts, productType, productTypeId, isTaxable, isRecurring, pricingBehavior, inventoryInfo, createDate, updateDate, dateFirstAvailableInCatalog, catalogStartDate, catalogEndDate, daysAvailableInCatalog, upc, upCs, mfgPartNumber, mfgPartNumbers, variationProductCode, categories, measurements, isPackagedStandAlone, properties, options, variations, validPriceLists, locationsInStock, slicingAttributeFQN, productImageGroups, sliceValue, productCollections, productCollectionMembers, collectionMembersProductContent, score, personalizationScore);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesProduct {\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    purchaseLocation: ").append(toIndentedString(purchaseLocation)).append("\n");
    sb.append("    productSequence: ").append(toIndentedString(productSequence)).append("\n");
    sb.append("    productUsage: ").append(toIndentedString(productUsage)).append("\n");
    sb.append("    fulfillmentTypesSupported: ").append(toIndentedString(fulfillmentTypesSupported)).append("\n");
    sb.append("    goodsType: ").append(toIndentedString(goodsType)).append("\n");
    sb.append("    bundledProducts: ").append(toIndentedString(bundledProducts)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    purchasableState: ").append(toIndentedString(purchasableState)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    publishState: ").append(toIndentedString(publishState)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceRange: ").append(toIndentedString(priceRange)).append("\n");
    sb.append("    volumePriceBands: ").append(toIndentedString(volumePriceBands)).append("\n");
    sb.append("    volumePriceRange: ").append(toIndentedString(volumePriceRange)).append("\n");
    sb.append("    availableShippingDiscounts: ").append(toIndentedString(availableShippingDiscounts)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    productTypeId: ").append(toIndentedString(productTypeId)).append("\n");
    sb.append("    isTaxable: ").append(toIndentedString(isTaxable)).append("\n");
    sb.append("    isRecurring: ").append(toIndentedString(isRecurring)).append("\n");
    sb.append("    pricingBehavior: ").append(toIndentedString(pricingBehavior)).append("\n");
    sb.append("    inventoryInfo: ").append(toIndentedString(inventoryInfo)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    dateFirstAvailableInCatalog: ").append(toIndentedString(dateFirstAvailableInCatalog)).append("\n");
    sb.append("    catalogStartDate: ").append(toIndentedString(catalogStartDate)).append("\n");
    sb.append("    catalogEndDate: ").append(toIndentedString(catalogEndDate)).append("\n");
    sb.append("    daysAvailableInCatalog: ").append(toIndentedString(daysAvailableInCatalog)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    upCs: ").append(toIndentedString(upCs)).append("\n");
    sb.append("    mfgPartNumber: ").append(toIndentedString(mfgPartNumber)).append("\n");
    sb.append("    mfgPartNumbers: ").append(toIndentedString(mfgPartNumbers)).append("\n");
    sb.append("    variationProductCode: ").append(toIndentedString(variationProductCode)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("    isPackagedStandAlone: ").append(toIndentedString(isPackagedStandAlone)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("    validPriceLists: ").append(toIndentedString(validPriceLists)).append("\n");
    sb.append("    locationsInStock: ").append(toIndentedString(locationsInStock)).append("\n");
    sb.append("    slicingAttributeFQN: ").append(toIndentedString(slicingAttributeFQN)).append("\n");
    sb.append("    productImageGroups: ").append(toIndentedString(productImageGroups)).append("\n");
    sb.append("    sliceValue: ").append(toIndentedString(sliceValue)).append("\n");
    sb.append("    productCollections: ").append(toIndentedString(productCollections)).append("\n");
    sb.append("    productCollectionMembers: ").append(toIndentedString(productCollectionMembers)).append("\n");
    sb.append("    collectionMembersProductContent: ").append(toIndentedString(collectionMembersProductContent)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    personalizationScore: ").append(toIndentedString(personalizationScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productCode");
    openapiFields.add("purchaseLocation");
    openapiFields.add("productSequence");
    openapiFields.add("productUsage");
    openapiFields.add("fulfillmentTypesSupported");
    openapiFields.add("goodsType");
    openapiFields.add("bundledProducts");
    openapiFields.add("content");
    openapiFields.add("purchasableState");
    openapiFields.add("isActive");
    openapiFields.add("publishState");
    openapiFields.add("price");
    openapiFields.add("priceRange");
    openapiFields.add("volumePriceBands");
    openapiFields.add("volumePriceRange");
    openapiFields.add("availableShippingDiscounts");
    openapiFields.add("productType");
    openapiFields.add("productTypeId");
    openapiFields.add("isTaxable");
    openapiFields.add("isRecurring");
    openapiFields.add("pricingBehavior");
    openapiFields.add("inventoryInfo");
    openapiFields.add("createDate");
    openapiFields.add("updateDate");
    openapiFields.add("dateFirstAvailableInCatalog");
    openapiFields.add("catalogStartDate");
    openapiFields.add("catalogEndDate");
    openapiFields.add("daysAvailableInCatalog");
    openapiFields.add("upc");
    openapiFields.add("upCs");
    openapiFields.add("mfgPartNumber");
    openapiFields.add("mfgPartNumbers");
    openapiFields.add("variationProductCode");
    openapiFields.add("categories");
    openapiFields.add("measurements");
    openapiFields.add("isPackagedStandAlone");
    openapiFields.add("properties");
    openapiFields.add("options");
    openapiFields.add("variations");
    openapiFields.add("validPriceLists");
    openapiFields.add("locationsInStock");
    openapiFields.add("slicingAttributeFQN");
    openapiFields.add("productImageGroups");
    openapiFields.add("sliceValue");
    openapiFields.add("productCollections");
    openapiFields.add("productCollectionMembers");
    openapiFields.add("collectionMembersProductContent");
    openapiFields.add("score");
    openapiFields.add("personalizationScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesProduct
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesProduct is not found in the empty JSON string", CatalogRuntimesProduct.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesProduct.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesProduct` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      if ((jsonObj.get("purchaseLocation") != null && !jsonObj.get("purchaseLocation").isJsonNull()) && !jsonObj.get("purchaseLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseLocation").toString()));
      }
      if ((jsonObj.get("productUsage") != null && !jsonObj.get("productUsage").isJsonNull()) && !jsonObj.get("productUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productUsage").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("fulfillmentTypesSupported").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentTypesSupported` to be an array in the JSON string but got `%s`", jsonObj.get("fulfillmentTypesSupported").toString()));
      }
      if ((jsonObj.get("goodsType") != null && !jsonObj.get("goodsType").isJsonNull()) && !jsonObj.get("goodsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goodsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goodsType").toString()));
      }
      if (jsonObj.get("bundledProducts") != null && !jsonObj.get("bundledProducts").isJsonNull()) {
        JsonArray jsonArraybundledProducts = jsonObj.getAsJsonArray("bundledProducts");
        if (jsonArraybundledProducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundledProducts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundledProducts` to be an array in the JSON string but got `%s`", jsonObj.get("bundledProducts").toString()));
          }

          // validate the optional field `bundledProducts` (array)
          for (int i = 0; i < jsonArraybundledProducts.size(); i++) {
            CatalogRuntimesBundledProduct.validateJsonObject(jsonArraybundledProducts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        ProductContent.validateJsonObject(jsonObj.getAsJsonObject("content"));
      }
      // validate the optional field `purchasableState`
      if (jsonObj.get("purchasableState") != null && !jsonObj.get("purchasableState").isJsonNull()) {
        ProductPurchasableState.validateJsonObject(jsonObj.getAsJsonObject("purchasableState"));
      }
      if ((jsonObj.get("publishState") != null && !jsonObj.get("publishState").isJsonNull()) && !jsonObj.get("publishState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishState").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        CatalogRuntimesProductPrice.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      // validate the optional field `priceRange`
      if (jsonObj.get("priceRange") != null && !jsonObj.get("priceRange").isJsonNull()) {
        ProductPriceRange.validateJsonObject(jsonObj.getAsJsonObject("priceRange"));
      }
      if (jsonObj.get("volumePriceBands") != null && !jsonObj.get("volumePriceBands").isJsonNull()) {
        JsonArray jsonArrayvolumePriceBands = jsonObj.getAsJsonArray("volumePriceBands");
        if (jsonArrayvolumePriceBands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumePriceBands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumePriceBands` to be an array in the JSON string but got `%s`", jsonObj.get("volumePriceBands").toString()));
          }

          // validate the optional field `volumePriceBands` (array)
          for (int i = 0; i < jsonArrayvolumePriceBands.size(); i++) {
            ProductVolumePrice.validateJsonObject(jsonArrayvolumePriceBands.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `volumePriceRange`
      if (jsonObj.get("volumePriceRange") != null && !jsonObj.get("volumePriceRange").isJsonNull()) {
        ProductPriceRange.validateJsonObject(jsonObj.getAsJsonObject("volumePriceRange"));
      }
      if (jsonObj.get("availableShippingDiscounts") != null && !jsonObj.get("availableShippingDiscounts").isJsonNull()) {
        JsonArray jsonArrayavailableShippingDiscounts = jsonObj.getAsJsonArray("availableShippingDiscounts");
        if (jsonArrayavailableShippingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableShippingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableShippingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("availableShippingDiscounts").toString()));
          }

          // validate the optional field `availableShippingDiscounts` (array)
          for (int i = 0; i < jsonArrayavailableShippingDiscounts.size(); i++) {
            CatalogRuntimesDiscount.validateJsonObject(jsonArrayavailableShippingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull()) && !jsonObj.get("productType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productType").toString()));
      }
      // validate the optional field `pricingBehavior`
      if (jsonObj.get("pricingBehavior") != null && !jsonObj.get("pricingBehavior").isJsonNull()) {
        CatalogRuntimesProductPricingBehaviorInfo.validateJsonObject(jsonObj.getAsJsonObject("pricingBehavior"));
      }
      // validate the optional field `inventoryInfo`
      if (jsonObj.get("inventoryInfo") != null && !jsonObj.get("inventoryInfo").isJsonNull()) {
        CatalogRuntimesProductInventoryInfo.validateJsonObject(jsonObj.getAsJsonObject("inventoryInfo"));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("upCs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upCs` to be an array in the JSON string but got `%s`", jsonObj.get("upCs").toString()));
      }
      if ((jsonObj.get("mfgPartNumber") != null && !jsonObj.get("mfgPartNumber").isJsonNull()) && !jsonObj.get("mfgPartNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfgPartNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfgPartNumber").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("mfgPartNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfgPartNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("mfgPartNumbers").toString()));
      }
      if ((jsonObj.get("variationProductCode") != null && !jsonObj.get("variationProductCode").isJsonNull()) && !jsonObj.get("variationProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variationProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variationProductCode").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            CatalogRuntimesCategory.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `measurements`
      if (jsonObj.get("measurements") != null && !jsonObj.get("measurements").isJsonNull()) {
        CatalogRuntimesPackageMeasurements.validateJsonObject(jsonObj.getAsJsonObject("measurements"));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            CatalogRuntimesProductProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CatalogRuntimesProductOption.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonNull()) {
        JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
        if (jsonArrayvariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
          }

          // validate the optional field `variations` (array)
          for (int i = 0; i < jsonArrayvariations.size(); i++) {
            VariationSummary.validateJsonObject(jsonArrayvariations.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("validPriceLists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validPriceLists` to be an array in the JSON string but got `%s`", jsonObj.get("validPriceLists").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("locationsInStock").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationsInStock` to be an array in the JSON string but got `%s`", jsonObj.get("locationsInStock").toString()));
      }
      if ((jsonObj.get("slicingAttributeFQN") != null && !jsonObj.get("slicingAttributeFQN").isJsonNull()) && !jsonObj.get("slicingAttributeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slicingAttributeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slicingAttributeFQN").toString()));
      }
      if (jsonObj.get("productImageGroups") != null && !jsonObj.get("productImageGroups").isJsonNull()) {
        JsonArray jsonArrayproductImageGroups = jsonObj.getAsJsonArray("productImageGroups");
        if (jsonArrayproductImageGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productImageGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productImageGroups` to be an array in the JSON string but got `%s`", jsonObj.get("productImageGroups").toString()));
          }

          // validate the optional field `productImageGroups` (array)
          for (int i = 0; i < jsonArrayproductImageGroups.size(); i++) {
            CatalogRuntimesProductImageGroup.validateJsonObject(jsonArrayproductImageGroups.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("sliceValue") != null && !jsonObj.get("sliceValue").isJsonNull()) && !jsonObj.get("sliceValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sliceValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sliceValue").toString()));
      }
      if (jsonObj.get("productCollections") != null && !jsonObj.get("productCollections").isJsonNull()) {
        JsonArray jsonArrayproductCollections = jsonObj.getAsJsonArray("productCollections");
        if (jsonArrayproductCollections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productCollections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productCollections` to be an array in the JSON string but got `%s`", jsonObj.get("productCollections").toString()));
          }

          // validate the optional field `productCollections` (array)
          for (int i = 0; i < jsonArrayproductCollections.size(); i++) {
            CatalogRuntimesProductCollectionInfo.validateJsonObject(jsonArrayproductCollections.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("productCollectionMembers") != null && !jsonObj.get("productCollectionMembers").isJsonNull()) {
        JsonArray jsonArrayproductCollectionMembers = jsonObj.getAsJsonArray("productCollectionMembers");
        if (jsonArrayproductCollectionMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productCollectionMembers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productCollectionMembers` to be an array in the JSON string but got `%s`", jsonObj.get("productCollectionMembers").toString()));
          }

          // validate the optional field `productCollectionMembers` (array)
          for (int i = 0; i < jsonArrayproductCollectionMembers.size(); i++) {
            ProductCollectionMember.validateJsonObject(jsonArrayproductCollectionMembers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("collectionMembersProductContent") != null && !jsonObj.get("collectionMembersProductContent").isJsonNull()) {
        JsonArray jsonArraycollectionMembersProductContent = jsonObj.getAsJsonArray("collectionMembersProductContent");
        if (jsonArraycollectionMembersProductContent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collectionMembersProductContent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collectionMembersProductContent` to be an array in the JSON string but got `%s`", jsonObj.get("collectionMembersProductContent").toString()));
          }

          // validate the optional field `collectionMembersProductContent` (array)
          for (int i = 0; i < jsonArraycollectionMembersProductContent.size(); i++) {
            ProductContent.validateJsonObject(jsonArraycollectionMembersProductContent.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesProduct>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesProduct read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesProduct given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesProduct
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesProduct
  */
  public static CatalogRuntimesProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesProduct.class);
  }

 /**
  * Convert an instance of CatalogRuntimesProduct to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

