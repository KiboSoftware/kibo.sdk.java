/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsAttributeVocabularyValue;
import com.kibocommerce.sdk.catalogadministration.models.ProductPropertyValueLocalizedContent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * A value of a product option for this product. For example, a computer product may have an option called \&quot;Memory\&quot; that can have the values \&quot;6GB,\&quot;8GB,\&quot; and \&quot;12GB.\&quot;
 */
@ApiModel(description = "A value of a product option for this product. For example, a computer product may have an option called \"Memory\" that can have the values \"6GB,\"8GB,\" and \"12GB.\"")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogAdminsProductPropertyValue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private ProductPropertyValueLocalizedContent content;

  public static final String SERIALIZED_NAME_LOCALIZED_CONTENT = "localizedContent";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_CONTENT)
  private List<ProductPropertyValueLocalizedContent> localizedContent = null;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VOCABULARY_VALUE_DETAIL = "attributeVocabularyValueDetail";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VOCABULARY_VALUE_DETAIL)
  private CatalogAdminsAttributeVocabularyValue attributeVocabularyValueDetail;

  public CatalogAdminsProductPropertyValue() {
  }

  public CatalogAdminsProductPropertyValue value(Object value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getValue() {
    return value;
  }


  public void setValue(Object value) {
    this.value = value;
  }


  public CatalogAdminsProductPropertyValue content(ProductPropertyValueLocalizedContent content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductPropertyValueLocalizedContent getContent() {
    return content;
  }


  public void setContent(ProductPropertyValueLocalizedContent content) {
    this.content = content;
  }


  public CatalogAdminsProductPropertyValue localizedContent(List<ProductPropertyValueLocalizedContent> localizedContent) {
    
    this.localizedContent = localizedContent;
    return this;
  }

  public CatalogAdminsProductPropertyValue addLocalizedContentItem(ProductPropertyValueLocalizedContent localizedContentItem) {
    if (this.localizedContent == null) {
      this.localizedContent = new ArrayList<>();
    }
    this.localizedContent.add(localizedContentItem);
    return this;
  }

   /**
   * Get localizedContent
   * @return localizedContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProductPropertyValueLocalizedContent> getLocalizedContent() {
    return localizedContent;
  }


  public void setLocalizedContent(List<ProductPropertyValueLocalizedContent> localizedContent) {
    this.localizedContent = localizedContent;
  }


  public CatalogAdminsProductPropertyValue attributeVocabularyValueDetail(CatalogAdminsAttributeVocabularyValue attributeVocabularyValueDetail) {
    
    this.attributeVocabularyValueDetail = attributeVocabularyValueDetail;
    return this;
  }

   /**
   * Get attributeVocabularyValueDetail
   * @return attributeVocabularyValueDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogAdminsAttributeVocabularyValue getAttributeVocabularyValueDetail() {
    return attributeVocabularyValueDetail;
  }


  public void setAttributeVocabularyValueDetail(CatalogAdminsAttributeVocabularyValue attributeVocabularyValueDetail) {
    this.attributeVocabularyValueDetail = attributeVocabularyValueDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogAdminsProductPropertyValue catalogAdminsProductPropertyValue = (CatalogAdminsProductPropertyValue) o;
    return Objects.equals(this.value, catalogAdminsProductPropertyValue.value) &&
        Objects.equals(this.content, catalogAdminsProductPropertyValue.content) &&
        Objects.equals(this.localizedContent, catalogAdminsProductPropertyValue.localizedContent) &&
        Objects.equals(this.attributeVocabularyValueDetail, catalogAdminsProductPropertyValue.attributeVocabularyValueDetail);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, content, localizedContent, attributeVocabularyValueDetail);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogAdminsProductPropertyValue {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    localizedContent: ").append(toIndentedString(localizedContent)).append("\n");
    sb.append("    attributeVocabularyValueDetail: ").append(toIndentedString(attributeVocabularyValueDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("value");
    openapiFields.add("content");
    openapiFields.add("localizedContent");
    openapiFields.add("attributeVocabularyValueDetail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogAdminsProductPropertyValue
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogAdminsProductPropertyValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogAdminsProductPropertyValue is not found in the empty JSON string", CatalogAdminsProductPropertyValue.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogAdminsProductPropertyValue.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogAdminsProductPropertyValue` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        ProductPropertyValueLocalizedContent.validateJsonObject(jsonObj.getAsJsonObject("content"));
      }
      if (jsonObj.get("localizedContent") != null && !jsonObj.get("localizedContent").isJsonNull()) {
        JsonArray jsonArraylocalizedContent = jsonObj.getAsJsonArray("localizedContent");
        if (jsonArraylocalizedContent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localizedContent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localizedContent` to be an array in the JSON string but got `%s`", jsonObj.get("localizedContent").toString()));
          }

          // validate the optional field `localizedContent` (array)
          for (int i = 0; i < jsonArraylocalizedContent.size(); i++) {
            ProductPropertyValueLocalizedContent.validateJsonObject(jsonArraylocalizedContent.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `attributeVocabularyValueDetail`
      if (jsonObj.get("attributeVocabularyValueDetail") != null && !jsonObj.get("attributeVocabularyValueDetail").isJsonNull()) {
        CatalogAdminsAttributeVocabularyValue.validateJsonObject(jsonObj.getAsJsonObject("attributeVocabularyValueDetail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogAdminsProductPropertyValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogAdminsProductPropertyValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogAdminsProductPropertyValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogAdminsProductPropertyValue.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogAdminsProductPropertyValue>() {
           @Override
           public void write(JsonWriter out, CatalogAdminsProductPropertyValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogAdminsProductPropertyValue read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogAdminsProductPropertyValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogAdminsProductPropertyValue
  * @throws IOException if the JSON string is invalid with respect to CatalogAdminsProductPropertyValue
  */
  public static CatalogAdminsProductPropertyValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogAdminsProductPropertyValue.class);
  }

 /**
  * Convert an instance of CatalogAdminsProductPropertyValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

