/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsSpellcheck;
import com.kibocommerce.sdk.catalogadministration.models.FieldValueBoost;
import com.kibocommerce.sdk.catalogadministration.models.SiteSearchFieldWeight;
import com.kibocommerce.sdk.catalogadministration.models.TypoTolerance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * SiteSearchSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SiteSearchSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SOW_BEHAVIOR = "sowBehavior";
  @SerializedName(SERIALIZED_NAME_SOW_BEHAVIOR)
  private Integer sowBehavior;

  public static final String SERIALIZED_NAME_FIELD_WEIGHTS = "fieldWeights";
  @SerializedName(SERIALIZED_NAME_FIELD_WEIGHTS)
  private List<SiteSearchFieldWeight> fieldWeights = null;

  public static final String SERIALIZED_NAME_CUSTOM_BOOSTS = "customBoosts";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BOOSTS)
  private List<String> customBoosts = null;

  public static final String SERIALIZED_NAME_FIELD_VALUE_BOOST = "fieldValueBoost";
  @SerializedName(SERIALIZED_NAME_FIELD_VALUE_BOOST)
  private FieldValueBoost fieldValueBoost;

  public static final String SERIALIZED_NAME_MULTI_TERM_SYN_MINIMUM_MATCH_PERCENTS = "multiTermSynMinimumMatchPercents";
  @SerializedName(SERIALIZED_NAME_MULTI_TERM_SYN_MINIMUM_MATCH_PERCENTS)
  private List<Integer> multiTermSynMinimumMatchPercents = null;

  public static final String SERIALIZED_NAME_MINIMUM_MATCH_PERCENTS = "minimumMatchPercents";
  @SerializedName(SERIALIZED_NAME_MINIMUM_MATCH_PERCENTS)
  private List<Integer> minimumMatchPercents = null;

  public static final String SERIALIZED_NAME_PHRASE_SLOP = "phraseSlop";
  @SerializedName(SERIALIZED_NAME_PHRASE_SLOP)
  private Integer phraseSlop;

  public static final String SERIALIZED_NAME_TWO_WORD_PHRASE_BOOST = "twoWordPhraseBoost";
  @SerializedName(SERIALIZED_NAME_TWO_WORD_PHRASE_BOOST)
  private Boolean twoWordPhraseBoost;

  public static final String SERIALIZED_NAME_PERSONALIZATION_EXPERIENCE = "personalizationExperience";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_EXPERIENCE)
  private String personalizationExperience;

  public static final String SERIALIZED_NAME_PERSONALIZATION_FACTOR = "personalizationFactor";
  @SerializedName(SERIALIZED_NAME_PERSONALIZATION_FACTOR)
  private Double personalizationFactor;

  public static final String SERIALIZED_NAME_SEARCH_CHILD_PRODUCTS_BY_DEFAULT = "searchChildProductsByDefault";
  @SerializedName(SERIALIZED_NAME_SEARCH_CHILD_PRODUCTS_BY_DEFAULT)
  private Boolean searchChildProductsByDefault;

  public static final String SERIALIZED_NAME_CROSS_FIELD_ADDITIVE_SCORE_FACTOR = "crossFieldAdditiveScoreFactor";
  @SerializedName(SERIALIZED_NAME_CROSS_FIELD_ADDITIVE_SCORE_FACTOR)
  private Double crossFieldAdditiveScoreFactor;

  public static final String SERIALIZED_NAME_TYPO_TOLERANCE = "typoTolerance";
  @SerializedName(SERIALIZED_NAME_TYPO_TOLERANCE)
  private TypoTolerance typoTolerance;

  public static final String SERIALIZED_NAME_SPELLCHECK = "spellcheck";
  @SerializedName(SERIALIZED_NAME_SPELLCHECK)
  private CatalogAdminsSpellcheck spellcheck;

  public SiteSearchSettings() {
  }

  public SiteSearchSettings sowBehavior(Integer sowBehavior) {
    
    this.sowBehavior = sowBehavior;
    return this;
  }

   /**
   * controls sowBehavior (Never&#x3D;0, Always&#x3D;1, WhenNoMultiTermSyn&#x3D;2)  never sow&#x3D;false, always sow&#x3D;true,  WhenNoMultiTermSyn &#x3D; (depends on existance of multitermsynonym match in query)
   * @return sowBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "controls sowBehavior (Never=0, Always=1, WhenNoMultiTermSyn=2)  never sow=false, always sow=true,  WhenNoMultiTermSyn = (depends on existance of multitermsynonym match in query)")

  public Integer getSowBehavior() {
    return sowBehavior;
  }


  public void setSowBehavior(Integer sowBehavior) {
    this.sowBehavior = sowBehavior;
  }


  public SiteSearchSettings fieldWeights(List<SiteSearchFieldWeight> fieldWeights) {
    
    this.fieldWeights = fieldWeights;
    return this;
  }

  public SiteSearchSettings addFieldWeightsItem(SiteSearchFieldWeight fieldWeightsItem) {
    if (this.fieldWeights == null) {
      this.fieldWeights = new ArrayList<>();
    }
    this.fieldWeights.add(fieldWeightsItem);
    return this;
  }

   /**
   * Get fieldWeights
   * @return fieldWeights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SiteSearchFieldWeight> getFieldWeights() {
    return fieldWeights;
  }


  public void setFieldWeights(List<SiteSearchFieldWeight> fieldWeights) {
    this.fieldWeights = fieldWeights;
  }


  public SiteSearchSettings customBoosts(List<String> customBoosts) {
    
    this.customBoosts = customBoosts;
    return this;
  }

  public SiteSearchSettings addCustomBoostsItem(String customBoostsItem) {
    if (this.customBoosts == null) {
      this.customBoosts = new ArrayList<>();
    }
    this.customBoosts.add(customBoostsItem);
    return this;
  }

   /**
   * Get customBoosts
   * @return customBoosts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCustomBoosts() {
    return customBoosts;
  }


  public void setCustomBoosts(List<String> customBoosts) {
    this.customBoosts = customBoosts;
  }


  public SiteSearchSettings fieldValueBoost(FieldValueBoost fieldValueBoost) {
    
    this.fieldValueBoost = fieldValueBoost;
    return this;
  }

   /**
   * Get fieldValueBoost
   * @return fieldValueBoost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FieldValueBoost getFieldValueBoost() {
    return fieldValueBoost;
  }


  public void setFieldValueBoost(FieldValueBoost fieldValueBoost) {
    this.fieldValueBoost = fieldValueBoost;
  }


  public SiteSearchSettings multiTermSynMinimumMatchPercents(List<Integer> multiTermSynMinimumMatchPercents) {
    
    this.multiTermSynMinimumMatchPercents = multiTermSynMinimumMatchPercents;
    return this;
  }

  public SiteSearchSettings addMultiTermSynMinimumMatchPercentsItem(Integer multiTermSynMinimumMatchPercentsItem) {
    if (this.multiTermSynMinimumMatchPercents == null) {
      this.multiTermSynMinimumMatchPercents = new ArrayList<>();
    }
    this.multiTermSynMinimumMatchPercents.add(multiTermSynMinimumMatchPercentsItem);
    return this;
  }

   /**
   * if values present is used for mm when sowBehavior.WhenNoMultiTermSyn and multi term sym match found in query  if no values are present or null fallback to MinMatchPercents
   * @return multiTermSynMinimumMatchPercents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if values present is used for mm when sowBehavior.WhenNoMultiTermSyn and multi term sym match found in query  if no values are present or null fallback to MinMatchPercents")

  public List<Integer> getMultiTermSynMinimumMatchPercents() {
    return multiTermSynMinimumMatchPercents;
  }


  public void setMultiTermSynMinimumMatchPercents(List<Integer> multiTermSynMinimumMatchPercents) {
    this.multiTermSynMinimumMatchPercents = multiTermSynMinimumMatchPercents;
  }


  public SiteSearchSettings minimumMatchPercents(List<Integer> minimumMatchPercents) {
    
    this.minimumMatchPercents = minimumMatchPercents;
    return this;
  }

  public SiteSearchSettings addMinimumMatchPercentsItem(Integer minimumMatchPercentsItem) {
    if (this.minimumMatchPercents == null) {
      this.minimumMatchPercents = new ArrayList<>();
    }
    this.minimumMatchPercents.add(minimumMatchPercentsItem);
    return this;
  }

   /**
   * Get minimumMatchPercents
   * @return minimumMatchPercents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getMinimumMatchPercents() {
    return minimumMatchPercents;
  }


  public void setMinimumMatchPercents(List<Integer> minimumMatchPercents) {
    this.minimumMatchPercents = minimumMatchPercents;
  }


  public SiteSearchSettings phraseSlop(Integer phraseSlop) {
    
    this.phraseSlop = phraseSlop;
    return this;
  }

   /**
   * Get phraseSlop
   * @return phraseSlop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPhraseSlop() {
    return phraseSlop;
  }


  public void setPhraseSlop(Integer phraseSlop) {
    this.phraseSlop = phraseSlop;
  }


  public SiteSearchSettings twoWordPhraseBoost(Boolean twoWordPhraseBoost) {
    
    this.twoWordPhraseBoost = twoWordPhraseBoost;
    return this;
  }

   /**
   * if true, 2 word shingles used for phrase boosting based on fields with phrase weights greater than 0  if false, only full phrase mathing used for phrase boosting
   * @return twoWordPhraseBoost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if true, 2 word shingles used for phrase boosting based on fields with phrase weights greater than 0  if false, only full phrase mathing used for phrase boosting")

  public Boolean getTwoWordPhraseBoost() {
    return twoWordPhraseBoost;
  }


  public void setTwoWordPhraseBoost(Boolean twoWordPhraseBoost) {
    this.twoWordPhraseBoost = twoWordPhraseBoost;
  }


  public SiteSearchSettings personalizationExperience(String personalizationExperience) {
    
    this.personalizationExperience = personalizationExperience;
    return this;
  }

   /**
   * Get personalizationExperience
   * @return personalizationExperience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPersonalizationExperience() {
    return personalizationExperience;
  }


  public void setPersonalizationExperience(String personalizationExperience) {
    this.personalizationExperience = personalizationExperience;
  }


  public SiteSearchSettings personalizationFactor(Double personalizationFactor) {
    
    this.personalizationFactor = personalizationFactor;
    return this;
  }

   /**
   * Get personalizationFactor
   * @return personalizationFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPersonalizationFactor() {
    return personalizationFactor;
  }


  public void setPersonalizationFactor(Double personalizationFactor) {
    this.personalizationFactor = personalizationFactor;
  }


  public SiteSearchSettings searchChildProductsByDefault(Boolean searchChildProductsByDefault) {
    
    this.searchChildProductsByDefault = searchChildProductsByDefault;
    return this;
  }

   /**
   * Get searchChildProductsByDefault
   * @return searchChildProductsByDefault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSearchChildProductsByDefault() {
    return searchChildProductsByDefault;
  }


  public void setSearchChildProductsByDefault(Boolean searchChildProductsByDefault) {
    this.searchChildProductsByDefault = searchChildProductsByDefault;
  }


  public SiteSearchSettings crossFieldAdditiveScoreFactor(Double crossFieldAdditiveScoreFactor) {
    
    this.crossFieldAdditiveScoreFactor = crossFieldAdditiveScoreFactor;
    return this;
  }

   /**
   * Get crossFieldAdditiveScoreFactor
   * @return crossFieldAdditiveScoreFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCrossFieldAdditiveScoreFactor() {
    return crossFieldAdditiveScoreFactor;
  }


  public void setCrossFieldAdditiveScoreFactor(Double crossFieldAdditiveScoreFactor) {
    this.crossFieldAdditiveScoreFactor = crossFieldAdditiveScoreFactor;
  }


  public SiteSearchSettings typoTolerance(TypoTolerance typoTolerance) {
    
    this.typoTolerance = typoTolerance;
    return this;
  }

   /**
   * Get typoTolerance
   * @return typoTolerance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypoTolerance getTypoTolerance() {
    return typoTolerance;
  }


  public void setTypoTolerance(TypoTolerance typoTolerance) {
    this.typoTolerance = typoTolerance;
  }


  public SiteSearchSettings spellcheck(CatalogAdminsSpellcheck spellcheck) {
    
    this.spellcheck = spellcheck;
    return this;
  }

   /**
   * Get spellcheck
   * @return spellcheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CatalogAdminsSpellcheck getSpellcheck() {
    return spellcheck;
  }


  public void setSpellcheck(CatalogAdminsSpellcheck spellcheck) {
    this.spellcheck = spellcheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteSearchSettings siteSearchSettings = (SiteSearchSettings) o;
    return Objects.equals(this.sowBehavior, siteSearchSettings.sowBehavior) &&
        Objects.equals(this.fieldWeights, siteSearchSettings.fieldWeights) &&
        Objects.equals(this.customBoosts, siteSearchSettings.customBoosts) &&
        Objects.equals(this.fieldValueBoost, siteSearchSettings.fieldValueBoost) &&
        Objects.equals(this.multiTermSynMinimumMatchPercents, siteSearchSettings.multiTermSynMinimumMatchPercents) &&
        Objects.equals(this.minimumMatchPercents, siteSearchSettings.minimumMatchPercents) &&
        Objects.equals(this.phraseSlop, siteSearchSettings.phraseSlop) &&
        Objects.equals(this.twoWordPhraseBoost, siteSearchSettings.twoWordPhraseBoost) &&
        Objects.equals(this.personalizationExperience, siteSearchSettings.personalizationExperience) &&
        Objects.equals(this.personalizationFactor, siteSearchSettings.personalizationFactor) &&
        Objects.equals(this.searchChildProductsByDefault, siteSearchSettings.searchChildProductsByDefault) &&
        Objects.equals(this.crossFieldAdditiveScoreFactor, siteSearchSettings.crossFieldAdditiveScoreFactor) &&
        Objects.equals(this.typoTolerance, siteSearchSettings.typoTolerance) &&
        Objects.equals(this.spellcheck, siteSearchSettings.spellcheck);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sowBehavior, fieldWeights, customBoosts, fieldValueBoost, multiTermSynMinimumMatchPercents, minimumMatchPercents, phraseSlop, twoWordPhraseBoost, personalizationExperience, personalizationFactor, searchChildProductsByDefault, crossFieldAdditiveScoreFactor, typoTolerance, spellcheck);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteSearchSettings {\n");
    sb.append("    sowBehavior: ").append(toIndentedString(sowBehavior)).append("\n");
    sb.append("    fieldWeights: ").append(toIndentedString(fieldWeights)).append("\n");
    sb.append("    customBoosts: ").append(toIndentedString(customBoosts)).append("\n");
    sb.append("    fieldValueBoost: ").append(toIndentedString(fieldValueBoost)).append("\n");
    sb.append("    multiTermSynMinimumMatchPercents: ").append(toIndentedString(multiTermSynMinimumMatchPercents)).append("\n");
    sb.append("    minimumMatchPercents: ").append(toIndentedString(minimumMatchPercents)).append("\n");
    sb.append("    phraseSlop: ").append(toIndentedString(phraseSlop)).append("\n");
    sb.append("    twoWordPhraseBoost: ").append(toIndentedString(twoWordPhraseBoost)).append("\n");
    sb.append("    personalizationExperience: ").append(toIndentedString(personalizationExperience)).append("\n");
    sb.append("    personalizationFactor: ").append(toIndentedString(personalizationFactor)).append("\n");
    sb.append("    searchChildProductsByDefault: ").append(toIndentedString(searchChildProductsByDefault)).append("\n");
    sb.append("    crossFieldAdditiveScoreFactor: ").append(toIndentedString(crossFieldAdditiveScoreFactor)).append("\n");
    sb.append("    typoTolerance: ").append(toIndentedString(typoTolerance)).append("\n");
    sb.append("    spellcheck: ").append(toIndentedString(spellcheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sowBehavior");
    openapiFields.add("fieldWeights");
    openapiFields.add("customBoosts");
    openapiFields.add("fieldValueBoost");
    openapiFields.add("multiTermSynMinimumMatchPercents");
    openapiFields.add("minimumMatchPercents");
    openapiFields.add("phraseSlop");
    openapiFields.add("twoWordPhraseBoost");
    openapiFields.add("personalizationExperience");
    openapiFields.add("personalizationFactor");
    openapiFields.add("searchChildProductsByDefault");
    openapiFields.add("crossFieldAdditiveScoreFactor");
    openapiFields.add("typoTolerance");
    openapiFields.add("spellcheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SiteSearchSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SiteSearchSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteSearchSettings is not found in the empty JSON string", SiteSearchSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SiteSearchSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteSearchSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("fieldWeights") != null && !jsonObj.get("fieldWeights").isJsonNull()) {
        JsonArray jsonArrayfieldWeights = jsonObj.getAsJsonArray("fieldWeights");
        if (jsonArrayfieldWeights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fieldWeights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fieldWeights` to be an array in the JSON string but got `%s`", jsonObj.get("fieldWeights").toString()));
          }

          // validate the optional field `fieldWeights` (array)
          for (int i = 0; i < jsonArrayfieldWeights.size(); i++) {
            SiteSearchFieldWeight.validateJsonObject(jsonArrayfieldWeights.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("customBoosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customBoosts` to be an array in the JSON string but got `%s`", jsonObj.get("customBoosts").toString()));
      }
      // validate the optional field `fieldValueBoost`
      if (jsonObj.get("fieldValueBoost") != null && !jsonObj.get("fieldValueBoost").isJsonNull()) {
        FieldValueBoost.validateJsonObject(jsonObj.getAsJsonObject("fieldValueBoost"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("multiTermSynMinimumMatchPercents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiTermSynMinimumMatchPercents` to be an array in the JSON string but got `%s`", jsonObj.get("multiTermSynMinimumMatchPercents").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("minimumMatchPercents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumMatchPercents` to be an array in the JSON string but got `%s`", jsonObj.get("minimumMatchPercents").toString()));
      }
      if ((jsonObj.get("personalizationExperience") != null && !jsonObj.get("personalizationExperience").isJsonNull()) && !jsonObj.get("personalizationExperience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalizationExperience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalizationExperience").toString()));
      }
      // validate the optional field `typoTolerance`
      if (jsonObj.get("typoTolerance") != null && !jsonObj.get("typoTolerance").isJsonNull()) {
        TypoTolerance.validateJsonObject(jsonObj.getAsJsonObject("typoTolerance"));
      }
      // validate the optional field `spellcheck`
      if (jsonObj.get("spellcheck") != null && !jsonObj.get("spellcheck").isJsonNull()) {
        CatalogAdminsSpellcheck.validateJsonObject(jsonObj.getAsJsonObject("spellcheck"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteSearchSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteSearchSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteSearchSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteSearchSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteSearchSettings>() {
           @Override
           public void write(JsonWriter out, SiteSearchSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteSearchSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SiteSearchSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SiteSearchSettings
  * @throws IOException if the JSON string is invalid with respect to SiteSearchSettings
  */
  public static SiteSearchSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteSearchSettings.class);
  }

 /**
  * Convert an instance of SiteSearchSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

