/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCurrencyExchangeRate;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyExchangeRateCollection;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyLocalization;
import com.kibocommerce.sdk.catalogadministration.models.CurrencyLocalizationCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CurrencyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CurrencyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrencyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CurrencyApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CurrencyApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CurrencyApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCurrencyExchangeRates
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCurrencyExchangeRatesCall(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCurrencyExchangeRate;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}/exchangerates"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCurrencyExchangeRatesValidateBeforeCall(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling addCurrencyExchangeRates(Async)");
        }
        

        okhttp3.Call localVarCall = addCurrencyExchangeRatesCall(currencyCode, catalogAdminsCurrencyExchangeRate, _callback);
        return localVarCall;

    }

    /**
     * Update currency localization
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addCurrencyExchangeRates(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate) throws ApiException {
        addCurrencyExchangeRatesWithHttpInfo(currencyCode, catalogAdminsCurrencyExchangeRate);
    }

    /**
     * Update currency localization
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCurrencyExchangeRatesWithHttpInfo(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate) throws ApiException {
        okhttp3.Call localVarCall = addCurrencyExchangeRatesValidateBeforeCall(currencyCode, catalogAdminsCurrencyExchangeRate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update currency localization (asynchronously)
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCurrencyExchangeRatesAsync(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCurrencyExchangeRatesValidateBeforeCall(currencyCode, catalogAdminsCurrencyExchangeRate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCurrencyLocalization
     * @param currencyLocalization Properties of the currency-localization to create.  Required properties: CurrencyCode (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCurrencyLocalizationCall(CurrencyLocalization currencyLocalization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currencyLocalization;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCurrencyLocalizationValidateBeforeCall(CurrencyLocalization currencyLocalization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCurrencyLocalizationCall(currencyLocalization, _callback);
        return localVarCall;

    }

    /**
     * Add currency localization
     * Adds a new currency localization
     * @param currencyLocalization Properties of the currency-localization to create.  Required properties: CurrencyCode (optional)
     * @return CurrencyLocalization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyLocalization addCurrencyLocalization(CurrencyLocalization currencyLocalization) throws ApiException {
        ApiResponse<CurrencyLocalization> localVarResp = addCurrencyLocalizationWithHttpInfo(currencyLocalization);
        return localVarResp.getData();
    }

    /**
     * Add currency localization
     * Adds a new currency localization
     * @param currencyLocalization Properties of the currency-localization to create.  Required properties: CurrencyCode (optional)
     * @return ApiResponse&lt;CurrencyLocalization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyLocalization> addCurrencyLocalizationWithHttpInfo(CurrencyLocalization currencyLocalization) throws ApiException {
        okhttp3.Call localVarCall = addCurrencyLocalizationValidateBeforeCall(currencyLocalization, null);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add currency localization (asynchronously)
     * Adds a new currency localization
     * @param currencyLocalization Properties of the currency-localization to create.  Required properties: CurrencyCode (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCurrencyLocalizationAsync(CurrencyLocalization currencyLocalization, final ApiCallback<CurrencyLocalization> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCurrencyLocalizationValidateBeforeCall(currencyLocalization, _callback);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCurrencyExchangeRate
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode C (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCurrencyExchangeRateCall(String currencyCode, String toCurrencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()))
            .replaceAll("\\{" + "toCurrencyCode" + "\\}", localVarApiClient.escapeString(toCurrencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCurrencyExchangeRateValidateBeforeCall(String currencyCode, String toCurrencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling deleteCurrencyExchangeRate(Async)");
        }
        
        // verify the required parameter 'toCurrencyCode' is set
        if (toCurrencyCode == null) {
            throw new ApiException("Missing the required parameter 'toCurrencyCode' when calling deleteCurrencyExchangeRate(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCurrencyExchangeRateCall(currencyCode, toCurrencyCode, _callback);
        return localVarCall;

    }

    /**
     * Delete currency exchange rate
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode C (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCurrencyExchangeRate(String currencyCode, String toCurrencyCode) throws ApiException {
        deleteCurrencyExchangeRateWithHttpInfo(currencyCode, toCurrencyCode);
    }

    /**
     * Delete currency exchange rate
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode C (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCurrencyExchangeRateWithHttpInfo(String currencyCode, String toCurrencyCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCurrencyExchangeRateValidateBeforeCall(currencyCode, toCurrencyCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete currency exchange rate (asynchronously)
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode C (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCurrencyExchangeRateAsync(String currencyCode, String toCurrencyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCurrencyExchangeRateValidateBeforeCall(currencyCode, toCurrencyCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCurrencyLocalization
     * @param currencyCode Currency code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCurrencyLocalizationCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCurrencyLocalizationValidateBeforeCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling deleteCurrencyLocalization(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCurrencyLocalizationCall(currencyCode, _callback);
        return localVarCall;

    }

    /**
     * Delete currency localization
     * Deletes the currency-localization specified by its currency code.
     * @param currencyCode Currency code. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCurrencyLocalization(String currencyCode) throws ApiException {
        deleteCurrencyLocalizationWithHttpInfo(currencyCode);
    }

    /**
     * Delete currency localization
     * Deletes the currency-localization specified by its currency code.
     * @param currencyCode Currency code. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCurrencyLocalizationWithHttpInfo(String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCurrencyLocalizationValidateBeforeCall(currencyCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete currency localization (asynchronously)
     * Deletes the currency-localization specified by its currency code.
     * @param currencyCode Currency code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCurrencyLocalizationAsync(String currencyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCurrencyLocalizationValidateBeforeCall(currencyCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyExchangeRate
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode Target currency code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyExchangeRateCall(String currencyCode, String toCurrencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()))
            .replaceAll("\\{" + "toCurrencyCode" + "\\}", localVarApiClient.escapeString(toCurrencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyExchangeRateValidateBeforeCall(String currencyCode, String toCurrencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getCurrencyExchangeRate(Async)");
        }
        
        // verify the required parameter 'toCurrencyCode' is set
        if (toCurrencyCode == null) {
            throw new ApiException("Missing the required parameter 'toCurrencyCode' when calling getCurrencyExchangeRate(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrencyExchangeRateCall(currencyCode, toCurrencyCode, _callback);
        return localVarCall;

    }

    /**
     * Get currency exchange rate
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode Target currency code (required)
     * @return CatalogAdminsCurrencyExchangeRate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCurrencyExchangeRate getCurrencyExchangeRate(String currencyCode, String toCurrencyCode) throws ApiException {
        ApiResponse<CatalogAdminsCurrencyExchangeRate> localVarResp = getCurrencyExchangeRateWithHttpInfo(currencyCode, toCurrencyCode);
        return localVarResp.getData();
    }

    /**
     * Get currency exchange rate
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode Target currency code (required)
     * @return ApiResponse&lt;CatalogAdminsCurrencyExchangeRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCurrencyExchangeRate> getCurrencyExchangeRateWithHttpInfo(String currencyCode, String toCurrencyCode) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyExchangeRateValidateBeforeCall(currencyCode, toCurrencyCode, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCurrencyExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency exchange rate (asynchronously)
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     * @param currencyCode Currency code (required)
     * @param toCurrencyCode Target currency code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyExchangeRateAsync(String currencyCode, String toCurrencyCode, final ApiCallback<CatalogAdminsCurrencyExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyExchangeRateValidateBeforeCall(currencyCode, toCurrencyCode, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCurrencyExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyExchangeRates
     * @param currencyCode Currency code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyExchangeRatesCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}/exchangerates"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyExchangeRatesValidateBeforeCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getCurrencyExchangeRates(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrencyExchangeRatesCall(currencyCode, _callback);
        return localVarCall;

    }

    /**
     * Get currency exchange rates
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     * @param currencyCode Currency code (required)
     * @return CurrencyExchangeRateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyExchangeRateCollection getCurrencyExchangeRates(String currencyCode) throws ApiException {
        ApiResponse<CurrencyExchangeRateCollection> localVarResp = getCurrencyExchangeRatesWithHttpInfo(currencyCode);
        return localVarResp.getData();
    }

    /**
     * Get currency exchange rates
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     * @param currencyCode Currency code (required)
     * @return ApiResponse&lt;CurrencyExchangeRateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyExchangeRateCollection> getCurrencyExchangeRatesWithHttpInfo(String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyExchangeRatesValidateBeforeCall(currencyCode, null);
        Type localVarReturnType = new TypeToken<CurrencyExchangeRateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency exchange rates (asynchronously)
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     * @param currencyCode Currency code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyExchangeRatesAsync(String currencyCode, final ApiCallback<CurrencyExchangeRateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyExchangeRatesValidateBeforeCall(currencyCode, _callback);
        Type localVarReturnType = new TypeToken<CurrencyExchangeRateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyLocalization
     * @param currencyCode Currency code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyLocalizationCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyLocalizationValidateBeforeCall(String currencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getCurrencyLocalization(Async)");
        }
        

        okhttp3.Call localVarCall = getCurrencyLocalizationCall(currencyCode, _callback);
        return localVarCall;

    }

    /**
     * Get currency localization
     * Gets a single currency-localization.
     * @param currencyCode Currency code. (required)
     * @return CurrencyLocalization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyLocalization getCurrencyLocalization(String currencyCode) throws ApiException {
        ApiResponse<CurrencyLocalization> localVarResp = getCurrencyLocalizationWithHttpInfo(currencyCode);
        return localVarResp.getData();
    }

    /**
     * Get currency localization
     * Gets a single currency-localization.
     * @param currencyCode Currency code. (required)
     * @return ApiResponse&lt;CurrencyLocalization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyLocalization> getCurrencyLocalizationWithHttpInfo(String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = getCurrencyLocalizationValidateBeforeCall(currencyCode, null);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency localization (asynchronously)
     * Gets a single currency-localization.
     * @param currencyCode Currency code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyLocalizationAsync(String currencyCode, final ApiCallback<CurrencyLocalization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyLocalizationValidateBeforeCall(currencyCode, _callback);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrencyLocalizations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyLocalizationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrencyLocalizationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCurrencyLocalizationsCall(_callback);
        return localVarCall;

    }

    /**
     * Get currency localizations
     * Gets all currency-localizations.
     * @return CurrencyLocalizationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyLocalizationCollection getCurrencyLocalizations() throws ApiException {
        ApiResponse<CurrencyLocalizationCollection> localVarResp = getCurrencyLocalizationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get currency localizations
     * Gets all currency-localizations.
     * @return ApiResponse&lt;CurrencyLocalizationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyLocalizationCollection> getCurrencyLocalizationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrencyLocalizationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CurrencyLocalizationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get currency localizations (asynchronously)
     * Gets all currency-localizations.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCurrencyLocalizationsAsync(final ApiCallback<CurrencyLocalizationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrencyLocalizationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CurrencyLocalizationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCurrencyExchangeRates
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCurrencyExchangeRatesCall(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCurrencyExchangeRate;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}/exchangerates"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCurrencyExchangeRatesValidateBeforeCall(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateCurrencyExchangeRates(Async)");
        }
        

        okhttp3.Call localVarCall = updateCurrencyExchangeRatesCall(currencyCode, catalogAdminsCurrencyExchangeRate, _callback);
        return localVarCall;

    }

    /**
     * Update currency exchange rates
     * Update multiple exchange rates for a specified currency-code.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateCurrencyExchangeRates(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate) throws ApiException {
        updateCurrencyExchangeRatesWithHttpInfo(currencyCode, catalogAdminsCurrencyExchangeRate);
    }

    /**
     * Update currency exchange rates
     * Update multiple exchange rates for a specified currency-code.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCurrencyExchangeRatesWithHttpInfo(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate) throws ApiException {
        okhttp3.Call localVarCall = updateCurrencyExchangeRatesValidateBeforeCall(currencyCode, catalogAdminsCurrencyExchangeRate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update currency exchange rates (asynchronously)
     * Update multiple exchange rates for a specified currency-code.
     * @param currencyCode Currency code (required)
     * @param catalogAdminsCurrencyExchangeRate Exchange rates for the currency (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCurrencyExchangeRatesAsync(String currencyCode, List<CatalogAdminsCurrencyExchangeRate> catalogAdminsCurrencyExchangeRate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCurrencyExchangeRatesValidateBeforeCall(currencyCode, catalogAdminsCurrencyExchangeRate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCurrencyLocalization
     * @param currencyCode Currency code. (required)
     * @param currencyLocalization Properties of the currency-localization to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCurrencyLocalizationCall(String currencyCode, CurrencyLocalization currencyLocalization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = currencyLocalization;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/currency/{currencyCode}"
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCurrencyLocalizationValidateBeforeCall(String currencyCode, CurrencyLocalization currencyLocalization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateCurrencyLocalization(Async)");
        }
        

        okhttp3.Call localVarCall = updateCurrencyLocalizationCall(currencyCode, currencyLocalization, _callback);
        return localVarCall;

    }

    /**
     * Update currency localization
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code. (required)
     * @param currencyLocalization Properties of the currency-localization to update. (optional)
     * @return CurrencyLocalization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CurrencyLocalization updateCurrencyLocalization(String currencyCode, CurrencyLocalization currencyLocalization) throws ApiException {
        ApiResponse<CurrencyLocalization> localVarResp = updateCurrencyLocalizationWithHttpInfo(currencyCode, currencyLocalization);
        return localVarResp.getData();
    }

    /**
     * Update currency localization
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code. (required)
     * @param currencyLocalization Properties of the currency-localization to update. (optional)
     * @return ApiResponse&lt;CurrencyLocalization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrencyLocalization> updateCurrencyLocalizationWithHttpInfo(String currencyCode, CurrencyLocalization currencyLocalization) throws ApiException {
        okhttp3.Call localVarCall = updateCurrencyLocalizationValidateBeforeCall(currencyCode, currencyLocalization, null);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update currency localization (asynchronously)
     * Updates the details of a currency-localization.
     * @param currencyCode Currency code. (required)
     * @param currencyLocalization Properties of the currency-localization to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCurrencyLocalizationAsync(String currencyCode, CurrencyLocalization currencyLocalization, final ApiCallback<CurrencyLocalization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCurrencyLocalizationValidateBeforeCall(currencyCode, currencyLocalization, _callback);
        Type localVarReturnType = new TypeToken<CurrencyLocalization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CurrencyApi build() {
            return new CurrencyApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
