/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsDiscount;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsDiscountTarget;
import com.kibocommerce.sdk.catalogadministration.models.DiscountCollection;
import com.kibocommerce.sdk.catalogadministration.models.DiscountLocalizedContent;
import com.kibocommerce.sdk.catalogadministration.models.DiscountTag;
import com.kibocommerce.sdk.catalogadministration.models.DiscountTagCollection;
import com.kibocommerce.sdk.catalogadministration.models.TagCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DiscountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public DiscountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiscountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public DiscountsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public DiscountsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public DiscountsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDiscount
     * @param tagCode  (optional)
     * @param catalogAdminsDiscount Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiscountCall(String tagCode, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsDiscount;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagCode", tagCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiscountValidateBeforeCall(String tagCode, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createDiscountCall(tagCode, catalogAdminsDiscount, _callback);
        return localVarCall;

    }

    /**
     * Create discount
     * Creates a discount.
     * @param tagCode  (optional)
     * @param catalogAdminsDiscount Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type. (optional)
     * @return CatalogAdminsDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsDiscount createDiscount(String tagCode, CatalogAdminsDiscount catalogAdminsDiscount) throws ApiException {
        ApiResponse<CatalogAdminsDiscount> localVarResp = createDiscountWithHttpInfo(tagCode, catalogAdminsDiscount);
        return localVarResp.getData();
    }

    /**
     * Create discount
     * Creates a discount.
     * @param tagCode  (optional)
     * @param catalogAdminsDiscount Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type. (optional)
     * @return ApiResponse&lt;CatalogAdminsDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsDiscount> createDiscountWithHttpInfo(String tagCode, CatalogAdminsDiscount catalogAdminsDiscount) throws ApiException {
        okhttp3.Call localVarCall = createDiscountValidateBeforeCall(tagCode, catalogAdminsDiscount, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create discount (asynchronously)
     * Creates a discount.
     * @param tagCode  (optional)
     * @param catalogAdminsDiscount Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDiscountAsync(String tagCode, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback<CatalogAdminsDiscount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiscountValidateBeforeCall(tagCode, catalogAdminsDiscount, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDiscount
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDiscountCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDiscountValidateBeforeCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling deleteDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDiscountCall(discountId, _callback);
        return localVarCall;

    }

    /**
     * Delete discount
     * Deletes a discount specified by its discount ID.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDiscount(Integer discountId) throws ApiException {
        deleteDiscountWithHttpInfo(discountId);
    }

    /**
     * Delete discount
     * Deletes a discount specified by its discount ID.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDiscountWithHttpInfo(Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = deleteDiscountValidateBeforeCall(discountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete discount (asynchronously)
     * Deletes a discount specified by its discount ID.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDiscountAsync(Integer discountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDiscountValidateBeforeCall(discountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateRandomCoupon
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRandomCouponCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/generate-random-coupon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateRandomCouponValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateRandomCouponCall(_callback);
        return localVarCall;

    }

    /**
     * Generate a random coupon
     * Generates a random code for a coupon.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String generateRandomCoupon() throws ApiException {
        ApiResponse<String> localVarResp = generateRandomCouponWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Generate a random coupon
     * Generates a random code for a coupon.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> generateRandomCouponWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateRandomCouponValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a random coupon (asynchronously)
     * Generates a random code for a coupon.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRandomCouponAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateRandomCouponValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiscount
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiscountValidateBeforeCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling getDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = getDiscountCall(discountId, _callback);
        return localVarCall;

    }

    /**
     * Get discount
     * Retrieves the details of a single discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return CatalogAdminsDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsDiscount getDiscount(Integer discountId) throws ApiException {
        ApiResponse<CatalogAdminsDiscount> localVarResp = getDiscountWithHttpInfo(discountId);
        return localVarResp.getData();
    }

    /**
     * Get discount
     * Retrieves the details of a single discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return ApiResponse&lt;CatalogAdminsDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsDiscount> getDiscountWithHttpInfo(Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = getDiscountValidateBeforeCall(discountId, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get discount (asynchronously)
     * Retrieves the details of a single discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountAsync(Integer discountId, final ApiCallback<CatalogAdminsDiscount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiscountValidateBeforeCall(discountId, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiscountContent
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountContentCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}/content"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiscountContentValidateBeforeCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling getDiscountContent(Async)");
        }
        

        okhttp3.Call localVarCall = getDiscountContentCall(discountId, _callback);
        return localVarCall;

    }

    /**
     * Get discount content
     * Retrieves the localized content specified for the specified discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return DiscountLocalizedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DiscountLocalizedContent getDiscountContent(Integer discountId) throws ApiException {
        ApiResponse<DiscountLocalizedContent> localVarResp = getDiscountContentWithHttpInfo(discountId);
        return localVarResp.getData();
    }

    /**
     * Get discount content
     * Retrieves the localized content specified for the specified discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return ApiResponse&lt;DiscountLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountLocalizedContent> getDiscountContentWithHttpInfo(Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = getDiscountContentValidateBeforeCall(discountId, null);
        Type localVarReturnType = new TypeToken<DiscountLocalizedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get discount content (asynchronously)
     * Retrieves the localized content specified for the specified discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountContentAsync(Integer discountId, final ApiCallback<DiscountLocalizedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiscountContentValidateBeforeCall(discountId, _callback);
        Type localVarReturnType = new TypeToken<DiscountLocalizedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiscountTarget
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountTargetCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}/target"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiscountTargetValidateBeforeCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling getDiscountTarget(Async)");
        }
        

        okhttp3.Call localVarCall = getDiscountTargetCall(discountId, _callback);
        return localVarCall;

    }

    /**
     * Get discount target
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return CatalogAdminsDiscountTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsDiscountTarget getDiscountTarget(Integer discountId) throws ApiException {
        ApiResponse<CatalogAdminsDiscountTarget> localVarResp = getDiscountTargetWithHttpInfo(discountId);
        return localVarResp.getData();
    }

    /**
     * Get discount target
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @return ApiResponse&lt;CatalogAdminsDiscountTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsDiscountTarget> getDiscountTargetWithHttpInfo(Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = getDiscountTargetValidateBeforeCall(discountId, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscountTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get discount target (asynchronously)
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountTargetAsync(Integer discountId, final ApiCallback<CatalogAdminsDiscountTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiscountTargetValidateBeforeCall(discountId, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscountTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDiscounts
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDiscountsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDiscountsCall(startIndex, pageSize, sortBy, filter, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get discounts
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups  (optional)
     * @return DiscountCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DiscountCollection getDiscounts(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups) throws ApiException {
        ApiResponse<DiscountCollection> localVarResp = getDiscountsWithHttpInfo(startIndex, pageSize, sortBy, filter, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get discounts
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups  (optional)
     * @return ApiResponse&lt;DiscountCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountCollection> getDiscountsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getDiscountsValidateBeforeCall(startIndex, pageSize, sortBy, filter, responseGroups, null);
        Type localVarReturnType = new TypeToken<DiscountCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get discounts (asynchronously)
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDiscountsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback<DiscountCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDiscountsValidateBeforeCall(startIndex, pageSize, sortBy, filter, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<DiscountCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTags
     * @param discountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}/tags"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsValidateBeforeCall(Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling getTags(Async)");
        }
        

        okhttp3.Call localVarCall = getTagsCall(discountId, _callback);
        return localVarCall;

    }

    /**
     * Get tags for a discount
     * Retrieves all tags associated to a discount
     * @param discountId  (required)
     * @return TagCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TagCollection getTags(Integer discountId) throws ApiException {
        ApiResponse<TagCollection> localVarResp = getTagsWithHttpInfo(discountId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a discount
     * Retrieves all tags associated to a discount
     * @param discountId  (required)
     * @return ApiResponse&lt;TagCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagCollection> getTagsWithHttpInfo(Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = getTagsValidateBeforeCall(discountId, null);
        Type localVarReturnType = new TypeToken<TagCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a discount (asynchronously)
     * Retrieves all tags associated to a discount
     * @param discountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsAsync(Integer discountId, final ApiCallback<TagCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsValidateBeforeCall(discountId, _callback);
        Type localVarReturnType = new TypeToken<TagCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDiscount
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscount Properties of the discount to update.               Required properties: Content.Name, AmountType, StartDate, and Target.Type.               Any unspecified properties are set to null and boolean variables are set to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountCall(Integer discountId, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsDiscount;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDiscountValidateBeforeCall(Integer discountId, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling updateDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = updateDiscountCall(discountId, catalogAdminsDiscount, _callback);
        return localVarCall;

    }

    /**
     * Update discount
     * Modifies a discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscount Properties of the discount to update.               Required properties: Content.Name, AmountType, StartDate, and Target.Type.               Any unspecified properties are set to null and boolean variables are set to false. (optional)
     * @return CatalogAdminsDiscount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsDiscount updateDiscount(Integer discountId, CatalogAdminsDiscount catalogAdminsDiscount) throws ApiException {
        ApiResponse<CatalogAdminsDiscount> localVarResp = updateDiscountWithHttpInfo(discountId, catalogAdminsDiscount);
        return localVarResp.getData();
    }

    /**
     * Update discount
     * Modifies a discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscount Properties of the discount to update.               Required properties: Content.Name, AmountType, StartDate, and Target.Type.               Any unspecified properties are set to null and boolean variables are set to false. (optional)
     * @return ApiResponse&lt;CatalogAdminsDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsDiscount> updateDiscountWithHttpInfo(Integer discountId, CatalogAdminsDiscount catalogAdminsDiscount) throws ApiException {
        okhttp3.Call localVarCall = updateDiscountValidateBeforeCall(discountId, catalogAdminsDiscount, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update discount (asynchronously)
     * Modifies a discount.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscount Properties of the discount to update.               Required properties: Content.Name, AmountType, StartDate, and Target.Type.               Any unspecified properties are set to null and boolean variables are set to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountAsync(Integer discountId, CatalogAdminsDiscount catalogAdminsDiscount, final ApiCallback<CatalogAdminsDiscount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDiscountValidateBeforeCall(discountId, catalogAdminsDiscount, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDiscountContent
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param discountLocalizedContent New Name and/or LocaleCode. Properties of the content to update. Required property: Name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountContentCall(Integer discountId, DiscountLocalizedContent discountLocalizedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discountLocalizedContent;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}/content"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDiscountContentValidateBeforeCall(Integer discountId, DiscountLocalizedContent discountLocalizedContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling updateDiscountContent(Async)");
        }
        

        okhttp3.Call localVarCall = updateDiscountContentCall(discountId, discountLocalizedContent, _callback);
        return localVarCall;

    }

    /**
     * Update discount content
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param discountLocalizedContent New Name and/or LocaleCode. Properties of the content to update. Required property: Name. (optional)
     * @return DiscountLocalizedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DiscountLocalizedContent updateDiscountContent(Integer discountId, DiscountLocalizedContent discountLocalizedContent) throws ApiException {
        ApiResponse<DiscountLocalizedContent> localVarResp = updateDiscountContentWithHttpInfo(discountId, discountLocalizedContent);
        return localVarResp.getData();
    }

    /**
     * Update discount content
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param discountLocalizedContent New Name and/or LocaleCode. Properties of the content to update. Required property: Name. (optional)
     * @return ApiResponse&lt;DiscountLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountLocalizedContent> updateDiscountContentWithHttpInfo(Integer discountId, DiscountLocalizedContent discountLocalizedContent) throws ApiException {
        okhttp3.Call localVarCall = updateDiscountContentValidateBeforeCall(discountId, discountLocalizedContent, null);
        Type localVarReturnType = new TypeToken<DiscountLocalizedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update discount content (asynchronously)
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param discountLocalizedContent New Name and/or LocaleCode. Properties of the content to update. Required property: Name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountContentAsync(Integer discountId, DiscountLocalizedContent discountLocalizedContent, final ApiCallback<DiscountLocalizedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDiscountContentValidateBeforeCall(discountId, discountLocalizedContent, _callback);
        Type localVarReturnType = new TypeToken<DiscountLocalizedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDiscountTags
     * @param discountTag  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountTagsCall(List<DiscountTag> discountTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discountTag;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDiscountTagsValidateBeforeCall(List<DiscountTag> discountTag, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateDiscountTagsCall(discountTag, _callback);
        return localVarCall;

    }

    /**
     * Update discount tags
     * Modifies tags of the discount. The original tags are overwritten.
     * @param discountTag  (optional)
     * @return DiscountTagCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DiscountTagCollection updateDiscountTags(List<DiscountTag> discountTag) throws ApiException {
        ApiResponse<DiscountTagCollection> localVarResp = updateDiscountTagsWithHttpInfo(discountTag);
        return localVarResp.getData();
    }

    /**
     * Update discount tags
     * Modifies tags of the discount. The original tags are overwritten.
     * @param discountTag  (optional)
     * @return ApiResponse&lt;DiscountTagCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountTagCollection> updateDiscountTagsWithHttpInfo(List<DiscountTag> discountTag) throws ApiException {
        okhttp3.Call localVarCall = updateDiscountTagsValidateBeforeCall(discountTag, null);
        Type localVarReturnType = new TypeToken<DiscountTagCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update discount tags (asynchronously)
     * Modifies tags of the discount. The original tags are overwritten.
     * @param discountTag  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountTagsAsync(List<DiscountTag> discountTag, final ApiCallback<DiscountTagCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDiscountTagsValidateBeforeCall(discountTag, _callback);
        Type localVarReturnType = new TypeToken<DiscountTagCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDiscountTarget
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscountTarget Properties of the discount target to modify.               Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountTargetCall(Integer discountId, CatalogAdminsDiscountTarget catalogAdminsDiscountTarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsDiscountTarget;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/discounts/{discountId}/target"
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDiscountTargetValidateBeforeCall(Integer discountId, CatalogAdminsDiscountTarget catalogAdminsDiscountTarget, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling updateDiscountTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateDiscountTargetCall(discountId, catalogAdminsDiscountTarget, _callback);
        return localVarCall;

    }

    /**
     * Update discount target
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscountTarget Properties of the discount target to modify.               Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false. (optional)
     * @return CatalogAdminsDiscountTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsDiscountTarget updateDiscountTarget(Integer discountId, CatalogAdminsDiscountTarget catalogAdminsDiscountTarget) throws ApiException {
        ApiResponse<CatalogAdminsDiscountTarget> localVarResp = updateDiscountTargetWithHttpInfo(discountId, catalogAdminsDiscountTarget);
        return localVarResp.getData();
    }

    /**
     * Update discount target
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscountTarget Properties of the discount target to modify.               Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false. (optional)
     * @return ApiResponse&lt;CatalogAdminsDiscountTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsDiscountTarget> updateDiscountTargetWithHttpInfo(Integer discountId, CatalogAdminsDiscountTarget catalogAdminsDiscountTarget) throws ApiException {
        okhttp3.Call localVarCall = updateDiscountTargetValidateBeforeCall(discountId, catalogAdminsDiscountTarget, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscountTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update discount target (asynchronously)
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     * @param discountId Unique identifier of the discount. System-supplied and read-only. (required)
     * @param catalogAdminsDiscountTarget Properties of the discount target to modify.               Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDiscountTargetAsync(Integer discountId, CatalogAdminsDiscountTarget catalogAdminsDiscountTarget, final ApiCallback<CatalogAdminsDiscountTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDiscountTargetValidateBeforeCall(discountId, catalogAdminsDiscountTarget, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsDiscountTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public DiscountsApi build() {
            return new DiscountsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
