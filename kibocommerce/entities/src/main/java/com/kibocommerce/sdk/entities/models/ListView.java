/*
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.entities.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.entities.models.ListViewField;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ListView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ListView implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USAGES = "usages";
  @SerializedName(SERIALIZED_NAME_USAGES)
  private List<String> usages = null;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData = null;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_DEFAULT_SORT = "defaultSort";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SORT)
  private String defaultSort;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<ListViewField> fields = null;

  public ListView() {
  }

  public ListView name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the ListView. This must be unique for the EntityList.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the ListView. This must be unique for the EntityList.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ListView usages(List<String> usages) {
    
    this.usages = usages;
    return this;
  }

  public ListView addUsagesItem(String usagesItem) {
    if (this.usages == null) {
      this.usages = new ArrayList<>();
    }
    this.usages.add(usagesItem);
    return this;
  }

   /**
   * Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the view should be used. Mozu uses the \&quot;admin\&quot; usage valued to indicate that a ListView should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.
   * @return usages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the view should be used. Mozu uses the \"admin\" usage valued to indicate that a ListView should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.")

  public List<String> getUsages() {
    return usages;
  }


  public void setUsages(List<String> usages) {
    this.usages = usages;
  }


  public ListView metaData(Object metaData) {
    
    this.metaData = metaData;
    return this;
  }

   /**
   * An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.
   * @return metaData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.")

  public Object getMetaData() {
    return metaData;
  }


  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public ListView security(String security) {
    
    this.security = security;
    return this;
  }

   /**
   * less restrictive than collection/list security. public | admin | owner
   * @return security
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "less restrictive than collection/list security. public | admin | owner")

  public String getSecurity() {
    return security;
  }


  public void setSecurity(String security) {
    this.security = security;
  }


  public ListView filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Indicates a implicitly applied filter to the EntityList for to which the ListView is associated. All queries to the ListView will have this filter applied implicitly.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates a implicitly applied filter to the EntityList for to which the ListView is associated. All queries to the ListView will have this filter applied implicitly.")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ListView defaultSort(String defaultSort) {
    
    this.defaultSort = defaultSort;
    return this;
  }

   /**
   * Indicates a default sort to be applied to the ListView.
   * @return defaultSort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates a default sort to be applied to the ListView.")

  public String getDefaultSort() {
    return defaultSort;
  }


  public void setDefaultSort(String defaultSort) {
    this.defaultSort = defaultSort;
  }


  public ListView fields(List<ListViewField> fields) {
    
    this.fields = fields;
    return this;
  }

  public ListView addFieldsItem(ListViewField fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * The list of ViewFields for this view. ViewFields can be used to filter or transform the underlying Entity to provide an optimized format for applications which query the ListView.  If no ViewFields are specified, entities will be returned for the View with no transform applied.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of ViewFields for this view. ViewFields can be used to filter or transform the underlying Entity to provide an optimized format for applications which query the ListView.  If no ViewFields are specified, entities will be returned for the View with no transform applied.")

  public List<ListViewField> getFields() {
    return fields;
  }


  public void setFields(List<ListViewField> fields) {
    this.fields = fields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListView listView = (ListView) o;
    return Objects.equals(this.name, listView.name) &&
        Objects.equals(this.usages, listView.usages) &&
        Objects.equals(this.metaData, listView.metaData) &&
        Objects.equals(this.security, listView.security) &&
        Objects.equals(this.filter, listView.filter) &&
        Objects.equals(this.defaultSort, listView.defaultSort) &&
        Objects.equals(this.fields, listView.fields);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, usages, metaData, security, filter, defaultSort, fields);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListView {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usages: ").append(toIndentedString(usages)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    defaultSort: ").append(toIndentedString(defaultSort)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("usages");
    openapiFields.add("metaData");
    openapiFields.add("security");
    openapiFields.add("filter");
    openapiFields.add("defaultSort");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListView.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListView is not found in the empty JSON string", ListView.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ListView.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListView` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("usages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usages` to be an array in the JSON string but got `%s`", jsonObj.get("usages").toString()));
      }
      if ((jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) && !jsonObj.get("security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("defaultSort") != null && !jsonObj.get("defaultSort").isJsonNull()) && !jsonObj.get("defaultSort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSort").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            ListViewField.validateJsonObject(jsonArrayfields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListView.class));

       return (TypeAdapter<T>) new TypeAdapter<ListView>() {
           @Override
           public void write(JsonWriter out, ListView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListView
  * @throws IOException if the JSON string is invalid with respect to ListView
  */
  public static ListView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListView.class);
  }

 /**
  * Convert an instance of ListView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

