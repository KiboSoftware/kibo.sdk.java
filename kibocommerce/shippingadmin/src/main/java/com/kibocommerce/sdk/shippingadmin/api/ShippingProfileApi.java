/*
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingadmin.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.shippingadmin.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.shippingadmin.models.HandlingFeeRule;
import com.kibocommerce.sdk.shippingadmin.models.HandlingFeeRuleCollection;
import com.kibocommerce.sdk.shippingadmin.models.ShippingAdminHttpResponseMessage;
import com.kibocommerce.sdk.shippingadmin.models.ShippingInclusionRule;
import com.kibocommerce.sdk.shippingadmin.models.ShippingInclusionRuleCollection;
import com.kibocommerce.sdk.shippingadmin.models.ShippingProfileCollection;
import com.kibocommerce.sdk.shippingadmin.models.ShippingStates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShippingProfileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ShippingProfileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShippingProfileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ShippingProfileApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ShippingProfileApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ShippingProfileApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrderHandlingFeeRule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderHandlingFeeRuleCall(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = handlingFeeRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderHandlingFeeRuleValidateBeforeCall(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling createOrderHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderHandlingFeeRuleCall(profilecode, handlingFeeRule, _callback);
        return localVarCall;

    }

    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule createOrderHandlingFeeRule(String profilecode, HandlingFeeRule handlingFeeRule) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = createOrderHandlingFeeRuleWithHttpInfo(profilecode, handlingFeeRule);
        return localVarResp.getData();
    }

    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> createOrderHandlingFeeRuleWithHttpInfo(String profilecode, HandlingFeeRule handlingFeeRule) throws ApiException {
        okhttp3.Call localVarCall = createOrderHandlingFeeRuleValidateBeforeCall(profilecode, handlingFeeRule, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order Handling Fee Rule (asynchronously)
     * Create Order Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderHandlingFeeRuleAsync(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderHandlingFeeRuleValidateBeforeCall(profilecode, handlingFeeRule, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProductHandlingFeeRule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductHandlingFeeRuleCall(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = handlingFeeRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductHandlingFeeRuleValidateBeforeCall(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling createProductHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = createProductHandlingFeeRuleCall(profilecode, handlingFeeRule, _callback);
        return localVarCall;

    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule createProductHandlingFeeRule(String profilecode, HandlingFeeRule handlingFeeRule) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = createProductHandlingFeeRuleWithHttpInfo(profilecode, handlingFeeRule);
        return localVarResp.getData();
    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> createProductHandlingFeeRuleWithHttpInfo(String profilecode, HandlingFeeRule handlingFeeRule) throws ApiException {
        okhttp3.Call localVarCall = createProductHandlingFeeRuleValidateBeforeCall(profilecode, handlingFeeRule, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Product Handling Fee Rule (asynchronously)
     * Create Product Handling Fee Rule
     * @param profilecode  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductHandlingFeeRuleAsync(String profilecode, HandlingFeeRule handlingFeeRule, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductHandlingFeeRuleValidateBeforeCall(profilecode, handlingFeeRule, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createShippingInclusionRule
     * @param profilecode  (required)
     * @param shippingInclusionRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShippingInclusionRuleCall(String profilecode, ShippingInclusionRule shippingInclusionRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shippingInclusionRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShippingInclusionRuleValidateBeforeCall(String profilecode, ShippingInclusionRule shippingInclusionRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling createShippingInclusionRule(Async)");
        }
        

        okhttp3.Call localVarCall = createShippingInclusionRuleCall(profilecode, shippingInclusionRule, _callback);
        return localVarCall;

    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param shippingInclusionRule  (optional)
     * @return ShippingInclusionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingInclusionRule createShippingInclusionRule(String profilecode, ShippingInclusionRule shippingInclusionRule) throws ApiException {
        ApiResponse<ShippingInclusionRule> localVarResp = createShippingInclusionRuleWithHttpInfo(profilecode, shippingInclusionRule);
        return localVarResp.getData();
    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param shippingInclusionRule  (optional)
     * @return ApiResponse&lt;ShippingInclusionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingInclusionRule> createShippingInclusionRuleWithHttpInfo(String profilecode, ShippingInclusionRule shippingInclusionRule) throws ApiException {
        okhttp3.Call localVarCall = createShippingInclusionRuleValidateBeforeCall(profilecode, shippingInclusionRule, null);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Shipping Inclusion Rule (asynchronously)
     * Create Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param shippingInclusionRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createShippingInclusionRuleAsync(String profilecode, ShippingInclusionRule shippingInclusionRule, final ApiCallback<ShippingInclusionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShippingInclusionRuleValidateBeforeCall(profilecode, shippingInclusionRule, _callback);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderHandlingFeeRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderHandlingFeeRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling deleteOrderHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrderHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderHandlingFeeRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ShippingAdminHttpResponseMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingAdminHttpResponseMessage deleteOrderHandlingFeeRule(String profilecode, String id) throws ApiException {
        ApiResponse<ShippingAdminHttpResponseMessage> localVarResp = deleteOrderHandlingFeeRuleWithHttpInfo(profilecode, id);
        return localVarResp.getData();
    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ShippingAdminHttpResponseMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingAdminHttpResponseMessage> deleteOrderHandlingFeeRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, null);
        Type localVarReturnType = new TypeToken<ShippingAdminHttpResponseMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Order Handling Fee Rule (asynchronously)
     * Delete Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderHandlingFeeRuleAsync(String profilecode, String id, final ApiCallback<ShippingAdminHttpResponseMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, _callback);
        Type localVarReturnType = new TypeToken<ShippingAdminHttpResponseMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductHandlingFeeRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductHandlingFeeRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling deleteProductHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProductHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductHandlingFeeRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProductHandlingFeeRule(String profilecode, String id) throws ApiException {
        deleteProductHandlingFeeRuleWithHttpInfo(profilecode, id);
    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductHandlingFeeRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteProductHandlingFeeRuleValidateBeforeCall(profilecode, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Product Handling Fee Rule (asynchronously)
     * Delete Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductHandlingFeeRuleAsync(String profilecode, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductHandlingFeeRuleValidateBeforeCall(profilecode, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteShippingInclusionRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShippingInclusionRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShippingInclusionRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling deleteShippingInclusionRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteShippingInclusionRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteShippingInclusionRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteShippingInclusionRule(String profilecode, String id) throws ApiException {
        deleteShippingInclusionRuleWithHttpInfo(profilecode, id);
    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteShippingInclusionRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteShippingInclusionRuleValidateBeforeCall(profilecode, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Shipping Inclusion Rule (asynchronously)
     * Delete Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShippingInclusionRuleAsync(String profilecode, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShippingInclusionRuleValidateBeforeCall(profilecode, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHandlingFeeRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderHandlingFeeRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getOrderHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrderHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderHandlingFeeRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule getOrderHandlingFeeRule(String profilecode, String id) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = getOrderHandlingFeeRuleWithHttpInfo(profilecode, id);
        return localVarResp.getData();
    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> getOrderHandlingFeeRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Handling Fee Rule (asynchronously)
     * Get Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHandlingFeeRuleAsync(String profilecode, String id, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderHandlingFeeRules
     * @param profilecode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHandlingFeeRulesCall(String profilecode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderHandlingFeeRulesValidateBeforeCall(String profilecode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getOrderHandlingFeeRules(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderHandlingFeeRulesCall(profilecode, _callback);
        return localVarCall;

    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     * @param profilecode  (required)
     * @return HandlingFeeRuleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRuleCollection getOrderHandlingFeeRules(String profilecode) throws ApiException {
        ApiResponse<HandlingFeeRuleCollection> localVarResp = getOrderHandlingFeeRulesWithHttpInfo(profilecode);
        return localVarResp.getData();
    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     * @param profilecode  (required)
     * @return ApiResponse&lt;HandlingFeeRuleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRuleCollection> getOrderHandlingFeeRulesWithHttpInfo(String profilecode) throws ApiException {
        okhttp3.Call localVarCall = getOrderHandlingFeeRulesValidateBeforeCall(profilecode, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRuleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Handling Fee Rules (asynchronously)
     * Get Order Handling Fee Rules
     * @param profilecode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderHandlingFeeRulesAsync(String profilecode, final ApiCallback<HandlingFeeRuleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderHandlingFeeRulesValidateBeforeCall(profilecode, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRuleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductHandlingFeeRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductHandlingFeeRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getProductHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = getProductHandlingFeeRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule getProductHandlingFeeRule(String profilecode, String id) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = getProductHandlingFeeRuleWithHttpInfo(profilecode, id);
        return localVarResp.getData();
    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> getProductHandlingFeeRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = getProductHandlingFeeRuleValidateBeforeCall(profilecode, id, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Handling Fee Rule (asynchronously)
     * Get Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductHandlingFeeRuleAsync(String profilecode, String id, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductHandlingFeeRuleValidateBeforeCall(profilecode, id, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductHandlingFeeRules
     * @param profilecode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductHandlingFeeRulesCall(String profilecode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductHandlingFeeRulesValidateBeforeCall(String profilecode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getProductHandlingFeeRules(Async)");
        }
        

        okhttp3.Call localVarCall = getProductHandlingFeeRulesCall(profilecode, _callback);
        return localVarCall;

    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     * @param profilecode  (required)
     * @return HandlingFeeRuleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRuleCollection getProductHandlingFeeRules(String profilecode) throws ApiException {
        ApiResponse<HandlingFeeRuleCollection> localVarResp = getProductHandlingFeeRulesWithHttpInfo(profilecode);
        return localVarResp.getData();
    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     * @param profilecode  (required)
     * @return ApiResponse&lt;HandlingFeeRuleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRuleCollection> getProductHandlingFeeRulesWithHttpInfo(String profilecode) throws ApiException {
        okhttp3.Call localVarCall = getProductHandlingFeeRulesValidateBeforeCall(profilecode, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRuleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Handling Fee Rules (asynchronously)
     * Get Product Handling Fee Rules
     * @param profilecode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductHandlingFeeRulesAsync(String profilecode, final ApiCallback<HandlingFeeRuleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductHandlingFeeRulesValidateBeforeCall(profilecode, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRuleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProfiles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfilesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProfilesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     * @return ShippingProfileCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingProfileCollection getProfiles() throws ApiException {
        ApiResponse<ShippingProfileCollection> localVarResp = getProfilesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     * @return ApiResponse&lt;ShippingProfileCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingProfileCollection> getProfilesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProfilesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ShippingProfileCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog (asynchronously)
     * Get Shipping Profiles for the Tenant/Master Catalog
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProfilesAsync(final ApiCallback<ShippingProfileCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfilesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ShippingProfileCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShippingInclusionRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShippingInclusionRuleCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShippingInclusionRuleValidateBeforeCall(String profilecode, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getShippingInclusionRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getShippingInclusionRule(Async)");
        }
        

        okhttp3.Call localVarCall = getShippingInclusionRuleCall(profilecode, id, _callback);
        return localVarCall;

    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ShippingInclusionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingInclusionRule getShippingInclusionRule(String profilecode, String id) throws ApiException {
        ApiResponse<ShippingInclusionRule> localVarResp = getShippingInclusionRuleWithHttpInfo(profilecode, id);
        return localVarResp.getData();
    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ShippingInclusionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingInclusionRule> getShippingInclusionRuleWithHttpInfo(String profilecode, String id) throws ApiException {
        okhttp3.Call localVarCall = getShippingInclusionRuleValidateBeforeCall(profilecode, id, null);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipping Inclusion Rule (asynchronously)
     * Get Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShippingInclusionRuleAsync(String profilecode, String id, final ApiCallback<ShippingInclusionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShippingInclusionRuleValidateBeforeCall(profilecode, id, _callback);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShippingInclusionRules
     * @param profilecode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShippingInclusionRulesCall(String profilecode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShippingInclusionRulesValidateBeforeCall(String profilecode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling getShippingInclusionRules(Async)");
        }
        

        okhttp3.Call localVarCall = getShippingInclusionRulesCall(profilecode, _callback);
        return localVarCall;

    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     * @param profilecode  (required)
     * @return ShippingInclusionRuleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingInclusionRuleCollection getShippingInclusionRules(String profilecode) throws ApiException {
        ApiResponse<ShippingInclusionRuleCollection> localVarResp = getShippingInclusionRulesWithHttpInfo(profilecode);
        return localVarResp.getData();
    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     * @param profilecode  (required)
     * @return ApiResponse&lt;ShippingInclusionRuleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingInclusionRuleCollection> getShippingInclusionRulesWithHttpInfo(String profilecode) throws ApiException {
        okhttp3.Call localVarCall = getShippingInclusionRulesValidateBeforeCall(profilecode, null);
        Type localVarReturnType = new TypeToken<ShippingInclusionRuleCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipping Inclusion Rules (asynchronously)
     * Get Shipping Inclusion Rules
     * @param profilecode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShippingInclusionRulesAsync(String profilecode, final ApiCallback<ShippingInclusionRuleCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShippingInclusionRulesValidateBeforeCall(profilecode, _callback);
        Type localVarReturnType = new TypeToken<ShippingInclusionRuleCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStates
     * @param profileCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatesCall(String profileCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/shippingstates"
            .replaceAll("\\{" + "profileCode" + "\\}", localVarApiClient.escapeString(profileCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatesValidateBeforeCall(String profileCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profileCode' is set
        if (profileCode == null) {
            throw new ApiException("Missing the required parameter 'profileCode' when calling getStates(Async)");
        }
        

        okhttp3.Call localVarCall = getStatesCall(profileCode, _callback);
        return localVarCall;

    }

    /**
     * Get Configured Shipping States
     * 
     * @param profileCode  (required)
     * @return List&lt;ShippingStates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingStates> getStates(String profileCode) throws ApiException {
        ApiResponse<List<ShippingStates>> localVarResp = getStatesWithHttpInfo(profileCode);
        return localVarResp.getData();
    }

    /**
     * Get Configured Shipping States
     * 
     * @param profileCode  (required)
     * @return ApiResponse&lt;List&lt;ShippingStates&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingStates>> getStatesWithHttpInfo(String profileCode) throws ApiException {
        okhttp3.Call localVarCall = getStatesValidateBeforeCall(profileCode, null);
        Type localVarReturnType = new TypeToken<List<ShippingStates>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Configured Shipping States (asynchronously)
     * 
     * @param profileCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatesAsync(String profileCode, final ApiCallback<List<ShippingStates>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatesValidateBeforeCall(profileCode, _callback);
        Type localVarReturnType = new TypeToken<List<ShippingStates>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderHandlingFeeRuleCall(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = handlingFeeRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderHandlingFeeRuleValidateBeforeCall(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling updateOrderHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrderHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderHandlingFeeRuleCall(profilecode, id, handlingFeeRule, _callback);
        return localVarCall;

    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule updateOrderHandlingFeeRule(String profilecode, String id, HandlingFeeRule handlingFeeRule) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = updateOrderHandlingFeeRuleWithHttpInfo(profilecode, id, handlingFeeRule);
        return localVarResp.getData();
    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> updateOrderHandlingFeeRuleWithHttpInfo(String profilecode, String id, HandlingFeeRule handlingFeeRule) throws ApiException {
        okhttp3.Call localVarCall = updateOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, handlingFeeRule, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Handling Fee Rule (asynchronously)
     * Update Order Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderHandlingFeeRuleAsync(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderHandlingFeeRuleValidateBeforeCall(profilecode, id, handlingFeeRule, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductHandlingFeeRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductHandlingFeeRuleCall(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = handlingFeeRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductHandlingFeeRuleValidateBeforeCall(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling updateProductHandlingFeeRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProductHandlingFeeRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductHandlingFeeRuleCall(profilecode, id, handlingFeeRule, _callback);
        return localVarCall;

    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @return HandlingFeeRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HandlingFeeRule updateProductHandlingFeeRule(String profilecode, String id, HandlingFeeRule handlingFeeRule) throws ApiException {
        ApiResponse<HandlingFeeRule> localVarResp = updateProductHandlingFeeRuleWithHttpInfo(profilecode, id, handlingFeeRule);
        return localVarResp.getData();
    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @return ApiResponse&lt;HandlingFeeRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HandlingFeeRule> updateProductHandlingFeeRuleWithHttpInfo(String profilecode, String id, HandlingFeeRule handlingFeeRule) throws ApiException {
        okhttp3.Call localVarCall = updateProductHandlingFeeRuleValidateBeforeCall(profilecode, id, handlingFeeRule, null);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Product Handling Fee Rule (asynchronously)
     * Update Product Handling Fee Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param handlingFeeRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductHandlingFeeRuleAsync(String profilecode, String id, HandlingFeeRule handlingFeeRule, final ApiCallback<HandlingFeeRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductHandlingFeeRuleValidateBeforeCall(profilecode, id, handlingFeeRule, _callback);
        Type localVarReturnType = new TypeToken<HandlingFeeRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShippingInclusionRule
     * @param profilecode  (required)
     * @param id  (required)
     * @param shippingInclusionRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShippingInclusionRuleCall(String profilecode, String id, ShippingInclusionRule shippingInclusionRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shippingInclusionRule;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShippingInclusionRuleValidateBeforeCall(String profilecode, String id, ShippingInclusionRule shippingInclusionRule, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling updateShippingInclusionRule(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateShippingInclusionRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateShippingInclusionRuleCall(profilecode, id, shippingInclusionRule, _callback);
        return localVarCall;

    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param shippingInclusionRule  (optional)
     * @return ShippingInclusionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShippingInclusionRule updateShippingInclusionRule(String profilecode, String id, ShippingInclusionRule shippingInclusionRule) throws ApiException {
        ApiResponse<ShippingInclusionRule> localVarResp = updateShippingInclusionRuleWithHttpInfo(profilecode, id, shippingInclusionRule);
        return localVarResp.getData();
    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param shippingInclusionRule  (optional)
     * @return ApiResponse&lt;ShippingInclusionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShippingInclusionRule> updateShippingInclusionRuleWithHttpInfo(String profilecode, String id, ShippingInclusionRule shippingInclusionRule) throws ApiException {
        okhttp3.Call localVarCall = updateShippingInclusionRuleValidateBeforeCall(profilecode, id, shippingInclusionRule, null);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Shipping Inclusion Rule (asynchronously)
     * Update Shipping Inclusion Rule
     * @param profilecode  (required)
     * @param id  (required)
     * @param shippingInclusionRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShippingInclusionRuleAsync(String profilecode, String id, ShippingInclusionRule shippingInclusionRule, final ApiCallback<ShippingInclusionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShippingInclusionRuleValidateBeforeCall(profilecode, id, shippingInclusionRule, _callback);
        Type localVarReturnType = new TypeToken<ShippingInclusionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStates
     * @param profilecode  (required)
     * @param shippingStates  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatesCall(String profilecode, List<ShippingStates> shippingStates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shippingStates;

        // create path and map variables
        String localVarPath = "/commerce/shipping/admin/profiles/{profilecode}/shippingstates"
            .replaceAll("\\{" + "profilecode" + "\\}", localVarApiClient.escapeString(profilecode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatesValidateBeforeCall(String profilecode, List<ShippingStates> shippingStates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'profilecode' is set
        if (profilecode == null) {
            throw new ApiException("Missing the required parameter 'profilecode' when calling updateStates(Async)");
        }
        

        okhttp3.Call localVarCall = updateStatesCall(profilecode, shippingStates, _callback);
        return localVarCall;

    }

    /**
     * Update States
     * Update States
     * @param profilecode  (required)
     * @param shippingStates  (optional)
     * @return List&lt;ShippingStates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ShippingStates> updateStates(String profilecode, List<ShippingStates> shippingStates) throws ApiException {
        ApiResponse<List<ShippingStates>> localVarResp = updateStatesWithHttpInfo(profilecode, shippingStates);
        return localVarResp.getData();
    }

    /**
     * Update States
     * Update States
     * @param profilecode  (required)
     * @param shippingStates  (optional)
     * @return ApiResponse&lt;List&lt;ShippingStates&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ShippingStates>> updateStatesWithHttpInfo(String profilecode, List<ShippingStates> shippingStates) throws ApiException {
        okhttp3.Call localVarCall = updateStatesValidateBeforeCall(profilecode, shippingStates, null);
        Type localVarReturnType = new TypeToken<List<ShippingStates>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update States (asynchronously)
     * Update States
     * @param profilecode  (required)
     * @param shippingStates  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatesAsync(String profilecode, List<ShippingStates> shippingStates, final ApiCallback<List<ShippingStates>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatesValidateBeforeCall(profilecode, shippingStates, _callback);
        Type localVarReturnType = new TypeToken<List<ShippingStates>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ShippingProfileApi build() {
            return new ShippingProfileApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
