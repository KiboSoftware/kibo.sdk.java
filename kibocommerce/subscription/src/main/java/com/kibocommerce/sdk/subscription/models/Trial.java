/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeProductOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Trial
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Trial implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_SUBSTITUTE_PRODUCT_CODE = "substituteProductCode";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_PRODUCT_CODE)
  private String substituteProductCode;

  public static final String SERIALIZED_NAME_SUBSTITUTE_PRODUCT_QUANTITY = "substituteProductQuantity";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_PRODUCT_QUANTITY)
  private Integer substituteProductQuantity;

  public static final String SERIALIZED_NAME_SUBSTITUTE_VARIATION_PRODUCT_CODE = "substituteVariationProductCode";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_VARIATION_PRODUCT_CODE)
  private String substituteVariationProductCode;

  public static final String SERIALIZED_NAME_SUBSTITUTE_PRODUCT_OPTIONS = "substituteProductOptions";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_PRODUCT_OPTIONS)
  private List<CommerceRuntimeProductOption> substituteProductOptions = null;

  public Trial() {
  }

  public Trial enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates if the trial is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the trial is enabled")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Trial duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Trial duration in days
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trial duration in days")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public Trial substituteProductCode(String substituteProductCode) {
    
    this.substituteProductCode = substituteProductCode;
    return this;
  }

   /**
   * Product code to substitute once the trial period is finished.
   * @return substituteProductCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product code to substitute once the trial period is finished.")

  public String getSubstituteProductCode() {
    return substituteProductCode;
  }


  public void setSubstituteProductCode(String substituteProductCode) {
    this.substituteProductCode = substituteProductCode;
  }


  public Trial substituteProductQuantity(Integer substituteProductQuantity) {
    
    this.substituteProductQuantity = substituteProductQuantity;
    return this;
  }

   /**
   * Product quantity to substitute once the trail period is finished.
   * @return substituteProductQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product quantity to substitute once the trail period is finished.")

  public Integer getSubstituteProductQuantity() {
    return substituteProductQuantity;
  }


  public void setSubstituteProductQuantity(Integer substituteProductQuantity) {
    this.substituteProductQuantity = substituteProductQuantity;
  }


  public Trial substituteVariationProductCode(String substituteVariationProductCode) {
    
    this.substituteVariationProductCode = substituteVariationProductCode;
    return this;
  }

   /**
   * Variation product code to substitute once the trail period is finished.
   * @return substituteVariationProductCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variation product code to substitute once the trail period is finished.")

  public String getSubstituteVariationProductCode() {
    return substituteVariationProductCode;
  }


  public void setSubstituteVariationProductCode(String substituteVariationProductCode) {
    this.substituteVariationProductCode = substituteVariationProductCode;
  }


  public Trial substituteProductOptions(List<CommerceRuntimeProductOption> substituteProductOptions) {
    
    this.substituteProductOptions = substituteProductOptions;
    return this;
  }

  public Trial addSubstituteProductOptionsItem(CommerceRuntimeProductOption substituteProductOptionsItem) {
    if (this.substituteProductOptions == null) {
      this.substituteProductOptions = new ArrayList<>();
    }
    this.substituteProductOptions.add(substituteProductOptionsItem);
    return this;
  }

   /**
   * Configurable Options to substitute once the trial period is finished.
   * @return substituteProductOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Configurable Options to substitute once the trial period is finished.")

  public List<CommerceRuntimeProductOption> getSubstituteProductOptions() {
    return substituteProductOptions;
  }


  public void setSubstituteProductOptions(List<CommerceRuntimeProductOption> substituteProductOptions) {
    this.substituteProductOptions = substituteProductOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trial trial = (Trial) o;
    return Objects.equals(this.enabled, trial.enabled) &&
        Objects.equals(this.duration, trial.duration) &&
        Objects.equals(this.substituteProductCode, trial.substituteProductCode) &&
        Objects.equals(this.substituteProductQuantity, trial.substituteProductQuantity) &&
        Objects.equals(this.substituteVariationProductCode, trial.substituteVariationProductCode) &&
        Objects.equals(this.substituteProductOptions, trial.substituteProductOptions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, duration, substituteProductCode, substituteProductQuantity, substituteVariationProductCode, substituteProductOptions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trial {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    substituteProductCode: ").append(toIndentedString(substituteProductCode)).append("\n");
    sb.append("    substituteProductQuantity: ").append(toIndentedString(substituteProductQuantity)).append("\n");
    sb.append("    substituteVariationProductCode: ").append(toIndentedString(substituteVariationProductCode)).append("\n");
    sb.append("    substituteProductOptions: ").append(toIndentedString(substituteProductOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("duration");
    openapiFields.add("substituteProductCode");
    openapiFields.add("substituteProductQuantity");
    openapiFields.add("substituteVariationProductCode");
    openapiFields.add("substituteProductOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Trial
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Trial.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trial is not found in the empty JSON string", Trial.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Trial.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trial` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("substituteProductCode") != null && !jsonObj.get("substituteProductCode").isJsonNull()) && !jsonObj.get("substituteProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substituteProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substituteProductCode").toString()));
      }
      if ((jsonObj.get("substituteVariationProductCode") != null && !jsonObj.get("substituteVariationProductCode").isJsonNull()) && !jsonObj.get("substituteVariationProductCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substituteVariationProductCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substituteVariationProductCode").toString()));
      }
      if (jsonObj.get("substituteProductOptions") != null && !jsonObj.get("substituteProductOptions").isJsonNull()) {
        JsonArray jsonArraysubstituteProductOptions = jsonObj.getAsJsonArray("substituteProductOptions");
        if (jsonArraysubstituteProductOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("substituteProductOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `substituteProductOptions` to be an array in the JSON string but got `%s`", jsonObj.get("substituteProductOptions").toString()));
          }

          // validate the optional field `substituteProductOptions` (array)
          for (int i = 0; i < jsonArraysubstituteProductOptions.size(); i++) {
            CommerceRuntimeProductOption.validateJsonObject(jsonArraysubstituteProductOptions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trial.class));

       return (TypeAdapter<T>) new TypeAdapter<Trial>() {
           @Override
           public void write(JsonWriter out, Trial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trial read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Trial given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Trial
  * @throws IOException if the JSON string is invalid with respect to Trial
  */
  public static Trial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trial.class);
  }

 /**
  * Convert an instance of Trial to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

