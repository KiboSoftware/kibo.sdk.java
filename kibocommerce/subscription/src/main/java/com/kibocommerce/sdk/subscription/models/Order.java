/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.subscription.models.Adjustment;
import com.kibocommerce.sdk.subscription.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.subscription.models.AlternateContact;
import com.kibocommerce.sdk.subscription.models.BillingInfo;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeChangeMessage;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeCredit;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimePackage;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeShipment;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeShopperNotes;
import com.kibocommerce.sdk.subscription.models.CommerceRuntimeThresholdMessage;
import com.kibocommerce.sdk.subscription.models.DigitalPackage;
import com.kibocommerce.sdk.subscription.models.ExtendedProperty;
import com.kibocommerce.sdk.subscription.models.FulfillmentInfo;
import com.kibocommerce.sdk.subscription.models.InvalidCoupon;
import com.kibocommerce.sdk.subscription.models.OrderNote;
import com.kibocommerce.sdk.subscription.models.OrderValidationResult;
import com.kibocommerce.sdk.subscription.models.Payment;
import com.kibocommerce.sdk.subscription.models.Pickup;
import com.kibocommerce.sdk.subscription.models.Refund;
import com.kibocommerce.sdk.subscription.models.ShippingDiscount;
import com.kibocommerce.sdk.subscription.models.SuggestedDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Order form.
 */
@ApiModel(description = "Order form.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Order implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private Integer orderNumber;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_PARENT_ORDER_ID = "parentOrderId";
  @SerializedName(SERIALIZED_NAME_PARENT_ORDER_ID)
  private String parentOrderId;

  public static final String SERIALIZED_NAME_PARENT_ORDER_NUMBER = "parentOrderNumber";
  @SerializedName(SERIALIZED_NAME_PARENT_ORDER_NUMBER)
  private Integer parentOrderNumber;

  public static final String SERIALIZED_NAME_PARENT_CHECKOUT_ID = "parentCheckoutId";
  @SerializedName(SERIALIZED_NAME_PARENT_CHECKOUT_ID)
  private String parentCheckoutId;

  public static final String SERIALIZED_NAME_PARENT_CHECKOUT_NUMBER = "parentCheckoutNumber";
  @SerializedName(SERIALIZED_NAME_PARENT_CHECKOUT_NUMBER)
  private Integer parentCheckoutNumber;

  public static final String SERIALIZED_NAME_PARTIAL_ORDER_NUMBER = "partialOrderNumber";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ORDER_NUMBER)
  private Integer partialOrderNumber;

  public static final String SERIALIZED_NAME_PARTIAL_ORDER_COUNT = "partialOrderCount";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ORDER_COUNT)
  private Integer partialOrderCount;

  public static final String SERIALIZED_NAME_IS_PARTIAL_ORDER = "isPartialOrder";
  @SerializedName(SERIALIZED_NAME_IS_PARTIAL_ORDER)
  private Boolean isPartialOrder;

  public static final String SERIALIZED_NAME_PARENT_RETURN_ID = "parentReturnId";
  @SerializedName(SERIALIZED_NAME_PARENT_RETURN_ID)
  private String parentReturnId;

  public static final String SERIALIZED_NAME_PARENT_RETURN_NUMBER = "parentReturnNumber";
  @SerializedName(SERIALIZED_NAME_PARENT_RETURN_NUMBER)
  private Integer parentReturnNumber;

  public static final String SERIALIZED_NAME_ORIGINAL_CART_ID = "originalCartId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CART_ID)
  private String originalCartId;

  public static final String SERIALIZED_NAME_ORIGINAL_QUOTE_ID = "originalQuoteId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUOTE_ID)
  private String originalQuoteId;

  public static final String SERIALIZED_NAME_ORIGINAL_QUOTE_NUMBER = "originalQuoteNumber";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUOTE_NUMBER)
  private Integer originalQuoteNumber;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_AVAILABLE_ACTIONS = "availableActions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACTIONS)
  private List<String> availableActions = null;

  public static final String SERIALIZED_NAME_SHOPPER_NOTES = "shopperNotes";
  @SerializedName(SERIALIZED_NAME_SHOPPER_NOTES)
  private CommerceRuntimeShopperNotes shopperNotes;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID = "customerAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID)
  private Integer customerAccountId;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID = "customerTaxId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID)
  private String customerTaxId;

  public static final String SERIALIZED_NAME_IS_TAX_EXEMPT = "isTaxExempt";
  @SerializedName(SERIALIZED_NAME_IS_TAX_EXEMPT)
  private Boolean isTaxExempt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ALTERNATE_CONTACT = "alternateContact";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_CONTACT)
  private AlternateContact alternateContact;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_SOURCE_DEVICE = "sourceDevice";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEVICE)
  private String sourceDevice;

  public static final String SERIALIZED_NAME_ACCEPTS_MARKETING = "acceptsMarketing";
  @SerializedName(SERIALIZED_NAME_ACCEPTS_MARKETING)
  private Boolean acceptsMarketing;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_RETURN_STATUS = "returnStatus";
  @SerializedName(SERIALIZED_NAME_RETURN_STATUS)
  private String returnStatus;

  public static final String SERIALIZED_NAME_IS_ELIGIBLE_FOR_RETURNS = "isEligibleForReturns";
  @SerializedName(SERIALIZED_NAME_IS_ELIGIBLE_FOR_RETURNS)
  private Boolean isEligibleForReturns;

  public static final String SERIALIZED_NAME_TOTAL_COLLECTED = "totalCollected";
  @SerializedName(SERIALIZED_NAME_TOTAL_COLLECTED)
  private Double totalCollected;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CommerceRuntimeOrderAttribute> attributes = null;

  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  private Adjustment adjustment;

  public static final String SERIALIZED_NAME_SHIPPING_ADJUSTMENT = "shippingAdjustment";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADJUSTMENT)
  private Adjustment shippingAdjustment;

  public static final String SERIALIZED_NAME_HANDLING_ADJUSTMENT = "handlingAdjustment";
  @SerializedName(SERIALIZED_NAME_HANDLING_ADJUSTMENT)
  private Adjustment handlingAdjustment;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNTS = "shippingDiscounts";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNTS)
  private List<ShippingDiscount> shippingDiscounts = null;

  public static final String SERIALIZED_NAME_HANDLING_DISCOUNTS = "handlingDiscounts";
  @SerializedName(SERIALIZED_NAME_HANDLING_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> handlingDiscounts = null;

  public static final String SERIALIZED_NAME_HANDLING_AMOUNT = "handlingAmount";
  @SerializedName(SERIALIZED_NAME_HANDLING_AMOUNT)
  private Double handlingAmount;

  public static final String SERIALIZED_NAME_HANDLING_SUB_TOTAL = "handlingSubTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_SUB_TOTAL)
  private Double handlingSubTotal;

  public static final String SERIALIZED_NAME_HANDLING_TOTAL = "handlingTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TOTAL)
  private Double handlingTotal;

  public static final String SERIALIZED_NAME_DUTY_AMOUNT = "dutyAmount";
  @SerializedName(SERIALIZED_NAME_DUTY_AMOUNT)
  private Double dutyAmount;

  public static final String SERIALIZED_NAME_DUTY_TOTAL = "dutyTotal";
  @SerializedName(SERIALIZED_NAME_DUTY_TOTAL)
  private Double dutyTotal;

  public static final String SERIALIZED_NAME_FULFILLMENT_STATUS = "fulfillmentStatus";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATUS)
  private String fulfillmentStatus;

  public static final String SERIALIZED_NAME_IS_FULFILLABLE = "isFulfillable";
  @SerializedName(SERIALIZED_NAME_IS_FULFILLABLE)
  private Boolean isFulfillable;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private OffsetDateTime submittedDate;

  public static final String SERIALIZED_NAME_SHIPMENT_CREATION_OFFSET = "shipmentCreationOffset";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_CREATION_OFFSET)
  private Integer shipmentCreationOffset;

  public static final String SERIALIZED_NAME_RELEASE_SHIPMENT_DATE = "releaseShipmentDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_SHIPMENT_DATE)
  private OffsetDateTime releaseShipmentDate;

  public static final String SERIALIZED_NAME_CANCELLED_DATE = "cancelledDate";
  @SerializedName(SERIALIZED_NAME_CANCELLED_DATE)
  private OffsetDateTime cancelledDate;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "closedDate";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private OffsetDateTime closedDate;

  public static final String SERIALIZED_NAME_ACCEPTED_DATE = "acceptedDate";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_DATE)
  private OffsetDateTime acceptedDate;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<OrderNote> notes = null;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CommerceRuntimeOrderItem> items = null;

  public static final String SERIALIZED_NAME_VALIDATION_RESULTS = "validationResults";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RESULTS)
  private List<OrderValidationResult> validationResults = null;

  public static final String SERIALIZED_NAME_BILLING_INFO = "billingInfo";
  @SerializedName(SERIALIZED_NAME_BILLING_INFO)
  private BillingInfo billingInfo;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = null;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<Refund> refunds = null;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private List<CommerceRuntimeCredit> credits = null;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<CommerceRuntimePackage> packages = null;

  public static final String SERIALIZED_NAME_PICKUPS = "pickups";
  @SerializedName(SERIALIZED_NAME_PICKUPS)
  private List<Pickup> pickups = null;

  public static final String SERIALIZED_NAME_DIGITAL_PACKAGES = "digitalPackages";
  @SerializedName(SERIALIZED_NAME_DIGITAL_PACKAGES)
  private List<DigitalPackage> digitalPackages = null;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<CommerceRuntimeShipment> shipments = null;

  public static final String SERIALIZED_NAME_IS_DRAFT = "isDraft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  private Boolean isDraft;

  public static final String SERIALIZED_NAME_HAS_DRAFT = "hasDraft";
  @SerializedName(SERIALIZED_NAME_HAS_DRAFT)
  private Boolean hasDraft;

  public static final String SERIALIZED_NAME_IS_IMPORT = "isImport";
  @SerializedName(SERIALIZED_NAME_IS_IMPORT)
  private Boolean isImport;

  public static final String SERIALIZED_NAME_IS_HISTORICAL_IMPORT = "isHistoricalImport";
  @SerializedName(SERIALIZED_NAME_IS_HISTORICAL_IMPORT)
  private Boolean isHistoricalImport;

  public static final String SERIALIZED_NAME_IMPORT_DATE = "importDate";
  @SerializedName(SERIALIZED_NAME_IMPORT_DATE)
  private OffsetDateTime importDate;

  public static final String SERIALIZED_NAME_IS_UNIFIED = "isUnified";
  @SerializedName(SERIALIZED_NAME_IS_UNIFIED)
  private Boolean isUnified;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_COUPON_CODES = "couponCodes";
  @SerializedName(SERIALIZED_NAME_COUPON_CODES)
  private List<String> couponCodes = null;

  public static final String SERIALIZED_NAME_INVALID_COUPONS = "invalidCoupons";
  @SerializedName(SERIALIZED_NAME_INVALID_COUPONS)
  private List<InvalidCoupon> invalidCoupons = null;

  public static final String SERIALIZED_NAME_AMOUNT_AVAILABLE_FOR_REFUND = "amountAvailableForRefund";
  @SerializedName(SERIALIZED_NAME_AMOUNT_AVAILABLE_FOR_REFUND)
  private Double amountAvailableForRefund;

  public static final String SERIALIZED_NAME_AMOUNT_REMAINING_FOR_PAYMENT = "amountRemainingForPayment";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REMAINING_FOR_PAYMENT)
  private Double amountRemainingForPayment;

  public static final String SERIALIZED_NAME_AMOUNT_REFUNDED = "amountRefunded";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REFUNDED)
  private Double amountRefunded;

  public static final String SERIALIZED_NAME_READY_TO_CAPTURE = "readyToCapture";
  @SerializedName(SERIALIZED_NAME_READY_TO_CAPTURE)
  private Boolean readyToCapture;

  public static final String SERIALIZED_NAME_IS_OPT_IN_FOR_SMS = "isOptInForSms";
  @SerializedName(SERIALIZED_NAME_IS_OPT_IN_FOR_SMS)
  private Boolean isOptInForSms;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_IDS = "subscriptionIds";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_IDS)
  private List<String> subscriptionIds = null;

  public static final String SERIALIZED_NAME_CONTINUITY_ORDER_ORDINAL = "continuityOrderOrdinal";
  @SerializedName(SERIALIZED_NAME_CONTINUITY_ORDER_ORDINAL)
  private Integer continuityOrderOrdinal;

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservationId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_RESTRICT_EDIT = "restrictEdit";
  @SerializedName(SERIALIZED_NAME_RESTRICT_EDIT)
  private Boolean restrictEdit;

  public static final String SERIALIZED_NAME_RESTRICT_CANCELLATION = "restrictCancellation";
  @SerializedName(SERIALIZED_NAME_RESTRICT_CANCELLATION)
  private Boolean restrictCancellation;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public static final String SERIALIZED_NAME_WEB_SESSION_ID = "webSessionId";
  @SerializedName(SERIALIZED_NAME_WEB_SESSION_ID)
  private String webSessionId;

  public static final String SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE = "customerInteractionType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE)
  private String customerInteractionType;

  public static final String SERIALIZED_NAME_FULFILLMENT_INFO = "fulfillmentInfo";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_INFO)
  private FulfillmentInfo fulfillmentInfo;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNTS = "orderDiscounts";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> orderDiscounts = null;

  public static final String SERIALIZED_NAME_SUGGESTED_DISCOUNTS = "suggestedDiscounts";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DISCOUNTS)
  private List<SuggestedDiscount> suggestedDiscounts = null;

  public static final String SERIALIZED_NAME_REJECTED_DISCOUNTS = "rejectedDiscounts";
  @SerializedName(SERIALIZED_NAME_REJECTED_DISCOUNTS)
  private List<SuggestedDiscount> rejectedDiscounts = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_SUBTOTAL = "discountedSubtotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_SUBTOTAL)
  private Double discountedSubtotal;

  public static final String SERIALIZED_NAME_DISCOUNT_TOTAL = "discountTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TOTAL)
  private Double discountTotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_TOTAL = "discountedTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_TOTAL)
  private Double discountedTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Double shippingTotal;

  public static final String SERIALIZED_NAME_SHIPPING_SUB_TOTAL = "shippingSubTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SUB_TOTAL)
  private Double shippingSubTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_TOTAL = "shippingTaxTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_TOTAL)
  private Double shippingTaxTotal;

  public static final String SERIALIZED_NAME_HANDLING_TAX_TOTAL = "handlingTaxTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX_TOTAL)
  private Double handlingTaxTotal;

  public static final String SERIALIZED_NAME_ITEM_TAX_TOTAL = "itemTaxTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_TAX_TOTAL)
  private Double itemTaxTotal;

  public static final String SERIALIZED_NAME_TAX_TOTAL = "taxTotal";
  @SerializedName(SERIALIZED_NAME_TAX_TOTAL)
  private Double taxTotal;

  public static final String SERIALIZED_NAME_FEE_TOTAL = "feeTotal";
  @SerializedName(SERIALIZED_NAME_FEE_TOTAL)
  private Double feeTotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS = "lineItemSubtotalWithOrderAdjustments";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS)
  private Double lineItemSubtotalWithOrderAdjustments;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS = "shippingAmountBeforeDiscountsAndAdjustments";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS)
  private Double shippingAmountBeforeDiscountsAndAdjustments;

  public static final String SERIALIZED_NAME_LAST_VALIDATION_DATE = "lastValidationDate";
  @SerializedName(SERIALIZED_NAME_LAST_VALIDATION_DATE)
  private OffsetDateTime lastValidationDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_CHANGE_MESSAGES = "changeMessages";
  @SerializedName(SERIALIZED_NAME_CHANGE_MESSAGES)
  private List<CommerceRuntimeChangeMessage> changeMessages = null;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<ExtendedProperty> extendedProperties = null;

  public static final String SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES = "discountThresholdMessages";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES)
  private List<CommerceRuntimeThresholdMessage> discountThresholdMessages = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public Order() {
  }

  public Order orderNumber(Integer orderNumber) {
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Order Number. This is an integer that is only assigned after an order is placed and enters the open state.
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order Number. This is an integer that is only assigned after an order is placed and enters the open state.")

  public Integer getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(Integer orderNumber) {
    this.orderNumber = orderNumber;
  }


  public Order locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Identifies the location at which the order was placed if the order was placed externally.
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the location at which the order was placed if the order was placed externally.")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public Order version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version for concurrency purposes
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version for concurrency purposes")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public Order parentOrderId(String parentOrderId) {
    
    this.parentOrderId = parentOrderId;
    return this;
  }

   /**
   * If this Order has a parent order, this should be the parent&#39;s ID.
   * @return parentOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this Order has a parent order, this should be the parent's ID.")

  public String getParentOrderId() {
    return parentOrderId;
  }


  public void setParentOrderId(String parentOrderId) {
    this.parentOrderId = parentOrderId;
  }


  public Order parentOrderNumber(Integer parentOrderNumber) {
    
    this.parentOrderNumber = parentOrderNumber;
    return this;
  }

   /**
   * If this order has a parent order, this should be the parent&#39;s Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.
   * @return parentOrderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order has a parent order, this should be the parent's Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.")

  public Integer getParentOrderNumber() {
    return parentOrderNumber;
  }


  public void setParentOrderNumber(Integer parentOrderNumber) {
    this.parentOrderNumber = parentOrderNumber;
  }


  public Order parentCheckoutId(String parentCheckoutId) {
    
    this.parentCheckoutId = parentCheckoutId;
    return this;
  }

   /**
   * If this order originated from a multi-ship enabled site, this is the identifier of the originating checkout.
   * @return parentCheckoutId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a multi-ship enabled site, this is the identifier of the originating checkout.")

  public String getParentCheckoutId() {
    return parentCheckoutId;
  }


  public void setParentCheckoutId(String parentCheckoutId) {
    this.parentCheckoutId = parentCheckoutId;
  }


  public Order parentCheckoutNumber(Integer parentCheckoutNumber) {
    
    this.parentCheckoutNumber = parentCheckoutNumber;
    return this;
  }

   /**
   * If this order originated from a multi-ship enabled site, this is the number of the originating checkout.
   * @return parentCheckoutNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a multi-ship enabled site, this is the number of the originating checkout.")

  public Integer getParentCheckoutNumber() {
    return parentCheckoutNumber;
  }


  public void setParentCheckoutNumber(Integer parentCheckoutNumber) {
    this.parentCheckoutNumber = parentCheckoutNumber;
  }


  public Order partialOrderNumber(Integer partialOrderNumber) {
    
    this.partialOrderNumber = partialOrderNumber;
    return this;
  }

   /**
   * If this order originated from a checkout, this is a sequence number out of the total orders created from that checkout.
   * @return partialOrderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a checkout, this is a sequence number out of the total orders created from that checkout.")

  public Integer getPartialOrderNumber() {
    return partialOrderNumber;
  }


  public void setPartialOrderNumber(Integer partialOrderNumber) {
    this.partialOrderNumber = partialOrderNumber;
  }


  public Order partialOrderCount(Integer partialOrderCount) {
    
    this.partialOrderCount = partialOrderCount;
    return this;
  }

   /**
   * If this order originated from a checkout, this is the total number of orders created from that checkout.
   * @return partialOrderCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a checkout, this is the total number of orders created from that checkout.")

  public Integer getPartialOrderCount() {
    return partialOrderCount;
  }


  public void setPartialOrderCount(Integer partialOrderCount) {
    this.partialOrderCount = partialOrderCount;
  }


  public Order isPartialOrder(Boolean isPartialOrder) {
    
    this.isPartialOrder = isPartialOrder;
    return this;
  }

   /**
   * Returns {true} if this order originated from a checkout and has sibling partial orders, otherwise {false}.
   * @return isPartialOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns {true} if this order originated from a checkout and has sibling partial orders, otherwise {false}.")

  public Boolean getIsPartialOrder() {
    return isPartialOrder;
  }


  public void setIsPartialOrder(Boolean isPartialOrder) {
    this.isPartialOrder = isPartialOrder;
  }


  public Order parentReturnId(String parentReturnId) {
    
    this.parentReturnId = parentReturnId;
    return this;
  }

   /**
   * If this order was created as part of a return, this should be the return&#39;s ID.
   * @return parentReturnId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order was created as part of a return, this should be the return's ID.")

  public String getParentReturnId() {
    return parentReturnId;
  }


  public void setParentReturnId(String parentReturnId) {
    this.parentReturnId = parentReturnId;
  }


  public Order parentReturnNumber(Integer parentReturnNumber) {
    
    this.parentReturnNumber = parentReturnNumber;
    return this;
  }

   /**
   * If this order was created as part of a return, this should be the return&#39;s ReturnNumber.
   * @return parentReturnNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order was created as part of a return, this should be the return's ReturnNumber.")

  public Integer getParentReturnNumber() {
    return parentReturnNumber;
  }


  public void setParentReturnNumber(Integer parentReturnNumber) {
    this.parentReturnNumber = parentReturnNumber;
  }


  public Order originalCartId(String originalCartId) {
    
    this.originalCartId = originalCartId;
    return this;
  }

   /**
   * Unique identifier for the cart that was converted to order.
   * @return originalCartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the cart that was converted to order.")

  public String getOriginalCartId() {
    return originalCartId;
  }


  public void setOriginalCartId(String originalCartId) {
    this.originalCartId = originalCartId;
  }


  public Order originalQuoteId(String originalQuoteId) {
    
    this.originalQuoteId = originalQuoteId;
    return this;
  }

   /**
   * If this order originated from a quote, this is the identifier of the originating quote.
   * @return originalQuoteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a quote, this is the identifier of the originating quote.")

  public String getOriginalQuoteId() {
    return originalQuoteId;
  }


  public void setOriginalQuoteId(String originalQuoteId) {
    this.originalQuoteId = originalQuoteId;
  }


  public Order originalQuoteNumber(Integer originalQuoteNumber) {
    
    this.originalQuoteNumber = originalQuoteNumber;
    return this;
  }

   /**
   * If this order originated from a quote, this is the number of the originating quote.
   * @return originalQuoteNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this order originated from a quote, this is the number of the originating quote.")

  public Integer getOriginalQuoteNumber() {
    return originalQuoteNumber;
  }


  public void setOriginalQuoteNumber(Integer originalQuoteNumber) {
    this.originalQuoteNumber = originalQuoteNumber;
  }


  public Order priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * Pricelist code for the order
   * @return priceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricelist code for the order")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public Order availableActions(List<String> availableActions) {
    
    this.availableActions = availableActions;
    return this;
  }

  public Order addAvailableActionsItem(String availableActionsItem) {
    if (this.availableActions == null) {
      this.availableActions = new ArrayList<>();
    }
    this.availableActions.add(availableActionsItem);
    return this;
  }

   /**
   * Actions available to the payment
   * @return availableActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Actions available to the payment")

  public List<String> getAvailableActions() {
    return availableActions;
  }


  public void setAvailableActions(List<String> availableActions) {
    this.availableActions = availableActions;
  }


  public Order shopperNotes(CommerceRuntimeShopperNotes shopperNotes) {
    
    this.shopperNotes = shopperNotes;
    return this;
  }

   /**
   * Get shopperNotes
   * @return shopperNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceRuntimeShopperNotes getShopperNotes() {
    return shopperNotes;
  }


  public void setShopperNotes(CommerceRuntimeShopperNotes shopperNotes) {
    this.shopperNotes = shopperNotes;
  }


  public Order customerAccountId(Integer customerAccountId) {
    
    this.customerAccountId = customerAccountId;
    return this;
  }

   /**
   * Unique identifier of the customer account.
   * @return customerAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the customer account.")

  public Integer getCustomerAccountId() {
    return customerAccountId;
  }


  public void setCustomerAccountId(Integer customerAccountId) {
    this.customerAccountId = customerAccountId;
  }


  public Order customerTaxId(String customerTaxId) {
    
    this.customerTaxId = customerTaxId;
    return this;
  }

   /**
   * The customers tax ID.  If Customer Account ID exists in the system, will set this.
   * @return customerTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The customers tax ID.  If Customer Account ID exists in the system, will set this.")

  public String getCustomerTaxId() {
    return customerTaxId;
  }


  public void setCustomerTaxId(String customerTaxId) {
    this.customerTaxId = customerTaxId;
  }


  public Order isTaxExempt(Boolean isTaxExempt) {
    
    this.isTaxExempt = isTaxExempt;
    return this;
  }

   /**
   * Unique identifier of the customer account.
   * @return isTaxExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the customer account.")

  public Boolean getIsTaxExempt() {
    return isTaxExempt;
  }


  public void setIsTaxExempt(Boolean isTaxExempt) {
    this.isTaxExempt = isTaxExempt;
  }


  public Order email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email address of the customer at the time the order is placed.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address of the customer at the time the order is placed.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public Order alternateContact(AlternateContact alternateContact) {
    
    this.alternateContact = alternateContact;
    return this;
  }

   /**
   * Get alternateContact
   * @return alternateContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AlternateContact getAlternateContact() {
    return alternateContact;
  }


  public void setAlternateContact(AlternateContact alternateContact) {
    this.alternateContact = alternateContact;
  }


  public Order ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address of the user placing the order. (User or customer?)
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address of the user placing the order. (User or customer?)")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Order sourceDevice(String sourceDevice) {
    
    this.sourceDevice = sourceDevice;
    return this;
  }

   /**
   * Source device of the user placing the order. (User or customer?)
   * @return sourceDevice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source device of the user placing the order. (User or customer?)")

  public String getSourceDevice() {
    return sourceDevice;
  }


  public void setSourceDevice(String sourceDevice) {
    this.sourceDevice = sourceDevice;
  }


  public Order acceptsMarketing(Boolean acceptsMarketing) {
    
    this.acceptsMarketing = acceptsMarketing;
    return this;
  }

   /**
   * Does the customer accept marketing
   * @return acceptsMarketing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Does the customer accept marketing")

  public Boolean getAcceptsMarketing() {
    return acceptsMarketing;
  }


  public void setAcceptsMarketing(Boolean acceptsMarketing) {
    this.acceptsMarketing = acceptsMarketing;
  }


  public Order status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Current status of the order, which can be viewed in OrderStatusConst. System-supplied and read-only.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current status of the order, which can be viewed in OrderStatusConst. System-supplied and read-only.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public Order type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Order paymentStatus(String paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Current status of payment, which can be \&quot;Null,\&quot; \&quot;AwaitingCheck,\&quot; \&quot;AwaitingPayment,\&quot; \&quot;Paid,\&quot; \&quot;Authorized,\&quot; or \&quot;Void.\&quot;   System-supplied and read-only.
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current status of payment, which can be \"Null,\" \"AwaitingCheck,\" \"AwaitingPayment,\" \"Paid,\" \"Authorized,\" or \"Void.\"   System-supplied and read-only.")

  public String getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public Order returnStatus(String returnStatus) {
    
    this.returnStatus = returnStatus;
    return this;
  }

   /**
   * System-supplied and read-only.
   * @return returnStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "System-supplied and read-only.")

  public String getReturnStatus() {
    return returnStatus;
  }


  public void setReturnStatus(String returnStatus) {
    this.returnStatus = returnStatus;
  }


  public Order isEligibleForReturns(Boolean isEligibleForReturns) {
    
    this.isEligibleForReturns = isEligibleForReturns;
    return this;
  }

   /**
   * Marker for determining if the order is a) complete or b) has some items that are shipped and not part of any other return
   * @return isEligibleForReturns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Marker for determining if the order is a) complete or b) has some items that are shipped and not part of any other return")

  public Boolean getIsEligibleForReturns() {
    return isEligibleForReturns;
  }


  public void setIsEligibleForReturns(Boolean isEligibleForReturns) {
    this.isEligibleForReturns = isEligibleForReturns;
  }


  public Order totalCollected(Double totalCollected) {
    
    this.totalCollected = totalCollected;
    return this;
  }

   /**
   * Total amount of money collected on the order via payments.
   * @return totalCollected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total amount of money collected on the order via payments.")

  public Double getTotalCollected() {
    return totalCollected;
  }


  public void setTotalCollected(Double totalCollected) {
    this.totalCollected = totalCollected;
  }


  public Order attributes(List<CommerceRuntimeOrderAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public Order addAttributesItem(CommerceRuntimeOrderAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeOrderAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CommerceRuntimeOrderAttribute> attributes) {
    this.attributes = attributes;
  }


  public Order adjustment(Adjustment adjustment) {
    
    this.adjustment = adjustment;
    return this;
  }

   /**
   * Get adjustment
   * @return adjustment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Adjustment getAdjustment() {
    return adjustment;
  }


  public void setAdjustment(Adjustment adjustment) {
    this.adjustment = adjustment;
  }


  public Order shippingAdjustment(Adjustment shippingAdjustment) {
    
    this.shippingAdjustment = shippingAdjustment;
    return this;
  }

   /**
   * Get shippingAdjustment
   * @return shippingAdjustment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Adjustment getShippingAdjustment() {
    return shippingAdjustment;
  }


  public void setShippingAdjustment(Adjustment shippingAdjustment) {
    this.shippingAdjustment = shippingAdjustment;
  }


  public Order handlingAdjustment(Adjustment handlingAdjustment) {
    
    this.handlingAdjustment = handlingAdjustment;
    return this;
  }

   /**
   * Get handlingAdjustment
   * @return handlingAdjustment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Adjustment getHandlingAdjustment() {
    return handlingAdjustment;
  }


  public void setHandlingAdjustment(Adjustment handlingAdjustment) {
    this.handlingAdjustment = handlingAdjustment;
  }


  public Order shippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
    
    this.shippingDiscounts = shippingDiscounts;
    return this;
  }

  public Order addShippingDiscountsItem(ShippingDiscount shippingDiscountsItem) {
    if (this.shippingDiscounts == null) {
      this.shippingDiscounts = new ArrayList<>();
    }
    this.shippingDiscounts.add(shippingDiscountsItem);
    return this;
  }

   /**
   * Get shippingDiscounts
   * @return shippingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ShippingDiscount> getShippingDiscounts() {
    return shippingDiscounts;
  }


  public void setShippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
    this.shippingDiscounts = shippingDiscounts;
  }


  public Order handlingDiscounts(List<CommerceRuntimeAppliedDiscount> handlingDiscounts) {
    
    this.handlingDiscounts = handlingDiscounts;
    return this;
  }

  public Order addHandlingDiscountsItem(CommerceRuntimeAppliedDiscount handlingDiscountsItem) {
    if (this.handlingDiscounts == null) {
      this.handlingDiscounts = new ArrayList<>();
    }
    this.handlingDiscounts.add(handlingDiscountsItem);
    return this;
  }

   /**
   * The list of historically-applied handling discounts.  The active one will have IsExcluded &#x3D;&#x3D; false
   * @return handlingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of historically-applied handling discounts.  The active one will have IsExcluded == false")

  public List<CommerceRuntimeAppliedDiscount> getHandlingDiscounts() {
    return handlingDiscounts;
  }


  public void setHandlingDiscounts(List<CommerceRuntimeAppliedDiscount> handlingDiscounts) {
    this.handlingDiscounts = handlingDiscounts;
  }


  public Order handlingAmount(Double handlingAmount) {
    
    this.handlingAmount = handlingAmount;
    return this;
  }

   /**
   * Order level handling fees excluding any discounts.
   * @return handlingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order level handling fees excluding any discounts.")

  public Double getHandlingAmount() {
    return handlingAmount;
  }


  public void setHandlingAmount(Double handlingAmount) {
    this.handlingAmount = handlingAmount;
  }


  public Order handlingSubTotal(Double handlingSubTotal) {
    
    this.handlingSubTotal = handlingSubTotal;
    return this;
  }

   /**
   * Handling fees for the Order as well as OrderItems (e.g. if the Order has a $5 handling fee and an OrderItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)
   * @return handlingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Handling fees for the Order as well as OrderItems (e.g. if the Order has a $5 handling fee and an OrderItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)")

  public Double getHandlingSubTotal() {
    return handlingSubTotal;
  }


  public void setHandlingSubTotal(Double handlingSubTotal) {
    this.handlingSubTotal = handlingSubTotal;
  }


  public Order handlingTotal(Double handlingTotal) {
    
    this.handlingTotal = handlingTotal;
    return this;
  }

   /**
   * Handling fees including any discounts.
   * @return handlingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Handling fees including any discounts.")

  public Double getHandlingTotal() {
    return handlingTotal;
  }


  public void setHandlingTotal(Double handlingTotal) {
    this.handlingTotal = handlingTotal;
  }


  public Order dutyAmount(Double dutyAmount) {
    
    this.dutyAmount = dutyAmount;
    return this;
  }

   /**
   * Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order
   * @return dutyAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order")

  public Double getDutyAmount() {
    return dutyAmount;
  }


  public void setDutyAmount(Double dutyAmount) {
    this.dutyAmount = dutyAmount;
  }


  public Order dutyTotal(Double dutyTotal) {
    
    this.dutyTotal = dutyTotal;
    return this;
  }

   /**
   * Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)
   * @return dutyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)")

  public Double getDutyTotal() {
    return dutyTotal;
  }


  public void setDutyTotal(Double dutyTotal) {
    this.dutyTotal = dutyTotal;
  }


  public Order fulfillmentStatus(String fulfillmentStatus) {
    
    this.fulfillmentStatus = fulfillmentStatus;
    return this;
  }

   /**
   * Current fulfillment status, which can be \&quot;NotFulfilled,\&quot;, \&quot;PartiallyFulfilled\&quot;, or \&quot;Fufilled.\&quot;   System-supplied and read-only.  Values are available in FulfillmentStatusConst of this class.
   * @return fulfillmentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current fulfillment status, which can be \"NotFulfilled,\", \"PartiallyFulfilled\", or \"Fufilled.\"   System-supplied and read-only.  Values are available in FulfillmentStatusConst of this class.")

  public String getFulfillmentStatus() {
    return fulfillmentStatus;
  }


  public void setFulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }


  public Order isFulfillable(Boolean isFulfillable) {
    
    this.isFulfillable = isFulfillable;
    return this;
  }

   /**
   * Flag to indicate whether it is safe to proceed with fulfillment on shipments on the order.
   * @return isFulfillable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag to indicate whether it is safe to proceed with fulfillment on shipments on the order.")

  public Boolean getIsFulfillable() {
    return isFulfillable;
  }


  public void setIsFulfillable(Boolean isFulfillable) {
    this.isFulfillable = isFulfillable;
  }


  public Order submittedDate(OffsetDateTime submittedDate) {
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * When the customer placed (submitted) the order.
   * @return submittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the customer placed (submitted) the order.")

  public OffsetDateTime getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(OffsetDateTime submittedDate) {
    this.submittedDate = submittedDate;
  }


  public Order shipmentCreationOffset(Integer shipmentCreationOffset) {
    
    this.shipmentCreationOffset = shipmentCreationOffset;
    return this;
  }

   /**
   * Release Shipment After(in minutes) (Order Submitted Date).
   * @return shipmentCreationOffset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Release Shipment After(in minutes) (Order Submitted Date).")

  public Integer getShipmentCreationOffset() {
    return shipmentCreationOffset;
  }


  public void setShipmentCreationOffset(Integer shipmentCreationOffset) {
    this.shipmentCreationOffset = shipmentCreationOffset;
  }


  public Order releaseShipmentDate(OffsetDateTime releaseShipmentDate) {
    
    this.releaseShipmentDate = releaseShipmentDate;
    return this;
  }

   /**
   * Get releaseShipmentDate
   * @return releaseShipmentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getReleaseShipmentDate() {
    return releaseShipmentDate;
  }


  public void setReleaseShipmentDate(OffsetDateTime releaseShipmentDate) {
    this.releaseShipmentDate = releaseShipmentDate;
  }


  public Order cancelledDate(OffsetDateTime cancelledDate) {
    
    this.cancelledDate = cancelledDate;
    return this;
  }

   /**
   * Date the order was cancelled.
   * @return cancelledDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the order was cancelled.")

  public OffsetDateTime getCancelledDate() {
    return cancelledDate;
  }


  public void setCancelledDate(OffsetDateTime cancelledDate) {
    this.cancelledDate = cancelledDate;
  }


  public Order closedDate(OffsetDateTime closedDate) {
    
    this.closedDate = closedDate;
    return this;
  }

   /**
   * Date the order was closed. A closed order means that the order has been processed and items shipped.
   * @return closedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the order was closed. A closed order means that the order has been processed and items shipped.")

  public OffsetDateTime getClosedDate() {
    return closedDate;
  }


  public void setClosedDate(OffsetDateTime closedDate) {
    this.closedDate = closedDate;
  }


  public Order acceptedDate(OffsetDateTime acceptedDate) {
    
    this.acceptedDate = acceptedDate;
    return this;
  }

   /**
   * When the order was accepted by the merchant
   * @return acceptedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the order was accepted by the merchant")

  public OffsetDateTime getAcceptedDate() {
    return acceptedDate;
  }


  public void setAcceptedDate(OffsetDateTime acceptedDate) {
    this.acceptedDate = acceptedDate;
  }


  public Order notes(List<OrderNote> notes) {
    
    this.notes = notes;
    return this;
  }

  public Order addNotesItem(OrderNote notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Internal notes that a merchant may add to the order. Maximum 250 characters.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal notes that a merchant may add to the order. Maximum 250 characters.")

  public List<OrderNote> getNotes() {
    return notes;
  }


  public void setNotes(List<OrderNote> notes) {
    this.notes = notes;
  }


  public Order items(List<CommerceRuntimeOrderItem> items) {
    
    this.items = items;
    return this;
  }

  public Order addItemsItem(CommerceRuntimeOrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of items in the order.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of items in the order.")

  public List<CommerceRuntimeOrderItem> getItems() {
    return items;
  }


  public void setItems(List<CommerceRuntimeOrderItem> items) {
    this.items = items;
  }


  public Order validationResults(List<OrderValidationResult> validationResults) {
    
    this.validationResults = validationResults;
    return this;
  }

  public Order addValidationResultsItem(OrderValidationResult validationResultsItem) {
    if (this.validationResults == null) {
      this.validationResults = new ArrayList<>();
    }
    this.validationResults.add(validationResultsItem);
    return this;
  }

   /**
   * Validation results for the order when processes against validation capabilities.
   * @return validationResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Validation results for the order when processes against validation capabilities.")

  public List<OrderValidationResult> getValidationResults() {
    return validationResults;
  }


  public void setValidationResults(List<OrderValidationResult> validationResults) {
    this.validationResults = validationResults;
  }


  public Order billingInfo(BillingInfo billingInfo) {
    
    this.billingInfo = billingInfo;
    return this;
  }

   /**
   * Get billingInfo
   * @return billingInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BillingInfo getBillingInfo() {
    return billingInfo;
  }


  public void setBillingInfo(BillingInfo billingInfo) {
    this.billingInfo = billingInfo;
  }


  public Order payments(List<Payment> payments) {
    
    this.payments = payments;
    return this;
  }

  public Order addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Payment transaction associated with this order. It is the entire payment interchange between the merchant   who is forwarding the customer&#39;s payment information and the payment service who is authorizing and   capturing payment. Payment can be either by credit card, check, or PayPal.
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment transaction associated with this order. It is the entire payment interchange between the merchant   who is forwarding the customer's payment information and the payment service who is authorizing and   capturing payment. Payment can be either by credit card, check, or PayPal.")

  public List<Payment> getPayments() {
    return payments;
  }


  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public Order refunds(List<Refund> refunds) {
    
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(Refund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

   /**
   * Refunds associated with this order. A refund is a single exchange of money from merchant to customer  that either encapsulates a refund to a credit card or an issuance of a store credit.  Refunds does not reduce the &#39;amount collected&#39; on an order and it is possible for refunds to exceed the total order amount.
   * @return refunds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refunds associated with this order. A refund is a single exchange of money from merchant to customer  that either encapsulates a refund to a credit card or an issuance of a store credit.  Refunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.")

  public List<Refund> getRefunds() {
    return refunds;
  }


  public void setRefunds(List<Refund> refunds) {
    this.refunds = refunds;
  }


  public Order credits(List<CommerceRuntimeCredit> credits) {
    
    this.credits = credits;
    return this;
  }

  public Order addCreditsItem(CommerceRuntimeCredit creditsItem) {
    if (this.credits == null) {
      this.credits = new ArrayList<>();
    }
    this.credits.add(creditsItem);
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeCredit> getCredits() {
    return credits;
  }


  public void setCredits(List<CommerceRuntimeCredit> credits) {
    this.credits = credits;
  }


  public Order packages(List<CommerceRuntimePackage> packages) {
    
    this.packages = packages;
    return this;
  }

  public Order addPackagesItem(CommerceRuntimePackage packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

   /**
   * Shipping package associated with this order.
   * @return packages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping package associated with this order.")

  public List<CommerceRuntimePackage> getPackages() {
    return packages;
  }


  public void setPackages(List<CommerceRuntimePackage> packages) {
    this.packages = packages;
  }


  public Order pickups(List<Pickup> pickups) {
    
    this.pickups = pickups;
    return this;
  }

  public Order addPickupsItem(Pickup pickupsItem) {
    if (this.pickups == null) {
      this.pickups = new ArrayList<>();
    }
    this.pickups.add(pickupsItem);
    return this;
  }

   /**
   * Fulfillment pickups associated with this order.
   * @return pickups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fulfillment pickups associated with this order.")

  public List<Pickup> getPickups() {
    return pickups;
  }


  public void setPickups(List<Pickup> pickups) {
    this.pickups = pickups;
  }


  public Order digitalPackages(List<DigitalPackage> digitalPackages) {
    
    this.digitalPackages = digitalPackages;
    return this;
  }

  public Order addDigitalPackagesItem(DigitalPackage digitalPackagesItem) {
    if (this.digitalPackages == null) {
      this.digitalPackages = new ArrayList<>();
    }
    this.digitalPackages.add(digitalPackagesItem);
    return this;
  }

   /**
   * Fulfillment digital packages associated with this order.
   * @return digitalPackages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fulfillment digital packages associated with this order.")

  public List<DigitalPackage> getDigitalPackages() {
    return digitalPackages;
  }


  public void setDigitalPackages(List<DigitalPackage> digitalPackages) {
    this.digitalPackages = digitalPackages;
  }


  public Order shipments(List<CommerceRuntimeShipment> shipments) {
    
    this.shipments = shipments;
    return this;
  }

  public Order addShipmentsItem(CommerceRuntimeShipment shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

   /**
   * Package shipments associated with this order.
   * @return shipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Package shipments associated with this order.")

  public List<CommerceRuntimeShipment> getShipments() {
    return shipments;
  }


  public void setShipments(List<CommerceRuntimeShipment> shipments) {
    this.shipments = shipments;
  }


  public Order isDraft(Boolean isDraft) {
    
    this.isDraft = isDraft;
    return this;
  }

   /**
   * Is this order a draft version
   * @return isDraft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this order a draft version")

  public Boolean getIsDraft() {
    return isDraft;
  }


  public void setIsDraft(Boolean isDraft) {
    this.isDraft = isDraft;
  }


  public Order hasDraft(Boolean hasDraft) {
    
    this.hasDraft = hasDraft;
    return this;
  }

   /**
   * Does this order have a draft version.
   * @return hasDraft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Does this order have a draft version.")

  public Boolean getHasDraft() {
    return hasDraft;
  }


  public void setHasDraft(Boolean hasDraft) {
    this.hasDraft = hasDraft;
  }


  public Order isImport(Boolean isImport) {
    
    this.isImport = isImport;
    return this;
  }

   /**
   * Was this order initiated from an external system
   * @return isImport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Was this order initiated from an external system")

  public Boolean getIsImport() {
    return isImport;
  }


  public void setIsImport(Boolean isImport) {
    this.isImport = isImport;
  }


  public Order isHistoricalImport(Boolean isHistoricalImport) {
    
    this.isHistoricalImport = isHistoricalImport;
    return this;
  }

   /**
   * Indicates this was an order in a terminal state (completed/canceled) that was imported into the system for historical purposes.
   * @return isHistoricalImport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates this was an order in a terminal state (completed/canceled) that was imported into the system for historical purposes.")

  public Boolean getIsHistoricalImport() {
    return isHistoricalImport;
  }


  public void setIsHistoricalImport(Boolean isHistoricalImport) {
    this.isHistoricalImport = isHistoricalImport;
  }


  public Order importDate(OffsetDateTime importDate) {
    
    this.importDate = importDate;
    return this;
  }

   /**
   * Date this item was imported
   * @return importDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this item was imported")

  public OffsetDateTime getImportDate() {
    return importDate;
  }


  public void setImportDate(OffsetDateTime importDate) {
    this.importDate = importDate;
  }


  public Order isUnified(Boolean isUnified) {
    
    this.isUnified = isUnified;
    return this;
  }

   /**
   * Was this order created by the Unified platform.
   * @return isUnified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Was this order created by the Unified platform.")

  public Boolean getIsUnified() {
    return isUnified;
  }


  public void setIsUnified(Boolean isUnified) {
    this.isUnified = isUnified;
  }


  public Order externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * An order number to link this order to an external system
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An order number to link this order to an external system")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Order couponCodes(List<String> couponCodes) {
    
    this.couponCodes = couponCodes;
    return this;
  }

  public Order addCouponCodesItem(String couponCodesItem) {
    if (this.couponCodes == null) {
      this.couponCodes = new ArrayList<>();
    }
    this.couponCodes.add(couponCodesItem);
    return this;
  }

   /**
   * Coupon codes associated with this order.  Only set on order import.
   * @return couponCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupon codes associated with this order.  Only set on order import.")

  public List<String> getCouponCodes() {
    return couponCodes;
  }


  public void setCouponCodes(List<String> couponCodes) {
    this.couponCodes = couponCodes;
  }


  public Order invalidCoupons(List<InvalidCoupon> invalidCoupons) {
    
    this.invalidCoupons = invalidCoupons;
    return this;
  }

  public Order addInvalidCouponsItem(InvalidCoupon invalidCouponsItem) {
    if (this.invalidCoupons == null) {
      this.invalidCoupons = new ArrayList<>();
    }
    this.invalidCoupons.add(invalidCouponsItem);
    return this;
  }

   /**
   * A list of invalid coupons that were attempted on the order
   * @return invalidCoupons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of invalid coupons that were attempted on the order")

  public List<InvalidCoupon> getInvalidCoupons() {
    return invalidCoupons;
  }


  public void setInvalidCoupons(List<InvalidCoupon> invalidCoupons) {
    this.invalidCoupons = invalidCoupons;
  }


  public Order amountAvailableForRefund(Double amountAvailableForRefund) {
    
    this.amountAvailableForRefund = amountAvailableForRefund;
    return this;
  }

   /**
   * This property represents AmountCaptured - AmountRefunded via returns.  It is read only.
   * @return amountAvailableForRefund
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This property represents AmountCaptured - AmountRefunded via returns.  It is read only.")

  public Double getAmountAvailableForRefund() {
    return amountAvailableForRefund;
  }


  public void setAmountAvailableForRefund(Double amountAvailableForRefund) {
    this.amountAvailableForRefund = amountAvailableForRefund;
  }


  public Order amountRemainingForPayment(Double amountRemainingForPayment) {
    
    this.amountRemainingForPayment = amountRemainingForPayment;
    return this;
  }

   /**
   * A counter for how much of the order total has not been claimed by payments.  This is computed by Order.Total-(sum of Order.Payments where State is not voided/declined)
   * @return amountRemainingForPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A counter for how much of the order total has not been claimed by payments.  This is computed by Order.Total-(sum of Order.Payments where State is not voided/declined)")

  public Double getAmountRemainingForPayment() {
    return amountRemainingForPayment;
  }


  public void setAmountRemainingForPayment(Double amountRemainingForPayment) {
    this.amountRemainingForPayment = amountRemainingForPayment;
  }


  public Order amountRefunded(Double amountRefunded) {
    
    this.amountRefunded = amountRefunded;
    return this;
  }

   /**
   * A counter for how much money has been issued in refunds.  This calculated field does NOT include refunds issued in returns.
   * @return amountRefunded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A counter for how much money has been issued in refunds.  This calculated field does NOT include refunds issued in returns.")

  public Double getAmountRefunded() {
    return amountRefunded;
  }


  public void setAmountRefunded(Double amountRefunded) {
    this.amountRefunded = amountRefunded;
  }


  public Order readyToCapture(Boolean readyToCapture) {
    
    this.readyToCapture = readyToCapture;
    return this;
  }

   /**
   * Get readyToCapture
   * @return readyToCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReadyToCapture() {
    return readyToCapture;
  }


  public void setReadyToCapture(Boolean readyToCapture) {
    this.readyToCapture = readyToCapture;
  }


  public Order isOptInForSms(Boolean isOptInForSms) {
    
    this.isOptInForSms = isOptInForSms;
    return this;
  }

   /**
   * Whether the shopper opts in to curbside text notifications.
   * @return isOptInForSms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the shopper opts in to curbside text notifications.")

  public Boolean getIsOptInForSms() {
    return isOptInForSms;
  }


  public void setIsOptInForSms(Boolean isOptInForSms) {
    this.isOptInForSms = isOptInForSms;
  }


  public Order subscriptionIds(List<String> subscriptionIds) {
    
    this.subscriptionIds = subscriptionIds;
    return this;
  }

  public Order addSubscriptionIdsItem(String subscriptionIdsItem) {
    if (this.subscriptionIds == null) {
      this.subscriptionIds = new ArrayList<>();
    }
    this.subscriptionIds.add(subscriptionIdsItem);
    return this;
  }

   /**
   * All the subscriptions associated with the current order.
   * @return subscriptionIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "All the subscriptions associated with the current order.")

  public List<String> getSubscriptionIds() {
    return subscriptionIds;
  }


  public void setSubscriptionIds(List<String> subscriptionIds) {
    this.subscriptionIds = subscriptionIds;
  }


  public Order continuityOrderOrdinal(Integer continuityOrderOrdinal) {
    
    this.continuityOrderOrdinal = continuityOrderOrdinal;
    return this;
  }

   /**
   * The ordinal to track the Continuity order.
   * @return continuityOrderOrdinal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ordinal to track the Continuity order.")

  public Integer getContinuityOrderOrdinal() {
    return continuityOrderOrdinal;
  }


  public void setContinuityOrderOrdinal(Integer continuityOrderOrdinal) {
    this.continuityOrderOrdinal = continuityOrderOrdinal;
  }


  public Order reservationId(String reservationId) {
    
    this.reservationId = reservationId;
    return this;
  }

   /**
   * Inventory Reservation id for order.
   * @return reservationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inventory Reservation id for order.")

  public String getReservationId() {
    return reservationId;
  }


  public void setReservationId(String reservationId) {
    this.reservationId = reservationId;
  }


  public Order restrictEdit(Boolean restrictEdit) {
    
    this.restrictEdit = restrictEdit;
    return this;
  }

   /**
   * Setting this flag on the order will restrict user from editing the order
   * @return restrictEdit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Setting this flag on the order will restrict user from editing the order")

  public Boolean getRestrictEdit() {
    return restrictEdit;
  }


  public void setRestrictEdit(Boolean restrictEdit) {
    this.restrictEdit = restrictEdit;
  }


  public Order restrictCancellation(Boolean restrictCancellation) {
    
    this.restrictCancellation = restrictCancellation;
    return this;
  }

   /**
   * Settings this flag on the order will restrict user from Cancelling the order
   * @return restrictCancellation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Settings this flag on the order will restrict user from Cancelling the order")

  public Boolean getRestrictCancellation() {
    return restrictCancellation;
  }


  public void setRestrictCancellation(Boolean restrictCancellation) {
    this.restrictCancellation = restrictCancellation;
  }


  public Order userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Unique identifier of the shopper who created the cart.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the shopper who created the cart.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Order id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Order tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Unique identifier of the Tenant.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Tenant.")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public Order siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Unique identifier of the Site.
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Site.")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public Order channelCode(String channelCode) {
    
    this.channelCode = channelCode;
    return this;
  }

   /**
   * Unique identifier of the channel for this item.
   * @return channelCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the channel for this item.")

  public String getChannelCode() {
    return channelCode;
  }


  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public Order currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO Currency Code. Currently, only USD is supported.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Currency Code. Currently, only USD is supported.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Order visitId(String visitId) {
    
    this.visitId = visitId;
    return this;
  }

   /**
   * Identifies the Visit ID that was current when the order was placed or when the cart was last updated.
   * @return visitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.")

  public String getVisitId() {
    return visitId;
  }


  public void setVisitId(String visitId) {
    this.visitId = visitId;
  }


  public Order webSessionId(String webSessionId) {
    
    this.webSessionId = webSessionId;
    return this;
  }

   /**
   * Identifies the web session used to place the order or last update the cart.
   * @return webSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the web session used to place the order or last update the cart.")

  public String getWebSessionId() {
    return webSessionId;
  }


  public void setWebSessionId(String webSessionId) {
    this.webSessionId = webSessionId;
  }


  public Order customerInteractionType(String customerInteractionType) {
    
    this.customerInteractionType = customerInteractionType;
    return this;
  }

   /**
   * Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown
   * @return customerInteractionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown")

  public String getCustomerInteractionType() {
    return customerInteractionType;
  }


  public void setCustomerInteractionType(String customerInteractionType) {
    this.customerInteractionType = customerInteractionType;
  }


  public Order fulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    
    this.fulfillmentInfo = fulfillmentInfo;
    return this;
  }

   /**
   * Get fulfillmentInfo
   * @return fulfillmentInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentInfo getFulfillmentInfo() {
    return fulfillmentInfo;
  }


  public void setFulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    this.fulfillmentInfo = fulfillmentInfo;
  }


  public Order orderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    
    this.orderDiscounts = orderDiscounts;
    return this;
  }

  public Order addOrderDiscountsItem(CommerceRuntimeAppliedDiscount orderDiscountsItem) {
    if (this.orderDiscounts == null) {
      this.orderDiscounts = new ArrayList<>();
    }
    this.orderDiscounts.add(orderDiscountsItem);
    return this;
  }

   /**
   * The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.
   * @return orderDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.")

  public List<CommerceRuntimeAppliedDiscount> getOrderDiscounts() {
    return orderDiscounts;
  }


  public void setOrderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }


  public Order suggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    
    this.suggestedDiscounts = suggestedDiscounts;
    return this;
  }

  public Order addSuggestedDiscountsItem(SuggestedDiscount suggestedDiscountsItem) {
    if (this.suggestedDiscounts == null) {
      this.suggestedDiscounts = new ArrayList<>();
    }
    this.suggestedDiscounts.add(suggestedDiscountsItem);
    return this;
  }

   /**
   * Get suggestedDiscounts
   * @return suggestedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getSuggestedDiscounts() {
    return suggestedDiscounts;
  }


  public void setSuggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    this.suggestedDiscounts = suggestedDiscounts;
  }


  public Order rejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    
    this.rejectedDiscounts = rejectedDiscounts;
    return this;
  }

  public Order addRejectedDiscountsItem(SuggestedDiscount rejectedDiscountsItem) {
    if (this.rejectedDiscounts == null) {
      this.rejectedDiscounts = new ArrayList<>();
    }
    this.rejectedDiscounts.add(rejectedDiscountsItem);
    return this;
  }

   /**
   * Get rejectedDiscounts
   * @return rejectedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getRejectedDiscounts() {
    return rejectedDiscounts;
  }


  public void setRejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    this.rejectedDiscounts = rejectedDiscounts;
  }


  public Order data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Custom data for a given vendor set within the commerce process.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom data for a given vendor set within the commerce process.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public Order taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Storage for any additional/custom tax data.
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage for any additional/custom tax data.")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }


  public Order subtotal(Double subtotal) {
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options but excluding any discounts.
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options but excluding any discounts.")

  public Double getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Order discountedSubtotal(Double discountedSubtotal) {
    
    this.discountedSubtotal = discountedSubtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options as well as any discounts.
   * @return discountedSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options as well as any discounts.")

  public Double getDiscountedSubtotal() {
    return discountedSubtotal;
  }


  public void setDiscountedSubtotal(Double discountedSubtotal) {
    this.discountedSubtotal = discountedSubtotal;
  }


  public Order discountTotal(Double discountTotal) {
    
    this.discountTotal = discountTotal;
    return this;
  }

   /**
   * Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.
   * @return discountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.")

  public Double getDiscountTotal() {
    return discountTotal;
  }


  public void setDiscountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
  }


  public Order discountedTotal(Double discountedTotal) {
    
    this.discountedTotal = discountedTotal;
    return this;
  }

   /**
   * Subtotal minus the discounted total
   * @return discountedTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subtotal minus the discounted total")

  public Double getDiscountedTotal() {
    return discountedTotal;
  }


  public void setDiscountedTotal(Double discountedTotal) {
    this.discountedTotal = discountedTotal;
  }


  public Order shippingTotal(Double shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * Shipping does not appear on cart.
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping does not appear on cart.")

  public Double getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Double shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public Order shippingSubTotal(Double shippingSubTotal) {
    
    this.shippingSubTotal = shippingSubTotal;
    return this;
  }

   /**
   * Shipping total without discounts applied.
   * @return shippingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping total without discounts applied.")

  public Double getShippingSubTotal() {
    return shippingSubTotal;
  }


  public void setShippingSubTotal(Double shippingSubTotal) {
    this.shippingSubTotal = shippingSubTotal;
  }


  public Order shippingTaxTotal(Double shippingTaxTotal) {
    
    this.shippingTaxTotal = shippingTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return shippingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getShippingTaxTotal() {
    return shippingTaxTotal;
  }


  public void setShippingTaxTotal(Double shippingTaxTotal) {
    this.shippingTaxTotal = shippingTaxTotal;
  }


  public Order handlingTaxTotal(Double handlingTaxTotal) {
    
    this.handlingTaxTotal = handlingTaxTotal;
    return this;
  }

   /**
   * Total tax on handling
   * @return handlingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on handling")

  public Double getHandlingTaxTotal() {
    return handlingTaxTotal;
  }


  public void setHandlingTaxTotal(Double handlingTaxTotal) {
    this.handlingTaxTotal = handlingTaxTotal;
  }


  public Order itemTaxTotal(Double itemTaxTotal) {
    
    this.itemTaxTotal = itemTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return itemTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getItemTaxTotal() {
    return itemTaxTotal;
  }


  public void setItemTaxTotal(Double itemTaxTotal) {
    this.itemTaxTotal = itemTaxTotal;
  }


  public Order taxTotal(Double taxTotal) {
    
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * Tax does not appear on cart.
   * @return taxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax does not appear on cart.")

  public Double getTaxTotal() {
    return taxTotal;
  }


  public void setTaxTotal(Double taxTotal) {
    this.taxTotal = taxTotal;
  }


  public Order feeTotal(Double feeTotal) {
    
    this.feeTotal = feeTotal;
    return this;
  }

   /**
   * Not implemented. Total cost of fees for all items in the cart.
   * @return feeTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Total cost of fees for all items in the cart.")

  public Double getFeeTotal() {
    return feeTotal;
  }


  public void setFeeTotal(Double feeTotal) {
    this.feeTotal = feeTotal;
  }


  public Order total(Double total) {
    
    this.total = total;
    return this;
  }

   /**
   * Final total amount of the order including all discounts, shipping, and tax.
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Final total amount of the order including all discounts, shipping, and tax.")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    this.total = total;
  }


  public Order lineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
    return this;
  }

   /**
   * Line Item Subtotals with Order Adjustments
   * @return lineItemSubtotalWithOrderAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Line Item Subtotals with Order Adjustments")

  public Double getLineItemSubtotalWithOrderAdjustments() {
    return lineItemSubtotalWithOrderAdjustments;
  }


  public void setLineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
  }


  public Order shippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
    return this;
  }

   /**
   * Shipping Amount before discount and adjustments
   * @return shippingAmountBeforeDiscountsAndAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping Amount before discount and adjustments")

  public Double getShippingAmountBeforeDiscountsAndAdjustments() {
    return shippingAmountBeforeDiscountsAndAdjustments;
  }


  public void setShippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
  }


  public Order lastValidationDate(OffsetDateTime lastValidationDate) {
    
    this.lastValidationDate = lastValidationDate;
    return this;
  }

   /**
   * Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.
   * @return lastValidationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.")

  public OffsetDateTime getLastValidationDate() {
    return lastValidationDate;
  }


  public void setLastValidationDate(OffsetDateTime lastValidationDate) {
    this.lastValidationDate = lastValidationDate;
  }


  public Order expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.")

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Order changeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    
    this.changeMessages = changeMessages;
    return this;
  }

  public Order addChangeMessagesItem(CommerceRuntimeChangeMessage changeMessagesItem) {
    if (this.changeMessages == null) {
      this.changeMessages = new ArrayList<>();
    }
    this.changeMessages.add(changeMessagesItem);
    return this;
  }

   /**
   * List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.
   * @return changeMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.")

  public List<CommerceRuntimeChangeMessage> getChangeMessages() {
    return changeMessages;
  }


  public void setChangeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    this.changeMessages = changeMessages;
  }


  public Order extendedProperties(List<ExtendedProperty> extendedProperties) {
    
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Order addExtendedPropertiesItem(ExtendedProperty extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.")

  public List<ExtendedProperty> getExtendedProperties() {
    return extendedProperties;
  }


  public void setExtendedProperties(List<ExtendedProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Order discountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    
    this.discountThresholdMessages = discountThresholdMessages;
    return this;
  }

  public Order addDiscountThresholdMessagesItem(CommerceRuntimeThresholdMessage discountThresholdMessagesItem) {
    if (this.discountThresholdMessages == null) {
      this.discountThresholdMessages = new ArrayList<>();
    }
    this.discountThresholdMessages.add(discountThresholdMessagesItem);
    return this;
  }

   /**
   * List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.
   * @return discountThresholdMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.")

  public List<CommerceRuntimeThresholdMessage> getDiscountThresholdMessages() {
    return discountThresholdMessages;
  }


  public void setDiscountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    this.discountThresholdMessages = discountThresholdMessages;
  }


  public Order auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderNumber, order.orderNumber) &&
        Objects.equals(this.locationCode, order.locationCode) &&
        Objects.equals(this.version, order.version) &&
        Objects.equals(this.parentOrderId, order.parentOrderId) &&
        Objects.equals(this.parentOrderNumber, order.parentOrderNumber) &&
        Objects.equals(this.parentCheckoutId, order.parentCheckoutId) &&
        Objects.equals(this.parentCheckoutNumber, order.parentCheckoutNumber) &&
        Objects.equals(this.partialOrderNumber, order.partialOrderNumber) &&
        Objects.equals(this.partialOrderCount, order.partialOrderCount) &&
        Objects.equals(this.isPartialOrder, order.isPartialOrder) &&
        Objects.equals(this.parentReturnId, order.parentReturnId) &&
        Objects.equals(this.parentReturnNumber, order.parentReturnNumber) &&
        Objects.equals(this.originalCartId, order.originalCartId) &&
        Objects.equals(this.originalQuoteId, order.originalQuoteId) &&
        Objects.equals(this.originalQuoteNumber, order.originalQuoteNumber) &&
        Objects.equals(this.priceListCode, order.priceListCode) &&
        Objects.equals(this.availableActions, order.availableActions) &&
        Objects.equals(this.shopperNotes, order.shopperNotes) &&
        Objects.equals(this.customerAccountId, order.customerAccountId) &&
        Objects.equals(this.customerTaxId, order.customerTaxId) &&
        Objects.equals(this.isTaxExempt, order.isTaxExempt) &&
        Objects.equals(this.email, order.email) &&
        Objects.equals(this.alternateContact, order.alternateContact) &&
        Objects.equals(this.ipAddress, order.ipAddress) &&
        Objects.equals(this.sourceDevice, order.sourceDevice) &&
        Objects.equals(this.acceptsMarketing, order.acceptsMarketing) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.type, order.type) &&
        Objects.equals(this.paymentStatus, order.paymentStatus) &&
        Objects.equals(this.returnStatus, order.returnStatus) &&
        Objects.equals(this.isEligibleForReturns, order.isEligibleForReturns) &&
        Objects.equals(this.totalCollected, order.totalCollected) &&
        Objects.equals(this.attributes, order.attributes) &&
        Objects.equals(this.adjustment, order.adjustment) &&
        Objects.equals(this.shippingAdjustment, order.shippingAdjustment) &&
        Objects.equals(this.handlingAdjustment, order.handlingAdjustment) &&
        Objects.equals(this.shippingDiscounts, order.shippingDiscounts) &&
        Objects.equals(this.handlingDiscounts, order.handlingDiscounts) &&
        Objects.equals(this.handlingAmount, order.handlingAmount) &&
        Objects.equals(this.handlingSubTotal, order.handlingSubTotal) &&
        Objects.equals(this.handlingTotal, order.handlingTotal) &&
        Objects.equals(this.dutyAmount, order.dutyAmount) &&
        Objects.equals(this.dutyTotal, order.dutyTotal) &&
        Objects.equals(this.fulfillmentStatus, order.fulfillmentStatus) &&
        Objects.equals(this.isFulfillable, order.isFulfillable) &&
        Objects.equals(this.submittedDate, order.submittedDate) &&
        Objects.equals(this.shipmentCreationOffset, order.shipmentCreationOffset) &&
        Objects.equals(this.releaseShipmentDate, order.releaseShipmentDate) &&
        Objects.equals(this.cancelledDate, order.cancelledDate) &&
        Objects.equals(this.closedDate, order.closedDate) &&
        Objects.equals(this.acceptedDate, order.acceptedDate) &&
        Objects.equals(this.notes, order.notes) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.validationResults, order.validationResults) &&
        Objects.equals(this.billingInfo, order.billingInfo) &&
        Objects.equals(this.payments, order.payments) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.credits, order.credits) &&
        Objects.equals(this.packages, order.packages) &&
        Objects.equals(this.pickups, order.pickups) &&
        Objects.equals(this.digitalPackages, order.digitalPackages) &&
        Objects.equals(this.shipments, order.shipments) &&
        Objects.equals(this.isDraft, order.isDraft) &&
        Objects.equals(this.hasDraft, order.hasDraft) &&
        Objects.equals(this.isImport, order.isImport) &&
        Objects.equals(this.isHistoricalImport, order.isHistoricalImport) &&
        Objects.equals(this.importDate, order.importDate) &&
        Objects.equals(this.isUnified, order.isUnified) &&
        Objects.equals(this.externalId, order.externalId) &&
        Objects.equals(this.couponCodes, order.couponCodes) &&
        Objects.equals(this.invalidCoupons, order.invalidCoupons) &&
        Objects.equals(this.amountAvailableForRefund, order.amountAvailableForRefund) &&
        Objects.equals(this.amountRemainingForPayment, order.amountRemainingForPayment) &&
        Objects.equals(this.amountRefunded, order.amountRefunded) &&
        Objects.equals(this.readyToCapture, order.readyToCapture) &&
        Objects.equals(this.isOptInForSms, order.isOptInForSms) &&
        Objects.equals(this.subscriptionIds, order.subscriptionIds) &&
        Objects.equals(this.continuityOrderOrdinal, order.continuityOrderOrdinal) &&
        Objects.equals(this.reservationId, order.reservationId) &&
        Objects.equals(this.restrictEdit, order.restrictEdit) &&
        Objects.equals(this.restrictCancellation, order.restrictCancellation) &&
        Objects.equals(this.userId, order.userId) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.tenantId, order.tenantId) &&
        Objects.equals(this.siteId, order.siteId) &&
        Objects.equals(this.channelCode, order.channelCode) &&
        Objects.equals(this.currencyCode, order.currencyCode) &&
        Objects.equals(this.visitId, order.visitId) &&
        Objects.equals(this.webSessionId, order.webSessionId) &&
        Objects.equals(this.customerInteractionType, order.customerInteractionType) &&
        Objects.equals(this.fulfillmentInfo, order.fulfillmentInfo) &&
        Objects.equals(this.orderDiscounts, order.orderDiscounts) &&
        Objects.equals(this.suggestedDiscounts, order.suggestedDiscounts) &&
        Objects.equals(this.rejectedDiscounts, order.rejectedDiscounts) &&
        Objects.equals(this.data, order.data) &&
        Objects.equals(this.taxData, order.taxData) &&
        Objects.equals(this.subtotal, order.subtotal) &&
        Objects.equals(this.discountedSubtotal, order.discountedSubtotal) &&
        Objects.equals(this.discountTotal, order.discountTotal) &&
        Objects.equals(this.discountedTotal, order.discountedTotal) &&
        Objects.equals(this.shippingTotal, order.shippingTotal) &&
        Objects.equals(this.shippingSubTotal, order.shippingSubTotal) &&
        Objects.equals(this.shippingTaxTotal, order.shippingTaxTotal) &&
        Objects.equals(this.handlingTaxTotal, order.handlingTaxTotal) &&
        Objects.equals(this.itemTaxTotal, order.itemTaxTotal) &&
        Objects.equals(this.taxTotal, order.taxTotal) &&
        Objects.equals(this.feeTotal, order.feeTotal) &&
        Objects.equals(this.total, order.total) &&
        Objects.equals(this.lineItemSubtotalWithOrderAdjustments, order.lineItemSubtotalWithOrderAdjustments) &&
        Objects.equals(this.shippingAmountBeforeDiscountsAndAdjustments, order.shippingAmountBeforeDiscountsAndAdjustments) &&
        Objects.equals(this.lastValidationDate, order.lastValidationDate) &&
        Objects.equals(this.expirationDate, order.expirationDate) &&
        Objects.equals(this.changeMessages, order.changeMessages) &&
        Objects.equals(this.extendedProperties, order.extendedProperties) &&
        Objects.equals(this.discountThresholdMessages, order.discountThresholdMessages) &&
        Objects.equals(this.auditInfo, order.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderNumber, locationCode, version, parentOrderId, parentOrderNumber, parentCheckoutId, parentCheckoutNumber, partialOrderNumber, partialOrderCount, isPartialOrder, parentReturnId, parentReturnNumber, originalCartId, originalQuoteId, originalQuoteNumber, priceListCode, availableActions, shopperNotes, customerAccountId, customerTaxId, isTaxExempt, email, alternateContact, ipAddress, sourceDevice, acceptsMarketing, status, type, paymentStatus, returnStatus, isEligibleForReturns, totalCollected, attributes, adjustment, shippingAdjustment, handlingAdjustment, shippingDiscounts, handlingDiscounts, handlingAmount, handlingSubTotal, handlingTotal, dutyAmount, dutyTotal, fulfillmentStatus, isFulfillable, submittedDate, shipmentCreationOffset, releaseShipmentDate, cancelledDate, closedDate, acceptedDate, notes, items, validationResults, billingInfo, payments, refunds, credits, packages, pickups, digitalPackages, shipments, isDraft, hasDraft, isImport, isHistoricalImport, importDate, isUnified, externalId, couponCodes, invalidCoupons, amountAvailableForRefund, amountRemainingForPayment, amountRefunded, readyToCapture, isOptInForSms, subscriptionIds, continuityOrderOrdinal, reservationId, restrictEdit, restrictCancellation, userId, id, tenantId, siteId, channelCode, currencyCode, visitId, webSessionId, customerInteractionType, fulfillmentInfo, orderDiscounts, suggestedDiscounts, rejectedDiscounts, data, taxData, subtotal, discountedSubtotal, discountTotal, discountedTotal, shippingTotal, shippingSubTotal, shippingTaxTotal, handlingTaxTotal, itemTaxTotal, taxTotal, feeTotal, total, lineItemSubtotalWithOrderAdjustments, shippingAmountBeforeDiscountsAndAdjustments, lastValidationDate, expirationDate, changeMessages, extendedProperties, discountThresholdMessages, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    parentOrderId: ").append(toIndentedString(parentOrderId)).append("\n");
    sb.append("    parentOrderNumber: ").append(toIndentedString(parentOrderNumber)).append("\n");
    sb.append("    parentCheckoutId: ").append(toIndentedString(parentCheckoutId)).append("\n");
    sb.append("    parentCheckoutNumber: ").append(toIndentedString(parentCheckoutNumber)).append("\n");
    sb.append("    partialOrderNumber: ").append(toIndentedString(partialOrderNumber)).append("\n");
    sb.append("    partialOrderCount: ").append(toIndentedString(partialOrderCount)).append("\n");
    sb.append("    isPartialOrder: ").append(toIndentedString(isPartialOrder)).append("\n");
    sb.append("    parentReturnId: ").append(toIndentedString(parentReturnId)).append("\n");
    sb.append("    parentReturnNumber: ").append(toIndentedString(parentReturnNumber)).append("\n");
    sb.append("    originalCartId: ").append(toIndentedString(originalCartId)).append("\n");
    sb.append("    originalQuoteId: ").append(toIndentedString(originalQuoteId)).append("\n");
    sb.append("    originalQuoteNumber: ").append(toIndentedString(originalQuoteNumber)).append("\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    availableActions: ").append(toIndentedString(availableActions)).append("\n");
    sb.append("    shopperNotes: ").append(toIndentedString(shopperNotes)).append("\n");
    sb.append("    customerAccountId: ").append(toIndentedString(customerAccountId)).append("\n");
    sb.append("    customerTaxId: ").append(toIndentedString(customerTaxId)).append("\n");
    sb.append("    isTaxExempt: ").append(toIndentedString(isTaxExempt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    alternateContact: ").append(toIndentedString(alternateContact)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    sourceDevice: ").append(toIndentedString(sourceDevice)).append("\n");
    sb.append("    acceptsMarketing: ").append(toIndentedString(acceptsMarketing)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    returnStatus: ").append(toIndentedString(returnStatus)).append("\n");
    sb.append("    isEligibleForReturns: ").append(toIndentedString(isEligibleForReturns)).append("\n");
    sb.append("    totalCollected: ").append(toIndentedString(totalCollected)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    shippingAdjustment: ").append(toIndentedString(shippingAdjustment)).append("\n");
    sb.append("    handlingAdjustment: ").append(toIndentedString(handlingAdjustment)).append("\n");
    sb.append("    shippingDiscounts: ").append(toIndentedString(shippingDiscounts)).append("\n");
    sb.append("    handlingDiscounts: ").append(toIndentedString(handlingDiscounts)).append("\n");
    sb.append("    handlingAmount: ").append(toIndentedString(handlingAmount)).append("\n");
    sb.append("    handlingSubTotal: ").append(toIndentedString(handlingSubTotal)).append("\n");
    sb.append("    handlingTotal: ").append(toIndentedString(handlingTotal)).append("\n");
    sb.append("    dutyAmount: ").append(toIndentedString(dutyAmount)).append("\n");
    sb.append("    dutyTotal: ").append(toIndentedString(dutyTotal)).append("\n");
    sb.append("    fulfillmentStatus: ").append(toIndentedString(fulfillmentStatus)).append("\n");
    sb.append("    isFulfillable: ").append(toIndentedString(isFulfillable)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    shipmentCreationOffset: ").append(toIndentedString(shipmentCreationOffset)).append("\n");
    sb.append("    releaseShipmentDate: ").append(toIndentedString(releaseShipmentDate)).append("\n");
    sb.append("    cancelledDate: ").append(toIndentedString(cancelledDate)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    acceptedDate: ").append(toIndentedString(acceptedDate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    validationResults: ").append(toIndentedString(validationResults)).append("\n");
    sb.append("    billingInfo: ").append(toIndentedString(billingInfo)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    pickups: ").append(toIndentedString(pickups)).append("\n");
    sb.append("    digitalPackages: ").append(toIndentedString(digitalPackages)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    hasDraft: ").append(toIndentedString(hasDraft)).append("\n");
    sb.append("    isImport: ").append(toIndentedString(isImport)).append("\n");
    sb.append("    isHistoricalImport: ").append(toIndentedString(isHistoricalImport)).append("\n");
    sb.append("    importDate: ").append(toIndentedString(importDate)).append("\n");
    sb.append("    isUnified: ").append(toIndentedString(isUnified)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    couponCodes: ").append(toIndentedString(couponCodes)).append("\n");
    sb.append("    invalidCoupons: ").append(toIndentedString(invalidCoupons)).append("\n");
    sb.append("    amountAvailableForRefund: ").append(toIndentedString(amountAvailableForRefund)).append("\n");
    sb.append("    amountRemainingForPayment: ").append(toIndentedString(amountRemainingForPayment)).append("\n");
    sb.append("    amountRefunded: ").append(toIndentedString(amountRefunded)).append("\n");
    sb.append("    readyToCapture: ").append(toIndentedString(readyToCapture)).append("\n");
    sb.append("    isOptInForSms: ").append(toIndentedString(isOptInForSms)).append("\n");
    sb.append("    subscriptionIds: ").append(toIndentedString(subscriptionIds)).append("\n");
    sb.append("    continuityOrderOrdinal: ").append(toIndentedString(continuityOrderOrdinal)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    restrictEdit: ").append(toIndentedString(restrictEdit)).append("\n");
    sb.append("    restrictCancellation: ").append(toIndentedString(restrictCancellation)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    webSessionId: ").append(toIndentedString(webSessionId)).append("\n");
    sb.append("    customerInteractionType: ").append(toIndentedString(customerInteractionType)).append("\n");
    sb.append("    fulfillmentInfo: ").append(toIndentedString(fulfillmentInfo)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    suggestedDiscounts: ").append(toIndentedString(suggestedDiscounts)).append("\n");
    sb.append("    rejectedDiscounts: ").append(toIndentedString(rejectedDiscounts)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    discountedSubtotal: ").append(toIndentedString(discountedSubtotal)).append("\n");
    sb.append("    discountTotal: ").append(toIndentedString(discountTotal)).append("\n");
    sb.append("    discountedTotal: ").append(toIndentedString(discountedTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    shippingSubTotal: ").append(toIndentedString(shippingSubTotal)).append("\n");
    sb.append("    shippingTaxTotal: ").append(toIndentedString(shippingTaxTotal)).append("\n");
    sb.append("    handlingTaxTotal: ").append(toIndentedString(handlingTaxTotal)).append("\n");
    sb.append("    itemTaxTotal: ").append(toIndentedString(itemTaxTotal)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    feeTotal: ").append(toIndentedString(feeTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    lineItemSubtotalWithOrderAdjustments: ").append(toIndentedString(lineItemSubtotalWithOrderAdjustments)).append("\n");
    sb.append("    shippingAmountBeforeDiscountsAndAdjustments: ").append(toIndentedString(shippingAmountBeforeDiscountsAndAdjustments)).append("\n");
    sb.append("    lastValidationDate: ").append(toIndentedString(lastValidationDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    changeMessages: ").append(toIndentedString(changeMessages)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    discountThresholdMessages: ").append(toIndentedString(discountThresholdMessages)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("id");
    openapiFields.add("tenantId");
    openapiFields.add("siteId");
    openapiFields.add("channelCode");
    openapiFields.add("currencyCode");
    openapiFields.add("visitId");
    openapiFields.add("webSessionId");
    openapiFields.add("customerInteractionType");
    openapiFields.add("fulfillmentInfo");
    openapiFields.add("orderDiscounts");
    openapiFields.add("suggestedDiscounts");
    openapiFields.add("rejectedDiscounts");
    openapiFields.add("data");
    openapiFields.add("taxData");
    openapiFields.add("subtotal");
    openapiFields.add("discountedSubtotal");
    openapiFields.add("discountTotal");
    openapiFields.add("discountedTotal");
    openapiFields.add("shippingTotal");
    openapiFields.add("shippingSubTotal");
    openapiFields.add("shippingTaxTotal");
    openapiFields.add("handlingTaxTotal");
    openapiFields.add("itemTaxTotal");
    openapiFields.add("taxTotal");
    openapiFields.add("feeTotal");
    openapiFields.add("total");
    openapiFields.add("lineItemSubtotalWithOrderAdjustments");
    openapiFields.add("shippingAmountBeforeDiscountsAndAdjustments");
    openapiFields.add("lastValidationDate");
    openapiFields.add("expirationDate");
    openapiFields.add("changeMessages");
    openapiFields.add("extendedProperties");
    openapiFields.add("discountThresholdMessages");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Order
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Order.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("parentOrderId") != null && !jsonObj.get("parentOrderId").isJsonNull()) && !jsonObj.get("parentOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentOrderId").toString()));
      }
      if ((jsonObj.get("parentCheckoutId") != null && !jsonObj.get("parentCheckoutId").isJsonNull()) && !jsonObj.get("parentCheckoutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCheckoutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentCheckoutId").toString()));
      }
      if ((jsonObj.get("parentReturnId") != null && !jsonObj.get("parentReturnId").isJsonNull()) && !jsonObj.get("parentReturnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentReturnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentReturnId").toString()));
      }
      if ((jsonObj.get("originalCartId") != null && !jsonObj.get("originalCartId").isJsonNull()) && !jsonObj.get("originalCartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCartId").toString()));
      }
      if ((jsonObj.get("originalQuoteId") != null && !jsonObj.get("originalQuoteId").isJsonNull()) && !jsonObj.get("originalQuoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalQuoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalQuoteId").toString()));
      }
      if ((jsonObj.get("priceListCode") != null && !jsonObj.get("priceListCode").isJsonNull()) && !jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("availableActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableActions` to be an array in the JSON string but got `%s`", jsonObj.get("availableActions").toString()));
      }
      // validate the optional field `shopperNotes`
      if (jsonObj.get("shopperNotes") != null && !jsonObj.get("shopperNotes").isJsonNull()) {
        CommerceRuntimeShopperNotes.validateJsonObject(jsonObj.getAsJsonObject("shopperNotes"));
      }
      if ((jsonObj.get("customerTaxId") != null && !jsonObj.get("customerTaxId").isJsonNull()) && !jsonObj.get("customerTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerTaxId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `alternateContact`
      if (jsonObj.get("alternateContact") != null && !jsonObj.get("alternateContact").isJsonNull()) {
        AlternateContact.validateJsonObject(jsonObj.getAsJsonObject("alternateContact"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("sourceDevice") != null && !jsonObj.get("sourceDevice").isJsonNull()) && !jsonObj.get("sourceDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDevice").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("returnStatus") != null && !jsonObj.get("returnStatus").isJsonNull()) && !jsonObj.get("returnStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnStatus").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            CommerceRuntimeOrderAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `adjustment`
      if (jsonObj.get("adjustment") != null && !jsonObj.get("adjustment").isJsonNull()) {
        Adjustment.validateJsonObject(jsonObj.getAsJsonObject("adjustment"));
      }
      // validate the optional field `shippingAdjustment`
      if (jsonObj.get("shippingAdjustment") != null && !jsonObj.get("shippingAdjustment").isJsonNull()) {
        Adjustment.validateJsonObject(jsonObj.getAsJsonObject("shippingAdjustment"));
      }
      // validate the optional field `handlingAdjustment`
      if (jsonObj.get("handlingAdjustment") != null && !jsonObj.get("handlingAdjustment").isJsonNull()) {
        Adjustment.validateJsonObject(jsonObj.getAsJsonObject("handlingAdjustment"));
      }
      if (jsonObj.get("shippingDiscounts") != null && !jsonObj.get("shippingDiscounts").isJsonNull()) {
        JsonArray jsonArrayshippingDiscounts = jsonObj.getAsJsonArray("shippingDiscounts");
        if (jsonArrayshippingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("shippingDiscounts").toString()));
          }

          // validate the optional field `shippingDiscounts` (array)
          for (int i = 0; i < jsonArrayshippingDiscounts.size(); i++) {
            ShippingDiscount.validateJsonObject(jsonArrayshippingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("handlingDiscounts") != null && !jsonObj.get("handlingDiscounts").isJsonNull()) {
        JsonArray jsonArrayhandlingDiscounts = jsonObj.getAsJsonArray("handlingDiscounts");
        if (jsonArrayhandlingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("handlingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `handlingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("handlingDiscounts").toString()));
          }

          // validate the optional field `handlingDiscounts` (array)
          for (int i = 0; i < jsonArrayhandlingDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayhandlingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("fulfillmentStatus") != null && !jsonObj.get("fulfillmentStatus").isJsonNull()) && !jsonObj.get("fulfillmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentStatus").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            OrderNote.validateJsonObject(jsonArraynotes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            CommerceRuntimeOrderItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("validationResults") != null && !jsonObj.get("validationResults").isJsonNull()) {
        JsonArray jsonArrayvalidationResults = jsonObj.getAsJsonArray("validationResults");
        if (jsonArrayvalidationResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationResults` to be an array in the JSON string but got `%s`", jsonObj.get("validationResults").toString()));
          }

          // validate the optional field `validationResults` (array)
          for (int i = 0; i < jsonArrayvalidationResults.size(); i++) {
            OrderValidationResult.validateJsonObject(jsonArrayvalidationResults.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `billingInfo`
      if (jsonObj.get("billingInfo") != null && !jsonObj.get("billingInfo").isJsonNull()) {
        BillingInfo.validateJsonObject(jsonObj.getAsJsonObject("billingInfo"));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonObject(jsonArraypayments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            Refund.validateJsonObject(jsonArrayrefunds.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("credits") != null && !jsonObj.get("credits").isJsonNull()) {
        JsonArray jsonArraycredits = jsonObj.getAsJsonArray("credits");
        if (jsonArraycredits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credits` to be an array in the JSON string but got `%s`", jsonObj.get("credits").toString()));
          }

          // validate the optional field `credits` (array)
          for (int i = 0; i < jsonArraycredits.size(); i++) {
            CommerceRuntimeCredit.validateJsonObject(jsonArraycredits.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            CommerceRuntimePackage.validateJsonObject(jsonArraypackages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("pickups") != null && !jsonObj.get("pickups").isJsonNull()) {
        JsonArray jsonArraypickups = jsonObj.getAsJsonArray("pickups");
        if (jsonArraypickups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickups` to be an array in the JSON string but got `%s`", jsonObj.get("pickups").toString()));
          }

          // validate the optional field `pickups` (array)
          for (int i = 0; i < jsonArraypickups.size(); i++) {
            Pickup.validateJsonObject(jsonArraypickups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("digitalPackages") != null && !jsonObj.get("digitalPackages").isJsonNull()) {
        JsonArray jsonArraydigitalPackages = jsonObj.getAsJsonArray("digitalPackages");
        if (jsonArraydigitalPackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("digitalPackages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `digitalPackages` to be an array in the JSON string but got `%s`", jsonObj.get("digitalPackages").toString()));
          }

          // validate the optional field `digitalPackages` (array)
          for (int i = 0; i < jsonArraydigitalPackages.size(); i++) {
            DigitalPackage.validateJsonObject(jsonArraydigitalPackages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            CommerceRuntimeShipment.validateJsonObject(jsonArrayshipments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("couponCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponCodes` to be an array in the JSON string but got `%s`", jsonObj.get("couponCodes").toString()));
      }
      if (jsonObj.get("invalidCoupons") != null && !jsonObj.get("invalidCoupons").isJsonNull()) {
        JsonArray jsonArrayinvalidCoupons = jsonObj.getAsJsonArray("invalidCoupons");
        if (jsonArrayinvalidCoupons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidCoupons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidCoupons` to be an array in the JSON string but got `%s`", jsonObj.get("invalidCoupons").toString()));
          }

          // validate the optional field `invalidCoupons` (array)
          for (int i = 0; i < jsonArrayinvalidCoupons.size(); i++) {
            InvalidCoupon.validateJsonObject(jsonArrayinvalidCoupons.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("subscriptionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionIds` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptionIds").toString()));
      }
      if ((jsonObj.get("reservationId") != null && !jsonObj.get("reservationId").isJsonNull()) && !jsonObj.get("reservationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("channelCode") != null && !jsonObj.get("channelCode").isJsonNull()) && !jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("visitId") != null && !jsonObj.get("visitId").isJsonNull()) && !jsonObj.get("visitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitId").toString()));
      }
      if ((jsonObj.get("webSessionId") != null && !jsonObj.get("webSessionId").isJsonNull()) && !jsonObj.get("webSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSessionId").toString()));
      }
      if ((jsonObj.get("customerInteractionType") != null && !jsonObj.get("customerInteractionType").isJsonNull()) && !jsonObj.get("customerInteractionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerInteractionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerInteractionType").toString()));
      }
      // validate the optional field `fulfillmentInfo`
      if (jsonObj.get("fulfillmentInfo") != null && !jsonObj.get("fulfillmentInfo").isJsonNull()) {
        FulfillmentInfo.validateJsonObject(jsonObj.getAsJsonObject("fulfillmentInfo"));
      }
      if (jsonObj.get("orderDiscounts") != null && !jsonObj.get("orderDiscounts").isJsonNull()) {
        JsonArray jsonArrayorderDiscounts = jsonObj.getAsJsonArray("orderDiscounts");
        if (jsonArrayorderDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("orderDiscounts").toString()));
          }

          // validate the optional field `orderDiscounts` (array)
          for (int i = 0; i < jsonArrayorderDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayorderDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("suggestedDiscounts") != null && !jsonObj.get("suggestedDiscounts").isJsonNull()) {
        JsonArray jsonArraysuggestedDiscounts = jsonObj.getAsJsonArray("suggestedDiscounts");
        if (jsonArraysuggestedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDiscounts").toString()));
          }

          // validate the optional field `suggestedDiscounts` (array)
          for (int i = 0; i < jsonArraysuggestedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArraysuggestedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("rejectedDiscounts") != null && !jsonObj.get("rejectedDiscounts").isJsonNull()) {
        JsonArray jsonArrayrejectedDiscounts = jsonObj.getAsJsonArray("rejectedDiscounts");
        if (jsonArrayrejectedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rejectedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rejectedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedDiscounts").toString()));
          }

          // validate the optional field `rejectedDiscounts` (array)
          for (int i = 0; i < jsonArrayrejectedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArrayrejectedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("changeMessages") != null && !jsonObj.get("changeMessages").isJsonNull()) {
        JsonArray jsonArraychangeMessages = jsonObj.getAsJsonArray("changeMessages");
        if (jsonArraychangeMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changeMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changeMessages` to be an array in the JSON string but got `%s`", jsonObj.get("changeMessages").toString()));
          }

          // validate the optional field `changeMessages` (array)
          for (int i = 0; i < jsonArraychangeMessages.size(); i++) {
            CommerceRuntimeChangeMessage.validateJsonObject(jsonArraychangeMessages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("extendedProperties") != null && !jsonObj.get("extendedProperties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extendedProperties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extendedProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extendedProperties` to be an array in the JSON string but got `%s`", jsonObj.get("extendedProperties").toString()));
          }

          // validate the optional field `extendedProperties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            ExtendedProperty.validateJsonObject(jsonArrayextendedProperties.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("discountThresholdMessages") != null && !jsonObj.get("discountThresholdMessages").isJsonNull()) {
        JsonArray jsonArraydiscountThresholdMessages = jsonObj.getAsJsonArray("discountThresholdMessages");
        if (jsonArraydiscountThresholdMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountThresholdMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountThresholdMessages` to be an array in the JSON string but got `%s`", jsonObj.get("discountThresholdMessages").toString()));
          }

          // validate the optional field `discountThresholdMessages` (array)
          for (int i = 0; i < jsonArraydiscountThresholdMessages.size(); i++) {
            CommerceRuntimeThresholdMessage.validateJsonObject(jsonArraydiscountThresholdMessages.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

