/*
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.subscription.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.subscription.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.subscription.models.FulfillmentTask;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CommerceRuntimeWorkflowState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommerceRuntimeWorkflowState implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private OffsetDateTime completedDate;

  public static final String SERIALIZED_NAME_PROCESS_INSTANCE_ID = "processInstanceId";
  @SerializedName(SERIALIZED_NAME_PROCESS_INSTANCE_ID)
  private String processInstanceId;

  public static final String SERIALIZED_NAME_SHIPMENT_STATE = "shipmentState";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_STATE)
  private String shipmentState;

  public static final String SERIALIZED_NAME_TASK_LIST = "taskList";
  @SerializedName(SERIALIZED_NAME_TASK_LIST)
  private List<FulfillmentTask> taskList = null;

  public CommerceRuntimeWorkflowState() {
  }

  public CommerceRuntimeWorkflowState attributes(Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CommerceRuntimeWorkflowState putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public CommerceRuntimeWorkflowState auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public CommerceRuntimeWorkflowState completedDate(OffsetDateTime completedDate) {
    
    this.completedDate = completedDate;
    return this;
  }

   /**
   * Get completedDate
   * @return completedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }


  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }


  public CommerceRuntimeWorkflowState processInstanceId(String processInstanceId) {
    
    this.processInstanceId = processInstanceId;
    return this;
  }

   /**
   * Get processInstanceId
   * @return processInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProcessInstanceId() {
    return processInstanceId;
  }


  public void setProcessInstanceId(String processInstanceId) {
    this.processInstanceId = processInstanceId;
  }


  public CommerceRuntimeWorkflowState shipmentState(String shipmentState) {
    
    this.shipmentState = shipmentState;
    return this;
  }

   /**
   * Get shipmentState
   * @return shipmentState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShipmentState() {
    return shipmentState;
  }


  public void setShipmentState(String shipmentState) {
    this.shipmentState = shipmentState;
  }


  public CommerceRuntimeWorkflowState taskList(List<FulfillmentTask> taskList) {
    
    this.taskList = taskList;
    return this;
  }

  public CommerceRuntimeWorkflowState addTaskListItem(FulfillmentTask taskListItem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<>();
    }
    this.taskList.add(taskListItem);
    return this;
  }

   /**
   * Get taskList
   * @return taskList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FulfillmentTask> getTaskList() {
    return taskList;
  }


  public void setTaskList(List<FulfillmentTask> taskList) {
    this.taskList = taskList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommerceRuntimeWorkflowState commerceRuntimeWorkflowState = (CommerceRuntimeWorkflowState) o;
    return Objects.equals(this.attributes, commerceRuntimeWorkflowState.attributes) &&
        Objects.equals(this.auditInfo, commerceRuntimeWorkflowState.auditInfo) &&
        Objects.equals(this.completedDate, commerceRuntimeWorkflowState.completedDate) &&
        Objects.equals(this.processInstanceId, commerceRuntimeWorkflowState.processInstanceId) &&
        Objects.equals(this.shipmentState, commerceRuntimeWorkflowState.shipmentState) &&
        Objects.equals(this.taskList, commerceRuntimeWorkflowState.taskList);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, auditInfo, completedDate, processInstanceId, shipmentState, taskList);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommerceRuntimeWorkflowState {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
    sb.append("    shipmentState: ").append(toIndentedString(shipmentState)).append("\n");
    sb.append("    taskList: ").append(toIndentedString(taskList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("auditInfo");
    openapiFields.add("completedDate");
    openapiFields.add("processInstanceId");
    openapiFields.add("shipmentState");
    openapiFields.add("taskList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommerceRuntimeWorkflowState
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommerceRuntimeWorkflowState.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommerceRuntimeWorkflowState is not found in the empty JSON string", CommerceRuntimeWorkflowState.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CommerceRuntimeWorkflowState.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommerceRuntimeWorkflowState` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if ((jsonObj.get("processInstanceId") != null && !jsonObj.get("processInstanceId").isJsonNull()) && !jsonObj.get("processInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processInstanceId").toString()));
      }
      if ((jsonObj.get("shipmentState") != null && !jsonObj.get("shipmentState").isJsonNull()) && !jsonObj.get("shipmentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentState").toString()));
      }
      if (jsonObj.get("taskList") != null && !jsonObj.get("taskList").isJsonNull()) {
        JsonArray jsonArraytaskList = jsonObj.getAsJsonArray("taskList");
        if (jsonArraytaskList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taskList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taskList` to be an array in the JSON string but got `%s`", jsonObj.get("taskList").toString()));
          }

          // validate the optional field `taskList` (array)
          for (int i = 0; i < jsonArraytaskList.size(); i++) {
            FulfillmentTask.validateJsonObject(jsonArraytaskList.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommerceRuntimeWorkflowState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommerceRuntimeWorkflowState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommerceRuntimeWorkflowState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommerceRuntimeWorkflowState.class));

       return (TypeAdapter<T>) new TypeAdapter<CommerceRuntimeWorkflowState>() {
           @Override
           public void write(JsonWriter out, CommerceRuntimeWorkflowState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommerceRuntimeWorkflowState read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommerceRuntimeWorkflowState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommerceRuntimeWorkflowState
  * @throws IOException if the JSON string is invalid with respect to CommerceRuntimeWorkflowState
  */
  public static CommerceRuntimeWorkflowState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommerceRuntimeWorkflowState.class);
  }

 /**
  * Convert an instance of CommerceRuntimeWorkflowState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

