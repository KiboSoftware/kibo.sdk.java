/*
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.solrschemamanager.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * SchemaDefinitionField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SchemaDefinitionField implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_FIELD_DEFINITION = "fieldDefinition";
  @SerializedName(SERIALIZED_NAME_FIELD_DEFINITION)
  private String fieldDefinition;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_SEARCH_FIELD_NAME = "searchFieldName";
  @SerializedName(SERIALIZED_NAME_SEARCH_FIELD_NAME)
  private String searchFieldName;

  public static final String SERIALIZED_NAME_INGEST_FIELD_NAME = "ingestFieldName";
  @SerializedName(SERIALIZED_NAME_INGEST_FIELD_NAME)
  private String ingestFieldName;

  public SchemaDefinitionField() {
  }

  public SchemaDefinitionField fieldName(String fieldName) {
    
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getFieldName() {
    return fieldName;
  }


  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public SchemaDefinitionField fieldDefinition(String fieldDefinition) {
    
    this.fieldDefinition = fieldDefinition;
    return this;
  }

   /**
   * Get fieldDefinition
   * @return fieldDefinition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getFieldDefinition() {
    return fieldDefinition;
  }


  public void setFieldDefinition(String fieldDefinition) {
    this.fieldDefinition = fieldDefinition;
  }


  public SchemaDefinitionField friendlyName(String friendlyName) {
    
    this.friendlyName = friendlyName;
    return this;
  }

   /**
   * Get friendlyName
   * @return friendlyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFriendlyName() {
    return friendlyName;
  }


  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public SchemaDefinitionField searchFieldName(String searchFieldName) {
    
    this.searchFieldName = searchFieldName;
    return this;
  }

   /**
   * Get searchFieldName
   * @return searchFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSearchFieldName() {
    return searchFieldName;
  }


  public void setSearchFieldName(String searchFieldName) {
    this.searchFieldName = searchFieldName;
  }


  public SchemaDefinitionField ingestFieldName(String ingestFieldName) {
    
    this.ingestFieldName = ingestFieldName;
    return this;
  }

   /**
   * Get ingestFieldName
   * @return ingestFieldName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIngestFieldName() {
    return ingestFieldName;
  }


  public void setIngestFieldName(String ingestFieldName) {
    this.ingestFieldName = ingestFieldName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaDefinitionField schemaDefinitionField = (SchemaDefinitionField) o;
    return Objects.equals(this.fieldName, schemaDefinitionField.fieldName) &&
        Objects.equals(this.fieldDefinition, schemaDefinitionField.fieldDefinition) &&
        Objects.equals(this.friendlyName, schemaDefinitionField.friendlyName) &&
        Objects.equals(this.searchFieldName, schemaDefinitionField.searchFieldName) &&
        Objects.equals(this.ingestFieldName, schemaDefinitionField.ingestFieldName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, fieldDefinition, friendlyName, searchFieldName, ingestFieldName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaDefinitionField {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldDefinition: ").append(toIndentedString(fieldDefinition)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    searchFieldName: ").append(toIndentedString(searchFieldName)).append("\n");
    sb.append("    ingestFieldName: ").append(toIndentedString(ingestFieldName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldName");
    openapiFields.add("fieldDefinition");
    openapiFields.add("friendlyName");
    openapiFields.add("searchFieldName");
    openapiFields.add("ingestFieldName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldName");
    openapiRequiredFields.add("fieldDefinition");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchemaDefinitionField
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchemaDefinitionField.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaDefinitionField is not found in the empty JSON string", SchemaDefinitionField.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SchemaDefinitionField.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaDefinitionField` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchemaDefinitionField.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      if (!jsonObj.get("fieldDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldDefinition").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("searchFieldName") != null && !jsonObj.get("searchFieldName").isJsonNull()) && !jsonObj.get("searchFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchFieldName").toString()));
      }
      if ((jsonObj.get("ingestFieldName") != null && !jsonObj.get("ingestFieldName").isJsonNull()) && !jsonObj.get("ingestFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ingestFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ingestFieldName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaDefinitionField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaDefinitionField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaDefinitionField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaDefinitionField.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaDefinitionField>() {
           @Override
           public void write(JsonWriter out, SchemaDefinitionField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaDefinitionField read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchemaDefinitionField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchemaDefinitionField
  * @throws IOException if the JSON string is invalid with respect to SchemaDefinitionField
  */
  public static SchemaDefinitionField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaDefinitionField.class);
  }

 /**
  * Convert an instance of SchemaDefinitionField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

