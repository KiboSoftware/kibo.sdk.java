/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Card implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME_ON_CARD = "nameOnCard";
  @SerializedName(SERIALIZED_NAME_NAME_ON_CARD)
  private String nameOnCard;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_EXPIRE_MONTH = "expireMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRE_MONTH)
  private Integer expireMonth;

  public static final String SERIALIZED_NAME_EXPIRE_YEAR = "expireYear";
  @SerializedName(SERIALIZED_NAME_EXPIRE_YEAR)
  private Integer expireYear;

  public static final String SERIALIZED_NAME_CARD_NUMBER_PART = "cardNumberPart";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_PART)
  private String cardNumberPart;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private Integer contactId;

  public static final String SERIALIZED_NAME_IS_DEFAULT_PAY_METHOD = "isDefaultPayMethod";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_PAY_METHOD)
  private Boolean isDefaultPayMethod;

  public Card() {
  }

  public Card id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Card ID from Payment Service
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card ID from Payment Service")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Card nameOnCard(String nameOnCard) {
    
    this.nameOnCard = nameOnCard;
    return this;
  }

   /**
   * Get nameOnCard
   * @return nameOnCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNameOnCard() {
    return nameOnCard;
  }


  public void setNameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
  }


  public Card cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Get cardType
   * @return cardType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public Card expireMonth(Integer expireMonth) {
    
    this.expireMonth = expireMonth;
    return this;
  }

   /**
   * Get expireMonth
   * @return expireMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpireMonth() {
    return expireMonth;
  }


  public void setExpireMonth(Integer expireMonth) {
    this.expireMonth = expireMonth;
  }


  public Card expireYear(Integer expireYear) {
    
    this.expireYear = expireYear;
    return this;
  }

   /**
   * Get expireYear
   * @return expireYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpireYear() {
    return expireYear;
  }


  public void setExpireYear(Integer expireYear) {
    this.expireYear = expireYear;
  }


  public Card cardNumberPart(String cardNumberPart) {
    
    this.cardNumberPart = cardNumberPart;
    return this;
  }

   /**
   * Get cardNumberPart
   * @return cardNumberPart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCardNumberPart() {
    return cardNumberPart;
  }


  public void setCardNumberPart(String cardNumberPart) {
    this.cardNumberPart = cardNumberPart;
  }


  public Card contactId(Integer contactId) {
    
    this.contactId = contactId;
    return this;
  }

   /**
   * Get contactId
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getContactId() {
    return contactId;
  }


  public void setContactId(Integer contactId) {
    this.contactId = contactId;
  }


  public Card isDefaultPayMethod(Boolean isDefaultPayMethod) {
    
    this.isDefaultPayMethod = isDefaultPayMethod;
    return this;
  }

   /**
   * Get isDefaultPayMethod
   * @return isDefaultPayMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsDefaultPayMethod() {
    return isDefaultPayMethod;
  }


  public void setIsDefaultPayMethod(Boolean isDefaultPayMethod) {
    this.isDefaultPayMethod = isDefaultPayMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.id, card.id) &&
        Objects.equals(this.nameOnCard, card.nameOnCard) &&
        Objects.equals(this.cardType, card.cardType) &&
        Objects.equals(this.expireMonth, card.expireMonth) &&
        Objects.equals(this.expireYear, card.expireYear) &&
        Objects.equals(this.cardNumberPart, card.cardNumberPart) &&
        Objects.equals(this.contactId, card.contactId) &&
        Objects.equals(this.isDefaultPayMethod, card.isDefaultPayMethod);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nameOnCard, cardType, expireMonth, expireYear, cardNumberPart, contactId, isDefaultPayMethod);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nameOnCard: ").append(toIndentedString(nameOnCard)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    expireMonth: ").append(toIndentedString(expireMonth)).append("\n");
    sb.append("    expireYear: ").append(toIndentedString(expireYear)).append("\n");
    sb.append("    cardNumberPart: ").append(toIndentedString(cardNumberPart)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    isDefaultPayMethod: ").append(toIndentedString(isDefaultPayMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nameOnCard");
    openapiFields.add("cardType");
    openapiFields.add("expireMonth");
    openapiFields.add("expireYear");
    openapiFields.add("cardNumberPart");
    openapiFields.add("contactId");
    openapiFields.add("isDefaultPayMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Card
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Card.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("nameOnCard") != null && !jsonObj.get("nameOnCard").isJsonNull()) && !jsonObj.get("nameOnCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameOnCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameOnCard").toString()));
      }
      if ((jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
      if ((jsonObj.get("cardNumberPart") != null && !jsonObj.get("cardNumberPart").isJsonNull()) && !jsonObj.get("cardNumberPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumberPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumberPart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Card given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Card
  * @throws IOException if the JSON string is invalid with respect to Card
  */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

 /**
  * Convert an instance of Card to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

