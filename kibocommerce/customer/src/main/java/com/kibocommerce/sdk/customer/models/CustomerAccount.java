/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.customer.models.CommerceSummary;
import com.kibocommerce.sdk.customer.models.CustomerAttribute;
import com.kibocommerce.sdk.customer.models.CustomerContact;
import com.kibocommerce.sdk.customer.models.CustomerCustomerSegment;
import com.kibocommerce.sdk.customer.models.CustomerNote;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Customer account. Customers provide contact information, view order history, and set email preferences on their account.   Merchants can edit accounts to add internal notes or assign them to segments.
 */
@ApiModel(description = "Customer account. Customers provide contact information, view order history, and set email preferences on their account.   Merchants can edit accounts to add internal notes or assign them to segments.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerAccount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCALE_CODE = "localeCode";
  @SerializedName(SERIALIZED_NAME_LOCALE_CODE)
  private String localeCode;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_IS_ANONYMOUS = "isAnonymous";
  @SerializedName(SERIALIZED_NAME_IS_ANONYMOUS)
  private Boolean isAnonymous;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_ACCEPTS_MARKETING = "acceptsMarketing";
  @SerializedName(SERIALIZED_NAME_ACCEPTS_MARKETING)
  private Boolean acceptsMarketing;

  public static final String SERIALIZED_NAME_HAS_EXTERNAL_PASSWORD = "hasExternalPassword";
  @SerializedName(SERIALIZED_NAME_HAS_EXTERNAL_PASSWORD)
  private Boolean hasExternalPassword;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CUSTOMER_SET = "customerSet";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SET)
  private String customerSet;

  public static final String SERIALIZED_NAME_COMMERCE_SUMMARY = "commerceSummary";
  @SerializedName(SERIALIZED_NAME_COMMERCE_SUMMARY)
  private CommerceSummary commerceSummary;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<CustomerContact> contacts = null;

  public static final String SERIALIZED_NAME_COMPANY_OR_ORGANIZATION = "companyOrOrganization";
  @SerializedName(SERIALIZED_NAME_COMPANY_OR_ORGANIZATION)
  private String companyOrOrganization;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<CustomerNote> notes = null;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CustomerAttribute> attributes = null;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private List<CustomerCustomerSegment> segments = null;

  public static final String SERIALIZED_NAME_TAX_EXEMPT = "taxExempt";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT)
  private Boolean taxExempt;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_CUSTOMER_SINCE_DATE = "customerSinceDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SINCE_DATE)
  private OffsetDateTime customerSinceDate;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_MIGRATION_REQUIRED = "migrationRequired";
  @SerializedName(SERIALIZED_NAME_MIGRATION_REQUIRED)
  private Boolean migrationRequired;

  public CustomerAccount() {
  }

  public CustomerAccount emailAddress(String emailAddress) {
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * \&quot;Email addresss of the customer.
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "\"Email addresss of the customer.")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public CustomerAccount userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * User name for the customer account.
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User name for the customer account.")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }


  public CustomerAccount firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the customer.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name of the customer.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CustomerAccount lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the customer.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name of the customer.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CustomerAccount localeCode(String localeCode) {
    
    this.localeCode = localeCode;
    return this;
  }

   /**
   * Locale Code.
   * @return localeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Locale Code.")

  public String getLocaleCode() {
    return localeCode;
  }


  public void setLocaleCode(String localeCode) {
    this.localeCode = localeCode;
  }


  public CustomerAccount userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the user who is currently logged in. This is null if the user is anonymous (not logged in).  Unicode data with a maximum length of 55 characters.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public CustomerAccount isAnonymous(Boolean isAnonymous) {
    
    this.isAnonymous = isAnonymous;
    return this;
  }

   /**
   * Is the account Anonymous?
   * @return isAnonymous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the account Anonymous?")

  public Boolean getIsAnonymous() {
    return isAnonymous;
  }


  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }


  public CustomerAccount isLocked(Boolean isLocked) {
    
    this.isLocked = isLocked;
    return this;
  }

   /**
   * Is the account locked?
   * @return isLocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the account locked?")

  public Boolean getIsLocked() {
    return isLocked;
  }


  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public CustomerAccount isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Is the account active?
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the account active?")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CustomerAccount acceptsMarketing(Boolean acceptsMarketing) {
    
    this.acceptsMarketing = acceptsMarketing;
    return this;
  }

   /**
   * If true, the customer prefers to receive marketing material such as newsletters or email offers.
   * @return acceptsMarketing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the customer prefers to receive marketing material such as newsletters or email offers.")

  public Boolean getAcceptsMarketing() {
    return acceptsMarketing;
  }


  public void setAcceptsMarketing(Boolean acceptsMarketing) {
    this.acceptsMarketing = acceptsMarketing;
  }


  public CustomerAccount hasExternalPassword(Boolean hasExternalPassword) {
    
    this.hasExternalPassword = hasExternalPassword;
    return this;
  }

   /**
   * Indicates if an external password is set on this account
   * @return hasExternalPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if an external password is set on this account")

  public Boolean getHasExternalPassword() {
    return hasExternalPassword;
  }


  public void setHasExternalPassword(Boolean hasExternalPassword) {
    this.hasExternalPassword = hasExternalPassword;
  }


  public CustomerAccount id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the account, also known as a customer number.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the account, also known as a customer number.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CustomerAccount customerSet(String customerSet) {
    
    this.customerSet = customerSet;
    return this;
  }

   /**
   * Get customerSet
   * @return customerSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerSet() {
    return customerSet;
  }


  public void setCustomerSet(String customerSet) {
    this.customerSet = customerSet;
  }


  public CustomerAccount commerceSummary(CommerceSummary commerceSummary) {
    
    this.commerceSummary = commerceSummary;
    return this;
  }

   /**
   * Get commerceSummary
   * @return commerceSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceSummary getCommerceSummary() {
    return commerceSummary;
  }


  public void setCommerceSummary(CommerceSummary commerceSummary) {
    this.commerceSummary = commerceSummary;
  }


  public CustomerAccount contacts(List<CustomerContact> contacts) {
    
    this.contacts = contacts;
    return this;
  }

  public CustomerAccount addContactsItem(CustomerContact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * List of contacts for this account. A customer account can have multiple contacts for billing and shipping addresses.
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of contacts for this account. A customer account can have multiple contacts for billing and shipping addresses.")

  public List<CustomerContact> getContacts() {
    return contacts;
  }


  public void setContacts(List<CustomerContact> contacts) {
    this.contacts = contacts;
  }


  public CustomerAccount companyOrOrganization(String companyOrOrganization) {
    
    this.companyOrOrganization = companyOrOrganization;
    return this;
  }

   /**
   * The company or organization name for an account.
   * @return companyOrOrganization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The company or organization name for an account.")

  public String getCompanyOrOrganization() {
    return companyOrOrganization;
  }


  public void setCompanyOrOrganization(String companyOrOrganization) {
    this.companyOrOrganization = companyOrOrganization;
  }


  public CustomerAccount notes(List<CustomerNote> notes) {
    
    this.notes = notes;
    return this;
  }

  public CustomerAccount addNotesItem(CustomerNote notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * List of notes for the account. Merchants use these internal notes, for example, to make a note of a customer&#39;s interests or complaints.   Notes are available only from the merchant&#39;s view, customers cannot view these notes.
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of notes for the account. Merchants use these internal notes, for example, to make a note of a customer's interests or complaints.   Notes are available only from the merchant's view, customers cannot view these notes.")

  public List<CustomerNote> getNotes() {
    return notes;
  }


  public void setNotes(List<CustomerNote> notes) {
    this.notes = notes;
  }


  public CustomerAccount attributes(List<CustomerAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CustomerAccount addAttributesItem(CustomerAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * List of attributes for the account.
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of attributes for the account.")

  public List<CustomerAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CustomerAttribute> attributes) {
    this.attributes = attributes;
  }


  public CustomerAccount segments(List<CustomerCustomerSegment> segments) {
    
    this.segments = segments;
    return this;
  }

  public CustomerAccount addSegmentsItem(CustomerCustomerSegment segmentsItem) {
    if (this.segments == null) {
      this.segments = new ArrayList<>();
    }
    this.segments.add(segmentsItem);
    return this;
  }

   /**
   * List of segments assigned to account. Merchants create segments, for example, to manage discounts or assign VIP status.   Then they assign the account to the segment. An account can belong to several segments or none at all.
   * @return segments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of segments assigned to account. Merchants create segments, for example, to manage discounts or assign VIP status.   Then they assign the account to the segment. An account can belong to several segments or none at all.")

  public List<CustomerCustomerSegment> getSegments() {
    return segments;
  }


  public void setSegments(List<CustomerCustomerSegment> segments) {
    this.segments = segments;
  }


  public CustomerAccount taxExempt(Boolean taxExempt) {
    
    this.taxExempt = taxExempt;
    return this;
  }

   /**
   * Get taxExempt
   * @return taxExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTaxExempt() {
    return taxExempt;
  }


  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }


  public CustomerAccount taxId(String taxId) {
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public CustomerAccount externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public CustomerAccount auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public CustomerAccount customerSinceDate(OffsetDateTime customerSinceDate) {
    
    this.customerSinceDate = customerSinceDate;
    return this;
  }

   /**
   * Date when the customer account is created.
   * @return customerSinceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when the customer account is created.")

  public OffsetDateTime getCustomerSinceDate() {
    return customerSinceDate;
  }


  public void setCustomerSinceDate(OffsetDateTime customerSinceDate) {
    this.customerSinceDate = customerSinceDate;
  }


  public CustomerAccount accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Type of account.
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of account.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public CustomerAccount migrationRequired(Boolean migrationRequired) {
    
    this.migrationRequired = migrationRequired;
    return this;
  }

   /**
   * Indicates Subscription migration is required or not.
   * @return migrationRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates Subscription migration is required or not.")

  public Boolean getMigrationRequired() {
    return migrationRequired;
  }


  public void setMigrationRequired(Boolean migrationRequired) {
    this.migrationRequired = migrationRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAccount customerAccount = (CustomerAccount) o;
    return Objects.equals(this.emailAddress, customerAccount.emailAddress) &&
        Objects.equals(this.userName, customerAccount.userName) &&
        Objects.equals(this.firstName, customerAccount.firstName) &&
        Objects.equals(this.lastName, customerAccount.lastName) &&
        Objects.equals(this.localeCode, customerAccount.localeCode) &&
        Objects.equals(this.userId, customerAccount.userId) &&
        Objects.equals(this.isAnonymous, customerAccount.isAnonymous) &&
        Objects.equals(this.isLocked, customerAccount.isLocked) &&
        Objects.equals(this.isActive, customerAccount.isActive) &&
        Objects.equals(this.acceptsMarketing, customerAccount.acceptsMarketing) &&
        Objects.equals(this.hasExternalPassword, customerAccount.hasExternalPassword) &&
        Objects.equals(this.id, customerAccount.id) &&
        Objects.equals(this.customerSet, customerAccount.customerSet) &&
        Objects.equals(this.commerceSummary, customerAccount.commerceSummary) &&
        Objects.equals(this.contacts, customerAccount.contacts) &&
        Objects.equals(this.companyOrOrganization, customerAccount.companyOrOrganization) &&
        Objects.equals(this.notes, customerAccount.notes) &&
        Objects.equals(this.attributes, customerAccount.attributes) &&
        Objects.equals(this.segments, customerAccount.segments) &&
        Objects.equals(this.taxExempt, customerAccount.taxExempt) &&
        Objects.equals(this.taxId, customerAccount.taxId) &&
        Objects.equals(this.externalId, customerAccount.externalId) &&
        Objects.equals(this.auditInfo, customerAccount.auditInfo) &&
        Objects.equals(this.customerSinceDate, customerAccount.customerSinceDate) &&
        Objects.equals(this.accountType, customerAccount.accountType) &&
        Objects.equals(this.migrationRequired, customerAccount.migrationRequired);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, userName, firstName, lastName, localeCode, userId, isAnonymous, isLocked, isActive, acceptsMarketing, hasExternalPassword, id, customerSet, commerceSummary, contacts, companyOrOrganization, notes, attributes, segments, taxExempt, taxId, externalId, auditInfo, customerSinceDate, accountType, migrationRequired);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAccount {\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    localeCode: ").append(toIndentedString(localeCode)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    acceptsMarketing: ").append(toIndentedString(acceptsMarketing)).append("\n");
    sb.append("    hasExternalPassword: ").append(toIndentedString(hasExternalPassword)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerSet: ").append(toIndentedString(customerSet)).append("\n");
    sb.append("    commerceSummary: ").append(toIndentedString(commerceSummary)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    companyOrOrganization: ").append(toIndentedString(companyOrOrganization)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    customerSinceDate: ").append(toIndentedString(customerSinceDate)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    migrationRequired: ").append(toIndentedString(migrationRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("customerSet");
    openapiFields.add("commerceSummary");
    openapiFields.add("contacts");
    openapiFields.add("companyOrOrganization");
    openapiFields.add("notes");
    openapiFields.add("attributes");
    openapiFields.add("segments");
    openapiFields.add("taxExempt");
    openapiFields.add("taxId");
    openapiFields.add("externalId");
    openapiFields.add("auditInfo");
    openapiFields.add("customerSinceDate");
    openapiFields.add("accountType");
    openapiFields.add("migrationRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAccount is not found in the empty JSON string", CustomerAccount.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomerAccount.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerAccount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("localeCode") != null && !jsonObj.get("localeCode").isJsonNull()) && !jsonObj.get("localeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localeCode").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("customerSet") != null && !jsonObj.get("customerSet").isJsonNull()) && !jsonObj.get("customerSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerSet").toString()));
      }
      // validate the optional field `commerceSummary`
      if (jsonObj.get("commerceSummary") != null && !jsonObj.get("commerceSummary").isJsonNull()) {
        CommerceSummary.validateJsonObject(jsonObj.getAsJsonObject("commerceSummary"));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            CustomerContact.validateJsonObject(jsonArraycontacts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("companyOrOrganization") != null && !jsonObj.get("companyOrOrganization").isJsonNull()) && !jsonObj.get("companyOrOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyOrOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyOrOrganization").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            CustomerNote.validateJsonObject(jsonArraynotes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            CustomerAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        JsonArray jsonArraysegments = jsonObj.getAsJsonArray("segments");
        if (jsonArraysegments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("segments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `segments` to be an array in the JSON string but got `%s`", jsonObj.get("segments").toString()));
          }

          // validate the optional field `segments` (array)
          for (int i = 0; i < jsonArraysegments.size(); i++) {
            CustomerCustomerSegment.validateJsonObject(jsonArraysegments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAccount>() {
           @Override
           public void write(JsonWriter out, CustomerAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAccount
  * @throws IOException if the JSON string is invalid with respect to CustomerAccount
  */
  public static CustomerAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAccount.class);
  }

 /**
  * Convert an instance of CustomerAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

