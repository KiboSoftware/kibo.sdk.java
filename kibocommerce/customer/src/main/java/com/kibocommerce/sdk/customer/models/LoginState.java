/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * LoginState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LoginState implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_IS_PASSWORD_CHANGE_REQUIRED = "isPasswordChangeRequired";
  @SerializedName(SERIALIZED_NAME_IS_PASSWORD_CHANGE_REQUIRED)
  private Boolean isPasswordChangeRequired;

  public static final String SERIALIZED_NAME_LAST_PASSWORD_CHANGE_ON = "lastPasswordChangeOn";
  @SerializedName(SERIALIZED_NAME_LAST_PASSWORD_CHANGE_ON)
  private OffsetDateTime lastPasswordChangeOn;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_LAST_LOCKED_ON = "lastLockedOn";
  @SerializedName(SERIALIZED_NAME_LAST_LOCKED_ON)
  private OffsetDateTime lastLockedOn;

  public static final String SERIALIZED_NAME_FAILED_LOGIN_ATTEMPT_COUNT = "failedLoginAttemptCount";
  @SerializedName(SERIALIZED_NAME_FAILED_LOGIN_ATTEMPT_COUNT)
  private Integer failedLoginAttemptCount;

  public static final String SERIALIZED_NAME_REMAINING_LOGIN_ATTEMPTS = "remainingLoginAttempts";
  @SerializedName(SERIALIZED_NAME_REMAINING_LOGIN_ATTEMPTS)
  private Integer remainingLoginAttempts;

  public static final String SERIALIZED_NAME_FIRST_FAILED_LOGIN_ATTEMPT_ON = "firstFailedLoginAttemptOn";
  @SerializedName(SERIALIZED_NAME_FIRST_FAILED_LOGIN_ATTEMPT_ON)
  private OffsetDateTime firstFailedLoginAttemptOn;

  public static final String SERIALIZED_NAME_LAST_LOGIN_ON = "lastLoginOn";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_ON)
  private OffsetDateTime lastLoginOn;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_UPDATED_ON = "updatedOn";
  @SerializedName(SERIALIZED_NAME_UPDATED_ON)
  private OffsetDateTime updatedOn;

  public LoginState() {
  }

  public LoginState isPasswordChangeRequired(Boolean isPasswordChangeRequired) {
    
    this.isPasswordChangeRequired = isPasswordChangeRequired;
    return this;
  }

   /**
   * Get isPasswordChangeRequired
   * @return isPasswordChangeRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPasswordChangeRequired() {
    return isPasswordChangeRequired;
  }


  public void setIsPasswordChangeRequired(Boolean isPasswordChangeRequired) {
    this.isPasswordChangeRequired = isPasswordChangeRequired;
  }


  public LoginState lastPasswordChangeOn(OffsetDateTime lastPasswordChangeOn) {
    
    this.lastPasswordChangeOn = lastPasswordChangeOn;
    return this;
  }

   /**
   * Get lastPasswordChangeOn
   * @return lastPasswordChangeOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastPasswordChangeOn() {
    return lastPasswordChangeOn;
  }


  public void setLastPasswordChangeOn(OffsetDateTime lastPasswordChangeOn) {
    this.lastPasswordChangeOn = lastPasswordChangeOn;
  }


  public LoginState isLocked(Boolean isLocked) {
    
    this.isLocked = isLocked;
    return this;
  }

   /**
   * Get isLocked
   * @return isLocked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsLocked() {
    return isLocked;
  }


  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public LoginState lastLockedOn(OffsetDateTime lastLockedOn) {
    
    this.lastLockedOn = lastLockedOn;
    return this;
  }

   /**
   * Get lastLockedOn
   * @return lastLockedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastLockedOn() {
    return lastLockedOn;
  }


  public void setLastLockedOn(OffsetDateTime lastLockedOn) {
    this.lastLockedOn = lastLockedOn;
  }


  public LoginState failedLoginAttemptCount(Integer failedLoginAttemptCount) {
    
    this.failedLoginAttemptCount = failedLoginAttemptCount;
    return this;
  }

   /**
   * Get failedLoginAttemptCount
   * @return failedLoginAttemptCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFailedLoginAttemptCount() {
    return failedLoginAttemptCount;
  }


  public void setFailedLoginAttemptCount(Integer failedLoginAttemptCount) {
    this.failedLoginAttemptCount = failedLoginAttemptCount;
  }


  public LoginState remainingLoginAttempts(Integer remainingLoginAttempts) {
    
    this.remainingLoginAttempts = remainingLoginAttempts;
    return this;
  }

   /**
   * Get remainingLoginAttempts
   * @return remainingLoginAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRemainingLoginAttempts() {
    return remainingLoginAttempts;
  }


  public void setRemainingLoginAttempts(Integer remainingLoginAttempts) {
    this.remainingLoginAttempts = remainingLoginAttempts;
  }


  public LoginState firstFailedLoginAttemptOn(OffsetDateTime firstFailedLoginAttemptOn) {
    
    this.firstFailedLoginAttemptOn = firstFailedLoginAttemptOn;
    return this;
  }

   /**
   * Get firstFailedLoginAttemptOn
   * @return firstFailedLoginAttemptOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getFirstFailedLoginAttemptOn() {
    return firstFailedLoginAttemptOn;
  }


  public void setFirstFailedLoginAttemptOn(OffsetDateTime firstFailedLoginAttemptOn) {
    this.firstFailedLoginAttemptOn = firstFailedLoginAttemptOn;
  }


  public LoginState lastLoginOn(OffsetDateTime lastLoginOn) {
    
    this.lastLoginOn = lastLoginOn;
    return this;
  }

   /**
   * Get lastLoginOn
   * @return lastLoginOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getLastLoginOn() {
    return lastLoginOn;
  }


  public void setLastLoginOn(OffsetDateTime lastLoginOn) {
    this.lastLoginOn = lastLoginOn;
  }


  public LoginState createdOn(OffsetDateTime createdOn) {
    
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Get createdOn
   * @return createdOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }


  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public LoginState updatedOn(OffsetDateTime updatedOn) {
    
    this.updatedOn = updatedOn;
    return this;
  }

   /**
   * Get updatedOn
   * @return updatedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdatedOn() {
    return updatedOn;
  }


  public void setUpdatedOn(OffsetDateTime updatedOn) {
    this.updatedOn = updatedOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginState loginState = (LoginState) o;
    return Objects.equals(this.isPasswordChangeRequired, loginState.isPasswordChangeRequired) &&
        Objects.equals(this.lastPasswordChangeOn, loginState.lastPasswordChangeOn) &&
        Objects.equals(this.isLocked, loginState.isLocked) &&
        Objects.equals(this.lastLockedOn, loginState.lastLockedOn) &&
        Objects.equals(this.failedLoginAttemptCount, loginState.failedLoginAttemptCount) &&
        Objects.equals(this.remainingLoginAttempts, loginState.remainingLoginAttempts) &&
        Objects.equals(this.firstFailedLoginAttemptOn, loginState.firstFailedLoginAttemptOn) &&
        Objects.equals(this.lastLoginOn, loginState.lastLoginOn) &&
        Objects.equals(this.createdOn, loginState.createdOn) &&
        Objects.equals(this.updatedOn, loginState.updatedOn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPasswordChangeRequired, lastPasswordChangeOn, isLocked, lastLockedOn, failedLoginAttemptCount, remainingLoginAttempts, firstFailedLoginAttemptOn, lastLoginOn, createdOn, updatedOn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginState {\n");
    sb.append("    isPasswordChangeRequired: ").append(toIndentedString(isPasswordChangeRequired)).append("\n");
    sb.append("    lastPasswordChangeOn: ").append(toIndentedString(lastPasswordChangeOn)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    lastLockedOn: ").append(toIndentedString(lastLockedOn)).append("\n");
    sb.append("    failedLoginAttemptCount: ").append(toIndentedString(failedLoginAttemptCount)).append("\n");
    sb.append("    remainingLoginAttempts: ").append(toIndentedString(remainingLoginAttempts)).append("\n");
    sb.append("    firstFailedLoginAttemptOn: ").append(toIndentedString(firstFailedLoginAttemptOn)).append("\n");
    sb.append("    lastLoginOn: ").append(toIndentedString(lastLoginOn)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    updatedOn: ").append(toIndentedString(updatedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isPasswordChangeRequired");
    openapiFields.add("lastPasswordChangeOn");
    openapiFields.add("isLocked");
    openapiFields.add("lastLockedOn");
    openapiFields.add("failedLoginAttemptCount");
    openapiFields.add("remainingLoginAttempts");
    openapiFields.add("firstFailedLoginAttemptOn");
    openapiFields.add("lastLoginOn");
    openapiFields.add("createdOn");
    openapiFields.add("updatedOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoginState
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LoginState.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginState is not found in the empty JSON string", LoginState.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!LoginState.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginState` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginState.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginState>() {
           @Override
           public void write(JsonWriter out, LoginState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginState read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoginState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoginState
  * @throws IOException if the JSON string is invalid with respect to LoginState
  */
  public static LoginState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginState.class);
  }

 /**
  * Convert an instance of LoginState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

