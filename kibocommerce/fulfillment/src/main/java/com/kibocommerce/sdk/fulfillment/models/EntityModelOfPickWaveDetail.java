/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.fulfillment.models.AuditInfo0;
import com.kibocommerce.sdk.fulfillment.models.ContentGroup;
import com.kibocommerce.sdk.fulfillment.models.Links;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * EntityModelOfPickWaveDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EntityModelOfPickWaveDetail implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Links links;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AuditInfo0 auditInfo;

  public static final String SERIALIZED_NAME_CONTENT_GROUPS = "contentGroups";
  @SerializedName(SERIALIZED_NAME_CONTENT_GROUPS)
  private List<ContentGroup> contentGroups = null;

  public static final String SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE = "fulfillmentLocationCode";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE)
  private String fulfillmentLocationCode;

  public static final String SERIALIZED_NAME_MAX_SHIPMENTS = "maxShipments";
  @SerializedName(SERIALIZED_NAME_MAX_SHIPMENTS)
  private Integer maxShipments;

  /**
   * Gets or Sets pickType
   */
  @JsonAdapter(PickTypeEnum.Adapter.class)
  public enum PickTypeEnum {
    MULTIPLE("MULTIPLE"),
    
    NORMAL("NORMAL"),
    
    SINGLE("SINGLE");

    private String value;

    PickTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PickTypeEnum fromValue(String value) {
      for (PickTypeEnum b : PickTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PickTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PickTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PickTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PickTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PICK_TYPE = "pickType";
  @SerializedName(SERIALIZED_NAME_PICK_TYPE)
  private PickTypeEnum pickType;

  public static final String SERIALIZED_NAME_PICK_WAVE_ID = "pickWaveId";
  @SerializedName(SERIALIZED_NAME_PICK_WAVE_ID)
  private String pickWaveId;

  public static final String SERIALIZED_NAME_PICK_WAVE_NUMBER = "pickWaveNumber";
  @SerializedName(SERIALIZED_NAME_PICK_WAVE_NUMBER)
  private Integer pickWaveNumber;

  /**
   * Gets or Sets pickWaveStatus
   */
  @JsonAdapter(PickWaveStatusEnum.Adapter.class)
  public enum PickWaveStatusEnum {
    CLOSED("CLOSED"),
    
    ERROR("ERROR"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    PENDING("PENDING"),
    
    PENDING_RECOVERY("PENDING_RECOVERY");

    private String value;

    PickWaveStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PickWaveStatusEnum fromValue(String value) {
      for (PickWaveStatusEnum b : PickWaveStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PickWaveStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PickWaveStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PickWaveStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PickWaveStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PICK_WAVE_STATUS = "pickWaveStatus";
  @SerializedName(SERIALIZED_NAME_PICK_WAVE_STATUS)
  private PickWaveStatusEnum pickWaveStatus;

  public static final String SERIALIZED_NAME_SHIPMENT_NUMBERS = "shipmentNumbers";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_NUMBERS)
  private List<Integer> shipmentNumbers = null;

  public static final String SERIALIZED_NAME_SHIPMENT_TYPE = "shipmentType";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TYPE)
  private String shipmentType;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_USER_DISPLAY_NAME = "userDisplayName";
  @SerializedName(SERIALIZED_NAME_USER_DISPLAY_NAME)
  private String userDisplayName;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public EntityModelOfPickWaveDetail() {
  }

  public EntityModelOfPickWaveDetail links(Links links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Links getLinks() {
    return links;
  }


  public void setLinks(Links links) {
    this.links = links;
  }


  public EntityModelOfPickWaveDetail auditInfo(AuditInfo0 auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuditInfo0 getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AuditInfo0 auditInfo) {
    this.auditInfo = auditInfo;
  }


  public EntityModelOfPickWaveDetail contentGroups(List<ContentGroup> contentGroups) {
    
    this.contentGroups = contentGroups;
    return this;
  }

  public EntityModelOfPickWaveDetail addContentGroupsItem(ContentGroup contentGroupsItem) {
    if (this.contentGroups == null) {
      this.contentGroups = new ArrayList<>();
    }
    this.contentGroups.add(contentGroupsItem);
    return this;
  }

   /**
   * Get contentGroups
   * @return contentGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ContentGroup> getContentGroups() {
    return contentGroups;
  }


  public void setContentGroups(List<ContentGroup> contentGroups) {
    this.contentGroups = contentGroups;
  }


  public EntityModelOfPickWaveDetail fulfillmentLocationCode(String fulfillmentLocationCode) {
    
    this.fulfillmentLocationCode = fulfillmentLocationCode;
    return this;
  }

   /**
   * Get fulfillmentLocationCode
   * @return fulfillmentLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFulfillmentLocationCode() {
    return fulfillmentLocationCode;
  }


  public void setFulfillmentLocationCode(String fulfillmentLocationCode) {
    this.fulfillmentLocationCode = fulfillmentLocationCode;
  }


  public EntityModelOfPickWaveDetail maxShipments(Integer maxShipments) {
    
    this.maxShipments = maxShipments;
    return this;
  }

   /**
   * Get maxShipments
   * @return maxShipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxShipments() {
    return maxShipments;
  }


  public void setMaxShipments(Integer maxShipments) {
    this.maxShipments = maxShipments;
  }


  public EntityModelOfPickWaveDetail pickType(PickTypeEnum pickType) {
    
    this.pickType = pickType;
    return this;
  }

   /**
   * Get pickType
   * @return pickType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PickTypeEnum getPickType() {
    return pickType;
  }


  public void setPickType(PickTypeEnum pickType) {
    this.pickType = pickType;
  }


  public EntityModelOfPickWaveDetail pickWaveId(String pickWaveId) {
    
    this.pickWaveId = pickWaveId;
    return this;
  }

   /**
   * Get pickWaveId
   * @return pickWaveId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPickWaveId() {
    return pickWaveId;
  }


  public void setPickWaveId(String pickWaveId) {
    this.pickWaveId = pickWaveId;
  }


  public EntityModelOfPickWaveDetail pickWaveNumber(Integer pickWaveNumber) {
    
    this.pickWaveNumber = pickWaveNumber;
    return this;
  }

   /**
   * Get pickWaveNumber
   * @return pickWaveNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPickWaveNumber() {
    return pickWaveNumber;
  }


  public void setPickWaveNumber(Integer pickWaveNumber) {
    this.pickWaveNumber = pickWaveNumber;
  }


  public EntityModelOfPickWaveDetail pickWaveStatus(PickWaveStatusEnum pickWaveStatus) {
    
    this.pickWaveStatus = pickWaveStatus;
    return this;
  }

   /**
   * Get pickWaveStatus
   * @return pickWaveStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PickWaveStatusEnum getPickWaveStatus() {
    return pickWaveStatus;
  }


  public void setPickWaveStatus(PickWaveStatusEnum pickWaveStatus) {
    this.pickWaveStatus = pickWaveStatus;
  }


  public EntityModelOfPickWaveDetail shipmentNumbers(List<Integer> shipmentNumbers) {
    
    this.shipmentNumbers = shipmentNumbers;
    return this;
  }

  public EntityModelOfPickWaveDetail addShipmentNumbersItem(Integer shipmentNumbersItem) {
    if (this.shipmentNumbers == null) {
      this.shipmentNumbers = new ArrayList<>();
    }
    this.shipmentNumbers.add(shipmentNumbersItem);
    return this;
  }

   /**
   * Get shipmentNumbers
   * @return shipmentNumbers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getShipmentNumbers() {
    return shipmentNumbers;
  }


  public void setShipmentNumbers(List<Integer> shipmentNumbers) {
    this.shipmentNumbers = shipmentNumbers;
  }


  public EntityModelOfPickWaveDetail shipmentType(String shipmentType) {
    
    this.shipmentType = shipmentType;
    return this;
  }

   /**
   * Get shipmentType
   * @return shipmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShipmentType() {
    return shipmentType;
  }


  public void setShipmentType(String shipmentType) {
    this.shipmentType = shipmentType;
  }


  public EntityModelOfPickWaveDetail tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public EntityModelOfPickWaveDetail userDisplayName(String userDisplayName) {
    
    this.userDisplayName = userDisplayName;
    return this;
  }

   /**
   * Get userDisplayName
   * @return userDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserDisplayName() {
    return userDisplayName;
  }


  public void setUserDisplayName(String userDisplayName) {
    this.userDisplayName = userDisplayName;
  }


  public EntityModelOfPickWaveDetail userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityModelOfPickWaveDetail entityModelOfPickWaveDetail = (EntityModelOfPickWaveDetail) o;
    return Objects.equals(this.links, entityModelOfPickWaveDetail.links) &&
        Objects.equals(this.auditInfo, entityModelOfPickWaveDetail.auditInfo) &&
        Objects.equals(this.contentGroups, entityModelOfPickWaveDetail.contentGroups) &&
        Objects.equals(this.fulfillmentLocationCode, entityModelOfPickWaveDetail.fulfillmentLocationCode) &&
        Objects.equals(this.maxShipments, entityModelOfPickWaveDetail.maxShipments) &&
        Objects.equals(this.pickType, entityModelOfPickWaveDetail.pickType) &&
        Objects.equals(this.pickWaveId, entityModelOfPickWaveDetail.pickWaveId) &&
        Objects.equals(this.pickWaveNumber, entityModelOfPickWaveDetail.pickWaveNumber) &&
        Objects.equals(this.pickWaveStatus, entityModelOfPickWaveDetail.pickWaveStatus) &&
        Objects.equals(this.shipmentNumbers, entityModelOfPickWaveDetail.shipmentNumbers) &&
        Objects.equals(this.shipmentType, entityModelOfPickWaveDetail.shipmentType) &&
        Objects.equals(this.tenantId, entityModelOfPickWaveDetail.tenantId) &&
        Objects.equals(this.userDisplayName, entityModelOfPickWaveDetail.userDisplayName) &&
        Objects.equals(this.userId, entityModelOfPickWaveDetail.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, auditInfo, contentGroups, fulfillmentLocationCode, maxShipments, pickType, pickWaveId, pickWaveNumber, pickWaveStatus, shipmentNumbers, shipmentType, tenantId, userDisplayName, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityModelOfPickWaveDetail {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    contentGroups: ").append(toIndentedString(contentGroups)).append("\n");
    sb.append("    fulfillmentLocationCode: ").append(toIndentedString(fulfillmentLocationCode)).append("\n");
    sb.append("    maxShipments: ").append(toIndentedString(maxShipments)).append("\n");
    sb.append("    pickType: ").append(toIndentedString(pickType)).append("\n");
    sb.append("    pickWaveId: ").append(toIndentedString(pickWaveId)).append("\n");
    sb.append("    pickWaveNumber: ").append(toIndentedString(pickWaveNumber)).append("\n");
    sb.append("    pickWaveStatus: ").append(toIndentedString(pickWaveStatus)).append("\n");
    sb.append("    shipmentNumbers: ").append(toIndentedString(shipmentNumbers)).append("\n");
    sb.append("    shipmentType: ").append(toIndentedString(shipmentType)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    userDisplayName: ").append(toIndentedString(userDisplayName)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("auditInfo");
    openapiFields.add("contentGroups");
    openapiFields.add("fulfillmentLocationCode");
    openapiFields.add("maxShipments");
    openapiFields.add("pickType");
    openapiFields.add("pickWaveId");
    openapiFields.add("pickWaveNumber");
    openapiFields.add("pickWaveStatus");
    openapiFields.add("shipmentNumbers");
    openapiFields.add("shipmentType");
    openapiFields.add("tenantId");
    openapiFields.add("userDisplayName");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EntityModelOfPickWaveDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EntityModelOfPickWaveDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityModelOfPickWaveDetail is not found in the empty JSON string", EntityModelOfPickWaveDetail.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!EntityModelOfPickWaveDetail.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityModelOfPickWaveDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        Links.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AuditInfo0.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if (jsonObj.get("contentGroups") != null && !jsonObj.get("contentGroups").isJsonNull()) {
        JsonArray jsonArraycontentGroups = jsonObj.getAsJsonArray("contentGroups");
        if (jsonArraycontentGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contentGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contentGroups` to be an array in the JSON string but got `%s`", jsonObj.get("contentGroups").toString()));
          }

          // validate the optional field `contentGroups` (array)
          for (int i = 0; i < jsonArraycontentGroups.size(); i++) {
            ContentGroup.validateJsonObject(jsonArraycontentGroups.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("fulfillmentLocationCode") != null && !jsonObj.get("fulfillmentLocationCode").isJsonNull()) && !jsonObj.get("fulfillmentLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentLocationCode").toString()));
      }
      if ((jsonObj.get("pickType") != null && !jsonObj.get("pickType").isJsonNull()) && !jsonObj.get("pickType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickType").toString()));
      }
      if ((jsonObj.get("pickWaveId") != null && !jsonObj.get("pickWaveId").isJsonNull()) && !jsonObj.get("pickWaveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickWaveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickWaveId").toString()));
      }
      if ((jsonObj.get("pickWaveStatus") != null && !jsonObj.get("pickWaveStatus").isJsonNull()) && !jsonObj.get("pickWaveStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickWaveStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickWaveStatus").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("shipmentNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("shipmentNumbers").toString()));
      }
      if ((jsonObj.get("shipmentType") != null && !jsonObj.get("shipmentType").isJsonNull()) && !jsonObj.get("shipmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentType").toString()));
      }
      if ((jsonObj.get("userDisplayName") != null && !jsonObj.get("userDisplayName").isJsonNull()) && !jsonObj.get("userDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userDisplayName").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityModelOfPickWaveDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityModelOfPickWaveDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityModelOfPickWaveDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityModelOfPickWaveDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityModelOfPickWaveDetail>() {
           @Override
           public void write(JsonWriter out, EntityModelOfPickWaveDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityModelOfPickWaveDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntityModelOfPickWaveDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntityModelOfPickWaveDetail
  * @throws IOException if the JSON string is invalid with respect to EntityModelOfPickWaveDetail
  */
  public static EntityModelOfPickWaveDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityModelOfPickWaveDetail.class);
  }

 /**
  * Convert an instance of EntityModelOfPickWaveDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

