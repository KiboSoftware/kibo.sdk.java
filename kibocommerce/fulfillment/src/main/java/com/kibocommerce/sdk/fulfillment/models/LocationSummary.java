/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * LocationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LocationSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENT_AMOUNT = "currentAmount";
  @SerializedName(SERIALIZED_NAME_CURRENT_AMOUNT)
  private BigDecimal currentAmount;

  public static final String SERIALIZED_NAME_CURRENT_ITEMS = "currentItems";
  @SerializedName(SERIALIZED_NAME_CURRENT_ITEMS)
  private Integer currentItems;

  public static final String SERIALIZED_NAME_CURRENT_SHIPMENTS = "currentShipments";
  @SerializedName(SERIALIZED_NAME_CURRENT_SHIPMENTS)
  private Integer currentShipments;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS = "totalItems";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS)
  private Integer totalItems;

  public static final String SERIALIZED_NAME_TOTAL_SHIPMENTS = "totalShipments";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPMENTS)
  private Integer totalShipments;

  public LocationSummary() {
  }

  public LocationSummary currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public LocationSummary currentAmount(BigDecimal currentAmount) {
    
    this.currentAmount = currentAmount;
    return this;
  }

   /**
   * Get currentAmount
   * @return currentAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCurrentAmount() {
    return currentAmount;
  }


  public void setCurrentAmount(BigDecimal currentAmount) {
    this.currentAmount = currentAmount;
  }


  public LocationSummary currentItems(Integer currentItems) {
    
    this.currentItems = currentItems;
    return this;
  }

   /**
   * Get currentItems
   * @return currentItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCurrentItems() {
    return currentItems;
  }


  public void setCurrentItems(Integer currentItems) {
    this.currentItems = currentItems;
  }


  public LocationSummary currentShipments(Integer currentShipments) {
    
    this.currentShipments = currentShipments;
    return this;
  }

   /**
   * Get currentShipments
   * @return currentShipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCurrentShipments() {
    return currentShipments;
  }


  public void setCurrentShipments(Integer currentShipments) {
    this.currentShipments = currentShipments;
  }


  public LocationSummary locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Get locationCode
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public LocationSummary totalAmount(BigDecimal totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Get totalAmount
   * @return totalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public LocationSummary totalItems(Integer totalItems) {
    
    this.totalItems = totalItems;
    return this;
  }

   /**
   * Get totalItems
   * @return totalItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalItems() {
    return totalItems;
  }


  public void setTotalItems(Integer totalItems) {
    this.totalItems = totalItems;
  }


  public LocationSummary totalShipments(Integer totalShipments) {
    
    this.totalShipments = totalShipments;
    return this;
  }

   /**
   * Get totalShipments
   * @return totalShipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalShipments() {
    return totalShipments;
  }


  public void setTotalShipments(Integer totalShipments) {
    this.totalShipments = totalShipments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationSummary locationSummary = (LocationSummary) o;
    return Objects.equals(this.currencyCode, locationSummary.currencyCode) &&
        Objects.equals(this.currentAmount, locationSummary.currentAmount) &&
        Objects.equals(this.currentItems, locationSummary.currentItems) &&
        Objects.equals(this.currentShipments, locationSummary.currentShipments) &&
        Objects.equals(this.locationCode, locationSummary.locationCode) &&
        Objects.equals(this.totalAmount, locationSummary.totalAmount) &&
        Objects.equals(this.totalItems, locationSummary.totalItems) &&
        Objects.equals(this.totalShipments, locationSummary.totalShipments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, currentAmount, currentItems, currentShipments, locationCode, totalAmount, totalItems, totalShipments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationSummary {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currentAmount: ").append(toIndentedString(currentAmount)).append("\n");
    sb.append("    currentItems: ").append(toIndentedString(currentItems)).append("\n");
    sb.append("    currentShipments: ").append(toIndentedString(currentShipments)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("    totalShipments: ").append(toIndentedString(totalShipments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("currentAmount");
    openapiFields.add("currentItems");
    openapiFields.add("currentShipments");
    openapiFields.add("locationCode");
    openapiFields.add("totalAmount");
    openapiFields.add("totalItems");
    openapiFields.add("totalShipments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationSummary is not found in the empty JSON string", LocationSummary.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!LocationSummary.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationSummary>() {
           @Override
           public void write(JsonWriter out, LocationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationSummary
  * @throws IOException if the JSON string is invalid with respect to LocationSummary
  */
  public static LocationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationSummary.class);
  }

 /**
  * Convert an instance of LocationSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

