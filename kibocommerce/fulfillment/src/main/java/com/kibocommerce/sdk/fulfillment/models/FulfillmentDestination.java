/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.fulfillment.models.FulfillmentContact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FulfillmentDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FulfillmentDestination implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DESTINATION_CONTACT = "destinationContact";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONTACT)
  private FulfillmentContact destinationContact;

  public static final String SERIALIZED_NAME_IS_DESTINATION_COMMERCIAL = "isDestinationCommercial";
  @SerializedName(SERIALIZED_NAME_IS_DESTINATION_COMMERCIAL)
  private Boolean isDestinationCommercial;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public FulfillmentDestination() {
  }

  public FulfillmentDestination data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public FulfillmentDestination destinationContact(FulfillmentContact destinationContact) {
    
    this.destinationContact = destinationContact;
    return this;
  }

   /**
   * Get destinationContact
   * @return destinationContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentContact getDestinationContact() {
    return destinationContact;
  }


  public void setDestinationContact(FulfillmentContact destinationContact) {
    this.destinationContact = destinationContact;
  }


  public FulfillmentDestination isDestinationCommercial(Boolean isDestinationCommercial) {
    
    this.isDestinationCommercial = isDestinationCommercial;
    return this;
  }

   /**
   * Get isDestinationCommercial
   * @return isDestinationCommercial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsDestinationCommercial() {
    return isDestinationCommercial;
  }


  public void setIsDestinationCommercial(Boolean isDestinationCommercial) {
    this.isDestinationCommercial = isDestinationCommercial;
  }


  public FulfillmentDestination locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Get locationCode
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FulfillmentDestination fulfillmentDestination = (FulfillmentDestination) o;
    return Objects.equals(this.data, fulfillmentDestination.data) &&
        Objects.equals(this.destinationContact, fulfillmentDestination.destinationContact) &&
        Objects.equals(this.isDestinationCommercial, fulfillmentDestination.isDestinationCommercial) &&
        Objects.equals(this.locationCode, fulfillmentDestination.locationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, destinationContact, isDestinationCommercial, locationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FulfillmentDestination {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    destinationContact: ").append(toIndentedString(destinationContact)).append("\n");
    sb.append("    isDestinationCommercial: ").append(toIndentedString(isDestinationCommercial)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("destinationContact");
    openapiFields.add("isDestinationCommercial");
    openapiFields.add("locationCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FulfillmentDestination
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FulfillmentDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FulfillmentDestination is not found in the empty JSON string", FulfillmentDestination.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FulfillmentDestination.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FulfillmentDestination` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `destinationContact`
      if (jsonObj.get("destinationContact") != null && !jsonObj.get("destinationContact").isJsonNull()) {
        FulfillmentContact.validateJsonObject(jsonObj.getAsJsonObject("destinationContact"));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FulfillmentDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FulfillmentDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FulfillmentDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FulfillmentDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<FulfillmentDestination>() {
           @Override
           public void write(JsonWriter out, FulfillmentDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FulfillmentDestination read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FulfillmentDestination given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FulfillmentDestination
  * @throws IOException if the JSON string is invalid with respect to FulfillmentDestination
  */
  public static FulfillmentDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FulfillmentDestination.class);
  }

 /**
  * Convert an instance of FulfillmentDestination to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

