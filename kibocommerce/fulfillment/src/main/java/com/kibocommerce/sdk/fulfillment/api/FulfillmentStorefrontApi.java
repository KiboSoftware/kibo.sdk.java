/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.fulfillment.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.fulfillment.models.EntityModelOfShipment;
import com.kibocommerce.sdk.fulfillment.models.PagedModelOfEntityModelOfShipment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FulfillmentStorefrontApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public FulfillmentStorefrontApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentStorefrontApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public FulfillmentStorefrontApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public FulfillmentStorefrontApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public FulfillmentStorefrontApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getShipmentUsingGET1
     * @param shipmentNumber shipmentNumber (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentUsingGET1Call(Integer shipmentNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/storefront/shipments/{shipmentNumber}"
            .replaceAll("\\{" + "shipmentNumber" + "\\}", localVarApiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentUsingGET1ValidateBeforeCall(Integer shipmentNumber, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling getShipmentUsingGET1(Async)");
        }
        

        okhttp3.Call localVarCall = getShipmentUsingGET1Call(shipmentNumber, _callback);
        return localVarCall;

    }

    /**
     * Get Shipment
     * Get shipment information. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
     * @param shipmentNumber shipmentNumber (required)
     * @return EntityModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfShipment getShipmentUsingGET1(Integer shipmentNumber) throws ApiException {
        ApiResponse<EntityModelOfShipment> localVarResp = getShipmentUsingGET1WithHttpInfo(shipmentNumber);
        return localVarResp.getData();
    }

    /**
     * Get Shipment
     * Get shipment information. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
     * @param shipmentNumber shipmentNumber (required)
     * @return ApiResponse&lt;EntityModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfShipment> getShipmentUsingGET1WithHttpInfo(Integer shipmentNumber) throws ApiException {
        okhttp3.Call localVarCall = getShipmentUsingGET1ValidateBeforeCall(shipmentNumber, null);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipment (asynchronously)
     * Get shipment information. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
     * @param shipmentNumber shipmentNumber (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentUsingGET1Async(Integer shipmentNumber, final ApiCallback<EntityModelOfShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentUsingGET1ValidateBeforeCall(shipmentNumber, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipmentsUsingGET1
     * @param bypassSearchIndex  (optional)
     * @param filter  (optional)
     * @param isLate  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param quickSearch  (optional)
     * @param sort  (optional)
     * @param workflowTaskName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentsUsingGET1Call(Boolean bypassSearchIndex, String filter, Boolean isLate, Integer page, Integer pageSize, String quickSearch, String sort, String workflowTaskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/storefront/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bypassSearchIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bypassSearchIndex", bypassSearchIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (isLate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isLate", isLate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (quickSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quickSearch", quickSearch));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (workflowTaskName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflowTaskName", workflowTaskName));
        }

        final String[] localVarAccepts = {
            "application/json", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentsUsingGET1ValidateBeforeCall(Boolean bypassSearchIndex, String filter, Boolean isLate, Integer page, Integer pageSize, String quickSearch, String sort, String workflowTaskName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getShipmentsUsingGET1Call(bypassSearchIndex, filter, isLate, page, pageSize, quickSearch, sort, workflowTaskName, _callback);
        return localVarCall;

    }

    /**
     * Get Shipments
     * Get Shipments
     * @param bypassSearchIndex  (optional)
     * @param filter  (optional)
     * @param isLate  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param quickSearch  (optional)
     * @param sort  (optional)
     * @param workflowTaskName  (optional)
     * @return PagedModelOfEntityModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PagedModelOfEntityModelOfShipment getShipmentsUsingGET1(Boolean bypassSearchIndex, String filter, Boolean isLate, Integer page, Integer pageSize, String quickSearch, String sort, String workflowTaskName) throws ApiException {
        ApiResponse<PagedModelOfEntityModelOfShipment> localVarResp = getShipmentsUsingGET1WithHttpInfo(bypassSearchIndex, filter, isLate, page, pageSize, quickSearch, sort, workflowTaskName);
        return localVarResp.getData();
    }

    /**
     * Get Shipments
     * Get Shipments
     * @param bypassSearchIndex  (optional)
     * @param filter  (optional)
     * @param isLate  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param quickSearch  (optional)
     * @param sort  (optional)
     * @param workflowTaskName  (optional)
     * @return ApiResponse&lt;PagedModelOfEntityModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedModelOfEntityModelOfShipment> getShipmentsUsingGET1WithHttpInfo(Boolean bypassSearchIndex, String filter, Boolean isLate, Integer page, Integer pageSize, String quickSearch, String sort, String workflowTaskName) throws ApiException {
        okhttp3.Call localVarCall = getShipmentsUsingGET1ValidateBeforeCall(bypassSearchIndex, filter, isLate, page, pageSize, quickSearch, sort, workflowTaskName, null);
        Type localVarReturnType = new TypeToken<PagedModelOfEntityModelOfShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipments (asynchronously)
     * Get Shipments
     * @param bypassSearchIndex  (optional)
     * @param filter  (optional)
     * @param isLate  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param quickSearch  (optional)
     * @param sort  (optional)
     * @param workflowTaskName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentsUsingGET1Async(Boolean bypassSearchIndex, String filter, Boolean isLate, Integer page, Integer pageSize, String quickSearch, String sort, String workflowTaskName, final ApiCallback<PagedModelOfEntityModelOfShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentsUsingGET1ValidateBeforeCall(bypassSearchIndex, filter, isLate, page, pageSize, quickSearch, sort, workflowTaskName, _callback);
        Type localVarReturnType = new TypeToken<PagedModelOfEntityModelOfShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public FulfillmentStorefrontApi build() {
            return new FulfillmentStorefrontApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
