/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.orderrouting.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.orderrouting.models.ApiDocumentationLocationGroup;
import com.kibocommerce.sdk.orderrouting.models.LocationGroupModel;
import com.kibocommerce.sdk.orderrouting.models.LocationSort;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderRoutingGroupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public OrderRoutingGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderRoutingGroupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public OrderRoutingGroupApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public OrderRoutingGroupApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public OrderRoutingGroupApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteGroupUsingDELETE
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingDELETECall(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group/delete/{groupID}"
            .replaceAll("\\{" + "groupID" + "\\}", localVarApiClient.escapeString(groupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupUsingDELETEValidateBeforeCall(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupID' is set
        if (groupID == null) {
            throw new ApiException("Missing the required parameter 'groupID' when calling deleteGroupUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling deleteGroupUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteGroupUsingDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupUsingDELETECall(groupID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * deleteGroup
     * deleteGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroupUsingDELETE(Integer groupID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        deleteGroupUsingDELETEWithHttpInfo(groupID, xVolSite, xVolTenant);
    }

    /**
     * deleteGroup
     * deleteGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupUsingDELETEWithHttpInfo(Integer groupID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupUsingDELETEValidateBeforeCall(groupID, xVolSite, xVolTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteGroup (asynchronously)
     * deleteGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupUsingDELETEAsync(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupUsingDELETEValidateBeforeCall(groupID, xVolSite, xVolTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupUsingGET
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupUsingGETCall(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group/{groupID}"
            .replaceAll("\\{" + "groupID" + "\\}", localVarApiClient.escapeString(groupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupUsingGETValidateBeforeCall(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupID' is set
        if (groupID == null) {
            throw new ApiException("Missing the required parameter 'groupID' when calling getGroupUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling getGroupUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getGroupUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupUsingGETCall(groupID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * getGroup
     * getGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiDocumentationLocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiDocumentationLocationGroup getGroupUsingGET(Integer groupID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<ApiDocumentationLocationGroup> localVarResp = getGroupUsingGETWithHttpInfo(groupID, xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * getGroup
     * getGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;ApiDocumentationLocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDocumentationLocationGroup> getGroupUsingGETWithHttpInfo(Integer groupID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = getGroupUsingGETValidateBeforeCall(groupID, xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getGroup (asynchronously)
     * getGroup
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupUsingGETAsync(Integer groupID, Integer xVolSite, Integer xVolTenant, final ApiCallback<ApiDocumentationLocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupUsingGETValidateBeforeCall(groupID, xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveGroupUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveGroupUsingPOSTCall(Integer xVolSite, Integer xVolTenant, LocationGroupModel loc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loc;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveGroupUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, LocationGroupModel loc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling saveGroupUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling saveGroupUsingPOST(Async)");
        }
        
        // verify the required parameter 'loc' is set
        if (loc == null) {
            throw new ApiException("Missing the required parameter 'loc' when calling saveGroupUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = saveGroupUsingPOSTCall(xVolSite, xVolTenant, loc, _callback);
        return localVarCall;

    }

    /**
     * saveGroup
     * saveGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @return ApiDocumentationLocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiDocumentationLocationGroup saveGroupUsingPOST(Integer xVolSite, Integer xVolTenant, LocationGroupModel loc) throws ApiException {
        ApiResponse<ApiDocumentationLocationGroup> localVarResp = saveGroupUsingPOSTWithHttpInfo(xVolSite, xVolTenant, loc);
        return localVarResp.getData();
    }

    /**
     * saveGroup
     * saveGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @return ApiResponse&lt;ApiDocumentationLocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDocumentationLocationGroup> saveGroupUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, LocationGroupModel loc) throws ApiException {
        okhttp3.Call localVarCall = saveGroupUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, loc, null);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * saveGroup (asynchronously)
     * saveGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveGroupUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, LocationGroupModel loc, final ApiCallback<ApiDocumentationLocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveGroupUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, loc, _callback);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setGroupFiltersUsingPOST
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filterIDs filterIDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGroupFiltersUsingPOSTCall(Integer groupID, Integer xVolSite, Integer xVolTenant, List<Integer> filterIDs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filterIDs;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group/{groupID}/setFilters"
            .replaceAll("\\{" + "groupID" + "\\}", localVarApiClient.escapeString(groupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGroupFiltersUsingPOSTValidateBeforeCall(Integer groupID, Integer xVolSite, Integer xVolTenant, List<Integer> filterIDs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupID' is set
        if (groupID == null) {
            throw new ApiException("Missing the required parameter 'groupID' when calling setGroupFiltersUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling setGroupFiltersUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling setGroupFiltersUsingPOST(Async)");
        }
        
        // verify the required parameter 'filterIDs' is set
        if (filterIDs == null) {
            throw new ApiException("Missing the required parameter 'filterIDs' when calling setGroupFiltersUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = setGroupFiltersUsingPOSTCall(groupID, xVolSite, xVolTenant, filterIDs, _callback);
        return localVarCall;

    }

    /**
     * setGroupFilters
     * setGroupFilters
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filterIDs filterIDs (required)
     * @return ApiDocumentationLocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiDocumentationLocationGroup setGroupFiltersUsingPOST(Integer groupID, Integer xVolSite, Integer xVolTenant, List<Integer> filterIDs) throws ApiException {
        ApiResponse<ApiDocumentationLocationGroup> localVarResp = setGroupFiltersUsingPOSTWithHttpInfo(groupID, xVolSite, xVolTenant, filterIDs);
        return localVarResp.getData();
    }

    /**
     * setGroupFilters
     * setGroupFilters
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filterIDs filterIDs (required)
     * @return ApiResponse&lt;ApiDocumentationLocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDocumentationLocationGroup> setGroupFiltersUsingPOSTWithHttpInfo(Integer groupID, Integer xVolSite, Integer xVolTenant, List<Integer> filterIDs) throws ApiException {
        okhttp3.Call localVarCall = setGroupFiltersUsingPOSTValidateBeforeCall(groupID, xVolSite, xVolTenant, filterIDs, null);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * setGroupFilters (asynchronously)
     * setGroupFilters
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filterIDs filterIDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGroupFiltersUsingPOSTAsync(Integer groupID, Integer xVolSite, Integer xVolTenant, List<Integer> filterIDs, final ApiCallback<ApiDocumentationLocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGroupFiltersUsingPOSTValidateBeforeCall(groupID, xVolSite, xVolTenant, filterIDs, _callback);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setGroupSortsUsingPOST
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param sorts sorts (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGroupSortsUsingPOSTCall(Integer groupID, Integer xVolSite, Integer xVolTenant, List<LocationSort> sorts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sorts;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group/{groupID}/setSorts"
            .replaceAll("\\{" + "groupID" + "\\}", localVarApiClient.escapeString(groupID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGroupSortsUsingPOSTValidateBeforeCall(Integer groupID, Integer xVolSite, Integer xVolTenant, List<LocationSort> sorts, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupID' is set
        if (groupID == null) {
            throw new ApiException("Missing the required parameter 'groupID' when calling setGroupSortsUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling setGroupSortsUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling setGroupSortsUsingPOST(Async)");
        }
        
        // verify the required parameter 'sorts' is set
        if (sorts == null) {
            throw new ApiException("Missing the required parameter 'sorts' when calling setGroupSortsUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = setGroupSortsUsingPOSTCall(groupID, xVolSite, xVolTenant, sorts, _callback);
        return localVarCall;

    }

    /**
     * setGroupSorts
     * setGroupSorts
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param sorts sorts (required)
     * @return ApiDocumentationLocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiDocumentationLocationGroup setGroupSortsUsingPOST(Integer groupID, Integer xVolSite, Integer xVolTenant, List<LocationSort> sorts) throws ApiException {
        ApiResponse<ApiDocumentationLocationGroup> localVarResp = setGroupSortsUsingPOSTWithHttpInfo(groupID, xVolSite, xVolTenant, sorts);
        return localVarResp.getData();
    }

    /**
     * setGroupSorts
     * setGroupSorts
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param sorts sorts (required)
     * @return ApiResponse&lt;ApiDocumentationLocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDocumentationLocationGroup> setGroupSortsUsingPOSTWithHttpInfo(Integer groupID, Integer xVolSite, Integer xVolTenant, List<LocationSort> sorts) throws ApiException {
        okhttp3.Call localVarCall = setGroupSortsUsingPOSTValidateBeforeCall(groupID, xVolSite, xVolTenant, sorts, null);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * setGroupSorts (asynchronously)
     * setGroupSorts
     * @param groupID groupID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param sorts sorts (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGroupSortsUsingPOSTAsync(Integer groupID, Integer xVolSite, Integer xVolTenant, List<LocationSort> sorts, final ApiCallback<ApiDocumentationLocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGroupSortsUsingPOSTValidateBeforeCall(groupID, xVolSite, xVolTenant, sorts, _callback);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGroupUsingGET
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGroupUsingGETCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/group/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGroupUsingGETValidateBeforeCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling testGroupUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling testGroupUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = testGroupUsingGETCall(xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * testGroup
     * testGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiDocumentationLocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiDocumentationLocationGroup testGroupUsingGET(Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<ApiDocumentationLocationGroup> localVarResp = testGroupUsingGETWithHttpInfo(xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * testGroup
     * testGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;ApiDocumentationLocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiDocumentationLocationGroup> testGroupUsingGETWithHttpInfo(Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = testGroupUsingGETValidateBeforeCall(xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testGroup (asynchronously)
     * testGroup
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGroupUsingGETAsync(Integer xVolSite, Integer xVolTenant, final ApiCallback<ApiDocumentationLocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGroupUsingGETValidateBeforeCall(xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<ApiDocumentationLocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public OrderRoutingGroupApi build() {
            return new OrderRoutingGroupApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
