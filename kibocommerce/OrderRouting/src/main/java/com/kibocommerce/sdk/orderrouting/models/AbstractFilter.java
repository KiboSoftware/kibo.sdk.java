/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.orderrouting.models.UnitOfobject;
import com.kibocommerce.sdk.orderrouting.models.UserContextInformation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * AbstractFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AbstractFilter implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets booleanOperator
   */
  @JsonAdapter(BooleanOperatorEnum.Adapter.class)
  public enum BooleanOperatorEnum {
    EQUAL("filter.logic.equal"),
    
    NOT_EQUAL("filter.logic.not.equal"),
    
    GREATER_THAN("filter.logic.greater.than"),
    
    LESS_THAN("filter.logic.less.than"),
    
    GREATER_OR_EQUAL("filter.logic.greater.or.equal"),
    
    LESS_OR_EQUAL("filter.logic.less.or.equal"),
    
    IN("filter.logic.in"),
    
    NOT_IN("filter.logic.not.in"),
    
    BETWEEN("filter.logic.between"),
    
    STARTS_WITH("filter.logic.starts.with"),
    
    ENDS_WITH("filter.logic.ends.with"),
    
    CONTAINS("filter.logic.contains"),
    
    SUBSET("filter.logic.subset");

    private String value;

    BooleanOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BooleanOperatorEnum fromValue(String value) {
      for (BooleanOperatorEnum b : BooleanOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BooleanOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BooleanOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BooleanOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BooleanOperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BOOLEAN_OPERATOR = "booleanOperator";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_OPERATOR)
  private BooleanOperatorEnum booleanOperator;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATOR_USERNAME = "creatorUsername";
  @SerializedName(SERIALIZED_NAME_CREATOR_USERNAME)
  private String creatorUsername;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTE_NAME = "customAttributeName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTE_NAME)
  private String customAttributeName;

  public static final String SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_F_Q_N = "dataPointExtensibleAttributeFQN";
  @SerializedName(SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_F_Q_N)
  private String dataPointExtensibleAttributeFQN;

  public static final String SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_NAME = "dataPointExtensibleAttributeName";
  @SerializedName(SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_NAME)
  private String dataPointExtensibleAttributeName;

  public static final String SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_TYPE = "dataPointExtensibleAttributeType";
  @SerializedName(SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_ATTRIBUTE_TYPE)
  private String dataPointExtensibleAttributeType;

  public static final String SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_FILTER = "dataPointExtensibleFilter";
  @SerializedName(SERIALIZED_NAME_DATA_POINT_EXTENSIBLE_FILTER)
  private Boolean dataPointExtensibleFilter;

  public static final String SERIALIZED_NAME_DOT_DELIMITED_PROPERTY_NAME = "dotDelimitedPropertyName";
  @SerializedName(SERIALIZED_NAME_DOT_DELIMITED_PROPERTY_NAME)
  private String dotDelimitedPropertyName;

  public static final String SERIALIZED_NAME_ENVIRONMENT_I_D = "environmentID";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_I_D)
  private Integer environmentID;

  public static final String SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_F_Q_N = "extensibleAttributeFQN";
  @SerializedName(SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_F_Q_N)
  private String extensibleAttributeFQN;

  public static final String SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_NAME = "extensibleAttributeName";
  @SerializedName(SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_NAME)
  private String extensibleAttributeName;

  public static final String SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_TYPE = "extensibleAttributeType";
  @SerializedName(SERIALIZED_NAME_EXTENSIBLE_ATTRIBUTE_TYPE)
  private String extensibleAttributeType;

  public static final String SERIALIZED_NAME_EXTENSIBLE_FILTER = "extensibleFilter";
  @SerializedName(SERIALIZED_NAME_EXTENSIBLE_FILTER)
  private Boolean extensibleFilter;

  public static final String SERIALIZED_NAME_FILTER_I_D = "filterID";
  @SerializedName(SERIALIZED_NAME_FILTER_I_D)
  private Integer filterID;

  public static final String SERIALIZED_NAME_FILTER_UNIT = "filterUnit";
  @SerializedName(SERIALIZED_NAME_FILTER_UNIT)
  private UnitOfobject filterUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH_STRING = "pathString";
  @SerializedName(SERIALIZED_NAME_PATH_STRING)
  private String pathString;

  public static final String SERIALIZED_NAME_PERSISTED = "persisted";
  @SerializedName(SERIALIZED_NAME_PERSISTED)
  private Boolean persisted;

  public static final String SERIALIZED_NAME_SITE_I_D = "siteID";
  @SerializedName(SERIALIZED_NAME_SITE_I_D)
  private Integer siteID;

  public static final String SERIALIZED_NAME_TENANT_I_D = "tenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private Integer tenantID;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_UPDATER_USERNAME = "updaterUsername";
  @SerializedName(SERIALIZED_NAME_UPDATER_USERNAME)
  private String updaterUsername;

  public static final String SERIALIZED_NAME_USER_CONTEXT = "userContext";
  @SerializedName(SERIALIZED_NAME_USER_CONTEXT)
  private UserContextInformation userContext;

  public AbstractFilter() {
  }

  public AbstractFilter booleanOperator(BooleanOperatorEnum booleanOperator) {
    
    this.booleanOperator = booleanOperator;
    return this;
  }

   /**
   * Get booleanOperator
   * @return booleanOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BooleanOperatorEnum getBooleanOperator() {
    return booleanOperator;
  }


  public void setBooleanOperator(BooleanOperatorEnum booleanOperator) {
    this.booleanOperator = booleanOperator;
  }


  public AbstractFilter created(OffsetDateTime created) {
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public AbstractFilter creatorUsername(String creatorUsername) {
    
    this.creatorUsername = creatorUsername;
    return this;
  }

   /**
   * Get creatorUsername
   * @return creatorUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatorUsername() {
    return creatorUsername;
  }


  public void setCreatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
  }


  public AbstractFilter customAttributeName(String customAttributeName) {
    
    this.customAttributeName = customAttributeName;
    return this;
  }

   /**
   * Get customAttributeName
   * @return customAttributeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomAttributeName() {
    return customAttributeName;
  }


  public void setCustomAttributeName(String customAttributeName) {
    this.customAttributeName = customAttributeName;
  }


  public AbstractFilter dataPointExtensibleAttributeFQN(String dataPointExtensibleAttributeFQN) {
    
    this.dataPointExtensibleAttributeFQN = dataPointExtensibleAttributeFQN;
    return this;
  }

   /**
   * Get dataPointExtensibleAttributeFQN
   * @return dataPointExtensibleAttributeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataPointExtensibleAttributeFQN() {
    return dataPointExtensibleAttributeFQN;
  }


  public void setDataPointExtensibleAttributeFQN(String dataPointExtensibleAttributeFQN) {
    this.dataPointExtensibleAttributeFQN = dataPointExtensibleAttributeFQN;
  }


  public AbstractFilter dataPointExtensibleAttributeName(String dataPointExtensibleAttributeName) {
    
    this.dataPointExtensibleAttributeName = dataPointExtensibleAttributeName;
    return this;
  }

   /**
   * Get dataPointExtensibleAttributeName
   * @return dataPointExtensibleAttributeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataPointExtensibleAttributeName() {
    return dataPointExtensibleAttributeName;
  }


  public void setDataPointExtensibleAttributeName(String dataPointExtensibleAttributeName) {
    this.dataPointExtensibleAttributeName = dataPointExtensibleAttributeName;
  }


  public AbstractFilter dataPointExtensibleAttributeType(String dataPointExtensibleAttributeType) {
    
    this.dataPointExtensibleAttributeType = dataPointExtensibleAttributeType;
    return this;
  }

   /**
   * Get dataPointExtensibleAttributeType
   * @return dataPointExtensibleAttributeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataPointExtensibleAttributeType() {
    return dataPointExtensibleAttributeType;
  }


  public void setDataPointExtensibleAttributeType(String dataPointExtensibleAttributeType) {
    this.dataPointExtensibleAttributeType = dataPointExtensibleAttributeType;
  }


  public AbstractFilter dataPointExtensibleFilter(Boolean dataPointExtensibleFilter) {
    
    this.dataPointExtensibleFilter = dataPointExtensibleFilter;
    return this;
  }

   /**
   * Get dataPointExtensibleFilter
   * @return dataPointExtensibleFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDataPointExtensibleFilter() {
    return dataPointExtensibleFilter;
  }


  public void setDataPointExtensibleFilter(Boolean dataPointExtensibleFilter) {
    this.dataPointExtensibleFilter = dataPointExtensibleFilter;
  }


  public AbstractFilter dotDelimitedPropertyName(String dotDelimitedPropertyName) {
    
    this.dotDelimitedPropertyName = dotDelimitedPropertyName;
    return this;
  }

   /**
   * Get dotDelimitedPropertyName
   * @return dotDelimitedPropertyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDotDelimitedPropertyName() {
    return dotDelimitedPropertyName;
  }


  public void setDotDelimitedPropertyName(String dotDelimitedPropertyName) {
    this.dotDelimitedPropertyName = dotDelimitedPropertyName;
  }


  public AbstractFilter environmentID(Integer environmentID) {
    
    this.environmentID = environmentID;
    return this;
  }

   /**
   * Get environmentID
   * @return environmentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEnvironmentID() {
    return environmentID;
  }


  public void setEnvironmentID(Integer environmentID) {
    this.environmentID = environmentID;
  }


  public AbstractFilter extensibleAttributeFQN(String extensibleAttributeFQN) {
    
    this.extensibleAttributeFQN = extensibleAttributeFQN;
    return this;
  }

   /**
   * Get extensibleAttributeFQN
   * @return extensibleAttributeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtensibleAttributeFQN() {
    return extensibleAttributeFQN;
  }


  public void setExtensibleAttributeFQN(String extensibleAttributeFQN) {
    this.extensibleAttributeFQN = extensibleAttributeFQN;
  }


  public AbstractFilter extensibleAttributeName(String extensibleAttributeName) {
    
    this.extensibleAttributeName = extensibleAttributeName;
    return this;
  }

   /**
   * Get extensibleAttributeName
   * @return extensibleAttributeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtensibleAttributeName() {
    return extensibleAttributeName;
  }


  public void setExtensibleAttributeName(String extensibleAttributeName) {
    this.extensibleAttributeName = extensibleAttributeName;
  }


  public AbstractFilter extensibleAttributeType(String extensibleAttributeType) {
    
    this.extensibleAttributeType = extensibleAttributeType;
    return this;
  }

   /**
   * Get extensibleAttributeType
   * @return extensibleAttributeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtensibleAttributeType() {
    return extensibleAttributeType;
  }


  public void setExtensibleAttributeType(String extensibleAttributeType) {
    this.extensibleAttributeType = extensibleAttributeType;
  }


  public AbstractFilter extensibleFilter(Boolean extensibleFilter) {
    
    this.extensibleFilter = extensibleFilter;
    return this;
  }

   /**
   * Get extensibleFilter
   * @return extensibleFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExtensibleFilter() {
    return extensibleFilter;
  }


  public void setExtensibleFilter(Boolean extensibleFilter) {
    this.extensibleFilter = extensibleFilter;
  }


  public AbstractFilter filterID(Integer filterID) {
    
    this.filterID = filterID;
    return this;
  }

   /**
   * Get filterID
   * @return filterID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFilterID() {
    return filterID;
  }


  public void setFilterID(Integer filterID) {
    this.filterID = filterID;
  }


  public AbstractFilter filterUnit(UnitOfobject filterUnit) {
    
    this.filterUnit = filterUnit;
    return this;
  }

   /**
   * Get filterUnit
   * @return filterUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UnitOfobject getFilterUnit() {
    return filterUnit;
  }


  public void setFilterUnit(UnitOfobject filterUnit) {
    this.filterUnit = filterUnit;
  }


  public AbstractFilter name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AbstractFilter pathString(String pathString) {
    
    this.pathString = pathString;
    return this;
  }

   /**
   * Get pathString
   * @return pathString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPathString() {
    return pathString;
  }


  public void setPathString(String pathString) {
    this.pathString = pathString;
  }


  public AbstractFilter persisted(Boolean persisted) {
    
    this.persisted = persisted;
    return this;
  }

   /**
   * Get persisted
   * @return persisted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPersisted() {
    return persisted;
  }


  public void setPersisted(Boolean persisted) {
    this.persisted = persisted;
  }


  public AbstractFilter siteID(Integer siteID) {
    
    this.siteID = siteID;
    return this;
  }

   /**
   * Get siteID
   * @return siteID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSiteID() {
    return siteID;
  }


  public void setSiteID(Integer siteID) {
    this.siteID = siteID;
  }


  public AbstractFilter tenantID(Integer tenantID) {
    
    this.tenantID = tenantID;
    return this;
  }

   /**
   * Get tenantID
   * @return tenantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTenantID() {
    return tenantID;
  }


  public void setTenantID(Integer tenantID) {
    this.tenantID = tenantID;
  }


  public AbstractFilter updated(OffsetDateTime updated) {
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }


  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public AbstractFilter updaterUsername(String updaterUsername) {
    
    this.updaterUsername = updaterUsername;
    return this;
  }

   /**
   * Get updaterUsername
   * @return updaterUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdaterUsername() {
    return updaterUsername;
  }


  public void setUpdaterUsername(String updaterUsername) {
    this.updaterUsername = updaterUsername;
  }


  public AbstractFilter userContext(UserContextInformation userContext) {
    
    this.userContext = userContext;
    return this;
  }

   /**
   * Get userContext
   * @return userContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserContextInformation getUserContext() {
    return userContext;
  }


  public void setUserContext(UserContextInformation userContext) {
    this.userContext = userContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractFilter abstractFilter = (AbstractFilter) o;
    return Objects.equals(this.booleanOperator, abstractFilter.booleanOperator) &&
        Objects.equals(this.created, abstractFilter.created) &&
        Objects.equals(this.creatorUsername, abstractFilter.creatorUsername) &&
        Objects.equals(this.customAttributeName, abstractFilter.customAttributeName) &&
        Objects.equals(this.dataPointExtensibleAttributeFQN, abstractFilter.dataPointExtensibleAttributeFQN) &&
        Objects.equals(this.dataPointExtensibleAttributeName, abstractFilter.dataPointExtensibleAttributeName) &&
        Objects.equals(this.dataPointExtensibleAttributeType, abstractFilter.dataPointExtensibleAttributeType) &&
        Objects.equals(this.dataPointExtensibleFilter, abstractFilter.dataPointExtensibleFilter) &&
        Objects.equals(this.dotDelimitedPropertyName, abstractFilter.dotDelimitedPropertyName) &&
        Objects.equals(this.environmentID, abstractFilter.environmentID) &&
        Objects.equals(this.extensibleAttributeFQN, abstractFilter.extensibleAttributeFQN) &&
        Objects.equals(this.extensibleAttributeName, abstractFilter.extensibleAttributeName) &&
        Objects.equals(this.extensibleAttributeType, abstractFilter.extensibleAttributeType) &&
        Objects.equals(this.extensibleFilter, abstractFilter.extensibleFilter) &&
        Objects.equals(this.filterID, abstractFilter.filterID) &&
        Objects.equals(this.filterUnit, abstractFilter.filterUnit) &&
        Objects.equals(this.name, abstractFilter.name) &&
        Objects.equals(this.pathString, abstractFilter.pathString) &&
        Objects.equals(this.persisted, abstractFilter.persisted) &&
        Objects.equals(this.siteID, abstractFilter.siteID) &&
        Objects.equals(this.tenantID, abstractFilter.tenantID) &&
        Objects.equals(this.updated, abstractFilter.updated) &&
        Objects.equals(this.updaterUsername, abstractFilter.updaterUsername) &&
        Objects.equals(this.userContext, abstractFilter.userContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(booleanOperator, created, creatorUsername, customAttributeName, dataPointExtensibleAttributeFQN, dataPointExtensibleAttributeName, dataPointExtensibleAttributeType, dataPointExtensibleFilter, dotDelimitedPropertyName, environmentID, extensibleAttributeFQN, extensibleAttributeName, extensibleAttributeType, extensibleFilter, filterID, filterUnit, name, pathString, persisted, siteID, tenantID, updated, updaterUsername, userContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractFilter {\n");
    sb.append("    booleanOperator: ").append(toIndentedString(booleanOperator)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    creatorUsername: ").append(toIndentedString(creatorUsername)).append("\n");
    sb.append("    customAttributeName: ").append(toIndentedString(customAttributeName)).append("\n");
    sb.append("    dataPointExtensibleAttributeFQN: ").append(toIndentedString(dataPointExtensibleAttributeFQN)).append("\n");
    sb.append("    dataPointExtensibleAttributeName: ").append(toIndentedString(dataPointExtensibleAttributeName)).append("\n");
    sb.append("    dataPointExtensibleAttributeType: ").append(toIndentedString(dataPointExtensibleAttributeType)).append("\n");
    sb.append("    dataPointExtensibleFilter: ").append(toIndentedString(dataPointExtensibleFilter)).append("\n");
    sb.append("    dotDelimitedPropertyName: ").append(toIndentedString(dotDelimitedPropertyName)).append("\n");
    sb.append("    environmentID: ").append(toIndentedString(environmentID)).append("\n");
    sb.append("    extensibleAttributeFQN: ").append(toIndentedString(extensibleAttributeFQN)).append("\n");
    sb.append("    extensibleAttributeName: ").append(toIndentedString(extensibleAttributeName)).append("\n");
    sb.append("    extensibleAttributeType: ").append(toIndentedString(extensibleAttributeType)).append("\n");
    sb.append("    extensibleFilter: ").append(toIndentedString(extensibleFilter)).append("\n");
    sb.append("    filterID: ").append(toIndentedString(filterID)).append("\n");
    sb.append("    filterUnit: ").append(toIndentedString(filterUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathString: ").append(toIndentedString(pathString)).append("\n");
    sb.append("    persisted: ").append(toIndentedString(persisted)).append("\n");
    sb.append("    siteID: ").append(toIndentedString(siteID)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updaterUsername: ").append(toIndentedString(updaterUsername)).append("\n");
    sb.append("    userContext: ").append(toIndentedString(userContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("booleanOperator");
    openapiFields.add("created");
    openapiFields.add("creatorUsername");
    openapiFields.add("customAttributeName");
    openapiFields.add("dataPointExtensibleAttributeFQN");
    openapiFields.add("dataPointExtensibleAttributeName");
    openapiFields.add("dataPointExtensibleAttributeType");
    openapiFields.add("dataPointExtensibleFilter");
    openapiFields.add("dotDelimitedPropertyName");
    openapiFields.add("environmentID");
    openapiFields.add("extensibleAttributeFQN");
    openapiFields.add("extensibleAttributeName");
    openapiFields.add("extensibleAttributeType");
    openapiFields.add("extensibleFilter");
    openapiFields.add("filterID");
    openapiFields.add("filterUnit");
    openapiFields.add("name");
    openapiFields.add("pathString");
    openapiFields.add("persisted");
    openapiFields.add("siteID");
    openapiFields.add("tenantID");
    openapiFields.add("updated");
    openapiFields.add("updaterUsername");
    openapiFields.add("userContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AbstractFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AbstractFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbstractFilter is not found in the empty JSON string", AbstractFilter.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!AbstractFilter.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbstractFilter` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("booleanOperator") != null && !jsonObj.get("booleanOperator").isJsonNull()) && !jsonObj.get("booleanOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `booleanOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("booleanOperator").toString()));
      }
      if ((jsonObj.get("creatorUsername") != null && !jsonObj.get("creatorUsername").isJsonNull()) && !jsonObj.get("creatorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUsername").toString()));
      }
      if ((jsonObj.get("customAttributeName") != null && !jsonObj.get("customAttributeName").isJsonNull()) && !jsonObj.get("customAttributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customAttributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customAttributeName").toString()));
      }
      if ((jsonObj.get("dataPointExtensibleAttributeFQN") != null && !jsonObj.get("dataPointExtensibleAttributeFQN").isJsonNull()) && !jsonObj.get("dataPointExtensibleAttributeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPointExtensibleAttributeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPointExtensibleAttributeFQN").toString()));
      }
      if ((jsonObj.get("dataPointExtensibleAttributeName") != null && !jsonObj.get("dataPointExtensibleAttributeName").isJsonNull()) && !jsonObj.get("dataPointExtensibleAttributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPointExtensibleAttributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPointExtensibleAttributeName").toString()));
      }
      if ((jsonObj.get("dataPointExtensibleAttributeType") != null && !jsonObj.get("dataPointExtensibleAttributeType").isJsonNull()) && !jsonObj.get("dataPointExtensibleAttributeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPointExtensibleAttributeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPointExtensibleAttributeType").toString()));
      }
      if ((jsonObj.get("dotDelimitedPropertyName") != null && !jsonObj.get("dotDelimitedPropertyName").isJsonNull()) && !jsonObj.get("dotDelimitedPropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dotDelimitedPropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dotDelimitedPropertyName").toString()));
      }
      if ((jsonObj.get("extensibleAttributeFQN") != null && !jsonObj.get("extensibleAttributeFQN").isJsonNull()) && !jsonObj.get("extensibleAttributeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensibleAttributeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extensibleAttributeFQN").toString()));
      }
      if ((jsonObj.get("extensibleAttributeName") != null && !jsonObj.get("extensibleAttributeName").isJsonNull()) && !jsonObj.get("extensibleAttributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensibleAttributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extensibleAttributeName").toString()));
      }
      if ((jsonObj.get("extensibleAttributeType") != null && !jsonObj.get("extensibleAttributeType").isJsonNull()) && !jsonObj.get("extensibleAttributeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensibleAttributeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extensibleAttributeType").toString()));
      }
      // validate the optional field `filterUnit`
      if (jsonObj.get("filterUnit") != null && !jsonObj.get("filterUnit").isJsonNull()) {
        UnitOfobject.validateJsonObject(jsonObj.getAsJsonObject("filterUnit"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pathString") != null && !jsonObj.get("pathString").isJsonNull()) && !jsonObj.get("pathString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathString").toString()));
      }
      if ((jsonObj.get("updaterUsername") != null && !jsonObj.get("updaterUsername").isJsonNull()) && !jsonObj.get("updaterUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updaterUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updaterUsername").toString()));
      }
      // validate the optional field `userContext`
      if (jsonObj.get("userContext") != null && !jsonObj.get("userContext").isJsonNull()) {
        UserContextInformation.validateJsonObject(jsonObj.getAsJsonObject("userContext"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbstractFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbstractFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbstractFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbstractFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<AbstractFilter>() {
           @Override
           public void write(JsonWriter out, AbstractFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbstractFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AbstractFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AbstractFilter
  * @throws IOException if the JSON string is invalid with respect to AbstractFilter
  */
  public static AbstractFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbstractFilter.class);
  }

 /**
  * Convert an instance of AbstractFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

