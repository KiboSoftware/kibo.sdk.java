/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.orderrouting.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.orderrouting.models.CandidateSuggestionsRequest;
import com.kibocommerce.sdk.orderrouting.models.CandidateSuggestionsResponse;
import com.kibocommerce.sdk.orderrouting.models.SuggestionLog;
import com.kibocommerce.sdk.orderrouting.models.SuggestionRequest;
import com.kibocommerce.sdk.orderrouting.models.SuggestionResponse;
import com.kibocommerce.sdk.orderrouting.models.SuggestionTestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RoutingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public RoutingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public RoutingApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public RoutingApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public RoutingApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSampleRequestUsingGET
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSampleRequestUsingGETCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/routing/samplerequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSampleRequestUsingGETValidateBeforeCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling getSampleRequestUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getSampleRequestUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getSampleRequestUsingGETCall(xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * getSampleRequest
     * getSampleRequest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return SuggestionRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SuggestionRequest getSampleRequestUsingGET(Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<SuggestionRequest> localVarResp = getSampleRequestUsingGETWithHttpInfo(xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * getSampleRequest
     * getSampleRequest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;SuggestionRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionRequest> getSampleRequestUsingGETWithHttpInfo(Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = getSampleRequestUsingGETValidateBeforeCall(xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<SuggestionRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSampleRequest (asynchronously)
     * getSampleRequest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSampleRequestUsingGETAsync(Integer xVolSite, Integer xVolTenant, final ApiCallback<SuggestionRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSampleRequestUsingGETValidateBeforeCall(xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<SuggestionRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuggestionLogUsingGET
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param externalResponseID externalResponseID (optional)
     * @param orderID orderID (optional)
     * @param responseID responseID (optional)
     * @param suggestionID suggestionID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionLogUsingGETCall(Integer xVolSite, Integer xVolTenant, String externalResponseID, Integer orderID, Integer responseID, Integer suggestionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/routing/suggestionLog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalResponseID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalResponseID", externalResponseID));
        }

        if (orderID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderID", orderID));
        }

        if (responseID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseID", responseID));
        }

        if (suggestionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suggestionID", suggestionID));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionLogUsingGETValidateBeforeCall(Integer xVolSite, Integer xVolTenant, String externalResponseID, Integer orderID, Integer responseID, Integer suggestionID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling getSuggestionLogUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getSuggestionLogUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getSuggestionLogUsingGETCall(xVolSite, xVolTenant, externalResponseID, orderID, responseID, suggestionID, _callback);
        return localVarCall;

    }

    /**
     * getSuggestionLog
     * getSuggestionLog
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param externalResponseID externalResponseID (optional)
     * @param orderID orderID (optional)
     * @param responseID responseID (optional)
     * @param suggestionID suggestionID (optional)
     * @return List&lt;SuggestionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<SuggestionLog> getSuggestionLogUsingGET(Integer xVolSite, Integer xVolTenant, String externalResponseID, Integer orderID, Integer responseID, Integer suggestionID) throws ApiException {
        ApiResponse<List<SuggestionLog>> localVarResp = getSuggestionLogUsingGETWithHttpInfo(xVolSite, xVolTenant, externalResponseID, orderID, responseID, suggestionID);
        return localVarResp.getData();
    }

    /**
     * getSuggestionLog
     * getSuggestionLog
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param externalResponseID externalResponseID (optional)
     * @param orderID orderID (optional)
     * @param responseID responseID (optional)
     * @param suggestionID suggestionID (optional)
     * @return ApiResponse&lt;List&lt;SuggestionLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SuggestionLog>> getSuggestionLogUsingGETWithHttpInfo(Integer xVolSite, Integer xVolTenant, String externalResponseID, Integer orderID, Integer responseID, Integer suggestionID) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionLogUsingGETValidateBeforeCall(xVolSite, xVolTenant, externalResponseID, orderID, responseID, suggestionID, null);
        Type localVarReturnType = new TypeToken<List<SuggestionLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSuggestionLog (asynchronously)
     * getSuggestionLog
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param externalResponseID externalResponseID (optional)
     * @param orderID orderID (optional)
     * @param responseID responseID (optional)
     * @param suggestionID suggestionID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionLogUsingGETAsync(Integer xVolSite, Integer xVolTenant, String externalResponseID, Integer orderID, Integer responseID, Integer suggestionID, final ApiCallback<List<SuggestionLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionLogUsingGETValidateBeforeCall(xVolSite, xVolTenant, externalResponseID, orderID, responseID, suggestionID, _callback);
        Type localVarReturnType = new TypeToken<List<SuggestionLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestCandidatesUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestCandidatesUsingPOSTCall(Integer xVolSite, Integer xVolTenant, CandidateSuggestionsRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/routing/candidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestCandidatesUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, CandidateSuggestionsRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling suggestCandidatesUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling suggestCandidatesUsingPOST(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling suggestCandidatesUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = suggestCandidatesUsingPOSTCall(xVolSite, xVolTenant, request, _callback);
        return localVarCall;

    }

    /**
     * suggestCandidates
     * suggestCandidates
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @return CandidateSuggestionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CandidateSuggestionsResponse suggestCandidatesUsingPOST(Integer xVolSite, Integer xVolTenant, CandidateSuggestionsRequest request) throws ApiException {
        ApiResponse<CandidateSuggestionsResponse> localVarResp = suggestCandidatesUsingPOSTWithHttpInfo(xVolSite, xVolTenant, request);
        return localVarResp.getData();
    }

    /**
     * suggestCandidates
     * suggestCandidates
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @return ApiResponse&lt;CandidateSuggestionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CandidateSuggestionsResponse> suggestCandidatesUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, CandidateSuggestionsRequest request) throws ApiException {
        okhttp3.Call localVarCall = suggestCandidatesUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, null);
        Type localVarReturnType = new TypeToken<CandidateSuggestionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * suggestCandidates (asynchronously)
     * suggestCandidates
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestCandidatesUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, CandidateSuggestionsRequest request, final ApiCallback<CandidateSuggestionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestCandidatesUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, _callback);
        Type localVarReturnType = new TypeToken<CandidateSuggestionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestRoutingTestUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestRoutingTestUsingPOSTCall(Integer xVolSite, Integer xVolTenant, SuggestionTestRequest request, Boolean returnSuggestionLog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/routing/suggestionTest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnSuggestionLog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnSuggestionLog", returnSuggestionLog));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestRoutingTestUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, SuggestionTestRequest request, Boolean returnSuggestionLog, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling suggestRoutingTestUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling suggestRoutingTestUsingPOST(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling suggestRoutingTestUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = suggestRoutingTestUsingPOSTCall(xVolSite, xVolTenant, request, returnSuggestionLog, _callback);
        return localVarCall;

    }

    /**
     * suggestRoutingTest
     * suggestRoutingTest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to true)
     * @return SuggestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SuggestionResponse suggestRoutingTestUsingPOST(Integer xVolSite, Integer xVolTenant, SuggestionTestRequest request, Boolean returnSuggestionLog) throws ApiException {
        ApiResponse<SuggestionResponse> localVarResp = suggestRoutingTestUsingPOSTWithHttpInfo(xVolSite, xVolTenant, request, returnSuggestionLog);
        return localVarResp.getData();
    }

    /**
     * suggestRoutingTest
     * suggestRoutingTest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to true)
     * @return ApiResponse&lt;SuggestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionResponse> suggestRoutingTestUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, SuggestionTestRequest request, Boolean returnSuggestionLog) throws ApiException {
        okhttp3.Call localVarCall = suggestRoutingTestUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, returnSuggestionLog, null);
        Type localVarReturnType = new TypeToken<SuggestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * suggestRoutingTest (asynchronously)
     * suggestRoutingTest
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestRoutingTestUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, SuggestionTestRequest request, Boolean returnSuggestionLog, final ApiCallback<SuggestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestRoutingTestUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, returnSuggestionLog, _callback);
        Type localVarReturnType = new TypeToken<SuggestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestRoutingUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestRoutingUsingPOSTCall(Integer xVolSite, Integer xVolTenant, SuggestionRequest request, Boolean returnSuggestionLog, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/routing/suggestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnSuggestionLog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnSuggestionLog", returnSuggestionLog));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestRoutingUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, SuggestionRequest request, Boolean returnSuggestionLog, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling suggestRoutingUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling suggestRoutingUsingPOST(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling suggestRoutingUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = suggestRoutingUsingPOSTCall(xVolSite, xVolTenant, request, returnSuggestionLog, _callback);
        return localVarCall;

    }

    /**
     * suggestRouting
     * suggestRouting
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to false)
     * @return SuggestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SuggestionResponse suggestRoutingUsingPOST(Integer xVolSite, Integer xVolTenant, SuggestionRequest request, Boolean returnSuggestionLog) throws ApiException {
        ApiResponse<SuggestionResponse> localVarResp = suggestRoutingUsingPOSTWithHttpInfo(xVolSite, xVolTenant, request, returnSuggestionLog);
        return localVarResp.getData();
    }

    /**
     * suggestRouting
     * suggestRouting
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to false)
     * @return ApiResponse&lt;SuggestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestionResponse> suggestRoutingUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, SuggestionRequest request, Boolean returnSuggestionLog) throws ApiException {
        okhttp3.Call localVarCall = suggestRoutingUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, returnSuggestionLog, null);
        Type localVarReturnType = new TypeToken<SuggestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * suggestRouting (asynchronously)
     * suggestRouting
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param request request (required)
     * @param returnSuggestionLog returnSuggestionLog (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestRoutingUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, SuggestionRequest request, Boolean returnSuggestionLog, final ApiCallback<SuggestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestRoutingUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, request, returnSuggestionLog, _callback);
        Type localVarReturnType = new TypeToken<SuggestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public RoutingApi build() {
            return new RoutingApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
