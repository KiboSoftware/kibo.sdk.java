/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.orderrouting.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.orderrouting.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.orderrouting.models.AbstractFilter;
import com.kibocommerce.sdk.orderrouting.models.CustomDataListFilter;
import com.kibocommerce.sdk.orderrouting.models.CustomDataValueFilter;
import com.kibocommerce.sdk.orderrouting.models.LocationCriteriaSetFilter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderRoutingFilterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public OrderRoutingFilterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderRoutingFilterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public OrderRoutingFilterApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public OrderRoutingFilterApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public OrderRoutingFilterApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFilterUsingDELETE
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilterUsingDELETECall(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/delete/{filterID}"
            .replaceAll("\\{" + "filterID" + "\\}", localVarApiClient.escapeString(filterID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilterUsingDELETEValidateBeforeCall(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filterID' is set
        if (filterID == null) {
            throw new ApiException("Missing the required parameter 'filterID' when calling deleteFilterUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling deleteFilterUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteFilterUsingDELETE(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFilterUsingDELETECall(filterID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * deleteFilter
     * deleteFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFilterUsingDELETE(Integer filterID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        deleteFilterUsingDELETEWithHttpInfo(filterID, xVolSite, xVolTenant);
    }

    /**
     * deleteFilter
     * deleteFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFilterUsingDELETEWithHttpInfo(Integer filterID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = deleteFilterUsingDELETEValidateBeforeCall(filterID, xVolSite, xVolTenant, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteFilter (asynchronously)
     * deleteFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFilterUsingDELETEAsync(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilterUsingDELETEValidateBeforeCall(filterID, xVolSite, xVolTenant, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilterUsingGET
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterUsingGETCall(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/{filterID}"
            .replaceAll("\\{" + "filterID" + "\\}", localVarApiClient.escapeString(filterID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterUsingGETValidateBeforeCall(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'filterID' is set
        if (filterID == null) {
            throw new ApiException("Missing the required parameter 'filterID' when calling getFilterUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling getFilterUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getFilterUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getFilterUsingGETCall(filterID, xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * getFilter
     * getFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter getFilterUsingGET(Integer filterID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = getFilterUsingGETWithHttpInfo(filterID, xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * getFilter
     * getFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> getFilterUsingGETWithHttpInfo(Integer filterID, Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = getFilterUsingGETValidateBeforeCall(filterID, xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getFilter (asynchronously)
     * getFilter
     * @param filterID filterID (required)
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilterUsingGETAsync(Integer filterID, Integer xVolSite, Integer xVolTenant, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterUsingGETValidateBeforeCall(filterID, xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCriteriaSetFilterUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCriteriaSetFilterUsingPOSTCall(Integer xVolSite, Integer xVolTenant, LocationCriteriaSetFilter loc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loc;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/criteriaSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCriteriaSetFilterUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, LocationCriteriaSetFilter loc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling saveCriteriaSetFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling saveCriteriaSetFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'loc' is set
        if (loc == null) {
            throw new ApiException("Missing the required parameter 'loc' when calling saveCriteriaSetFilterUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = saveCriteriaSetFilterUsingPOSTCall(xVolSite, xVolTenant, loc, _callback);
        return localVarCall;

    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter saveCriteriaSetFilterUsingPOST(Integer xVolSite, Integer xVolTenant, LocationCriteriaSetFilter loc) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = saveCriteriaSetFilterUsingPOSTWithHttpInfo(xVolSite, xVolTenant, loc);
        return localVarResp.getData();
    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> saveCriteriaSetFilterUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, LocationCriteriaSetFilter loc) throws ApiException {
        okhttp3.Call localVarCall = saveCriteriaSetFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, loc, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * saveCriteriaSetFilter (asynchronously)
     * saveCriteriaSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param loc loc (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCriteriaSetFilterUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, LocationCriteriaSetFilter loc, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCriteriaSetFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, loc, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCustomDataListFilterUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filter filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCustomDataListFilterUsingPOSTCall(Integer xVolSite, Integer xVolTenant, CustomDataListFilter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/customDataListFilter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCustomDataListFilterUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, CustomDataListFilter filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling saveCustomDataListFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling saveCustomDataListFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling saveCustomDataListFilterUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = saveCustomDataListFilterUsingPOSTCall(xVolSite, xVolTenant, filter, _callback);
        return localVarCall;

    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filter filter (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter saveCustomDataListFilterUsingPOST(Integer xVolSite, Integer xVolTenant, CustomDataListFilter filter) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = saveCustomDataListFilterUsingPOSTWithHttpInfo(xVolSite, xVolTenant, filter);
        return localVarResp.getData();
    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filter filter (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> saveCustomDataListFilterUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, CustomDataListFilter filter) throws ApiException {
        okhttp3.Call localVarCall = saveCustomDataListFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, filter, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * saveCustomDataListFilter (asynchronously)
     * saveCustomDataListFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param filter filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCustomDataListFilterUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, CustomDataListFilter filter, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCustomDataListFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, filter, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCustomDataValueFilterUsingPOST
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataValueFilter customDataValueFilter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCustomDataValueFilterUsingPOSTCall(Integer xVolSite, Integer xVolTenant, CustomDataValueFilter customDataValueFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDataValueFilter;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/customDataValueFilter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCustomDataValueFilterUsingPOSTValidateBeforeCall(Integer xVolSite, Integer xVolTenant, CustomDataValueFilter customDataValueFilter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling saveCustomDataValueFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling saveCustomDataValueFilterUsingPOST(Async)");
        }
        
        // verify the required parameter 'customDataValueFilter' is set
        if (customDataValueFilter == null) {
            throw new ApiException("Missing the required parameter 'customDataValueFilter' when calling saveCustomDataValueFilterUsingPOST(Async)");
        }
        

        okhttp3.Call localVarCall = saveCustomDataValueFilterUsingPOSTCall(xVolSite, xVolTenant, customDataValueFilter, _callback);
        return localVarCall;

    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataValueFilter customDataValueFilter (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter saveCustomDataValueFilterUsingPOST(Integer xVolSite, Integer xVolTenant, CustomDataValueFilter customDataValueFilter) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = saveCustomDataValueFilterUsingPOSTWithHttpInfo(xVolSite, xVolTenant, customDataValueFilter);
        return localVarResp.getData();
    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataValueFilter customDataValueFilter (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> saveCustomDataValueFilterUsingPOSTWithHttpInfo(Integer xVolSite, Integer xVolTenant, CustomDataValueFilter customDataValueFilter) throws ApiException {
        okhttp3.Call localVarCall = saveCustomDataValueFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, customDataValueFilter, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * saveCustomDataValueFilter (asynchronously)
     * saveCustomDataValueFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param customDataValueFilter customDataValueFilter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCustomDataValueFilterUsingPOSTAsync(Integer xVolSite, Integer xVolTenant, CustomDataValueFilter customDataValueFilter, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCustomDataValueFilterUsingPOSTValidateBeforeCall(xVolSite, xVolTenant, customDataValueFilter, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testFilterUsingGET
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testFilterUsingGETCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/testcriteria";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testFilterUsingGETValidateBeforeCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling testFilterUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling testFilterUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = testFilterUsingGETCall(xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * testFilter
     * testFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter testFilterUsingGET(Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = testFilterUsingGETWithHttpInfo(xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * testFilter
     * testFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> testFilterUsingGETWithHttpInfo(Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = testFilterUsingGETValidateBeforeCall(xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testFilter (asynchronously)
     * testFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testFilterUsingGETAsync(Integer xVolSite, Integer xVolTenant, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = testFilterUsingGETValidateBeforeCall(xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testSetFilterUsingGET
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testSetFilterUsingGETCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/orderrouting/api/v1/filter/testset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", localVarApiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", localVarApiClient.parameterToString(xVolTenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testSetFilterUsingGETValidateBeforeCall(Integer xVolSite, Integer xVolTenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xVolSite' is set
        if (xVolSite == null) {
            throw new ApiException("Missing the required parameter 'xVolSite' when calling testSetFilterUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling testSetFilterUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = testSetFilterUsingGETCall(xVolSite, xVolTenant, _callback);
        return localVarCall;

    }

    /**
     * testSetFilter
     * testSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return AbstractFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AbstractFilter testSetFilterUsingGET(Integer xVolSite, Integer xVolTenant) throws ApiException {
        ApiResponse<AbstractFilter> localVarResp = testSetFilterUsingGETWithHttpInfo(xVolSite, xVolTenant);
        return localVarResp.getData();
    }

    /**
     * testSetFilter
     * testSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @return ApiResponse&lt;AbstractFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AbstractFilter> testSetFilterUsingGETWithHttpInfo(Integer xVolSite, Integer xVolTenant) throws ApiException {
        okhttp3.Call localVarCall = testSetFilterUsingGETValidateBeforeCall(xVolSite, xVolTenant, null);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testSetFilter (asynchronously)
     * testSetFilter
     * @param xVolSite  (required)
     * @param xVolTenant  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testSetFilterUsingGETAsync(Integer xVolSite, Integer xVolTenant, final ApiCallback<AbstractFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = testSetFilterUsingGETValidateBeforeCall(xVolSite, xVolTenant, _callback);
        Type localVarReturnType = new TypeToken<AbstractFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public OrderRoutingFilterApi build() {
            return new OrderRoutingFilterApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
