/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.CategoryLocalizedImage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Container for language-specific content to display on the storefront. You&#39;ll have a container for each supported language (LocaleCode). This enables you to display a category in multiple languages yet manage it as a single category internally.
 */
@ApiModel(description = "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a category in multiple languages yet manage it as a single category internally.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CategoryLocalizedContent implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CATEGORY_IMAGES = "categoryImages";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IMAGES)
  private List<CategoryLocalizedImage> categoryImages = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PAGE_TITLE = "pageTitle";
  @SerializedName(SERIALIZED_NAME_PAGE_TITLE)
  private String pageTitle;

  public static final String SERIALIZED_NAME_LOCALE_CODE = "localeCode";
  @SerializedName(SERIALIZED_NAME_LOCALE_CODE)
  private String localeCode;

  public static final String SERIALIZED_NAME_META_TAG_TITLE = "metaTagTitle";
  @SerializedName(SERIALIZED_NAME_META_TAG_TITLE)
  private String metaTagTitle;

  public static final String SERIALIZED_NAME_META_TAG_DESCRIPTION = "metaTagDescription";
  @SerializedName(SERIALIZED_NAME_META_TAG_DESCRIPTION)
  private String metaTagDescription;

  public static final String SERIALIZED_NAME_META_TAG_KEYWORDS = "metaTagKeywords";
  @SerializedName(SERIALIZED_NAME_META_TAG_KEYWORDS)
  private String metaTagKeywords;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public CategoryLocalizedContent() {
  }

  public CategoryLocalizedContent categoryImages(List<CategoryLocalizedImage> categoryImages) {
    
    this.categoryImages = categoryImages;
    return this;
  }

  public CategoryLocalizedContent addCategoryImagesItem(CategoryLocalizedImage categoryImagesItem) {
    if (this.categoryImages == null) {
      this.categoryImages = new ArrayList<>();
    }
    this.categoryImages.add(categoryImagesItem);
    return this;
  }

   /**
   * List of images associated with the category.
   * @return categoryImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of images associated with the category.")

  public List<CategoryLocalizedImage> getCategoryImages() {
    return categoryImages;
  }


  public void setCategoryImages(List<CategoryLocalizedImage> categoryImages) {
    this.categoryImages = categoryImages;
  }


  public CategoryLocalizedContent name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the category.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the category.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CategoryLocalizedContent description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the category to display on the storefront.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the category to display on the storefront.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CategoryLocalizedContent pageTitle(String pageTitle) {
    
    this.pageTitle = pageTitle;
    return this;
  }

   /**
   * Title that appears at the top of new pages.
   * @return pageTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title that appears at the top of new pages.")

  public String getPageTitle() {
    return pageTitle;
  }


  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }


  public CategoryLocalizedContent localeCode(String localeCode) {
    
    this.localeCode = localeCode;
    return this;
  }

   /**
   * Lanugage used for category content. Currently, only en_US is supported.
   * @return localeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lanugage used for category content. Currently, only en_US is supported.")

  public String getLocaleCode() {
    return localeCode;
  }


  public void setLocaleCode(String localeCode) {
    this.localeCode = localeCode;
  }


  public CategoryLocalizedContent metaTagTitle(String metaTagTitle) {
    
    this.metaTagTitle = metaTagTitle;
    return this;
  }

   /**
   * Metadata title. Metadata can be used to manage information internally. Sometimes used for SEO.
   * @return metaTagTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata title. Metadata can be used to manage information internally. Sometimes used for SEO.")

  public String getMetaTagTitle() {
    return metaTagTitle;
  }


  public void setMetaTagTitle(String metaTagTitle) {
    this.metaTagTitle = metaTagTitle;
  }


  public CategoryLocalizedContent metaTagDescription(String metaTagDescription) {
    
    this.metaTagDescription = metaTagDescription;
    return this;
  }

   /**
   * Metadata description. Metadata can be used to manage information internally. Sometimes used for SEO.
   * @return metaTagDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata description. Metadata can be used to manage information internally. Sometimes used for SEO.")

  public String getMetaTagDescription() {
    return metaTagDescription;
  }


  public void setMetaTagDescription(String metaTagDescription) {
    this.metaTagDescription = metaTagDescription;
  }


  public CategoryLocalizedContent metaTagKeywords(String metaTagKeywords) {
    
    this.metaTagKeywords = metaTagKeywords;
    return this;
  }

   /**
   * Metadata keywords. Metadata can be used to manage information internally. Sometimes used for SEO.
   * @return metaTagKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata keywords. Metadata can be used to manage information internally. Sometimes used for SEO.")

  public String getMetaTagKeywords() {
    return metaTagKeywords;
  }


  public void setMetaTagKeywords(String metaTagKeywords) {
    this.metaTagKeywords = metaTagKeywords;
  }


  public CategoryLocalizedContent slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * Human-readable identifier that you can give to the category to create friendly URLs. For example,   instead of \&quot;http: //example.com/products?category&#x3D;2&amp;id&#x3D;25,\&quot; the friendly URL can be \&quot;http: //example.com/products/category/2/25.\&quot;
   * @return slug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human-readable identifier that you can give to the category to create friendly URLs. For example,   instead of \"http: //example.com/products?category=2&id=25,\" the friendly URL can be \"http: //example.com/products/category/2/25.\"")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryLocalizedContent categoryLocalizedContent = (CategoryLocalizedContent) o;
    return Objects.equals(this.categoryImages, categoryLocalizedContent.categoryImages) &&
        Objects.equals(this.name, categoryLocalizedContent.name) &&
        Objects.equals(this.description, categoryLocalizedContent.description) &&
        Objects.equals(this.pageTitle, categoryLocalizedContent.pageTitle) &&
        Objects.equals(this.localeCode, categoryLocalizedContent.localeCode) &&
        Objects.equals(this.metaTagTitle, categoryLocalizedContent.metaTagTitle) &&
        Objects.equals(this.metaTagDescription, categoryLocalizedContent.metaTagDescription) &&
        Objects.equals(this.metaTagKeywords, categoryLocalizedContent.metaTagKeywords) &&
        Objects.equals(this.slug, categoryLocalizedContent.slug);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryImages, name, description, pageTitle, localeCode, metaTagTitle, metaTagDescription, metaTagKeywords, slug);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryLocalizedContent {\n");
    sb.append("    categoryImages: ").append(toIndentedString(categoryImages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    localeCode: ").append(toIndentedString(localeCode)).append("\n");
    sb.append("    metaTagTitle: ").append(toIndentedString(metaTagTitle)).append("\n");
    sb.append("    metaTagDescription: ").append(toIndentedString(metaTagDescription)).append("\n");
    sb.append("    metaTagKeywords: ").append(toIndentedString(metaTagKeywords)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryImages");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("pageTitle");
    openapiFields.add("localeCode");
    openapiFields.add("metaTagTitle");
    openapiFields.add("metaTagDescription");
    openapiFields.add("metaTagKeywords");
    openapiFields.add("slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CategoryLocalizedContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CategoryLocalizedContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryLocalizedContent is not found in the empty JSON string", CategoryLocalizedContent.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CategoryLocalizedContent.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryLocalizedContent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("categoryImages") != null && !jsonObj.get("categoryImages").isJsonNull()) {
        JsonArray jsonArraycategoryImages = jsonObj.getAsJsonArray("categoryImages");
        if (jsonArraycategoryImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryImages` to be an array in the JSON string but got `%s`", jsonObj.get("categoryImages").toString()));
          }

          // validate the optional field `categoryImages` (array)
          for (int i = 0; i < jsonArraycategoryImages.size(); i++) {
            CategoryLocalizedImage.validateJsonObject(jsonArraycategoryImages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("pageTitle") != null && !jsonObj.get("pageTitle").isJsonNull()) && !jsonObj.get("pageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageTitle").toString()));
      }
      if ((jsonObj.get("localeCode") != null && !jsonObj.get("localeCode").isJsonNull()) && !jsonObj.get("localeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localeCode").toString()));
      }
      if ((jsonObj.get("metaTagTitle") != null && !jsonObj.get("metaTagTitle").isJsonNull()) && !jsonObj.get("metaTagTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagTitle").toString()));
      }
      if ((jsonObj.get("metaTagDescription") != null && !jsonObj.get("metaTagDescription").isJsonNull()) && !jsonObj.get("metaTagDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagDescription").toString()));
      }
      if ((jsonObj.get("metaTagKeywords") != null && !jsonObj.get("metaTagKeywords").isJsonNull()) && !jsonObj.get("metaTagKeywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagKeywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagKeywords").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryLocalizedContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryLocalizedContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryLocalizedContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryLocalizedContent.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryLocalizedContent>() {
           @Override
           public void write(JsonWriter out, CategoryLocalizedContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryLocalizedContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CategoryLocalizedContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CategoryLocalizedContent
  * @throws IOException if the JSON string is invalid with respect to CategoryLocalizedContent
  */
  public static CategoryLocalizedContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryLocalizedContent.class);
  }

 /**
  * Convert an instance of CategoryLocalizedContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

