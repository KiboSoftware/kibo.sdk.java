/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategory;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryAttribute;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryCollection;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryPagedCollection;
import com.kibocommerce.sdk.catalogadministration.models.CategoryAttributeCollection;
import com.kibocommerce.sdk.catalogadministration.models.DynamicExpression;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CategoriesApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CategoriesApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CategoriesApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCategory
     * @param incrementSequence Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 &#x3D; 6) (optional, default to false)
     * @param useProvidedId If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId (optional, default to false)
     * @param catalogAdminsCategory Properties of the new category. Required properties ParentCategoryID and Content.Name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryCall(Boolean incrementSequence, Boolean useProvidedId, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCategory;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (incrementSequence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incrementSequence", incrementSequence));
        }

        if (useProvidedId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useProvidedId", useProvidedId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(Boolean incrementSequence, Boolean useProvidedId, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCategoryCall(incrementSequence, useProvidedId, catalogAdminsCategory, _callback);
        return localVarCall;

    }

    /**
     * Add category
     * dds a new category to the catalog&#39;s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * @param incrementSequence Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 &#x3D; 6) (optional, default to false)
     * @param useProvidedId If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId (optional, default to false)
     * @param catalogAdminsCategory Properties of the new category. Required properties ParentCategoryID and Content.Name. (optional)
     * @return CatalogAdminsCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategory addCategory(Boolean incrementSequence, Boolean useProvidedId, CatalogAdminsCategory catalogAdminsCategory) throws ApiException {
        ApiResponse<CatalogAdminsCategory> localVarResp = addCategoryWithHttpInfo(incrementSequence, useProvidedId, catalogAdminsCategory);
        return localVarResp.getData();
    }

    /**
     * Add category
     * dds a new category to the catalog&#39;s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * @param incrementSequence Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 &#x3D; 6) (optional, default to false)
     * @param useProvidedId If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId (optional, default to false)
     * @param catalogAdminsCategory Properties of the new category. Required properties ParentCategoryID and Content.Name. (optional)
     * @return ApiResponse&lt;CatalogAdminsCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategory> addCategoryWithHttpInfo(Boolean incrementSequence, Boolean useProvidedId, CatalogAdminsCategory catalogAdminsCategory) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(incrementSequence, useProvidedId, catalogAdminsCategory, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add category (asynchronously)
     * dds a new category to the catalog&#39;s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * @param incrementSequence Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 &#x3D; 6) (optional, default to false)
     * @param useProvidedId If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId (optional, default to false)
     * @param catalogAdminsCategory Properties of the new category. Required properties ParentCategoryID and Content.Name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryAsync(Boolean incrementSequence, Boolean useProvidedId, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback<CatalogAdminsCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(incrementSequence, useProvidedId, catalogAdminsCategory, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCategoryAttribute
     * @param categoryId  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryAttributeCall(Integer categoryId, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCategoryAttribute;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/attributes"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryAttributeValidateBeforeCall(Integer categoryId, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling addCategoryAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = addCategoryAttributeCall(categoryId, catalogAdminsCategoryAttribute, _callback);
        return localVarCall;

    }

    /**
     * Add category attribute
     * Adds a new category attribute to the category.
     * @param categoryId  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @return CatalogAdminsCategoryAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategoryAttribute addCategoryAttribute(Integer categoryId, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute) throws ApiException {
        ApiResponse<CatalogAdminsCategoryAttribute> localVarResp = addCategoryAttributeWithHttpInfo(categoryId, catalogAdminsCategoryAttribute);
        return localVarResp.getData();
    }

    /**
     * Add category attribute
     * Adds a new category attribute to the category.
     * @param categoryId  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @return ApiResponse&lt;CatalogAdminsCategoryAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategoryAttribute> addCategoryAttributeWithHttpInfo(Integer categoryId, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute) throws ApiException {
        okhttp3.Call localVarCall = addCategoryAttributeValidateBeforeCall(categoryId, catalogAdminsCategoryAttribute, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add category attribute (asynchronously)
     * Adds a new category attribute to the category.
     * @param categoryId  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryAttributeAsync(Integer categoryId, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback<CatalogAdminsCategoryAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryAttributeValidateBeforeCall(categoryId, catalogAdminsCategoryAttribute, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProductsToCategory
     * @param categoryId Unique identifier of the category that you want produts added to. (required)
     * @param requestBody A list of products to be added to the category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductsToCategoryCall(Integer categoryId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/add-products"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductsToCategoryValidateBeforeCall(Integer categoryId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling addProductsToCategory(Async)");
        }
        

        okhttp3.Call localVarCall = addProductsToCategoryCall(categoryId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Add products to category
     * Adds the products in the provided product code list to the specified category.
     * @param categoryId Unique identifier of the category that you want produts added to. (required)
     * @param requestBody A list of products to be added to the category. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addProductsToCategory(Integer categoryId, List<String> requestBody) throws ApiException {
        addProductsToCategoryWithHttpInfo(categoryId, requestBody);
    }

    /**
     * Add products to category
     * Adds the products in the provided product code list to the specified category.
     * @param categoryId Unique identifier of the category that you want produts added to. (required)
     * @param requestBody A list of products to be added to the category. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addProductsToCategoryWithHttpInfo(Integer categoryId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = addProductsToCategoryValidateBeforeCall(categoryId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add products to category (asynchronously)
     * Adds the products in the provided product code list to the specified category.
     * @param categoryId Unique identifier of the category that you want produts added to. (required)
     * @param requestBody A list of products to be added to the category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductsToCategoryAsync(Integer categoryId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductsToCategoryValidateBeforeCall(categoryId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategoryAttribute
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAttributeCall(Integer categoryId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryAttributeValidateBeforeCall(Integer categoryId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategoryAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteCategoryAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCategoryAttributeCall(categoryId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete category attribute
     * Deletes the category attribute specified by its attributeFQN.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategoryAttribute(Integer categoryId, String attributeFQN) throws ApiException {
        deleteCategoryAttributeWithHttpInfo(categoryId, attributeFQN);
    }

    /**
     * Delete category attribute
     * Deletes the category attribute specified by its attributeFQN.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryAttributeWithHttpInfo(Integer categoryId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete category attribute (asynchronously)
     * Deletes the category attribute specified by its attributeFQN.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAttributeAsync(Integer categoryId, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategoryById
     * @param categoryId Unique identifier of the category that you want to delete. (required)
     * @param cascadeDelete If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false. (optional, default to false)
     * @param forceDelete If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false. (optional, default to false)
     * @param reassignToParent If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryByIdCall(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cascadeDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cascadeDelete", cascadeDelete));
        }

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDelete", forceDelete));
        }

        if (reassignToParent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reassignToParent", reassignToParent));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryByIdValidateBeforeCall(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategoryById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCategoryByIdCall(categoryId, cascadeDelete, forceDelete, reassignToParent, _callback);
        return localVarCall;

    }

    /**
     * Delete category
     * Deletes the category specified by its category ID.
     * @param categoryId Unique identifier of the category that you want to delete. (required)
     * @param cascadeDelete If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false. (optional, default to false)
     * @param forceDelete If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false. (optional, default to false)
     * @param reassignToParent If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategoryById(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent) throws ApiException {
        deleteCategoryByIdWithHttpInfo(categoryId, cascadeDelete, forceDelete, reassignToParent);
    }

    /**
     * Delete category
     * Deletes the category specified by its category ID.
     * @param categoryId Unique identifier of the category that you want to delete. (required)
     * @param cascadeDelete If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false. (optional, default to false)
     * @param forceDelete If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false. (optional, default to false)
     * @param reassignToParent If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryByIdWithHttpInfo(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryByIdValidateBeforeCall(categoryId, cascadeDelete, forceDelete, reassignToParent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete category (asynchronously)
     * Deletes the category specified by its category ID.
     * @param categoryId Unique identifier of the category that you want to delete. (required)
     * @param cascadeDelete If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false. (optional, default to false)
     * @param forceDelete If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false. (optional, default to false)
     * @param reassignToParent If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryByIdAsync(Integer categoryId, Boolean cascadeDelete, Boolean forceDelete, Boolean reassignToParent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryByIdValidateBeforeCall(categoryId, cascadeDelete, forceDelete, reassignToParent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategories
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param includeAttributes  (optional, default to false)
     * @param responseGroups  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesCall(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeAttributes, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeAttributes, String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCategoriesCall(startIndex, pageSize, sortBy, filter, includeAttributes, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get categories
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param includeAttributes  (optional, default to false)
     * @param responseGroups  (optional)
     * @return CatalogAdminsCategoryPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategoryPagedCollection getCategories(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeAttributes, String responseGroups) throws ApiException {
        ApiResponse<CatalogAdminsCategoryPagedCollection> localVarResp = getCategoriesWithHttpInfo(startIndex, pageSize, sortBy, filter, includeAttributes, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get categories
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param includeAttributes  (optional, default to false)
     * @param responseGroups  (optional)
     * @return ApiResponse&lt;CatalogAdminsCategoryPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategoryPagedCollection> getCategoriesWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeAttributes, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(startIndex, pageSize, sortBy, filter, includeAttributes, responseGroups, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get categories (asynchronously)
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param includeAttributes  (optional, default to false)
     * @param responseGroups  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeAttributes, String responseGroups, final ApiCallback<CatalogAdminsCategoryPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(startIndex, pageSize, sortBy, filter, includeAttributes, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategory
     * @param categoryId Unique identifier of the category. (required)
     * @param includeAttributes  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryCall(Integer categoryId, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAttributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryValidateBeforeCall(Integer categoryId, Boolean includeAttributes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategory(Async)");
        }
        

        okhttp3.Call localVarCall = getCategoryCall(categoryId, includeAttributes, _callback);
        return localVarCall;

    }

    /**
     * Get category
     * Retrieves the details of a single category.
     * @param categoryId Unique identifier of the category. (required)
     * @param includeAttributes  (optional, default to false)
     * @return CatalogAdminsCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategory getCategory(Integer categoryId, Boolean includeAttributes) throws ApiException {
        ApiResponse<CatalogAdminsCategory> localVarResp = getCategoryWithHttpInfo(categoryId, includeAttributes);
        return localVarResp.getData();
    }

    /**
     * Get category
     * Retrieves the details of a single category.
     * @param categoryId Unique identifier of the category. (required)
     * @param includeAttributes  (optional, default to false)
     * @return ApiResponse&lt;CatalogAdminsCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategory> getCategoryWithHttpInfo(Integer categoryId, Boolean includeAttributes) throws ApiException {
        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, includeAttributes, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get category (asynchronously)
     * Retrieves the details of a single category.
     * @param categoryId Unique identifier of the category. (required)
     * @param includeAttributes  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAsync(Integer categoryId, Boolean includeAttributes, final ApiCallback<CatalogAdminsCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, includeAttributes, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryAttribute
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAttributeCall(Integer categoryId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryAttributeValidateBeforeCall(Integer categoryId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getCategoryAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = getCategoryAttributeCall(categoryId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get category attribute
     * Retrieves the details of a single category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @return CatalogAdminsCategoryAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategoryAttribute getCategoryAttribute(Integer categoryId, String attributeFQN) throws ApiException {
        ApiResponse<CatalogAdminsCategoryAttribute> localVarResp = getCategoryAttributeWithHttpInfo(categoryId, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get category attribute
     * Retrieves the details of a single category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;CatalogAdminsCategoryAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategoryAttribute> getCategoryAttributeWithHttpInfo(Integer categoryId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get category attribute (asynchronously)
     * Retrieves the details of a single category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAttributeAsync(Integer categoryId, String attributeFQN, final ApiCallback<CatalogAdminsCategoryAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryAttributes
     * @param categoryId  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param filter  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAttributesCall(Integer categoryId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/attributes"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryAttributesValidateBeforeCall(Integer categoryId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = getCategoryAttributesCall(categoryId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get category attributes
     * Retrieves a list of category attributes.
     * @param categoryId  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param filter  (optional, default to )
     * @return CategoryAttributeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CategoryAttributeCollection getCategoryAttributes(Integer categoryId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<CategoryAttributeCollection> localVarResp = getCategoryAttributesWithHttpInfo(categoryId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get category attributes
     * Retrieves a list of category attributes.
     * @param categoryId  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param filter  (optional, default to )
     * @return ApiResponse&lt;CategoryAttributeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryAttributeCollection> getCategoryAttributesWithHttpInfo(Integer categoryId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCategoryAttributesValidateBeforeCall(categoryId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<CategoryAttributeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get category attributes (asynchronously)
     * Retrieves a list of category attributes.
     * @param categoryId  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional, default to )
     * @param filter  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAttributesAsync(Integer categoryId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<CategoryAttributeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryAttributesValidateBeforeCall(categoryId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<CategoryAttributeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChildCategories
     * @param categoryId Unique identifier of the category whose subcategories you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChildCategoriesCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/children"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildCategoriesValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getChildCategories(Async)");
        }
        

        okhttp3.Call localVarCall = getChildCategoriesCall(categoryId, _callback);
        return localVarCall;

    }

    /**
     * Get child categories
     * Retrieves the immediate subcategories of a category.
     * @param categoryId Unique identifier of the category whose subcategories you want to get. (required)
     * @return CatalogAdminsCategoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategoryCollection getChildCategories(Integer categoryId) throws ApiException {
        ApiResponse<CatalogAdminsCategoryCollection> localVarResp = getChildCategoriesWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Get child categories
     * Retrieves the immediate subcategories of a category.
     * @param categoryId Unique identifier of the category whose subcategories you want to get. (required)
     * @return ApiResponse&lt;CatalogAdminsCategoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategoryCollection> getChildCategoriesWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = getChildCategoriesValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get child categories (asynchronously)
     * Retrieves the immediate subcategories of a category.
     * @param categoryId Unique identifier of the category whose subcategories you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChildCategoriesAsync(Integer categoryId, final ApiCallback<CatalogAdminsCategoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildCategoriesValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeProductsFromCategory
     * @param categoryId Unique identifier of the category that you want products removed from. (required)
     * @param requestBody A list of products to be removed from the category. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProductsFromCategoryCall(Integer categoryId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/remove-products"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProductsFromCategoryValidateBeforeCall(Integer categoryId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling removeProductsFromCategory(Async)");
        }
        

        okhttp3.Call localVarCall = removeProductsFromCategoryCall(categoryId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Remove products from category
     * Removes the products in the provided product code list from the specified category.
     * @param categoryId Unique identifier of the category that you want products removed from. (required)
     * @param requestBody A list of products to be removed from the category. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void removeProductsFromCategory(Integer categoryId, List<String> requestBody) throws ApiException {
        removeProductsFromCategoryWithHttpInfo(categoryId, requestBody);
    }

    /**
     * Remove products from category
     * Removes the products in the provided product code list from the specified category.
     * @param categoryId Unique identifier of the category that you want products removed from. (required)
     * @param requestBody A list of products to be removed from the category. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeProductsFromCategoryWithHttpInfo(Integer categoryId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeProductsFromCategoryValidateBeforeCall(categoryId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove products from category (asynchronously)
     * Removes the products in the provided product code list from the specified category.
     * @param categoryId Unique identifier of the category that you want products removed from. (required)
     * @param requestBody A list of products to be removed from the category. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeProductsFromCategoryAsync(Integer categoryId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProductsFromCategoryValidateBeforeCall(categoryId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategory
     * @param categoryId Unique identifier of the category that you want to modify. Required. (required)
     * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Optional. (optional, default to false)
     * @param catalogAdminsCategory Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryCall(Integer categoryId, Boolean cascadeVisibility, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCategory;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cascadeVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cascadeVisibility", cascadeVisibility));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(Integer categoryId, Boolean cascadeVisibility, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategory(Async)");
        }
        

        okhttp3.Call localVarCall = updateCategoryCall(categoryId, cascadeVisibility, catalogAdminsCategory, _callback);
        return localVarCall;

    }

    /**
     * Update category
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * @param categoryId Unique identifier of the category that you want to modify. Required. (required)
     * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Optional. (optional, default to false)
     * @param catalogAdminsCategory Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name. (optional)
     * @return CatalogAdminsCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategory updateCategory(Integer categoryId, Boolean cascadeVisibility, CatalogAdminsCategory catalogAdminsCategory) throws ApiException {
        ApiResponse<CatalogAdminsCategory> localVarResp = updateCategoryWithHttpInfo(categoryId, cascadeVisibility, catalogAdminsCategory);
        return localVarResp.getData();
    }

    /**
     * Update category
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * @param categoryId Unique identifier of the category that you want to modify. Required. (required)
     * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Optional. (optional, default to false)
     * @param catalogAdminsCategory Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name. (optional)
     * @return ApiResponse&lt;CatalogAdminsCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategory> updateCategoryWithHttpInfo(Integer categoryId, Boolean cascadeVisibility, CatalogAdminsCategory catalogAdminsCategory) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, cascadeVisibility, catalogAdminsCategory, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update category (asynchronously)
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * @param categoryId Unique identifier of the category that you want to modify. Required. (required)
     * @param cascadeVisibility If true, when changing the display option for the category, change it for all subcategories also. Optional. (optional, default to false)
     * @param catalogAdminsCategory Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAsync(Integer categoryId, Boolean cascadeVisibility, CatalogAdminsCategory catalogAdminsCategory, final ApiCallback<CatalogAdminsCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryId, cascadeVisibility, catalogAdminsCategory, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategoryAttribute
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAttributeCall(Integer categoryId, String attributeFQN, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsCategoryAttribute;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryAttributeValidateBeforeCall(Integer categoryId, String attributeFQN, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategoryAttribute(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateCategoryAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = updateCategoryAttributeCall(categoryId, attributeFQN, catalogAdminsCategoryAttribute, _callback);
        return localVarCall;

    }

    /**
     * Update category attribute
     * Modifies the category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @return CatalogAdminsCategoryAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsCategoryAttribute updateCategoryAttribute(Integer categoryId, String attributeFQN, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute) throws ApiException {
        ApiResponse<CatalogAdminsCategoryAttribute> localVarResp = updateCategoryAttributeWithHttpInfo(categoryId, attributeFQN, catalogAdminsCategoryAttribute);
        return localVarResp.getData();
    }

    /**
     * Update category attribute
     * Modifies the category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @return ApiResponse&lt;CatalogAdminsCategoryAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsCategoryAttribute> updateCategoryAttributeWithHttpInfo(Integer categoryId, String attributeFQN, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, catalogAdminsCategoryAttribute, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update category attribute (asynchronously)
     * Modifies the category attribute.
     * @param categoryId  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsCategoryAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAttributeAsync(Integer categoryId, String attributeFQN, CatalogAdminsCategoryAttribute catalogAdminsCategoryAttribute, final ApiCallback<CatalogAdminsCategoryAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryAttributeValidateBeforeCall(categoryId, attributeFQN, catalogAdminsCategoryAttribute, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsCategoryAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateDynamicExpression
     * @param dynamicExpression  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateDynamicExpressionCall(DynamicExpression dynamicExpression, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicExpression;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/ValidateDynamicExpression";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateDynamicExpressionValidateBeforeCall(DynamicExpression dynamicExpression, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validateDynamicExpressionCall(dynamicExpression, _callback);
        return localVarCall;

    }

    /**
     * Validate dynamic category expression
     * 
     * @param dynamicExpression  (optional)
     * @return DynamicExpression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DynamicExpression validateDynamicExpression(DynamicExpression dynamicExpression) throws ApiException {
        ApiResponse<DynamicExpression> localVarResp = validateDynamicExpressionWithHttpInfo(dynamicExpression);
        return localVarResp.getData();
    }

    /**
     * Validate dynamic category expression
     * 
     * @param dynamicExpression  (optional)
     * @return ApiResponse&lt;DynamicExpression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicExpression> validateDynamicExpressionWithHttpInfo(DynamicExpression dynamicExpression) throws ApiException {
        okhttp3.Call localVarCall = validateDynamicExpressionValidateBeforeCall(dynamicExpression, null);
        Type localVarReturnType = new TypeToken<DynamicExpression>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate dynamic category expression (asynchronously)
     * 
     * @param dynamicExpression  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateDynamicExpressionAsync(DynamicExpression dynamicExpression, final ApiCallback<DynamicExpression> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateDynamicExpressionValidateBeforeCall(dynamicExpression, _callback);
        Type localVarReturnType = new TypeToken<DynamicExpression>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateRealTimeDynamicExpression
     * @param dynamicExpression  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateRealTimeDynamicExpressionCall(DynamicExpression dynamicExpression, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dynamicExpression;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateRealTimeDynamicExpressionValidateBeforeCall(DynamicExpression dynamicExpression, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validateRealTimeDynamicExpressionCall(dynamicExpression, _callback);
        return localVarCall;

    }

    /**
     * Validate realtime dynamic category expression
     * 
     * @param dynamicExpression  (optional)
     * @return DynamicExpression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DynamicExpression validateRealTimeDynamicExpression(DynamicExpression dynamicExpression) throws ApiException {
        ApiResponse<DynamicExpression> localVarResp = validateRealTimeDynamicExpressionWithHttpInfo(dynamicExpression);
        return localVarResp.getData();
    }

    /**
     * Validate realtime dynamic category expression
     * 
     * @param dynamicExpression  (optional)
     * @return ApiResponse&lt;DynamicExpression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DynamicExpression> validateRealTimeDynamicExpressionWithHttpInfo(DynamicExpression dynamicExpression) throws ApiException {
        okhttp3.Call localVarCall = validateRealTimeDynamicExpressionValidateBeforeCall(dynamicExpression, null);
        Type localVarReturnType = new TypeToken<DynamicExpression>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate realtime dynamic category expression (asynchronously)
     * 
     * @param dynamicExpression  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateRealTimeDynamicExpressionAsync(DynamicExpression dynamicExpression, final ApiCallback<DynamicExpression> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateRealTimeDynamicExpressionValidateBeforeCall(dynamicExpression, _callback);
        Type localVarReturnType = new TypeToken<DynamicExpression>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CategoriesApi build() {
            return new CategoriesApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
