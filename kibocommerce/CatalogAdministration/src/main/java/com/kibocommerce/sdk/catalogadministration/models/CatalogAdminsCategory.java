/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsCategoryAttribute;
import com.kibocommerce.sdk.catalogadministration.models.CategoryLocalizedContent;
import com.kibocommerce.sdk.catalogadministration.models.DynamicExpression;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Category
 */
@ApiModel(description = "Category")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogAdminsCategory implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CATEGORY_TYPE = "categoryType";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TYPE)
  private String categoryType;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private Integer catalogId;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_ID = "parentCategoryId";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_ID)
  private Integer parentCategoryId;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_CODE = "parentCategoryCode";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_CODE)
  private String parentCategoryCode;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_NAME = "parentCategoryName";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_NAME)
  private String parentCategoryName;

  public static final String SERIALIZED_NAME_PARENT_IS_ACTIVE = "parentIsActive";
  @SerializedName(SERIALIZED_NAME_PARENT_IS_ACTIVE)
  private Boolean parentIsActive;

  public static final String SERIALIZED_NAME_CATEGORY_CODE = "categoryCode";
  @SerializedName(SERIALIZED_NAME_CATEGORY_CODE)
  private String categoryCode;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_DISPLAYED = "isDisplayed";
  @SerializedName(SERIALIZED_NAME_IS_DISPLAYED)
  private Boolean isDisplayed;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private CategoryLocalizedContent content;

  public static final String SERIALIZED_NAME_DYNAMIC_EXPRESSION = "dynamicExpression";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_EXPRESSION)
  private DynamicExpression dynamicExpression;

  public static final String SERIALIZED_NAME_PRODUCT_COUNT = "productCount";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COUNT)
  private Integer productCount;

  public static final String SERIALIZED_NAME_CHILD_COUNT = "childCount";
  @SerializedName(SERIALIZED_NAME_CHILD_COUNT)
  private Integer childCount;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_SHOULD_SLICE = "shouldSlice";
  @SerializedName(SERIALIZED_NAME_SHOULD_SLICE)
  private Boolean shouldSlice;

  public static final String SERIALIZED_NAME_ACTIVE_DATE_START = "activeDateStart";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DATE_START)
  private OffsetDateTime activeDateStart;

  public static final String SERIALIZED_NAME_ACTIVE_DATE_END = "activeDateEnd";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DATE_END)
  private OffsetDateTime activeDateEnd;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CatalogAdminsCategoryAttribute> attributes = null;

  public CatalogAdminsCategory() {
  }

  public CatalogAdminsCategory id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Internal unique identifier of the category. System-supplied and read-only.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal unique identifier of the category. System-supplied and read-only.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogAdminsCategory categoryType(String categoryType) {
    
    this.categoryType = categoryType;
    return this;
  }

   /**
   * The Type of Category Static, Dyanmic, DynamicPreComputed
   * @return categoryType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Type of Category Static, Dyanmic, DynamicPreComputed")

  public String getCategoryType() {
    return categoryType;
  }


  public void setCategoryType(String categoryType) {
    this.categoryType = categoryType;
  }


  public CatalogAdminsCategory catalogId(Integer catalogId) {
    
    this.catalogId = catalogId;
    return this;
  }

   /**
   * The CatalogId that the category belongs to.
   * @return catalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The CatalogId that the category belongs to.")

  public Integer getCatalogId() {
    return catalogId;
  }


  public void setCatalogId(Integer catalogId) {
    this.catalogId = catalogId;
  }


  public CatalogAdminsCategory parentCategoryId(Integer parentCategoryId) {
    
    this.parentCategoryId = parentCategoryId;
    return this;
  }

   /**
   * Unique identifier of the category to which this category belongs. If nil, this is a top-level category. System-supplied and read-only.
   * @return parentCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the category to which this category belongs. If nil, this is a top-level category. System-supplied and read-only.")

  public Integer getParentCategoryId() {
    return parentCategoryId;
  }


  public void setParentCategoryId(Integer parentCategoryId) {
    this.parentCategoryId = parentCategoryId;
  }


  public CatalogAdminsCategory parentCategoryCode(String parentCategoryCode) {
    
    this.parentCategoryCode = parentCategoryCode;
    return this;
  }

   /**
   * Get parentCategoryCode
   * @return parentCategoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentCategoryCode() {
    return parentCategoryCode;
  }


  public void setParentCategoryCode(String parentCategoryCode) {
    this.parentCategoryCode = parentCategoryCode;
  }


  public CatalogAdminsCategory parentCategoryName(String parentCategoryName) {
    
    this.parentCategoryName = parentCategoryName;
    return this;
  }

   /**
   * Get parentCategoryName
   * @return parentCategoryName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentCategoryName() {
    return parentCategoryName;
  }


  public void setParentCategoryName(String parentCategoryName) {
    this.parentCategoryName = parentCategoryName;
  }


  public CatalogAdminsCategory parentIsActive(Boolean parentIsActive) {
    
    this.parentIsActive = parentIsActive;
    return this;
  }

   /**
   * Get parentIsActive
   * @return parentIsActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getParentIsActive() {
    return parentIsActive;
  }


  public void setParentIsActive(Boolean parentIsActive) {
    this.parentIsActive = parentIsActive;
  }


  public CatalogAdminsCategory categoryCode(String categoryCode) {
    
    this.categoryCode = categoryCode;
    return this;
  }

   /**
   * External unique identifier of the category.
   * @return categoryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External unique identifier of the category.")

  public String getCategoryCode() {
    return categoryCode;
  }


  public void setCategoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
  }


  public CatalogAdminsCategory isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * If false, the category is considered unavailable in runtime (default is true if not specified on create)
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If false, the category is considered unavailable in runtime (default is true if not specified on create)")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CatalogAdminsCategory isDisplayed(Boolean isDisplayed) {
    
    this.isDisplayed = isDisplayed;
    return this;
  }

   /**
   * If true, the category appears to shoppers on the storefront.
   * @return isDisplayed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the category appears to shoppers on the storefront.")

  public Boolean getIsDisplayed() {
    return isDisplayed;
  }


  public void setIsDisplayed(Boolean isDisplayed) {
    this.isDisplayed = isDisplayed;
  }


  public CatalogAdminsCategory sequence(Integer sequence) {
    
    this.sequence = sequence;
    return this;
  }

   /**
   * Order in which categories appear when they are at the same level (siblings). For example, you could change the sequence of categories so that a specific category always appears first.
   * @return sequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order in which categories appear when they are at the same level (siblings). For example, you could change the sequence of categories so that a specific category always appears first.")

  public Integer getSequence() {
    return sequence;
  }


  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public CatalogAdminsCategory content(CategoryLocalizedContent content) {
    
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CategoryLocalizedContent getContent() {
    return content;
  }


  public void setContent(CategoryLocalizedContent content) {
    this.content = content;
  }


  public CatalogAdminsCategory dynamicExpression(DynamicExpression dynamicExpression) {
    
    this.dynamicExpression = dynamicExpression;
    return this;
  }

   /**
   * Get dynamicExpression
   * @return dynamicExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DynamicExpression getDynamicExpression() {
    return dynamicExpression;
  }


  public void setDynamicExpression(DynamicExpression dynamicExpression) {
    this.dynamicExpression = dynamicExpression;
  }


  public CatalogAdminsCategory productCount(Integer productCount) {
    
    this.productCount = productCount;
    return this;
  }

   /**
   * Number of products contained in this category. This count includes all products contained in any subcategories of this category.
   * @return productCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of products contained in this category. This count includes all products contained in any subcategories of this category.")

  public Integer getProductCount() {
    return productCount;
  }


  public void setProductCount(Integer productCount) {
    this.productCount = productCount;
  }


  public CatalogAdminsCategory childCount(Integer childCount) {
    
    this.childCount = childCount;
    return this;
  }

   /**
   * Number of subcategories that belong to this category. These subcategories are at the same level (siblings).
   * @return childCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of subcategories that belong to this category. These subcategories are at the same level (siblings).")

  public Integer getChildCount() {
    return childCount;
  }


  public void setChildCount(Integer childCount) {
    this.childCount = childCount;
  }


  public CatalogAdminsCategory auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public CatalogAdminsCategory shouldSlice(Boolean shouldSlice) {
    
    this.shouldSlice = shouldSlice;
    return this;
  }

   /**
   * If True, search displays sliced view
   * @return shouldSlice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If True, search displays sliced view")

  public Boolean getShouldSlice() {
    return shouldSlice;
  }


  public void setShouldSlice(Boolean shouldSlice) {
    this.shouldSlice = shouldSlice;
  }


  public CatalogAdminsCategory activeDateStart(OffsetDateTime activeDateStart) {
    
    this.activeDateStart = activeDateStart;
    return this;
  }

   /**
   * Active Start Date
   * @return activeDateStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active Start Date")

  public OffsetDateTime getActiveDateStart() {
    return activeDateStart;
  }


  public void setActiveDateStart(OffsetDateTime activeDateStart) {
    this.activeDateStart = activeDateStart;
  }


  public CatalogAdminsCategory activeDateEnd(OffsetDateTime activeDateEnd) {
    
    this.activeDateEnd = activeDateEnd;
    return this;
  }

   /**
   * Active end Date
   * @return activeDateEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active end Date")

  public OffsetDateTime getActiveDateEnd() {
    return activeDateEnd;
  }


  public void setActiveDateEnd(OffsetDateTime activeDateEnd) {
    this.activeDateEnd = activeDateEnd;
  }


  public CatalogAdminsCategory attributes(List<CatalogAdminsCategoryAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CatalogAdminsCategory addAttributesItem(CatalogAdminsCategoryAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * List of attributes for the category.
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of attributes for the category.")

  public List<CatalogAdminsCategoryAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CatalogAdminsCategoryAttribute> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogAdminsCategory catalogAdminsCategory = (CatalogAdminsCategory) o;
    return Objects.equals(this.id, catalogAdminsCategory.id) &&
        Objects.equals(this.categoryType, catalogAdminsCategory.categoryType) &&
        Objects.equals(this.catalogId, catalogAdminsCategory.catalogId) &&
        Objects.equals(this.parentCategoryId, catalogAdminsCategory.parentCategoryId) &&
        Objects.equals(this.parentCategoryCode, catalogAdminsCategory.parentCategoryCode) &&
        Objects.equals(this.parentCategoryName, catalogAdminsCategory.parentCategoryName) &&
        Objects.equals(this.parentIsActive, catalogAdminsCategory.parentIsActive) &&
        Objects.equals(this.categoryCode, catalogAdminsCategory.categoryCode) &&
        Objects.equals(this.isActive, catalogAdminsCategory.isActive) &&
        Objects.equals(this.isDisplayed, catalogAdminsCategory.isDisplayed) &&
        Objects.equals(this.sequence, catalogAdminsCategory.sequence) &&
        Objects.equals(this.content, catalogAdminsCategory.content) &&
        Objects.equals(this.dynamicExpression, catalogAdminsCategory.dynamicExpression) &&
        Objects.equals(this.productCount, catalogAdminsCategory.productCount) &&
        Objects.equals(this.childCount, catalogAdminsCategory.childCount) &&
        Objects.equals(this.auditInfo, catalogAdminsCategory.auditInfo) &&
        Objects.equals(this.shouldSlice, catalogAdminsCategory.shouldSlice) &&
        Objects.equals(this.activeDateStart, catalogAdminsCategory.activeDateStart) &&
        Objects.equals(this.activeDateEnd, catalogAdminsCategory.activeDateEnd) &&
        Objects.equals(this.attributes, catalogAdminsCategory.attributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, categoryType, catalogId, parentCategoryId, parentCategoryCode, parentCategoryName, parentIsActive, categoryCode, isActive, isDisplayed, sequence, content, dynamicExpression, productCount, childCount, auditInfo, shouldSlice, activeDateStart, activeDateEnd, attributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogAdminsCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    categoryType: ").append(toIndentedString(categoryType)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    parentCategoryId: ").append(toIndentedString(parentCategoryId)).append("\n");
    sb.append("    parentCategoryCode: ").append(toIndentedString(parentCategoryCode)).append("\n");
    sb.append("    parentCategoryName: ").append(toIndentedString(parentCategoryName)).append("\n");
    sb.append("    parentIsActive: ").append(toIndentedString(parentIsActive)).append("\n");
    sb.append("    categoryCode: ").append(toIndentedString(categoryCode)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isDisplayed: ").append(toIndentedString(isDisplayed)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    dynamicExpression: ").append(toIndentedString(dynamicExpression)).append("\n");
    sb.append("    productCount: ").append(toIndentedString(productCount)).append("\n");
    sb.append("    childCount: ").append(toIndentedString(childCount)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    shouldSlice: ").append(toIndentedString(shouldSlice)).append("\n");
    sb.append("    activeDateStart: ").append(toIndentedString(activeDateStart)).append("\n");
    sb.append("    activeDateEnd: ").append(toIndentedString(activeDateEnd)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("categoryType");
    openapiFields.add("catalogId");
    openapiFields.add("parentCategoryId");
    openapiFields.add("parentCategoryCode");
    openapiFields.add("parentCategoryName");
    openapiFields.add("parentIsActive");
    openapiFields.add("categoryCode");
    openapiFields.add("isActive");
    openapiFields.add("isDisplayed");
    openapiFields.add("sequence");
    openapiFields.add("content");
    openapiFields.add("dynamicExpression");
    openapiFields.add("productCount");
    openapiFields.add("childCount");
    openapiFields.add("auditInfo");
    openapiFields.add("shouldSlice");
    openapiFields.add("activeDateStart");
    openapiFields.add("activeDateEnd");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogAdminsCategory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogAdminsCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogAdminsCategory is not found in the empty JSON string", CatalogAdminsCategory.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogAdminsCategory.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogAdminsCategory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("categoryType") != null && !jsonObj.get("categoryType").isJsonNull()) && !jsonObj.get("categoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryType").toString()));
      }
      if ((jsonObj.get("parentCategoryCode") != null && !jsonObj.get("parentCategoryCode").isJsonNull()) && !jsonObj.get("parentCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentCategoryCode").toString()));
      }
      if ((jsonObj.get("parentCategoryName") != null && !jsonObj.get("parentCategoryName").isJsonNull()) && !jsonObj.get("parentCategoryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCategoryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentCategoryName").toString()));
      }
      if ((jsonObj.get("categoryCode") != null && !jsonObj.get("categoryCode").isJsonNull()) && !jsonObj.get("categoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryCode").toString()));
      }
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        CategoryLocalizedContent.validateJsonObject(jsonObj.getAsJsonObject("content"));
      }
      // validate the optional field `dynamicExpression`
      if (jsonObj.get("dynamicExpression") != null && !jsonObj.get("dynamicExpression").isJsonNull()) {
        DynamicExpression.validateJsonObject(jsonObj.getAsJsonObject("dynamicExpression"));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            CatalogAdminsCategoryAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogAdminsCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogAdminsCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogAdminsCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogAdminsCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogAdminsCategory>() {
           @Override
           public void write(JsonWriter out, CatalogAdminsCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogAdminsCategory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogAdminsCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogAdminsCategory
  * @throws IOException if the JSON string is invalid with respect to CatalogAdminsCategory
  */
  public static CatalogAdminsCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogAdminsCategory.class);
  }

 /**
  * Convert an instance of CatalogAdminsCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

