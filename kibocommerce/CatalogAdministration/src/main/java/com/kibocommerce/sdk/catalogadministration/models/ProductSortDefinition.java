/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.catalogadministration.models.ProductSortExpression;
import com.kibocommerce.sdk.catalogadministration.models.ProductSortOverride;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Defines a default sort for a list of products and allows some products to be  boosted to the top or pinned ot a specific position, or buried at the bottom of the  list.  Only 10 items can be boosted or pinned and up to
 */
@ApiModel(description = "Defines a default sort for a list of products and allows some products to be  boosted to the top or pinned ot a specific position, or buried at the bottom of the  list.  Only 10 items can be boosted or pinned and up to")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductSortDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_SORT_DEFINITION_ID = "productSortDefinitionId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SORT_DEFINITION_ID)
  private Integer productSortDefinitionId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_SORT_EXPRESSIONS = "sortExpressions";
  @SerializedName(SERIALIZED_NAME_SORT_EXPRESSIONS)
  private List<ProductSortExpression> sortExpressions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOSTED = "boosted";
  @SerializedName(SERIALIZED_NAME_BOOSTED)
  private List<ProductSortOverride> boosted = null;

  public static final String SERIALIZED_NAME_BURIED = "buried";
  @SerializedName(SERIALIZED_NAME_BURIED)
  private List<ProductSortOverride> buried = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public ProductSortDefinition() {
  }

  public ProductSortDefinition productSortDefinitionId(Integer productSortDefinitionId) {
    
    this.productSortDefinitionId = productSortDefinitionId;
    return this;
  }

   /**
   * System or user provided ID for the ProductSortDefinition
   * @return productSortDefinitionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "System or user provided ID for the ProductSortDefinition")

  public Integer getProductSortDefinitionId() {
    return productSortDefinitionId;
  }


  public void setProductSortDefinitionId(Integer productSortDefinitionId) {
    this.productSortDefinitionId = productSortDefinitionId;
  }


  public ProductSortDefinition categoryId(Integer categoryId) {
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * 
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public ProductSortDefinition name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Short Name for the sort definition. Required.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Short Name for the sort definition. Required.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ProductSortDefinition startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The Start Date when the sort definition becomes active
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Start Date when the sort definition becomes active")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ProductSortDefinition endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Optional end date for a product sort definition
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional end date for a product sort definition")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ProductSortDefinition sortExpressions(List<ProductSortExpression> sortExpressions) {
    
    this.sortExpressions = sortExpressions;
    return this;
  }

  public ProductSortDefinition addSortExpressionsItem(ProductSortExpression sortExpressionsItem) {
    this.sortExpressions.add(sortExpressionsItem);
    return this;
  }

   /**
   * Sort expression to apply  Max two expressions
   * @return sortExpressions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Sort expression to apply  Max two expressions")

  public List<ProductSortExpression> getSortExpressions() {
    return sortExpressions;
  }


  public void setSortExpressions(List<ProductSortExpression> sortExpressions) {
    this.sortExpressions = sortExpressions;
  }


  public ProductSortDefinition boosted(List<ProductSortOverride> boosted) {
    
    this.boosted = boosted;
    return this;
  }

  public ProductSortDefinition addBoostedItem(ProductSortOverride boostedItem) {
    if (this.boosted == null) {
      this.boosted = new ArrayList<>();
    }
    this.boosted.add(boostedItem);
    return this;
  }

   /**
   * List of products being positioned
   * @return boosted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of products being positioned")

  public List<ProductSortOverride> getBoosted() {
    return boosted;
  }


  public void setBoosted(List<ProductSortOverride> boosted) {
    this.boosted = boosted;
  }


  public ProductSortDefinition buried(List<ProductSortOverride> buried) {
    
    this.buried = buried;
    return this;
  }

  public ProductSortDefinition addBuriedItem(ProductSortOverride buriedItem) {
    if (this.buried == null) {
      this.buried = new ArrayList<>();
    }
    this.buried.add(buriedItem);
    return this;
  }

   /**
   * List of products being positioned
   * @return buried
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of products being positioned")

  public List<ProductSortOverride> getBuried() {
    return buried;
  }


  public void setBuried(List<ProductSortOverride> buried) {
    this.buried = buried;
  }


  public ProductSortDefinition auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSortDefinition productSortDefinition = (ProductSortDefinition) o;
    return Objects.equals(this.productSortDefinitionId, productSortDefinition.productSortDefinitionId) &&
        Objects.equals(this.categoryId, productSortDefinition.categoryId) &&
        Objects.equals(this.name, productSortDefinition.name) &&
        Objects.equals(this.startDate, productSortDefinition.startDate) &&
        Objects.equals(this.endDate, productSortDefinition.endDate) &&
        Objects.equals(this.sortExpressions, productSortDefinition.sortExpressions) &&
        Objects.equals(this.boosted, productSortDefinition.boosted) &&
        Objects.equals(this.buried, productSortDefinition.buried) &&
        Objects.equals(this.auditInfo, productSortDefinition.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productSortDefinitionId, categoryId, name, startDate, endDate, sortExpressions, boosted, buried, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSortDefinition {\n");
    sb.append("    productSortDefinitionId: ").append(toIndentedString(productSortDefinitionId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    sortExpressions: ").append(toIndentedString(sortExpressions)).append("\n");
    sb.append("    boosted: ").append(toIndentedString(boosted)).append("\n");
    sb.append("    buried: ").append(toIndentedString(buried)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productSortDefinitionId");
    openapiFields.add("categoryId");
    openapiFields.add("name");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("sortExpressions");
    openapiFields.add("boosted");
    openapiFields.add("buried");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("sortExpressions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductSortDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductSortDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSortDefinition is not found in the empty JSON string", ProductSortDefinition.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductSortDefinition.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSortDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductSortDefinition.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sortExpressions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortExpressions` to be an array in the JSON string but got `%s`", jsonObj.get("sortExpressions").toString()));
      }

      JsonArray jsonArraysortExpressions = jsonObj.getAsJsonArray("sortExpressions");
      // validate the required field `sortExpressions` (array)
      for (int i = 0; i < jsonArraysortExpressions.size(); i++) {
        ProductSortExpression.validateJsonObject(jsonArraysortExpressions.get(i).getAsJsonObject());
      };
      if (jsonObj.get("boosted") != null && !jsonObj.get("boosted").isJsonNull()) {
        JsonArray jsonArrayboosted = jsonObj.getAsJsonArray("boosted");
        if (jsonArrayboosted != null) {
          // ensure the json data is an array
          if (!jsonObj.get("boosted").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `boosted` to be an array in the JSON string but got `%s`", jsonObj.get("boosted").toString()));
          }

          // validate the optional field `boosted` (array)
          for (int i = 0; i < jsonArrayboosted.size(); i++) {
            ProductSortOverride.validateJsonObject(jsonArrayboosted.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("buried") != null && !jsonObj.get("buried").isJsonNull()) {
        JsonArray jsonArrayburied = jsonObj.getAsJsonArray("buried");
        if (jsonArrayburied != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buried").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buried` to be an array in the JSON string but got `%s`", jsonObj.get("buried").toString()));
          }

          // validate the optional field `buried` (array)
          for (int i = 0; i < jsonArrayburied.size(); i++) {
            ProductSortOverride.validateJsonObject(jsonArrayburied.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSortDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSortDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSortDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSortDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSortDefinition>() {
           @Override
           public void write(JsonWriter out, ProductSortDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSortDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductSortDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductSortDefinition
  * @throws IOException if the JSON string is invalid with respect to ProductSortDefinition
  */
  public static ProductSortDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSortDefinition.class);
  }

 /**
  * Convert an instance of ProductSortDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

