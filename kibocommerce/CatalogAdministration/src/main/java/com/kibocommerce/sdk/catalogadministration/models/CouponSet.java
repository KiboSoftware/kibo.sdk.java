/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.AdminUserAuditInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Represents a claimable item that allows a user to use one or more discounts.
 */
@ApiModel(description = "Represents a claimable item that allows a user to use one or more discounts.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CouponSet implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_COUPON_SET_CODE = "couponSetCode";
  @SerializedName(SERIALIZED_NAME_COUPON_SET_CODE)
  private String couponSetCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COUPON_CODE_TYPE = "couponCodeType";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE_TYPE)
  private String couponCodeType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CAN_BE_DELETED = "canBeDeleted";
  @SerializedName(SERIALIZED_NAME_CAN_BE_DELETED)
  private Boolean canBeDeleted;

  public static final String SERIALIZED_NAME_MAX_REDEMPTIONS_PER_USER = "maxRedemptionsPerUser";
  @SerializedName(SERIALIZED_NAME_MAX_REDEMPTIONS_PER_USER)
  private Integer maxRedemptionsPerUser;

  public static final String SERIALIZED_NAME_MAX_REDEMPTIONS_PER_COUPON_CODE = "maxRedemptionsPerCouponCode";
  @SerializedName(SERIALIZED_NAME_MAX_REDEMPTIONS_PER_COUPON_CODE)
  private Integer maxRedemptionsPerCouponCode;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_SET_SIZE = "setSize";
  @SerializedName(SERIALIZED_NAME_SET_SIZE)
  private Integer setSize;

  public static final String SERIALIZED_NAME_COUPON_CODE_COUNT = "couponCodeCount";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE_COUNT)
  private Integer couponCodeCount;

  public static final String SERIALIZED_NAME_REDEMPTION_COUNT = "redemptionCount";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_COUNT)
  private Integer redemptionCount;

  public static final String SERIALIZED_NAME_ASSIGNED_DISCOUNT_COUNT = "assignedDiscountCount";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_DISCOUNT_COUNT)
  private Integer assignedDiscountCount;

  public CouponSet() {
  }

  public CouponSet id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Internal unique identifier of the couponset. System-supplied and read-only.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal unique identifier of the couponset. System-supplied and read-only.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CouponSet couponSetCode(String couponSetCode) {
    
    this.couponSetCode = couponSetCode;
    return this;
  }

   /**
   * Unique tenant supplied identifier.  Used as the prefix for generated sets.  Required  System generated if left null.
   * @return couponSetCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique tenant supplied identifier.  Used as the prefix for generated sets.  Required  System generated if left null.")

  public String getCouponSetCode() {
    return couponSetCode;
  }


  public void setCouponSetCode(String couponSetCode) {
    this.couponSetCode = couponSetCode;
  }


  public CouponSet name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * CouponSet Name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "CouponSet Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CouponSet couponCodeType(String couponCodeType) {
    
    this.couponCodeType = couponCodeType;
    return this;
  }

   /**
   * Determines if the coupon is a persisted list of codes (static) or a list based on generated specification  (dynamic).
   * @return couponCodeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if the coupon is a persisted list of codes (static) or a list based on generated specification  (dynamic).")

  public String getCouponCodeType() {
    return couponCodeType;
  }


  public void setCouponCodeType(String couponCodeType) {
    this.couponCodeType = couponCodeType;
  }


  public CouponSet status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * CouponSet status which can be: Active, Expired,  Inactive  System-supplied and read-only.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CouponSet status which can be: Active, Expired,  Inactive  System-supplied and read-only.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public CouponSet canBeDeleted(Boolean canBeDeleted) {
    
    this.canBeDeleted = canBeDeleted;
    return this;
  }

   /**
   * Signifies that the coupon has not been exported and can be updated  ReadOnly
   * @return canBeDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signifies that the coupon has not been exported and can be updated  ReadOnly")

  public Boolean getCanBeDeleted() {
    return canBeDeleted;
  }


  public void setCanBeDeleted(Boolean canBeDeleted) {
    this.canBeDeleted = canBeDeleted;
  }


  public CouponSet maxRedemptionsPerUser(Integer maxRedemptionsPerUser) {
    
    this.maxRedemptionsPerUser = maxRedemptionsPerUser;
    return this;
  }

   /**
   * Maximum number of times any single user can redeem any code.  Must be null, &gt;&#x3D;1 or -1.  Defaults to 1 on creation if null.  -1 indicates unlimited.
   * @return maxRedemptionsPerUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of times any single user can redeem any code.  Must be null, >=1 or -1.  Defaults to 1 on creation if null.  -1 indicates unlimited.")

  public Integer getMaxRedemptionsPerUser() {
    return maxRedemptionsPerUser;
  }


  public void setMaxRedemptionsPerUser(Integer maxRedemptionsPerUser) {
    this.maxRedemptionsPerUser = maxRedemptionsPerUser;
  }


  public CouponSet maxRedemptionsPerCouponCode(Integer maxRedemptionsPerCouponCode) {
    
    this.maxRedemptionsPerCouponCode = maxRedemptionsPerCouponCode;
    return this;
  }

   /**
   * Maximum number of times any code can de used.  Must be null, &gt;&#x3D;1 or -1.  Defaults to 1 on creation if null.  -1 indicates unlimited.
   * @return maxRedemptionsPerCouponCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of times any code can de used.  Must be null, >=1 or -1.  Defaults to 1 on creation if null.  -1 indicates unlimited.")

  public Integer getMaxRedemptionsPerCouponCode() {
    return maxRedemptionsPerCouponCode;
  }


  public void setMaxRedemptionsPerCouponCode(Integer maxRedemptionsPerCouponCode) {
    this.maxRedemptionsPerCouponCode = maxRedemptionsPerCouponCode;
  }


  public CouponSet endDate(OffsetDateTime endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Date and time that the coupon codes becomes expired
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time that the coupon codes becomes expired")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public CouponSet startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date and time that the coupon codes becomes active
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time that the coupon codes becomes active")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public CouponSet auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public CouponSet setSize(Integer setSize) {
    
    this.setSize = setSize;
    return this;
  }

   /**
   * Sets the number of codes to generate for dynamic coupons  Required when CouponCodeType is \&quot;Dynamic\&quot;
   * @return setSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sets the number of codes to generate for dynamic coupons  Required when CouponCodeType is \"Dynamic\"")

  public Integer getSetSize() {
    return setSize;
  }


  public void setSetSize(Integer setSize) {
    this.setSize = setSize;
  }


  public CouponSet couponCodeCount(Integer couponCodeCount) {
    
    this.couponCodeCount = couponCodeCount;
    return this;
  }

   /**
   * Count of associated couponCodes.  Must use \&quot;counts\&quot; response group to get this value  ReadOnly
   * @return couponCodeCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of associated couponCodes.  Must use \"counts\" response group to get this value  ReadOnly")

  public Integer getCouponCodeCount() {
    return couponCodeCount;
  }


  public void setCouponCodeCount(Integer couponCodeCount) {
    this.couponCodeCount = couponCodeCount;
  }


  public CouponSet redemptionCount(Integer redemptionCount) {
    
    this.redemptionCount = redemptionCount;
    return this;
  }

   /**
   * ReadOnly count of all redemptions for this coupon set.
   * @return redemptionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ReadOnly count of all redemptions for this coupon set.")

  public Integer getRedemptionCount() {
    return redemptionCount;
  }


  public void setRedemptionCount(Integer redemptionCount) {
    this.redemptionCount = redemptionCount;
  }


  public CouponSet assignedDiscountCount(Integer assignedDiscountCount) {
    
    this.assignedDiscountCount = assignedDiscountCount;
    return this;
  }

   /**
   * ReadOnly sum of all redemptions for this coupon.  Use \&quot;counts\&quot; response group.
   * @return assignedDiscountCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ReadOnly sum of all redemptions for this coupon.  Use \"counts\" response group.")

  public Integer getAssignedDiscountCount() {
    return assignedDiscountCount;
  }


  public void setAssignedDiscountCount(Integer assignedDiscountCount) {
    this.assignedDiscountCount = assignedDiscountCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponSet couponSet = (CouponSet) o;
    return Objects.equals(this.id, couponSet.id) &&
        Objects.equals(this.couponSetCode, couponSet.couponSetCode) &&
        Objects.equals(this.name, couponSet.name) &&
        Objects.equals(this.couponCodeType, couponSet.couponCodeType) &&
        Objects.equals(this.status, couponSet.status) &&
        Objects.equals(this.canBeDeleted, couponSet.canBeDeleted) &&
        Objects.equals(this.maxRedemptionsPerUser, couponSet.maxRedemptionsPerUser) &&
        Objects.equals(this.maxRedemptionsPerCouponCode, couponSet.maxRedemptionsPerCouponCode) &&
        Objects.equals(this.endDate, couponSet.endDate) &&
        Objects.equals(this.startDate, couponSet.startDate) &&
        Objects.equals(this.auditInfo, couponSet.auditInfo) &&
        Objects.equals(this.setSize, couponSet.setSize) &&
        Objects.equals(this.couponCodeCount, couponSet.couponCodeCount) &&
        Objects.equals(this.redemptionCount, couponSet.redemptionCount) &&
        Objects.equals(this.assignedDiscountCount, couponSet.assignedDiscountCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, couponSetCode, name, couponCodeType, status, canBeDeleted, maxRedemptionsPerUser, maxRedemptionsPerCouponCode, endDate, startDate, auditInfo, setSize, couponCodeCount, redemptionCount, assignedDiscountCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponSet {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    couponSetCode: ").append(toIndentedString(couponSetCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    couponCodeType: ").append(toIndentedString(couponCodeType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    canBeDeleted: ").append(toIndentedString(canBeDeleted)).append("\n");
    sb.append("    maxRedemptionsPerUser: ").append(toIndentedString(maxRedemptionsPerUser)).append("\n");
    sb.append("    maxRedemptionsPerCouponCode: ").append(toIndentedString(maxRedemptionsPerCouponCode)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    setSize: ").append(toIndentedString(setSize)).append("\n");
    sb.append("    couponCodeCount: ").append(toIndentedString(couponCodeCount)).append("\n");
    sb.append("    redemptionCount: ").append(toIndentedString(redemptionCount)).append("\n");
    sb.append("    assignedDiscountCount: ").append(toIndentedString(assignedDiscountCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("couponSetCode");
    openapiFields.add("name");
    openapiFields.add("couponCodeType");
    openapiFields.add("status");
    openapiFields.add("canBeDeleted");
    openapiFields.add("maxRedemptionsPerUser");
    openapiFields.add("maxRedemptionsPerCouponCode");
    openapiFields.add("endDate");
    openapiFields.add("startDate");
    openapiFields.add("auditInfo");
    openapiFields.add("setSize");
    openapiFields.add("couponCodeCount");
    openapiFields.add("redemptionCount");
    openapiFields.add("assignedDiscountCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponSet
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CouponSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponSet is not found in the empty JSON string", CouponSet.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CouponSet.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponSet` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CouponSet.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("couponSetCode") != null && !jsonObj.get("couponSetCode").isJsonNull()) && !jsonObj.get("couponSetCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponSetCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("couponSetCode").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("couponCodeType") != null && !jsonObj.get("couponCodeType").isJsonNull()) && !jsonObj.get("couponCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("couponCodeType").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponSet.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponSet>() {
           @Override
           public void write(JsonWriter out, CouponSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponSet read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponSet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponSet
  * @throws IOException if the JSON string is invalid with respect to CouponSet
  */
  public static CouponSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponSet.class);
  }

 /**
  * Convert an instance of CouponSet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

