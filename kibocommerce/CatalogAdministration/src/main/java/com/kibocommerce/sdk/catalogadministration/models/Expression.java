/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Expression
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Expression implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_LOGICAL_OPERATOR = "logicalOperator";
  @SerializedName(SERIALIZED_NAME_LOGICAL_OPERATOR)
  private String logicalOperator;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<Expression> nodes = null;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Object right = null;

  public Expression() {
  }

  public Expression type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Container or Predicate
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Container or Predicate")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Expression logicalOperator(String logicalOperator) {
    
    this.logicalOperator = logicalOperator;
    return this;
  }

   /**
   * And or Or (if Container with More than one Node)
   * @return logicalOperator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "And or Or (if Container with More than one Node)")

  public String getLogicalOperator() {
    return logicalOperator;
  }


  public void setLogicalOperator(String logicalOperator) {
    this.logicalOperator = logicalOperator;
  }


  public Expression nodes(List<Expression> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public Expression addNodesItem(Expression nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Expression> getNodes() {
    return nodes;
  }


  public void setNodes(List<Expression> nodes) {
    this.nodes = nodes;
  }


  public Expression left(String left) {
    
    this.left = left;
    return this;
  }

   /**
   * The field target of a predicate
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The field target of a predicate")

  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    this.left = left;
  }


  public Expression operator(String operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * The operator of a predicate
   * @return operator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The operator of a predicate")

  public String getOperator() {
    return operator;
  }


  public void setOperator(String operator) {
    this.operator = operator;
  }


  public Expression right(Object right) {
    
    this.right = right;
    return this;
  }

   /**
   * The literal values of a predicate
   * @return right
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The literal values of a predicate")

  public Object getRight() {
    return right;
  }


  public void setRight(Object right) {
    this.right = right;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expression expression = (Expression) o;
    return Objects.equals(this.type, expression.type) &&
        Objects.equals(this.logicalOperator, expression.logicalOperator) &&
        Objects.equals(this.nodes, expression.nodes) &&
        Objects.equals(this.left, expression.left) &&
        Objects.equals(this.operator, expression.operator) &&
        Objects.equals(this.right, expression.right);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, logicalOperator, nodes, left, operator, right);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expression {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    logicalOperator: ").append(toIndentedString(logicalOperator)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("logicalOperator");
    openapiFields.add("nodes");
    openapiFields.add("left");
    openapiFields.add("operator");
    openapiFields.add("right");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Expression
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Expression.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Expression is not found in the empty JSON string", Expression.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Expression.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Expression` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("logicalOperator") != null && !jsonObj.get("logicalOperator").isJsonNull()) && !jsonObj.get("logicalOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logicalOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logicalOperator").toString()));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            Expression.validateJsonObject(jsonArraynodes.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Expression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Expression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Expression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Expression.class));

       return (TypeAdapter<T>) new TypeAdapter<Expression>() {
           @Override
           public void write(JsonWriter out, Expression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Expression read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Expression given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Expression
  * @throws IOException if the JSON string is invalid with respect to Expression
  */
  public static Expression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Expression.class);
  }

 /**
  * Convert an instance of Expression to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

