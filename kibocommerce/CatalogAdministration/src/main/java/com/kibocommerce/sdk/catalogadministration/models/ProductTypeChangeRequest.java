/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ProductTypeChangeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductTypeChangeRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TARGET_PRODUCT_TYPE_ID = "targetProductTypeId";
  @SerializedName(SERIALIZED_NAME_TARGET_PRODUCT_TYPE_ID)
  private Integer targetProductTypeId;

  public static final String SERIALIZED_NAME_IGNORE_DATA_LOSS = "ignoreDataLoss";
  @SerializedName(SERIALIZED_NAME_IGNORE_DATA_LOSS)
  private Boolean ignoreDataLoss;

  public static final String SERIALIZED_NAME_TEST_MODE = "testMode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private Boolean testMode;

  public static final String SERIALIZED_NAME_SHOULD_FAIL_FAST = "shouldFailFast";
  @SerializedName(SERIALIZED_NAME_SHOULD_FAIL_FAST)
  private Boolean shouldFailFast;

  public ProductTypeChangeRequest() {
  }

  public ProductTypeChangeRequest targetProductTypeId(Integer targetProductTypeId) {
    
    this.targetProductTypeId = targetProductTypeId;
    return this;
  }

   /**
   * The target product type id to move the product to.
   * @return targetProductTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The target product type id to move the product to.")

  public Integer getTargetProductTypeId() {
    return targetProductTypeId;
  }


  public void setTargetProductTypeId(Integer targetProductTypeId) {
    this.targetProductTypeId = targetProductTypeId;
  }


  public ProductTypeChangeRequest ignoreDataLoss(Boolean ignoreDataLoss) {
    
    this.ignoreDataLoss = ignoreDataLoss;
    return this;
  }

   /**
   * When set to true any attributes or values that were set on the product that are  not defined the target product type will be lost.  When false, the process will stop  without making updates if there are any conditions that would result in dataloss.  Validation output will be returned. Defaults to false.
   * @return ignoreDataLoss
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When set to true any attributes or values that were set on the product that are  not defined the target product type will be lost.  When false, the process will stop  without making updates if there are any conditions that would result in dataloss.  Validation output will be returned. Defaults to false.")

  public Boolean getIgnoreDataLoss() {
    return ignoreDataLoss;
  }


  public void setIgnoreDataLoss(Boolean ignoreDataLoss) {
    this.ignoreDataLoss = ignoreDataLoss;
  }


  public ProductTypeChangeRequest testMode(Boolean testMode) {
    
    this.testMode = testMode;
    return this;
  }

   /**
   * When set to true no updates will be made but the validation will return any  warnings or failures. Defaults to false.
   * @return testMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When set to true no updates will be made but the validation will return any  warnings or failures. Defaults to false.")

  public Boolean getTestMode() {
    return testMode;
  }


  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }


  public ProductTypeChangeRequest shouldFailFast(Boolean shouldFailFast) {
    
    this.shouldFailFast = shouldFailFast;
    return this;
  }

   /**
   * When true the validation will stop on the first error.  Defaults to run all validation.
   * @return shouldFailFast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When true the validation will stop on the first error.  Defaults to run all validation.")

  public Boolean getShouldFailFast() {
    return shouldFailFast;
  }


  public void setShouldFailFast(Boolean shouldFailFast) {
    this.shouldFailFast = shouldFailFast;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductTypeChangeRequest productTypeChangeRequest = (ProductTypeChangeRequest) o;
    return Objects.equals(this.targetProductTypeId, productTypeChangeRequest.targetProductTypeId) &&
        Objects.equals(this.ignoreDataLoss, productTypeChangeRequest.ignoreDataLoss) &&
        Objects.equals(this.testMode, productTypeChangeRequest.testMode) &&
        Objects.equals(this.shouldFailFast, productTypeChangeRequest.shouldFailFast);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetProductTypeId, ignoreDataLoss, testMode, shouldFailFast);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductTypeChangeRequest {\n");
    sb.append("    targetProductTypeId: ").append(toIndentedString(targetProductTypeId)).append("\n");
    sb.append("    ignoreDataLoss: ").append(toIndentedString(ignoreDataLoss)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    shouldFailFast: ").append(toIndentedString(shouldFailFast)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("targetProductTypeId");
    openapiFields.add("ignoreDataLoss");
    openapiFields.add("testMode");
    openapiFields.add("shouldFailFast");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductTypeChangeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductTypeChangeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductTypeChangeRequest is not found in the empty JSON string", ProductTypeChangeRequest.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductTypeChangeRequest.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductTypeChangeRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductTypeChangeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductTypeChangeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductTypeChangeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductTypeChangeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductTypeChangeRequest>() {
           @Override
           public void write(JsonWriter out, ProductTypeChangeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductTypeChangeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductTypeChangeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductTypeChangeRequest
  * @throws IOException if the JSON string is invalid with respect to ProductTypeChangeRequest
  */
  public static ProductTypeChangeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductTypeChangeRequest.class);
  }

 /**
  * Convert an instance of ProductTypeChangeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

