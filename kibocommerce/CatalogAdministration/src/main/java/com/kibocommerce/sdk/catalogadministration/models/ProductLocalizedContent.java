/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.ProductLocalizedImage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Container for language-specific content to display on the storefront. You&#39;ll have a container for each supported language (LocaleCode). This enables you to display a product in multiple languages yet manage it as a single product internally.
 */
@ApiModel(description = "Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a product in multiple languages yet manage it as a single product internally.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductLocalizedContent implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_LOCALE_CODE = "localeCode";
  @SerializedName(SERIALIZED_NAME_LOCALE_CODE)
  private String localeCode;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_FULL_DESCRIPTION = "productFullDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FULL_DESCRIPTION)
  private String productFullDescription;

  public static final String SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION = "productShortDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION)
  private String productShortDescription;

  public static final String SERIALIZED_NAME_PRODUCT_IMAGES = "productImages";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGES)
  private List<ProductLocalizedImage> productImages = null;

  public ProductLocalizedContent() {
  }

  public ProductLocalizedContent localeCode(String localeCode) {
    
    this.localeCode = localeCode;
    return this;
  }

   /**
   * Lanugage used for product content. Currently, only en_US is supported.
   * @return localeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lanugage used for product content. Currently, only en_US is supported.")

  public String getLocaleCode() {
    return localeCode;
  }


  public void setLocaleCode(String localeCode) {
    this.localeCode = localeCode;
  }


  public ProductLocalizedContent productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * Name of the product.
   * @return productName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the product.")

  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public ProductLocalizedContent productFullDescription(String productFullDescription) {
    
    this.productFullDescription = productFullDescription;
    return this;
  }

   /**
   * Long description of the product typically used for a product details page.
   * @return productFullDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Long description of the product typically used for a product details page.")

  public String getProductFullDescription() {
    return productFullDescription;
  }


  public void setProductFullDescription(String productFullDescription) {
    this.productFullDescription = productFullDescription;
  }


  public ProductLocalizedContent productShortDescription(String productShortDescription) {
    
    this.productShortDescription = productShortDescription;
    return this;
  }

   /**
   * Brief description of the product typically used when the product is displayed in a list or search results.
   * @return productShortDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Brief description of the product typically used when the product is displayed in a list or search results.")

  public String getProductShortDescription() {
    return productShortDescription;
  }


  public void setProductShortDescription(String productShortDescription) {
    this.productShortDescription = productShortDescription;
  }


  public ProductLocalizedContent productImages(List<ProductLocalizedImage> productImages) {
    
    this.productImages = productImages;
    return this;
  }

  public ProductLocalizedContent addProductImagesItem(ProductLocalizedImage productImagesItem) {
    if (this.productImages == null) {
      this.productImages = new ArrayList<>();
    }
    this.productImages.add(productImagesItem);
    return this;
  }

   /**
   * List of images associated with the product.
   * @return productImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of images associated with the product.")

  public List<ProductLocalizedImage> getProductImages() {
    return productImages;
  }


  public void setProductImages(List<ProductLocalizedImage> productImages) {
    this.productImages = productImages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductLocalizedContent productLocalizedContent = (ProductLocalizedContent) o;
    return Objects.equals(this.localeCode, productLocalizedContent.localeCode) &&
        Objects.equals(this.productName, productLocalizedContent.productName) &&
        Objects.equals(this.productFullDescription, productLocalizedContent.productFullDescription) &&
        Objects.equals(this.productShortDescription, productLocalizedContent.productShortDescription) &&
        Objects.equals(this.productImages, productLocalizedContent.productImages);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(localeCode, productName, productFullDescription, productShortDescription, productImages);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductLocalizedContent {\n");
    sb.append("    localeCode: ").append(toIndentedString(localeCode)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productFullDescription: ").append(toIndentedString(productFullDescription)).append("\n");
    sb.append("    productShortDescription: ").append(toIndentedString(productShortDescription)).append("\n");
    sb.append("    productImages: ").append(toIndentedString(productImages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localeCode");
    openapiFields.add("productName");
    openapiFields.add("productFullDescription");
    openapiFields.add("productShortDescription");
    openapiFields.add("productImages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductLocalizedContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductLocalizedContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductLocalizedContent is not found in the empty JSON string", ProductLocalizedContent.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductLocalizedContent.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductLocalizedContent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("localeCode") != null && !jsonObj.get("localeCode").isJsonNull()) && !jsonObj.get("localeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localeCode").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if ((jsonObj.get("productFullDescription") != null && !jsonObj.get("productFullDescription").isJsonNull()) && !jsonObj.get("productFullDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFullDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFullDescription").toString()));
      }
      if ((jsonObj.get("productShortDescription") != null && !jsonObj.get("productShortDescription").isJsonNull()) && !jsonObj.get("productShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productShortDescription").toString()));
      }
      if (jsonObj.get("productImages") != null && !jsonObj.get("productImages").isJsonNull()) {
        JsonArray jsonArrayproductImages = jsonObj.getAsJsonArray("productImages");
        if (jsonArrayproductImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productImages` to be an array in the JSON string but got `%s`", jsonObj.get("productImages").toString()));
          }

          // validate the optional field `productImages` (array)
          for (int i = 0; i < jsonArrayproductImages.size(); i++) {
            ProductLocalizedImage.validateJsonObject(jsonArrayproductImages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductLocalizedContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductLocalizedContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductLocalizedContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductLocalizedContent.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductLocalizedContent>() {
           @Override
           public void write(JsonWriter out, ProductLocalizedContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductLocalizedContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductLocalizedContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductLocalizedContent
  * @throws IOException if the JSON string is invalid with respect to ProductLocalizedContent
  */
  public static ProductLocalizedContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductLocalizedContent.class);
  }

 /**
  * Convert an instance of ProductLocalizedContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

