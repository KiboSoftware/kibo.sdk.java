/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.ProductInCatalogInfoPatchDocument;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductInCatalogInfo
 */
@ApiModel(description = "List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductInCatalogInfo")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductInCatalogPatchAction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "productCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private Integer catalogId;

  public static final String SERIALIZED_NAME_PATCHES = "patches";
  @SerializedName(SERIALIZED_NAME_PATCHES)
  private ProductInCatalogInfoPatchDocument patches;

  public static final String SERIALIZED_NAME_SAVE_AND_PUBLISH = "saveAndPublish";
  @SerializedName(SERIALIZED_NAME_SAVE_AND_PUBLISH)
  private Boolean saveAndPublish;

  public ProductInCatalogPatchAction() {
  }

  public ProductInCatalogPatchAction productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * Product code of the target product
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product code of the target product")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public ProductInCatalogPatchAction catalogId(Integer catalogId) {
    
    this.catalogId = catalogId;
    return this;
  }

   /**
   * CatalogId
   * @return catalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CatalogId")

  public Integer getCatalogId() {
    return catalogId;
  }


  public void setCatalogId(Integer catalogId) {
    this.catalogId = catalogId;
  }


  public ProductInCatalogPatchAction patches(ProductInCatalogInfoPatchDocument patches) {
    
    this.patches = patches;
    return this;
  }

   /**
   * Get patches
   * @return patches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductInCatalogInfoPatchDocument getPatches() {
    return patches;
  }


  public void setPatches(ProductInCatalogInfoPatchDocument patches) {
    this.patches = patches;
  }


  public ProductInCatalogPatchAction saveAndPublish(Boolean saveAndPublish) {
    
    this.saveAndPublish = saveAndPublish;
    return this;
  }

   /**
   * If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise  changes are saved to the live product.
   * @return saveAndPublish
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise  changes are saved to the live product.")

  public Boolean getSaveAndPublish() {
    return saveAndPublish;
  }


  public void setSaveAndPublish(Boolean saveAndPublish) {
    this.saveAndPublish = saveAndPublish;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductInCatalogPatchAction productInCatalogPatchAction = (ProductInCatalogPatchAction) o;
    return Objects.equals(this.productCode, productInCatalogPatchAction.productCode) &&
        Objects.equals(this.catalogId, productInCatalogPatchAction.catalogId) &&
        Objects.equals(this.patches, productInCatalogPatchAction.patches) &&
        Objects.equals(this.saveAndPublish, productInCatalogPatchAction.saveAndPublish);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productCode, catalogId, patches, saveAndPublish);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductInCatalogPatchAction {\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    patches: ").append(toIndentedString(patches)).append("\n");
    sb.append("    saveAndPublish: ").append(toIndentedString(saveAndPublish)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productCode");
    openapiFields.add("catalogId");
    openapiFields.add("patches");
    openapiFields.add("saveAndPublish");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductInCatalogPatchAction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductInCatalogPatchAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductInCatalogPatchAction is not found in the empty JSON string", ProductInCatalogPatchAction.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductInCatalogPatchAction.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductInCatalogPatchAction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("productCode") != null && !jsonObj.get("productCode").isJsonNull()) && !jsonObj.get("productCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCode").toString()));
      }
      // validate the optional field `patches`
      if (jsonObj.get("patches") != null && !jsonObj.get("patches").isJsonNull()) {
        ProductInCatalogInfoPatchDocument.validateJsonObject(jsonObj.getAsJsonObject("patches"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductInCatalogPatchAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductInCatalogPatchAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductInCatalogPatchAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductInCatalogPatchAction.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductInCatalogPatchAction>() {
           @Override
           public void write(JsonWriter out, ProductInCatalogPatchAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductInCatalogPatchAction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductInCatalogPatchAction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductInCatalogPatchAction
  * @throws IOException if the JSON string is invalid with respect to ProductInCatalogPatchAction
  */
  public static ProductInCatalogPatchAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductInCatalogPatchAction.class);
  }

 /**
  * Convert an instance of ProductInCatalogPatchAction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

