/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * TagNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TagNode implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TAG_NAME = "tagName";
  @SerializedName(SERIALIZED_NAME_TAG_NAME)
  private String tagName;

  public static final String SERIALIZED_NAME_TAG_PATH = "tagPath";
  @SerializedName(SERIALIZED_NAME_TAG_PATH)
  private String tagPath;

  public static final String SERIALIZED_NAME_TAG_CODE = "tagCode";
  @SerializedName(SERIALIZED_NAME_TAG_CODE)
  private String tagCode;

  public static final String SERIALIZED_NAME_IS_ROOT = "isRoot";
  @SerializedName(SERIALIZED_NAME_IS_ROOT)
  private Boolean isRoot;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<TagNode> children = null;

  public TagNode() {
  }

  public TagNode tagName(String tagName) {
    
    this.tagName = tagName;
    return this;
  }

   /**
   * Get tagName
   * @return tagName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagName() {
    return tagName;
  }


  public void setTagName(String tagName) {
    this.tagName = tagName;
  }


  public TagNode tagPath(String tagPath) {
    
    this.tagPath = tagPath;
    return this;
  }

   /**
   * Get tagPath
   * @return tagPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagPath() {
    return tagPath;
  }


  public void setTagPath(String tagPath) {
    this.tagPath = tagPath;
  }


  public TagNode tagCode(String tagCode) {
    
    this.tagCode = tagCode;
    return this;
  }

   /**
   * Get tagCode
   * @return tagCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagCode() {
    return tagCode;
  }


  public void setTagCode(String tagCode) {
    this.tagCode = tagCode;
  }


  public TagNode isRoot(Boolean isRoot) {
    
    this.isRoot = isRoot;
    return this;
  }

   /**
   * Get isRoot
   * @return isRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsRoot() {
    return isRoot;
  }


  public void setIsRoot(Boolean isRoot) {
    this.isRoot = isRoot;
  }


  public TagNode children(List<TagNode> children) {
    
    this.children = children;
    return this;
  }

  public TagNode addChildrenItem(TagNode childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TagNode> getChildren() {
    return children;
  }


  public void setChildren(List<TagNode> children) {
    this.children = children;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagNode tagNode = (TagNode) o;
    return Objects.equals(this.tagName, tagNode.tagName) &&
        Objects.equals(this.tagPath, tagNode.tagPath) &&
        Objects.equals(this.tagCode, tagNode.tagCode) &&
        Objects.equals(this.isRoot, tagNode.isRoot) &&
        Objects.equals(this.children, tagNode.children);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagName, tagPath, tagCode, isRoot, children);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagNode {\n");
    sb.append("    tagName: ").append(toIndentedString(tagName)).append("\n");
    sb.append("    tagPath: ").append(toIndentedString(tagPath)).append("\n");
    sb.append("    tagCode: ").append(toIndentedString(tagCode)).append("\n");
    sb.append("    isRoot: ").append(toIndentedString(isRoot)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tagName");
    openapiFields.add("tagPath");
    openapiFields.add("tagCode");
    openapiFields.add("isRoot");
    openapiFields.add("children");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TagNode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TagNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagNode is not found in the empty JSON string", TagNode.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!TagNode.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagNode` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("tagName") != null && !jsonObj.get("tagName").isJsonNull()) && !jsonObj.get("tagName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagName").toString()));
      }
      if ((jsonObj.get("tagPath") != null && !jsonObj.get("tagPath").isJsonNull()) && !jsonObj.get("tagPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagPath").toString()));
      }
      if ((jsonObj.get("tagCode") != null && !jsonObj.get("tagCode").isJsonNull()) && !jsonObj.get("tagCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagCode").toString()));
      }
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            TagNode.validateJsonObject(jsonArraychildren.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagNode.class));

       return (TypeAdapter<T>) new TypeAdapter<TagNode>() {
           @Override
           public void write(JsonWriter out, TagNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagNode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TagNode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TagNode
  * @throws IOException if the JSON string is invalid with respect to TagNode
  */
  public static TagNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagNode.class);
  }

 /**
  * Convert an instance of TagNode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

