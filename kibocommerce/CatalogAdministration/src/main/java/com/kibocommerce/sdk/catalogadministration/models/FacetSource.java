/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FacetSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FacetSource implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_ALLOWS_RANGE_QUERY = "allowsRangeQuery";
  @SerializedName(SERIALIZED_NAME_ALLOWS_RANGE_QUERY)
  private Boolean allowsRangeQuery;

  public FacetSource() {
  }

  public FacetSource id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Name of field, or FQN of attribute
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of field, or FQN of attribute")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public FacetSource type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of source field used by the facet. Allowable values are: Element, Attribute.   Must be a valid value for DataType defined in FacetFieldTypeConst.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of source field used by the facet. Allowable values are: Element, Attribute.   Must be a valid value for DataType defined in FacetFieldTypeConst.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public FacetSource name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Read-only system-generated label for the source field.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Read-only system-generated label for the source field.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FacetSource dataType(String dataType) {
    
    this.dataType = dataType;
    return this;
  }

   /**
   * Read-only system-generated DataType of the Attribute or Element source field. Will be valid value for DataType defined in DataTypeConst.
   * @return dataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Read-only system-generated DataType of the Attribute or Element source field. Will be valid value for DataType defined in DataTypeConst.")

  public String getDataType() {
    return dataType;
  }


  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public FacetSource allowsRangeQuery(Boolean allowsRangeQuery) {
    
    this.allowsRangeQuery = allowsRangeQuery;
    return this;
  }

   /**
   * Read-only system-generated indicator of whether the source field supports RangeQuery type facets.
   * @return allowsRangeQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Read-only system-generated indicator of whether the source field supports RangeQuery type facets.")

  public Boolean getAllowsRangeQuery() {
    return allowsRangeQuery;
  }


  public void setAllowsRangeQuery(Boolean allowsRangeQuery) {
    this.allowsRangeQuery = allowsRangeQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacetSource facetSource = (FacetSource) o;
    return Objects.equals(this.id, facetSource.id) &&
        Objects.equals(this.type, facetSource.type) &&
        Objects.equals(this.name, facetSource.name) &&
        Objects.equals(this.dataType, facetSource.dataType) &&
        Objects.equals(this.allowsRangeQuery, facetSource.allowsRangeQuery);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, dataType, allowsRangeQuery);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacetSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    allowsRangeQuery: ").append(toIndentedString(allowsRangeQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("dataType");
    openapiFields.add("allowsRangeQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FacetSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FacetSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacetSource is not found in the empty JSON string", FacetSource.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FacetSource.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacetSource` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacetSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacetSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacetSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacetSource.class));

       return (TypeAdapter<T>) new TypeAdapter<FacetSource>() {
           @Override
           public void write(JsonWriter out, FacetSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacetSource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FacetSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FacetSource
  * @throws IOException if the JSON string is invalid with respect to FacetSource
  */
  public static FacetSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacetSource.class);
  }

 /**
  * Convert an instance of FacetSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

