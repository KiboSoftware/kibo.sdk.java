/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsFacet;
import com.kibocommerce.sdk.catalogadministration.models.FacetCollection;
import com.kibocommerce.sdk.catalogadministration.models.FacetSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FacetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public FacetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public FacetsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public FacetsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public FacetsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFacet
     * @param catalogAdminsFacet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFacetCall(CatalogAdminsFacet catalogAdminsFacet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsFacet;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFacetValidateBeforeCall(CatalogAdminsFacet catalogAdminsFacet, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addFacetCall(catalogAdminsFacet, _callback);
        return localVarCall;

    }

    /**
     * Add facet
     * Adds a new Facet to a category in a catalog.
     * @param catalogAdminsFacet  (optional)
     * @return CatalogAdminsFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsFacet addFacet(CatalogAdminsFacet catalogAdminsFacet) throws ApiException {
        ApiResponse<CatalogAdminsFacet> localVarResp = addFacetWithHttpInfo(catalogAdminsFacet);
        return localVarResp.getData();
    }

    /**
     * Add facet
     * Adds a new Facet to a category in a catalog.
     * @param catalogAdminsFacet  (optional)
     * @return ApiResponse&lt;CatalogAdminsFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsFacet> addFacetWithHttpInfo(CatalogAdminsFacet catalogAdminsFacet) throws ApiException {
        okhttp3.Call localVarCall = addFacetValidateBeforeCall(catalogAdminsFacet, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add facet (asynchronously)
     * Adds a new Facet to a category in a catalog.
     * @param catalogAdminsFacet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFacetAsync(CatalogAdminsFacet catalogAdminsFacet, final ApiCallback<CatalogAdminsFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFacetValidateBeforeCall(catalogAdminsFacet, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFacetById
     * @param facetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFacetByIdCall(Integer facetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/{facetId}"
            .replaceAll("\\{" + "facetId" + "\\}", localVarApiClient.escapeString(facetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFacetByIdValidateBeforeCall(Integer facetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'facetId' is set
        if (facetId == null) {
            throw new ApiException("Missing the required parameter 'facetId' when calling deleteFacetById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFacetByIdCall(facetId, _callback);
        return localVarCall;

    }

    /**
     * Delete facet
     * Deletes the Facet definition from the store.
     * @param facetId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFacetById(Integer facetId) throws ApiException {
        deleteFacetByIdWithHttpInfo(facetId);
    }

    /**
     * Delete facet
     * Deletes the Facet definition from the store.
     * @param facetId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFacetByIdWithHttpInfo(Integer facetId) throws ApiException {
        okhttp3.Call localVarCall = deleteFacetByIdValidateBeforeCall(facetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete facet (asynchronously)
     * Deletes the Facet definition from the store.
     * @param facetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFacetByIdAsync(Integer facetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFacetByIdValidateBeforeCall(facetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacet
     * @param facetId  (required)
     * @param validate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCall(Integer facetId, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/{facetId}"
            .replaceAll("\\{" + "facetId" + "\\}", localVarApiClient.escapeString(facetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacetValidateBeforeCall(Integer facetId, Boolean validate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'facetId' is set
        if (facetId == null) {
            throw new ApiException("Missing the required parameter 'facetId' when calling getFacet(Async)");
        }
        

        okhttp3.Call localVarCall = getFacetCall(facetId, validate, _callback);
        return localVarCall;

    }

    /**
     * Get facet
     * Retrieves the details of a Facet Definition
     * @param facetId  (required)
     * @param validate  (optional)
     * @return CatalogAdminsFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsFacet getFacet(Integer facetId, Boolean validate) throws ApiException {
        ApiResponse<CatalogAdminsFacet> localVarResp = getFacetWithHttpInfo(facetId, validate);
        return localVarResp.getData();
    }

    /**
     * Get facet
     * Retrieves the details of a Facet Definition
     * @param facetId  (required)
     * @param validate  (optional)
     * @return ApiResponse&lt;CatalogAdminsFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsFacet> getFacetWithHttpInfo(Integer facetId, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = getFacetValidateBeforeCall(facetId, validate, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get facet (asynchronously)
     * Retrieves the details of a Facet Definition
     * @param facetId  (required)
     * @param validate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetAsync(Integer facetId, Boolean validate, final ApiCallback<CatalogAdminsFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacetValidateBeforeCall(facetId, validate, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacetCategoryList
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCategoryListCall(Integer categoryId, String categoryCode, Boolean includeAvailable, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        if (includeAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAvailable", includeAvailable));
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacetCategoryListValidateBeforeCall(Integer categoryId, String categoryCode, Boolean includeAvailable, Boolean validate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getFacetCategoryListCall(categoryId, categoryCode, includeAvailable, validate, _callback);
        return localVarCall;

    }

    /**
     * Get facet category list
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @return FacetSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FacetSet getFacetCategoryList(Integer categoryId, String categoryCode, Boolean includeAvailable, Boolean validate) throws ApiException {
        ApiResponse<FacetSet> localVarResp = getFacetCategoryListWithHttpInfo(categoryId, categoryCode, includeAvailable, validate);
        return localVarResp.getData();
    }

    /**
     * Get facet category list
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @return ApiResponse&lt;FacetSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacetSet> getFacetCategoryListWithHttpInfo(Integer categoryId, String categoryCode, Boolean includeAvailable, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = getFacetCategoryListValidateBeforeCall(categoryId, categoryCode, includeAvailable, validate, null);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get facet category list (asynchronously)
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCategoryListAsync(Integer categoryId, String categoryCode, Boolean includeAvailable, Boolean validate, final ApiCallback<FacetSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacetCategoryListValidateBeforeCall(categoryId, categoryCode, includeAvailable, validate, _callback);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacetCategoryListLegacy
     * @param categoryId  (required)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCategoryListLegacyCall(Integer categoryId, Boolean includeAvailable, Boolean validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/category/{categoryId}"
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAvailable", includeAvailable));
        }

        if (validate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate", validate));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacetCategoryListLegacyValidateBeforeCall(Integer categoryId, Boolean includeAvailable, Boolean validate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getFacetCategoryListLegacy(Async)");
        }
        

        okhttp3.Call localVarCall = getFacetCategoryListLegacyCall(categoryId, includeAvailable, validate, _callback);
        return localVarCall;

    }

    /**
     * Get facet category list (legacy)
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (required)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @return FacetSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FacetSet getFacetCategoryListLegacy(Integer categoryId, Boolean includeAvailable, Boolean validate) throws ApiException {
        ApiResponse<FacetSet> localVarResp = getFacetCategoryListLegacyWithHttpInfo(categoryId, includeAvailable, validate);
        return localVarResp.getData();
    }

    /**
     * Get facet category list (legacy)
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (required)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @return ApiResponse&lt;FacetSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacetSet> getFacetCategoryListLegacyWithHttpInfo(Integer categoryId, Boolean includeAvailable, Boolean validate) throws ApiException {
        okhttp3.Call localVarCall = getFacetCategoryListLegacyValidateBeforeCall(categoryId, includeAvailable, validate, null);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get facet category list (legacy) (asynchronously)
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * @param categoryId  (required)
     * @param includeAvailable  (optional)
     * @param validate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCategoryListLegacyAsync(Integer categoryId, Boolean includeAvailable, Boolean validate, final ApiCallback<FacetSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacetCategoryListLegacyValidateBeforeCall(categoryId, includeAvailable, validate, _callback);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getFacetsCall(_callback);
        return localVarCall;

    }

    /**
     * Get facets
     * Retrieves the list of Facet Definition
     * @return FacetCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FacetCollection getFacets() throws ApiException {
        ApiResponse<FacetCollection> localVarResp = getFacetsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get facets
     * Retrieves the list of Facet Definition
     * @return ApiResponse&lt;FacetCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacetCollection> getFacetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFacetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<FacetCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get facets (asynchronously)
     * Retrieves the list of Facet Definition
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetsAsync(final ApiCallback<FacetCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<FacetCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFacet
     * @param facetId  (required)
     * @param catalogAdminsFacet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetCall(Integer facetId, CatalogAdminsFacet catalogAdminsFacet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsFacet;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/{facetId}"
            .replaceAll("\\{" + "facetId" + "\\}", localVarApiClient.escapeString(facetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFacetValidateBeforeCall(Integer facetId, CatalogAdminsFacet catalogAdminsFacet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'facetId' is set
        if (facetId == null) {
            throw new ApiException("Missing the required parameter 'facetId' when calling updateFacet(Async)");
        }
        

        okhttp3.Call localVarCall = updateFacetCall(facetId, catalogAdminsFacet, _callback);
        return localVarCall;

    }

    /**
     * Update facet
     * Modifies a Facet definition.
     * @param facetId  (required)
     * @param catalogAdminsFacet  (optional)
     * @return CatalogAdminsFacet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsFacet updateFacet(Integer facetId, CatalogAdminsFacet catalogAdminsFacet) throws ApiException {
        ApiResponse<CatalogAdminsFacet> localVarResp = updateFacetWithHttpInfo(facetId, catalogAdminsFacet);
        return localVarResp.getData();
    }

    /**
     * Update facet
     * Modifies a Facet definition.
     * @param facetId  (required)
     * @param catalogAdminsFacet  (optional)
     * @return ApiResponse&lt;CatalogAdminsFacet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsFacet> updateFacetWithHttpInfo(Integer facetId, CatalogAdminsFacet catalogAdminsFacet) throws ApiException {
        okhttp3.Call localVarCall = updateFacetValidateBeforeCall(facetId, catalogAdminsFacet, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update facet (asynchronously)
     * Modifies a Facet definition.
     * @param facetId  (required)
     * @param catalogAdminsFacet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetAsync(Integer facetId, CatalogAdminsFacet catalogAdminsFacet, final ApiCallback<CatalogAdminsFacet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFacetValidateBeforeCall(facetId, catalogAdminsFacet, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsFacet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFacetSet
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param facetSet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetSetCall(Integer categoryId, String categoryCode, FacetSet facetSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = facetSet;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/facets/set/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (categoryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryCode", categoryCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFacetSetValidateBeforeCall(Integer categoryId, String categoryCode, FacetSet facetSet, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateFacetSetCall(categoryId, categoryCode, facetSet, _callback);
        return localVarCall;

    }

    /**
     * Update facet
     * Modifies a Facet definition.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param facetSet  (optional)
     * @return FacetSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FacetSet updateFacetSet(Integer categoryId, String categoryCode, FacetSet facetSet) throws ApiException {
        ApiResponse<FacetSet> localVarResp = updateFacetSetWithHttpInfo(categoryId, categoryCode, facetSet);
        return localVarResp.getData();
    }

    /**
     * Update facet
     * Modifies a Facet definition.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param facetSet  (optional)
     * @return ApiResponse&lt;FacetSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacetSet> updateFacetSetWithHttpInfo(Integer categoryId, String categoryCode, FacetSet facetSet) throws ApiException {
        okhttp3.Call localVarCall = updateFacetSetValidateBeforeCall(categoryId, categoryCode, facetSet, null);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update facet (asynchronously)
     * Modifies a Facet definition.
     * @param categoryId  (optional)
     * @param categoryCode  (optional)
     * @param facetSet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetSetAsync(Integer categoryId, String categoryCode, FacetSet facetSet, final ApiCallback<FacetSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFacetSetValidateBeforeCall(categoryId, categoryCode, facetSet, _callback);
        Type localVarReturnType = new TypeToken<FacetSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public FacetsApi build() {
            return new FacetsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
