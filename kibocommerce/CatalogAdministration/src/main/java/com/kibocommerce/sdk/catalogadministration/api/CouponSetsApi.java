/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.AssignedDiscount;
import com.kibocommerce.sdk.catalogadministration.models.Coupon;
import com.kibocommerce.sdk.catalogadministration.models.CouponCollection;
import com.kibocommerce.sdk.catalogadministration.models.CouponSet;
import com.kibocommerce.sdk.catalogadministration.models.CouponSetCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CouponSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CouponSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CouponSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CouponSetsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CouponSetsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CouponSetsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCouponSet
     * @param couponSet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCouponSetCall(CouponSet couponSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = couponSet;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCouponSetValidateBeforeCall(CouponSet couponSet, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCouponSetCall(couponSet, _callback);
        return localVarCall;

    }

    /**
     * Add coupon set
     * Adds a single CouponSet
     * @param couponSet  (optional)
     * @return CouponSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CouponSet addCouponSet(CouponSet couponSet) throws ApiException {
        ApiResponse<CouponSet> localVarResp = addCouponSetWithHttpInfo(couponSet);
        return localVarResp.getData();
    }

    /**
     * Add coupon set
     * Adds a single CouponSet
     * @param couponSet  (optional)
     * @return ApiResponse&lt;CouponSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponSet> addCouponSetWithHttpInfo(CouponSet couponSet) throws ApiException {
        okhttp3.Call localVarCall = addCouponSetValidateBeforeCall(couponSet, null);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add coupon set (asynchronously)
     * Adds a single CouponSet
     * @param couponSet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCouponSetAsync(CouponSet couponSet, final ApiCallback<CouponSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCouponSetValidateBeforeCall(couponSet, _callback);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCoupons
     * @param couponSetCode  (required)
     * @param coupon  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCouponsCall(String couponSetCode, List<Coupon> coupon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coupon;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCouponsValidateBeforeCall(String couponSetCode, List<Coupon> coupon, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling addCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = addCouponsCall(couponSetCode, coupon, _callback);
        return localVarCall;

    }

    /**
     * Add coupons
     * 
     * @param couponSetCode  (required)
     * @param coupon  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addCoupons(String couponSetCode, List<Coupon> coupon) throws ApiException {
        addCouponsWithHttpInfo(couponSetCode, coupon);
    }

    /**
     * Add coupons
     * 
     * @param couponSetCode  (required)
     * @param coupon  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCouponsWithHttpInfo(String couponSetCode, List<Coupon> coupon) throws ApiException {
        okhttp3.Call localVarCall = addCouponsValidateBeforeCall(couponSetCode, coupon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add coupons (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param coupon  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCouponsAsync(String couponSetCode, List<Coupon> coupon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCouponsValidateBeforeCall(couponSetCode, coupon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignDiscount
     * @param couponSetCode  (required)
     * @param assignedDiscount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignDiscountCall(String couponSetCode, AssignedDiscount assignedDiscount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignedDiscount;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignDiscountValidateBeforeCall(String couponSetCode, AssignedDiscount assignedDiscount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling assignDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = assignDiscountCall(couponSetCode, assignedDiscount, _callback);
        return localVarCall;

    }

    /**
     * Assign discount
     * 
     * @param couponSetCode  (required)
     * @param assignedDiscount  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void assignDiscount(String couponSetCode, AssignedDiscount assignedDiscount) throws ApiException {
        assignDiscountWithHttpInfo(couponSetCode, assignedDiscount);
    }

    /**
     * Assign discount
     * 
     * @param couponSetCode  (required)
     * @param assignedDiscount  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assignDiscountWithHttpInfo(String couponSetCode, AssignedDiscount assignedDiscount) throws ApiException {
        okhttp3.Call localVarCall = assignDiscountValidateBeforeCall(couponSetCode, assignedDiscount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Assign discount (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param assignedDiscount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignDiscountAsync(String couponSetCode, AssignedDiscount assignedDiscount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignDiscountValidateBeforeCall(couponSetCode, assignedDiscount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCoupon
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponCall(String couponSetCode, String couponCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCouponValidateBeforeCall(String couponSetCode, String couponCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling deleteCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling deleteCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCouponCall(couponSetCode, couponCode, _callback);
        return localVarCall;

    }

    /**
     * Delete coupon
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCoupon(String couponSetCode, String couponCode) throws ApiException {
        deleteCouponWithHttpInfo(couponSetCode, couponCode);
    }

    /**
     * Delete coupon
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCouponWithHttpInfo(String couponSetCode, String couponCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCouponValidateBeforeCall(couponSetCode, couponCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete coupon (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponAsync(String couponSetCode, String couponCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCouponValidateBeforeCall(couponSetCode, couponCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCouponSet
     * @param couponSetCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponSetCall(String couponSetCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCouponSetValidateBeforeCall(String couponSetCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling deleteCouponSet(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCouponSetCall(couponSetCode, _callback);
        return localVarCall;

    }

    /**
     * Delete coupon set
     * 
     * @param couponSetCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCouponSet(String couponSetCode) throws ApiException {
        deleteCouponSetWithHttpInfo(couponSetCode);
    }

    /**
     * Delete coupon set
     * 
     * @param couponSetCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCouponSetWithHttpInfo(String couponSetCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCouponSetValidateBeforeCall(couponSetCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete coupon set (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponSetAsync(String couponSetCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCouponSetValidateBeforeCall(couponSetCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCoupons
     * @param couponSetCode  (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponsCall(String couponSetCode, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/remove"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCouponsValidateBeforeCall(String couponSetCode, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling deleteCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCouponsCall(couponSetCode, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Delete coupons
     * 
     * @param couponSetCode  (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCoupons(String couponSetCode, List<String> requestBody) throws ApiException {
        deleteCouponsWithHttpInfo(couponSetCode, requestBody);
    }

    /**
     * Delete coupons
     * 
     * @param couponSetCode  (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCouponsWithHttpInfo(String couponSetCode, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteCouponsValidateBeforeCall(couponSetCode, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete coupons (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCouponsAsync(String couponSetCode, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCouponsValidateBeforeCall(couponSetCode, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssignedDiscounts
     * @param couponSetCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssignedDiscountsCall(String couponSetCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssignedDiscountsValidateBeforeCall(String couponSetCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling getAssignedDiscounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAssignedDiscountsCall(couponSetCode, _callback);
        return localVarCall;

    }

    /**
     * Get assigned discounts
     * 
     * @param couponSetCode  (required)
     * @return List&lt;AssignedDiscount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AssignedDiscount> getAssignedDiscounts(String couponSetCode) throws ApiException {
        ApiResponse<List<AssignedDiscount>> localVarResp = getAssignedDiscountsWithHttpInfo(couponSetCode);
        return localVarResp.getData();
    }

    /**
     * Get assigned discounts
     * 
     * @param couponSetCode  (required)
     * @return ApiResponse&lt;List&lt;AssignedDiscount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AssignedDiscount>> getAssignedDiscountsWithHttpInfo(String couponSetCode) throws ApiException {
        okhttp3.Call localVarCall = getAssignedDiscountsValidateBeforeCall(couponSetCode, null);
        Type localVarReturnType = new TypeToken<List<AssignedDiscount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assigned discounts (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAssignedDiscountsAsync(String couponSetCode, final ApiCallback<List<AssignedDiscount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssignedDiscountsValidateBeforeCall(couponSetCode, _callback);
        Type localVarReturnType = new TypeToken<List<AssignedDiscount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoupon
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param includeCounts  (optional, default to false)
     * @param responseGroups  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponCall(String couponSetCode, String couponCode, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCounts", includeCounts));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponValidateBeforeCall(String couponSetCode, String couponCode, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling getCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling getCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponCall(couponSetCode, couponCode, includeCounts, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get coupon
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param includeCounts  (optional, default to false)
     * @param responseGroups  (optional)
     * @return Coupon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Coupon getCoupon(String couponSetCode, String couponCode, Boolean includeCounts, String responseGroups) throws ApiException {
        ApiResponse<Coupon> localVarResp = getCouponWithHttpInfo(couponSetCode, couponCode, includeCounts, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get coupon
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param includeCounts  (optional, default to false)
     * @param responseGroups  (optional)
     * @return ApiResponse&lt;Coupon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Coupon> getCouponWithHttpInfo(String couponSetCode, String couponCode, Boolean includeCounts, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCouponValidateBeforeCall(couponSetCode, couponCode, includeCounts, responseGroups, null);
        Type localVarReturnType = new TypeToken<Coupon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get coupon (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param couponCode  (required)
     * @param includeCounts  (optional, default to false)
     * @param responseGroups  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponAsync(String couponSetCode, String couponCode, Boolean includeCounts, String responseGroups, final ApiCallback<Coupon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponValidateBeforeCall(couponSetCode, couponCode, includeCounts, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<Coupon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCouponSet
     * @param couponSetCode CouponSetCode for the requested CouponSet (required)
     * @param includeCounts Include the redemption counts and coupon counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; includes the number of redemptions, coupon codes, and assigned discounts. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSetCall(String couponSetCode, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCounts", includeCounts));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponSetValidateBeforeCall(String couponSetCode, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling getCouponSet(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponSetCall(couponSetCode, includeCounts, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get coupon set
     * Returns a single CouponSet
     * @param couponSetCode CouponSetCode for the requested CouponSet (required)
     * @param includeCounts Include the redemption counts and coupon counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; includes the number of redemptions, coupon codes, and assigned discounts. (optional)
     * @return CouponSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CouponSet getCouponSet(String couponSetCode, Boolean includeCounts, String responseGroups) throws ApiException {
        ApiResponse<CouponSet> localVarResp = getCouponSetWithHttpInfo(couponSetCode, includeCounts, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get coupon set
     * Returns a single CouponSet
     * @param couponSetCode CouponSetCode for the requested CouponSet (required)
     * @param includeCounts Include the redemption counts and coupon counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; includes the number of redemptions, coupon codes, and assigned discounts. (optional)
     * @return ApiResponse&lt;CouponSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponSet> getCouponSetWithHttpInfo(String couponSetCode, Boolean includeCounts, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCouponSetValidateBeforeCall(couponSetCode, includeCounts, responseGroups, null);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get coupon set (asynchronously)
     * Returns a single CouponSet
     * @param couponSetCode CouponSetCode for the requested CouponSet (required)
     * @param includeCounts Include the redemption counts and coupon counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; includes the number of redemptions, coupon codes, and assigned discounts. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSetAsync(String couponSetCode, Boolean includeCounts, String responseGroups, final ApiCallback<CouponSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponSetValidateBeforeCall(couponSetCode, includeCounts, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCouponSets
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Include coupon and redemption counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; returns discount and couponCode counts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSetsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCounts", includeCounts));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponSetsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCouponSetsCall(startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get coupon sets
     * Returns a paged collection of CouponSets
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Include coupon and redemption counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; returns discount and couponCode counts (optional)
     * @return CouponSetCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CouponSetCollection getCouponSets(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups) throws ApiException {
        ApiResponse<CouponSetCollection> localVarResp = getCouponSetsWithHttpInfo(startIndex, pageSize, sortBy, filter, includeCounts, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get coupon sets
     * Returns a paged collection of CouponSets
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Include coupon and redemption counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; returns discount and couponCode counts (optional)
     * @return ApiResponse&lt;CouponSetCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponSetCollection> getCouponSetsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCouponSetsValidateBeforeCall(startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, null);
        Type localVarReturnType = new TypeToken<CouponSetCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get coupon sets (asynchronously)
     * Returns a paged collection of CouponSets
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Include coupon and redemption counts (optional, default to false)
     * @param responseGroups \&quot;counts\&quot; returns discount and couponCode counts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponSetsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback<CouponSetCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponSetsValidateBeforeCall(startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CouponSetCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCoupons
     * @param couponSetCode  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Includes coupon redemption counts (optional, default to false)
     * @param responseGroups counts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponsCall(String couponSetCode, Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (includeCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCounts", includeCounts));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCouponsValidateBeforeCall(String couponSetCode, Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling getCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = getCouponsCall(couponSetCode, startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get coupons
     * Returns a paged collection of Coupons
     * @param couponSetCode  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Includes coupon redemption counts (optional, default to false)
     * @param responseGroups counts (optional)
     * @return CouponCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CouponCollection getCoupons(String couponSetCode, Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups) throws ApiException {
        ApiResponse<CouponCollection> localVarResp = getCouponsWithHttpInfo(couponSetCode, startIndex, pageSize, sortBy, filter, includeCounts, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get coupons
     * Returns a paged collection of Coupons
     * @param couponSetCode  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Includes coupon redemption counts (optional, default to false)
     * @param responseGroups counts (optional)
     * @return ApiResponse&lt;CouponCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponCollection> getCouponsWithHttpInfo(String couponSetCode, Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getCouponsValidateBeforeCall(couponSetCode, startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, null);
        Type localVarReturnType = new TypeToken<CouponCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get coupons (asynchronously)
     * Returns a paged collection of Coupons
     * @param couponSetCode  (required)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param includeCounts Includes coupon redemption counts (optional, default to false)
     * @param responseGroups counts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCouponsAsync(String couponSetCode, Integer startIndex, Integer pageSize, String sortBy, String filter, Boolean includeCounts, String responseGroups, final ApiCallback<CouponCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCouponsValidateBeforeCall(couponSetCode, startIndex, pageSize, sortBy, filter, includeCounts, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<CouponCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUniqueCouponSetCode
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueCouponSetCodeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/unique-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUniqueCouponSetCodeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUniqueCouponSetCodeCall(_callback);
        return localVarCall;

    }

    /**
     * Get unique coupon set code
     * Returns a random 4 character code that is unique as a coupon set code.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String getUniqueCouponSetCode() throws ApiException {
        ApiResponse<String> localVarResp = getUniqueCouponSetCodeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get unique coupon set code
     * Returns a random 4 character code that is unique as a coupon set code.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getUniqueCouponSetCodeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUniqueCouponSetCodeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unique coupon set code (asynchronously)
     * Returns a random 4 character code that is unique as a coupon set code.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueCouponSetCodeAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUniqueCouponSetCodeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unAssignDiscount
     * @param couponSetCode  (required)
     * @param discountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unAssignDiscountCall(String couponSetCode, Integer discountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts/{discountId}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()))
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unAssignDiscountValidateBeforeCall(String couponSetCode, Integer discountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling unAssignDiscount(Async)");
        }
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling unAssignDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = unAssignDiscountCall(couponSetCode, discountId, _callback);
        return localVarCall;

    }

    /**
     * UnAssign discount
     * 
     * @param couponSetCode  (required)
     * @param discountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void unAssignDiscount(String couponSetCode, Integer discountId) throws ApiException {
        unAssignDiscountWithHttpInfo(couponSetCode, discountId);
    }

    /**
     * UnAssign discount
     * 
     * @param couponSetCode  (required)
     * @param discountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unAssignDiscountWithHttpInfo(String couponSetCode, Integer discountId) throws ApiException {
        okhttp3.Call localVarCall = unAssignDiscountValidateBeforeCall(couponSetCode, discountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * UnAssign discount (asynchronously)
     * 
     * @param couponSetCode  (required)
     * @param discountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unAssignDiscountAsync(String couponSetCode, Integer discountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unAssignDiscountValidateBeforeCall(couponSetCode, discountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCouponSet
     * @param couponSetCode  (required)
     * @param couponSet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCouponSetCall(String couponSetCode, CouponSet couponSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = couponSet;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/{couponSetCode}"
            .replaceAll("\\{" + "couponSetCode" + "\\}", localVarApiClient.escapeString(couponSetCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCouponSetValidateBeforeCall(String couponSetCode, CouponSet couponSet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'couponSetCode' is set
        if (couponSetCode == null) {
            throw new ApiException("Missing the required parameter 'couponSetCode' when calling updateCouponSet(Async)");
        }
        

        okhttp3.Call localVarCall = updateCouponSetCall(couponSetCode, couponSet, _callback);
        return localVarCall;

    }

    /**
     * Update coupon set
     * Update a CouponSet.     You can not update the Code or ID once the set is created.
     * @param couponSetCode  (required)
     * @param couponSet  (optional)
     * @return CouponSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CouponSet updateCouponSet(String couponSetCode, CouponSet couponSet) throws ApiException {
        ApiResponse<CouponSet> localVarResp = updateCouponSetWithHttpInfo(couponSetCode, couponSet);
        return localVarResp.getData();
    }

    /**
     * Update coupon set
     * Update a CouponSet.     You can not update the Code or ID once the set is created.
     * @param couponSetCode  (required)
     * @param couponSet  (optional)
     * @return ApiResponse&lt;CouponSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CouponSet> updateCouponSetWithHttpInfo(String couponSetCode, CouponSet couponSet) throws ApiException {
        okhttp3.Call localVarCall = updateCouponSetValidateBeforeCall(couponSetCode, couponSet, null);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update coupon set (asynchronously)
     * Update a CouponSet.     You can not update the Code or ID once the set is created.
     * @param couponSetCode  (required)
     * @param couponSet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCouponSetAsync(String couponSetCode, CouponSet couponSet, final ApiCallback<CouponSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCouponSetValidateBeforeCall(couponSetCode, couponSet, _callback);
        Type localVarReturnType = new TypeToken<CouponSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateUniqueCouponSetCode
     * @param code  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateUniqueCouponSetCodeCall(String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/couponsets/validate-unique-code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateUniqueCouponSetCodeValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validateUniqueCouponSetCodeCall(code, _callback);
        return localVarCall;

    }

    /**
     * Validate unique coupon set code
     *  Tests code for uniqueness and validity.
     * @param code  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void validateUniqueCouponSetCode(String code) throws ApiException {
        validateUniqueCouponSetCodeWithHttpInfo(code);
    }

    /**
     * Validate unique coupon set code
     *  Tests code for uniqueness and validity.
     * @param code  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> validateUniqueCouponSetCodeWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = validateUniqueCouponSetCodeValidateBeforeCall(code, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Validate unique coupon set code (asynchronously)
     *  Tests code for uniqueness and validity.
     * @param code  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateUniqueCouponSetCodeAsync(String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateUniqueCouponSetCodeValidateBeforeCall(code, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CouponSetsApi build() {
            return new CouponSetsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
