/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.appdevelopment.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.appdevelopment.models.ApplicationVersionsCollection;
import com.kibocommerce.sdk.appdevelopment.models.FileMetadata;
import com.kibocommerce.sdk.appdevelopment.models.FolderMetadata;
import com.kibocommerce.sdk.appdevelopment.models.PackageNamesCollection;
import com.kibocommerce.sdk.appdevelopment.models.RenameInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PublicApplicationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public PublicApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApplicationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public PublicApplicationApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public PublicApplicationApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public PublicApplicationApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePackageFile
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageFileCall(String applicationKey, String filepath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/packages/{applicationKey}/files/{filepath}"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()))
            .replaceAll("\\{" + "filepath" + "\\}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePackageFileValidateBeforeCall(String applicationKey, String filepath, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling deletePackageFile(Async)");
        }
        
        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling deletePackageFile(Async)");
        }
        

        okhttp3.Call localVarCall = deletePackageFileCall(applicationKey, filepath, _callback);
        return localVarCall;

    }

    /**
     * Delete Package File
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePackageFile(String applicationKey, String filepath) throws ApiException {
        deletePackageFileWithHttpInfo(applicationKey, filepath);
    }

    /**
     * Delete Package File
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePackageFileWithHttpInfo(String applicationKey, String filepath) throws ApiException {
        okhttp3.Call localVarCall = deletePackageFileValidateBeforeCall(applicationKey, filepath, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Package File (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageFileAsync(String applicationKey, String filepath, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePackageFileValidateBeforeCall(applicationKey, filepath, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppPackageNames
     * @param applicationKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppPackageNamesCall(String applicationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/applications/{applicationKey}/packagenames"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppPackageNamesValidateBeforeCall(String applicationKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling getAppPackageNames(Async)");
        }
        

        okhttp3.Call localVarCall = getAppPackageNamesCall(applicationKey, _callback);
        return localVarCall;

    }

    /**
     * Get App Package Names
     * 
     * @param applicationKey  (required)
     * @return PackageNamesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PackageNamesCollection getAppPackageNames(String applicationKey) throws ApiException {
        ApiResponse<PackageNamesCollection> localVarResp = getAppPackageNamesWithHttpInfo(applicationKey);
        return localVarResp.getData();
    }

    /**
     * Get App Package Names
     * 
     * @param applicationKey  (required)
     * @return ApiResponse&lt;PackageNamesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageNamesCollection> getAppPackageNamesWithHttpInfo(String applicationKey) throws ApiException {
        okhttp3.Call localVarCall = getAppPackageNamesValidateBeforeCall(applicationKey, null);
        Type localVarReturnType = new TypeToken<PackageNamesCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get App Package Names (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppPackageNamesAsync(String applicationKey, final ApiCallback<PackageNamesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppPackageNamesValidateBeforeCall(applicationKey, _callback);
        Type localVarReturnType = new TypeToken<PackageNamesCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppVersions
     * @param nsAndAppId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppVersionsCall(String nsAndAppId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/applications/versions/{nsAndAppId}"
            .replaceAll("\\{" + "nsAndAppId" + "\\}", localVarApiClient.escapeString(nsAndAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppVersionsValidateBeforeCall(String nsAndAppId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nsAndAppId' is set
        if (nsAndAppId == null) {
            throw new ApiException("Missing the required parameter 'nsAndAppId' when calling getAppVersions(Async)");
        }
        

        okhttp3.Call localVarCall = getAppVersionsCall(nsAndAppId, _callback);
        return localVarCall;

    }

    /**
     * Get App Versions
     * 
     * @param nsAndAppId  (required)
     * @return ApplicationVersionsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationVersionsCollection getAppVersions(String nsAndAppId) throws ApiException {
        ApiResponse<ApplicationVersionsCollection> localVarResp = getAppVersionsWithHttpInfo(nsAndAppId);
        return localVarResp.getData();
    }

    /**
     * Get App Versions
     * 
     * @param nsAndAppId  (required)
     * @return ApiResponse&lt;ApplicationVersionsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationVersionsCollection> getAppVersionsWithHttpInfo(String nsAndAppId) throws ApiException {
        okhttp3.Call localVarCall = getAppVersionsValidateBeforeCall(nsAndAppId, null);
        Type localVarReturnType = new TypeToken<ApplicationVersionsCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get App Versions (asynchronously)
     * 
     * @param nsAndAppId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppVersionsAsync(String nsAndAppId, final ApiCallback<ApplicationVersionsCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppVersionsValidateBeforeCall(nsAndAppId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationVersionsCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageFileMetadata
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageFileMetadataCall(String applicationKey, String filepath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/packages/{applicationKey}/filemetadata/{filepath}"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()))
            .replaceAll("\\{" + "filepath" + "\\}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageFileMetadataValidateBeforeCall(String applicationKey, String filepath, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling getPackageFileMetadata(Async)");
        }
        
        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling getPackageFileMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageFileMetadataCall(applicationKey, filepath, _callback);
        return localVarCall;

    }

    /**
     * Get Package File Metadata
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @return FileMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FileMetadata getPackageFileMetadata(String applicationKey, String filepath) throws ApiException {
        ApiResponse<FileMetadata> localVarResp = getPackageFileMetadataWithHttpInfo(applicationKey, filepath);
        return localVarResp.getData();
    }

    /**
     * Get Package File Metadata
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @return ApiResponse&lt;FileMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileMetadata> getPackageFileMetadataWithHttpInfo(String applicationKey, String filepath) throws ApiException {
        okhttp3.Call localVarCall = getPackageFileMetadataValidateBeforeCall(applicationKey, filepath, null);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Package File Metadata (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageFileMetadataAsync(String applicationKey, String filepath, final ApiCallback<FileMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageFileMetadataValidateBeforeCall(applicationKey, filepath, _callback);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageMetadata
     * @param applicationKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageMetadataCall(String applicationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/packages/{applicationKey}/metadata"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageMetadataValidateBeforeCall(String applicationKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling getPackageMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageMetadataCall(applicationKey, _callback);
        return localVarCall;

    }

    /**
     * Get Package Metadata
     * 
     * @param applicationKey  (required)
     * @return FolderMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FolderMetadata getPackageMetadata(String applicationKey) throws ApiException {
        ApiResponse<FolderMetadata> localVarResp = getPackageMetadataWithHttpInfo(applicationKey);
        return localVarResp.getData();
    }

    /**
     * Get Package Metadata
     * 
     * @param applicationKey  (required)
     * @return ApiResponse&lt;FolderMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FolderMetadata> getPackageMetadataWithHttpInfo(String applicationKey) throws ApiException {
        okhttp3.Call localVarCall = getPackageMetadataValidateBeforeCall(applicationKey, null);
        Type localVarReturnType = new TypeToken<FolderMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Package Metadata (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageMetadataAsync(String applicationKey, final ApiCallback<FolderMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageMetadataValidateBeforeCall(applicationKey, _callback);
        Type localVarReturnType = new TypeToken<FolderMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renamePackageFile
     * @param applicationKey  (required)
     * @param renameInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renamePackageFileCall(String applicationKey, RenameInfo renameInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameInfo;

        // create path and map variables
        String localVarPath = "/platform/developer/packages/{applicationKey}/files_rename"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renamePackageFileValidateBeforeCall(String applicationKey, RenameInfo renameInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling renamePackageFile(Async)");
        }
        

        okhttp3.Call localVarCall = renamePackageFileCall(applicationKey, renameInfo, _callback);
        return localVarCall;

    }

    /**
     * Rename Package File
     * 
     * @param applicationKey  (required)
     * @param renameInfo  (optional)
     * @return FileMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FileMetadata renamePackageFile(String applicationKey, RenameInfo renameInfo) throws ApiException {
        ApiResponse<FileMetadata> localVarResp = renamePackageFileWithHttpInfo(applicationKey, renameInfo);
        return localVarResp.getData();
    }

    /**
     * Rename Package File
     * 
     * @param applicationKey  (required)
     * @param renameInfo  (optional)
     * @return ApiResponse&lt;FileMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileMetadata> renamePackageFileWithHttpInfo(String applicationKey, RenameInfo renameInfo) throws ApiException {
        okhttp3.Call localVarCall = renamePackageFileValidateBeforeCall(applicationKey, renameInfo, null);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename Package File (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param renameInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renamePackageFileAsync(String applicationKey, RenameInfo renameInfo, final ApiCallback<FileMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = renamePackageFileValidateBeforeCall(applicationKey, renameInfo, _callback);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertPackageFile
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param lastModifiedTime  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPackageFileCall(String applicationKey, String filepath, String lastModifiedTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/developer/packages/{applicationKey}/files/{filepath}"
            .replaceAll("\\{" + "applicationKey" + "\\}", localVarApiClient.escapeString(applicationKey.toString()))
            .replaceAll("\\{" + "filepath" + "\\}", localVarApiClient.escapeString(filepath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastModifiedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModifiedTime", lastModifiedTime));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertPackageFileValidateBeforeCall(String applicationKey, String filepath, String lastModifiedTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationKey' is set
        if (applicationKey == null) {
            throw new ApiException("Missing the required parameter 'applicationKey' when calling upsertPackageFile(Async)");
        }
        
        // verify the required parameter 'filepath' is set
        if (filepath == null) {
            throw new ApiException("Missing the required parameter 'filepath' when calling upsertPackageFile(Async)");
        }
        

        okhttp3.Call localVarCall = upsertPackageFileCall(applicationKey, filepath, lastModifiedTime, _callback);
        return localVarCall;

    }

    /**
     * Upsert Package File
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param lastModifiedTime  (optional)
     * @return FileMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FileMetadata upsertPackageFile(String applicationKey, String filepath, String lastModifiedTime) throws ApiException {
        ApiResponse<FileMetadata> localVarResp = upsertPackageFileWithHttpInfo(applicationKey, filepath, lastModifiedTime);
        return localVarResp.getData();
    }

    /**
     * Upsert Package File
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param lastModifiedTime  (optional)
     * @return ApiResponse&lt;FileMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileMetadata> upsertPackageFileWithHttpInfo(String applicationKey, String filepath, String lastModifiedTime) throws ApiException {
        okhttp3.Call localVarCall = upsertPackageFileValidateBeforeCall(applicationKey, filepath, lastModifiedTime, null);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Package File (asynchronously)
     * 
     * @param applicationKey  (required)
     * @param filepath  (required)
     * @param lastModifiedTime  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPackageFileAsync(String applicationKey, String filepath, String lastModifiedTime, final ApiCallback<FileMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertPackageFileValidateBeforeCall(applicationKey, filepath, lastModifiedTime, _callback);
        Type localVarReturnType = new TypeToken<FileMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public PublicApplicationApi build() {
            return new PublicApplicationApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
