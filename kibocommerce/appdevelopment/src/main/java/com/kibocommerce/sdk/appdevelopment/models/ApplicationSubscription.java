/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.appdevelopment.models.AppDevEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Defines an event that an Application Version is subscribed to.
 */
@ApiModel(description = "Defines an event that an Application Version is subscribed to.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicationSubscription implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_APPLICATION_SUBSCRIPTION_ID = "applicationSubscriptionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SUBSCRIPTION_ID)
  private Integer applicationSubscriptionId;

  public static final String SERIALIZED_NAME_APPLICATION_END_POINT = "applicationEndPoint";
  @SerializedName(SERIALIZED_NAME_APPLICATION_END_POINT)
  private String applicationEndPoint;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<AppDevEvent> events = null;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "packageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private Integer packageId;

  public static final String SERIALIZED_NAME_NO_CALLBACK = "noCallback";
  @SerializedName(SERIALIZED_NAME_NO_CALLBACK)
  private Boolean noCallback;

  public ApplicationSubscription() {
  }

  public ApplicationSubscription applicationSubscriptionId(Integer applicationSubscriptionId) {
    
    this.applicationSubscriptionId = applicationSubscriptionId;
    return this;
  }

   /**
   * The unique identifier of an ApplicationVersionEvent record.
   * @return applicationSubscriptionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of an ApplicationVersionEvent record.")

  public Integer getApplicationSubscriptionId() {
    return applicationSubscriptionId;
  }


  public void setApplicationSubscriptionId(Integer applicationSubscriptionId) {
    this.applicationSubscriptionId = applicationSubscriptionId;
  }


  public ApplicationSubscription applicationEndPoint(String applicationEndPoint) {
    
    this.applicationEndPoint = applicationEndPoint;
    return this;
  }

   /**
   * The End Point where the event information will be sent to when the event is fired.
   * @return applicationEndPoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The End Point where the event information will be sent to when the event is fired.")

  public String getApplicationEndPoint() {
    return applicationEndPoint;
  }


  public void setApplicationEndPoint(String applicationEndPoint) {
    this.applicationEndPoint = applicationEndPoint;
  }


  public ApplicationSubscription events(List<AppDevEvent> events) {
    
    this.events = events;
    return this;
  }

  public ApplicationSubscription addEventsItem(AppDevEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * 
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AppDevEvent> getEvents() {
    return events;
  }


  public void setEvents(List<AppDevEvent> events) {
    this.events = events;
  }


  public ApplicationSubscription packageId(Integer packageId) {
    
    this.packageId = packageId;
    return this;
  }

   /**
   * 
   * @return packageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPackageId() {
    return packageId;
  }


  public void setPackageId(Integer packageId) {
    this.packageId = packageId;
  }


  public ApplicationSubscription noCallback(Boolean noCallback) {
    
    this.noCallback = noCallback;
    return this;
  }

   /**
   * 
   * @return noCallback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNoCallback() {
    return noCallback;
  }


  public void setNoCallback(Boolean noCallback) {
    this.noCallback = noCallback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationSubscription applicationSubscription = (ApplicationSubscription) o;
    return Objects.equals(this.applicationSubscriptionId, applicationSubscription.applicationSubscriptionId) &&
        Objects.equals(this.applicationEndPoint, applicationSubscription.applicationEndPoint) &&
        Objects.equals(this.events, applicationSubscription.events) &&
        Objects.equals(this.packageId, applicationSubscription.packageId) &&
        Objects.equals(this.noCallback, applicationSubscription.noCallback);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationSubscriptionId, applicationEndPoint, events, packageId, noCallback);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationSubscription {\n");
    sb.append("    applicationSubscriptionId: ").append(toIndentedString(applicationSubscriptionId)).append("\n");
    sb.append("    applicationEndPoint: ").append(toIndentedString(applicationEndPoint)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    noCallback: ").append(toIndentedString(noCallback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationSubscriptionId");
    openapiFields.add("applicationEndPoint");
    openapiFields.add("events");
    openapiFields.add("packageId");
    openapiFields.add("noCallback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationSubscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationSubscription is not found in the empty JSON string", ApplicationSubscription.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ApplicationSubscription.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationSubscription` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("applicationEndPoint") != null && !jsonObj.get("applicationEndPoint").isJsonNull()) && !jsonObj.get("applicationEndPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationEndPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationEndPoint").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            AppDevEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationSubscription>() {
           @Override
           public void write(JsonWriter out, ApplicationSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationSubscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationSubscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationSubscription
  * @throws IOException if the JSON string is invalid with respect to ApplicationSubscription
  */
  public static ApplicationSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationSubscription.class);
  }

 /**
  * Convert an instance of ApplicationSubscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

