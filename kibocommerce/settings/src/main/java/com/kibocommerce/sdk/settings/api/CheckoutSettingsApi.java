/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.settings.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.settings.models.CheckoutSettings;
import com.kibocommerce.sdk.settings.models.CustomerCheckoutSettings;
import com.kibocommerce.sdk.settings.models.ExternalPaymentWorkflowDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CheckoutSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CheckoutSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CheckoutSettingsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CheckoutSettingsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CheckoutSettingsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addThirdPartyPaymentWorkflow
     * @param externalPaymentWorkflowDefinition  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addThirdPartyPaymentWorkflowCall(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = externalPaymentWorkflowDefinition;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/paymentsettings/thirdpartyworkflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addThirdPartyPaymentWorkflowValidateBeforeCall(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addThirdPartyPaymentWorkflowCall(externalPaymentWorkflowDefinition, _callback);
        return localVarCall;

    }

    /**
     * Add Third Party Payment Workflow
     * Adds a third party payment workflow definition in the context of a site
     * @param externalPaymentWorkflowDefinition  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addThirdPartyPaymentWorkflow(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition) throws ApiException {
        addThirdPartyPaymentWorkflowWithHttpInfo(externalPaymentWorkflowDefinition);
    }

    /**
     * Add Third Party Payment Workflow
     * Adds a third party payment workflow definition in the context of a site
     * @param externalPaymentWorkflowDefinition  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addThirdPartyPaymentWorkflowWithHttpInfo(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition) throws ApiException {
        okhttp3.Call localVarCall = addThirdPartyPaymentWorkflowValidateBeforeCall(externalPaymentWorkflowDefinition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Third Party Payment Workflow (asynchronously)
     * Adds a third party payment workflow definition in the context of a site
     * @param externalPaymentWorkflowDefinition  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addThirdPartyPaymentWorkflowAsync(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addThirdPartyPaymentWorkflowValidateBeforeCall(externalPaymentWorkflowDefinition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteThirdPartyPaymentWorkflow
     * @param fullyQualifiedName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThirdPartyPaymentWorkflowCall(String fullyQualifiedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/paymentsettings/thirdpartyworkflows/{fullyQualifiedName}"
            .replaceAll("\\{" + "fullyQualifiedName" + "\\}", localVarApiClient.escapeString(fullyQualifiedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteThirdPartyPaymentWorkflowValidateBeforeCall(String fullyQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fullyQualifiedName' is set
        if (fullyQualifiedName == null) {
            throw new ApiException("Missing the required parameter 'fullyQualifiedName' when calling deleteThirdPartyPaymentWorkflow(Async)");
        }
        

        okhttp3.Call localVarCall = deleteThirdPartyPaymentWorkflowCall(fullyQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * Delete Third Party Payment Workflow
     * Deletes a third party payment workflow definition defined for the site
     * @param fullyQualifiedName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteThirdPartyPaymentWorkflow(String fullyQualifiedName) throws ApiException {
        deleteThirdPartyPaymentWorkflowWithHttpInfo(fullyQualifiedName);
    }

    /**
     * Delete Third Party Payment Workflow
     * Deletes a third party payment workflow definition defined for the site
     * @param fullyQualifiedName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteThirdPartyPaymentWorkflowWithHttpInfo(String fullyQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = deleteThirdPartyPaymentWorkflowValidateBeforeCall(fullyQualifiedName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Third Party Payment Workflow (asynchronously)
     * Deletes a third party payment workflow definition defined for the site
     * @param fullyQualifiedName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteThirdPartyPaymentWorkflowAsync(String fullyQualifiedName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteThirdPartyPaymentWorkflowValidateBeforeCall(fullyQualifiedName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckoutSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCheckoutSettingsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Checkout Settings
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     * @return CheckoutSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutSettings getCheckoutSettings() throws ApiException {
        ApiResponse<CheckoutSettings> localVarResp = getCheckoutSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Checkout Settings
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     * @return ApiResponse&lt;CheckoutSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutSettings> getCheckoutSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCheckoutSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CheckoutSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Checkout Settings (asynchronously)
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutSettingsAsync(final ApiCallback<CheckoutSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CheckoutSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerCheckoutSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerCheckoutSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/customercheckoutsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerCheckoutSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomerCheckoutSettingsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Customer Checkout Settings
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     * @return CustomerCheckoutSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCheckoutSettings getCustomerCheckoutSettings() throws ApiException {
        ApiResponse<CustomerCheckoutSettings> localVarResp = getCustomerCheckoutSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Customer Checkout Settings
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     * @return ApiResponse&lt;CustomerCheckoutSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCheckoutSettings> getCustomerCheckoutSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomerCheckoutSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomerCheckoutSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Customer Checkout Settings (asynchronously)
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerCheckoutSettingsAsync(final ApiCallback<CustomerCheckoutSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerCheckoutSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomerCheckoutSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThirdPartyPaymentWorkflowWithValues
     * @param fullyQualifiedName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThirdPartyPaymentWorkflowWithValuesCall(String fullyQualifiedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/paymentsettings/thirdpartyworkflow/{fullyQualifiedName}"
            .replaceAll("\\{" + "fullyQualifiedName" + "\\}", localVarApiClient.escapeString(fullyQualifiedName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThirdPartyPaymentWorkflowWithValuesValidateBeforeCall(String fullyQualifiedName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fullyQualifiedName' is set
        if (fullyQualifiedName == null) {
            throw new ApiException("Missing the required parameter 'fullyQualifiedName' when calling getThirdPartyPaymentWorkflowWithValues(Async)");
        }
        

        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowWithValuesCall(fullyQualifiedName, _callback);
        return localVarCall;

    }

    /**
     * Get Third Party Payment Workflow With Values
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     * @param fullyQualifiedName  (required)
     * @return ExternalPaymentWorkflowDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExternalPaymentWorkflowDefinition getThirdPartyPaymentWorkflowWithValues(String fullyQualifiedName) throws ApiException {
        ApiResponse<ExternalPaymentWorkflowDefinition> localVarResp = getThirdPartyPaymentWorkflowWithValuesWithHttpInfo(fullyQualifiedName);
        return localVarResp.getData();
    }

    /**
     * Get Third Party Payment Workflow With Values
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     * @param fullyQualifiedName  (required)
     * @return ApiResponse&lt;ExternalPaymentWorkflowDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExternalPaymentWorkflowDefinition> getThirdPartyPaymentWorkflowWithValuesWithHttpInfo(String fullyQualifiedName) throws ApiException {
        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowWithValuesValidateBeforeCall(fullyQualifiedName, null);
        Type localVarReturnType = new TypeToken<ExternalPaymentWorkflowDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Third Party Payment Workflow With Values (asynchronously)
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     * @param fullyQualifiedName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThirdPartyPaymentWorkflowWithValuesAsync(String fullyQualifiedName, final ApiCallback<ExternalPaymentWorkflowDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowWithValuesValidateBeforeCall(fullyQualifiedName, _callback);
        Type localVarReturnType = new TypeToken<ExternalPaymentWorkflowDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThirdPartyPaymentWorkflows
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThirdPartyPaymentWorkflowsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/paymentsettings/thirdpartyworkflows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThirdPartyPaymentWorkflowsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Third Party Payment Workflows
     * Retrieves list of external payment workflow definitions.
     * @return List&lt;ExternalPaymentWorkflowDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ExternalPaymentWorkflowDefinition> getThirdPartyPaymentWorkflows() throws ApiException {
        ApiResponse<List<ExternalPaymentWorkflowDefinition>> localVarResp = getThirdPartyPaymentWorkflowsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Third Party Payment Workflows
     * Retrieves list of external payment workflow definitions.
     * @return ApiResponse&lt;List&lt;ExternalPaymentWorkflowDefinition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExternalPaymentWorkflowDefinition>> getThirdPartyPaymentWorkflowsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ExternalPaymentWorkflowDefinition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Third Party Payment Workflows (asynchronously)
     * Retrieves list of external payment workflow definitions.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThirdPartyPaymentWorkflowsAsync(final ApiCallback<List<ExternalPaymentWorkflowDefinition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThirdPartyPaymentWorkflowsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ExternalPaymentWorkflowDefinition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerCheckoutSettings
     * @param customerCheckoutSettings Properties of the customer checkout settings to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerCheckoutSettingsCall(CustomerCheckoutSettings customerCheckoutSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerCheckoutSettings;

        // create path and map variables
        String localVarPath = "/commerce/settings/checkout/customercheckoutsettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerCheckoutSettingsValidateBeforeCall(CustomerCheckoutSettings customerCheckoutSettings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateCustomerCheckoutSettingsCall(customerCheckoutSettings, _callback);
        return localVarCall;

    }

    /**
     * Update Customer Checkout Settings
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \&quot;LoginRequired\&quot;  or not \&quot;LoginOptional\&quot; to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     * @param customerCheckoutSettings Properties of the customer checkout settings to update. (optional)
     * @return CustomerCheckoutSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCheckoutSettings updateCustomerCheckoutSettings(CustomerCheckoutSettings customerCheckoutSettings) throws ApiException {
        ApiResponse<CustomerCheckoutSettings> localVarResp = updateCustomerCheckoutSettingsWithHttpInfo(customerCheckoutSettings);
        return localVarResp.getData();
    }

    /**
     * Update Customer Checkout Settings
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \&quot;LoginRequired\&quot;  or not \&quot;LoginOptional\&quot; to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     * @param customerCheckoutSettings Properties of the customer checkout settings to update. (optional)
     * @return ApiResponse&lt;CustomerCheckoutSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCheckoutSettings> updateCustomerCheckoutSettingsWithHttpInfo(CustomerCheckoutSettings customerCheckoutSettings) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerCheckoutSettingsValidateBeforeCall(customerCheckoutSettings, null);
        Type localVarReturnType = new TypeToken<CustomerCheckoutSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Customer Checkout Settings (asynchronously)
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \&quot;LoginRequired\&quot;  or not \&quot;LoginOptional\&quot; to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     * @param customerCheckoutSettings Properties of the customer checkout settings to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerCheckoutSettingsAsync(CustomerCheckoutSettings customerCheckoutSettings, final ApiCallback<CustomerCheckoutSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerCheckoutSettingsValidateBeforeCall(customerCheckoutSettings, _callback);
        Type localVarReturnType = new TypeToken<CustomerCheckoutSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CheckoutSettingsApi build() {
            return new CheckoutSettingsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
