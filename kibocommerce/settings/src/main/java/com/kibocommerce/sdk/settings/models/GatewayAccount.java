/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.GatewayCredentialFieldValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * GatewayAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayAccount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GATEWAY_DEFINITION_ID = "gatewayDefinitionId";
  @SerializedName(SERIALIZED_NAME_GATEWAY_DEFINITION_ID)
  private String gatewayDefinitionId;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_CREDENTIAL_FIELDS = "credentialFields";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_FIELDS)
  private List<GatewayCredentialFieldValue> credentialFields = null;

  public static final String SERIALIZED_NAME_BIN_PATTERNS = "binPatterns";
  @SerializedName(SERIALIZED_NAME_BIN_PATTERNS)
  private List<String> binPatterns = null;

  public GatewayAccount() {
  }

  public GatewayAccount id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public GatewayAccount name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayAccount gatewayDefinitionId(String gatewayDefinitionId) {
    
    this.gatewayDefinitionId = gatewayDefinitionId;
    return this;
  }

   /**
   * Get gatewayDefinitionId
   * @return gatewayDefinitionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGatewayDefinitionId() {
    return gatewayDefinitionId;
  }


  public void setGatewayDefinitionId(String gatewayDefinitionId) {
    this.gatewayDefinitionId = gatewayDefinitionId;
  }


  public GatewayAccount countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GatewayAccount isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public GatewayAccount credentialFields(List<GatewayCredentialFieldValue> credentialFields) {
    
    this.credentialFields = credentialFields;
    return this;
  }

  public GatewayAccount addCredentialFieldsItem(GatewayCredentialFieldValue credentialFieldsItem) {
    if (this.credentialFields == null) {
      this.credentialFields = new ArrayList<>();
    }
    this.credentialFields.add(credentialFieldsItem);
    return this;
  }

   /**
   * Get credentialFields
   * @return credentialFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<GatewayCredentialFieldValue> getCredentialFields() {
    return credentialFields;
  }


  public void setCredentialFields(List<GatewayCredentialFieldValue> credentialFields) {
    this.credentialFields = credentialFields;
  }


  public GatewayAccount binPatterns(List<String> binPatterns) {
    
    this.binPatterns = binPatterns;
    return this;
  }

  public GatewayAccount addBinPatternsItem(String binPatternsItem) {
    if (this.binPatterns == null) {
      this.binPatterns = new ArrayList<>();
    }
    this.binPatterns.add(binPatternsItem);
    return this;
  }

   /**
   * Get binPatterns
   * @return binPatterns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getBinPatterns() {
    return binPatterns;
  }


  public void setBinPatterns(List<String> binPatterns) {
    this.binPatterns = binPatterns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayAccount gatewayAccount = (GatewayAccount) o;
    return Objects.equals(this.id, gatewayAccount.id) &&
        Objects.equals(this.name, gatewayAccount.name) &&
        Objects.equals(this.gatewayDefinitionId, gatewayAccount.gatewayDefinitionId) &&
        Objects.equals(this.countryCode, gatewayAccount.countryCode) &&
        Objects.equals(this.isActive, gatewayAccount.isActive) &&
        Objects.equals(this.credentialFields, gatewayAccount.credentialFields) &&
        Objects.equals(this.binPatterns, gatewayAccount.binPatterns);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, gatewayDefinitionId, countryCode, isActive, credentialFields, binPatterns);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    gatewayDefinitionId: ").append(toIndentedString(gatewayDefinitionId)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    credentialFields: ").append(toIndentedString(credentialFields)).append("\n");
    sb.append("    binPatterns: ").append(toIndentedString(binPatterns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("gatewayDefinitionId");
    openapiFields.add("countryCode");
    openapiFields.add("isActive");
    openapiFields.add("credentialFields");
    openapiFields.add("binPatterns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewayAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewayAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayAccount is not found in the empty JSON string", GatewayAccount.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!GatewayAccount.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayAccount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("gatewayDefinitionId") != null && !jsonObj.get("gatewayDefinitionId").isJsonNull()) && !jsonObj.get("gatewayDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayDefinitionId").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (jsonObj.get("credentialFields") != null && !jsonObj.get("credentialFields").isJsonNull()) {
        JsonArray jsonArraycredentialFields = jsonObj.getAsJsonArray("credentialFields");
        if (jsonArraycredentialFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("credentialFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `credentialFields` to be an array in the JSON string but got `%s`", jsonObj.get("credentialFields").toString()));
          }

          // validate the optional field `credentialFields` (array)
          for (int i = 0; i < jsonArraycredentialFields.size(); i++) {
            GatewayCredentialFieldValue.validateJsonObject(jsonArraycredentialFields.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("binPatterns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `binPatterns` to be an array in the JSON string but got `%s`", jsonObj.get("binPatterns").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayAccount>() {
           @Override
           public void write(JsonWriter out, GatewayAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewayAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewayAccount
  * @throws IOException if the JSON string is invalid with respect to GatewayAccount
  */
  public static GatewayAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayAccount.class);
  }

 /**
  * Convert an instance of GatewayAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

