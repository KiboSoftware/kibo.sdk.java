/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.FlexibleCapture;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Contains settings for the auto-capture payment feature.
 */
@ApiModel(description = "Contains settings for the auto-capture payment feature.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AutoCaptureJob implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FLEXIBLE_CAPTURE = "flexibleCapture";
  @SerializedName(SERIALIZED_NAME_FLEXIBLE_CAPTURE)
  private FlexibleCapture flexibleCapture;

  public static final String SERIALIZED_NAME_FORCE_CAPTURE_ON_FIRST_CAPTURE = "forceCaptureOnFirstCapture";
  @SerializedName(SERIALIZED_NAME_FORCE_CAPTURE_ON_FIRST_CAPTURE)
  private Boolean forceCaptureOnFirstCapture;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval;

  public AutoCaptureJob() {
  }

  public AutoCaptureJob flexibleCapture(FlexibleCapture flexibleCapture) {
    
    this.flexibleCapture = flexibleCapture;
    return this;
  }

   /**
   * Get flexibleCapture
   * @return flexibleCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FlexibleCapture getFlexibleCapture() {
    return flexibleCapture;
  }


  public void setFlexibleCapture(FlexibleCapture flexibleCapture) {
    this.flexibleCapture = flexibleCapture;
  }


  public AutoCaptureJob forceCaptureOnFirstCapture(Boolean forceCaptureOnFirstCapture) {
    
    this.forceCaptureOnFirstCapture = forceCaptureOnFirstCapture;
    return this;
  }

   /**
   * Specifies whether all available funds should be collected once any shipment is ready for capture.
   * @return forceCaptureOnFirstCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether all available funds should be collected once any shipment is ready for capture.")

  public Boolean getForceCaptureOnFirstCapture() {
    return forceCaptureOnFirstCapture;
  }


  public void setForceCaptureOnFirstCapture(Boolean forceCaptureOnFirstCapture) {
    this.forceCaptureOnFirstCapture = forceCaptureOnFirstCapture;
  }


  public AutoCaptureJob isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Specifies whether this job should run.
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether this job should run.")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public AutoCaptureJob interval(Integer interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * How often this job should run in minutes.
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often this job should run in minutes.")

  public Integer getInterval() {
    return interval;
  }


  public void setInterval(Integer interval) {
    this.interval = interval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoCaptureJob autoCaptureJob = (AutoCaptureJob) o;
    return Objects.equals(this.flexibleCapture, autoCaptureJob.flexibleCapture) &&
        Objects.equals(this.forceCaptureOnFirstCapture, autoCaptureJob.forceCaptureOnFirstCapture) &&
        Objects.equals(this.isEnabled, autoCaptureJob.isEnabled) &&
        Objects.equals(this.interval, autoCaptureJob.interval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flexibleCapture, forceCaptureOnFirstCapture, isEnabled, interval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoCaptureJob {\n");
    sb.append("    flexibleCapture: ").append(toIndentedString(flexibleCapture)).append("\n");
    sb.append("    forceCaptureOnFirstCapture: ").append(toIndentedString(forceCaptureOnFirstCapture)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isEnabled");
    openapiFields.add("interval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutoCaptureJob
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AutoCaptureJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoCaptureJob is not found in the empty JSON string", AutoCaptureJob.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!AutoCaptureJob.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoCaptureJob` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `flexibleCapture`
      if (jsonObj.get("flexibleCapture") != null && !jsonObj.get("flexibleCapture").isJsonNull()) {
        FlexibleCapture.validateJsonObject(jsonObj.getAsJsonObject("flexibleCapture"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoCaptureJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoCaptureJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoCaptureJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoCaptureJob.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoCaptureJob>() {
           @Override
           public void write(JsonWriter out, AutoCaptureJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoCaptureJob read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutoCaptureJob given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutoCaptureJob
  * @throws IOException if the JSON string is invalid with respect to AutoCaptureJob
  */
  public static AutoCaptureJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoCaptureJob.class);
  }

 /**
  * Convert an instance of AutoCaptureJob to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

