/*
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.locationadmin.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * BpmConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BpmConfiguration implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SHIPMENT_TYPE = "shipmentType";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TYPE)
  private String shipmentType;

  public static final String SERIALIZED_NAME_WORKFLOW_CONTAINER_ID = "workflowContainerId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_CONTAINER_ID)
  private String workflowContainerId;

  public static final String SERIALIZED_NAME_WORKFLOW_PROCESS_ID = "workflowProcessId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_PROCESS_ID)
  private String workflowProcessId;

  public BpmConfiguration() {
  }

  public BpmConfiguration shipmentType(String shipmentType) {
    
    this.shipmentType = shipmentType;
    return this;
  }

   /**
   * Get shipmentType
   * @return shipmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShipmentType() {
    return shipmentType;
  }


  public void setShipmentType(String shipmentType) {
    this.shipmentType = shipmentType;
  }


  public BpmConfiguration workflowContainerId(String workflowContainerId) {
    
    this.workflowContainerId = workflowContainerId;
    return this;
  }

   /**
   * Get workflowContainerId
   * @return workflowContainerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorkflowContainerId() {
    return workflowContainerId;
  }


  public void setWorkflowContainerId(String workflowContainerId) {
    this.workflowContainerId = workflowContainerId;
  }


  public BpmConfiguration workflowProcessId(String workflowProcessId) {
    
    this.workflowProcessId = workflowProcessId;
    return this;
  }

   /**
   * Get workflowProcessId
   * @return workflowProcessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWorkflowProcessId() {
    return workflowProcessId;
  }


  public void setWorkflowProcessId(String workflowProcessId) {
    this.workflowProcessId = workflowProcessId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BpmConfiguration bpmConfiguration = (BpmConfiguration) o;
    return Objects.equals(this.shipmentType, bpmConfiguration.shipmentType) &&
        Objects.equals(this.workflowContainerId, bpmConfiguration.workflowContainerId) &&
        Objects.equals(this.workflowProcessId, bpmConfiguration.workflowProcessId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipmentType, workflowContainerId, workflowProcessId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BpmConfiguration {\n");
    sb.append("    shipmentType: ").append(toIndentedString(shipmentType)).append("\n");
    sb.append("    workflowContainerId: ").append(toIndentedString(workflowContainerId)).append("\n");
    sb.append("    workflowProcessId: ").append(toIndentedString(workflowProcessId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("shipmentType");
    openapiFields.add("workflowContainerId");
    openapiFields.add("workflowProcessId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BpmConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BpmConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BpmConfiguration is not found in the empty JSON string", BpmConfiguration.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!BpmConfiguration.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BpmConfiguration` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("shipmentType") != null && !jsonObj.get("shipmentType").isJsonNull()) && !jsonObj.get("shipmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentType").toString()));
      }
      if ((jsonObj.get("workflowContainerId") != null && !jsonObj.get("workflowContainerId").isJsonNull()) && !jsonObj.get("workflowContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowContainerId").toString()));
      }
      if ((jsonObj.get("workflowProcessId") != null && !jsonObj.get("workflowProcessId").isJsonNull()) && !jsonObj.get("workflowProcessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflowProcessId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BpmConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BpmConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BpmConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BpmConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<BpmConfiguration>() {
           @Override
           public void write(JsonWriter out, BpmConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BpmConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BpmConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BpmConfiguration
  * @throws IOException if the JSON string is invalid with respect to BpmConfiguration
  */
  public static BpmConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BpmConfiguration.class);
  }

 /**
  * Convert an instance of BpmConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

