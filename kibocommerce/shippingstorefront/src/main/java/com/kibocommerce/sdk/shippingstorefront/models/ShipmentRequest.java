/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingstorefront.models.CustomAttribute;
import com.kibocommerce.sdk.shippingstorefront.models.CustomerReferences;
import com.kibocommerce.sdk.shippingstorefront.models.ShippingRuntimeShipment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ShipmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShipmentRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "isoCurrencyCode";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public static final String SERIALIZED_NAME_SHIPMENT = "shipment";
  @SerializedName(SERIALIZED_NAME_SHIPMENT)
  private ShippingRuntimeShipment shipment;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<CustomAttribute> customAttributes = null;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrierId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_SHIPPING_SERVICE_TYPE = "shippingServiceType";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SERVICE_TYPE)
  private String shippingServiceType;

  public static final String SERIALIZED_NAME_SHIPMENT_REQUEST_TYPE = "shipmentRequestType";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_REQUEST_TYPE)
  private String shipmentRequestType;

  public static final String SERIALIZED_NAME_REQUIRES_SIGNATURE = "requiresSignature";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SIGNATURE)
  private Boolean requiresSignature;

  public static final String SERIALIZED_NAME_LABEL_FORMAT = "labelFormat";
  @SerializedName(SERIALIZED_NAME_LABEL_FORMAT)
  private String labelFormat;

  public static final String SERIALIZED_NAME_CUSTOMER_REFERENCES = "customerReferences";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REFERENCES)
  private List<CustomerReferences> customerReferences = null;

  public ShipmentRequest() {
  }

  public ShipmentRequest isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * Get isoCurrencyCode
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }


  public ShipmentRequest shipment(ShippingRuntimeShipment shipment) {
    
    this.shipment = shipment;
    return this;
  }

   /**
   * Get shipment
   * @return shipment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShippingRuntimeShipment getShipment() {
    return shipment;
  }


  public void setShipment(ShippingRuntimeShipment shipment) {
    this.shipment = shipment;
  }


  public ShipmentRequest customAttributes(List<CustomAttribute> customAttributes) {
    
    this.customAttributes = customAttributes;
    return this;
  }

  public ShipmentRequest addCustomAttributesItem(CustomAttribute customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

   /**
   * Carrier specific options    Ex: RequiresDeliveryConfirmation when using usps with non-express mail service type.
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Carrier specific options    Ex: RequiresDeliveryConfirmation when using usps with non-express mail service type.")

  public List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public ShipmentRequest carrierId(String carrierId) {
    
    this.carrierId = carrierId;
    return this;
  }

   /**
   * Get carrierId
   * @return carrierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCarrierId() {
    return carrierId;
  }


  public void setCarrierId(String carrierId) {
    this.carrierId = carrierId;
  }


  public ShipmentRequest shippingServiceType(String shippingServiceType) {
    
    this.shippingServiceType = shippingServiceType;
    return this;
  }

   /**
   * Selected Shipping Service Type.
   * @return shippingServiceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Selected Shipping Service Type.")

  public String getShippingServiceType() {
    return shippingServiceType;
  }


  public void setShippingServiceType(String shippingServiceType) {
    this.shippingServiceType = shippingServiceType;
  }


  public ShipmentRequest shipmentRequestType(String shipmentRequestType) {
    
    this.shipmentRequestType = shipmentRequestType;
    return this;
  }

   /**
   * Selected Shipment Request Type.
   * @return shipmentRequestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Selected Shipment Request Type.")

  public String getShipmentRequestType() {
    return shipmentRequestType;
  }


  public void setShipmentRequestType(String shipmentRequestType) {
    this.shipmentRequestType = shipmentRequestType;
  }


  public ShipmentRequest requiresSignature(Boolean requiresSignature) {
    
    this.requiresSignature = requiresSignature;
    return this;
  }

   /**
   * Designates that the shipment requires a signature for delivery  Not fully implemented...
   * @return requiresSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Designates that the shipment requires a signature for delivery  Not fully implemented...")

  public Boolean getRequiresSignature() {
    return requiresSignature;
  }


  public void setRequiresSignature(Boolean requiresSignature) {
    this.requiresSignature = requiresSignature;
  }


  public ShipmentRequest labelFormat(String labelFormat) {
    
    this.labelFormat = labelFormat;
    return this;
  }

   /**
   * Get labelFormat
   * @return labelFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabelFormat() {
    return labelFormat;
  }


  public void setLabelFormat(String labelFormat) {
    this.labelFormat = labelFormat;
  }


  public ShipmentRequest customerReferences(List<CustomerReferences> customerReferences) {
    
    this.customerReferences = customerReferences;
    return this;
  }

  public ShipmentRequest addCustomerReferencesItem(CustomerReferences customerReferencesItem) {
    if (this.customerReferences == null) {
      this.customerReferences = new ArrayList<>();
    }
    this.customerReferences.add(customerReferencesItem);
    return this;
  }

   /**
   * Get customerReferences
   * @return customerReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomerReferences> getCustomerReferences() {
    return customerReferences;
  }


  public void setCustomerReferences(List<CustomerReferences> customerReferences) {
    this.customerReferences = customerReferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentRequest shipmentRequest = (ShipmentRequest) o;
    return Objects.equals(this.isoCurrencyCode, shipmentRequest.isoCurrencyCode) &&
        Objects.equals(this.shipment, shipmentRequest.shipment) &&
        Objects.equals(this.customAttributes, shipmentRequest.customAttributes) &&
        Objects.equals(this.carrierId, shipmentRequest.carrierId) &&
        Objects.equals(this.shippingServiceType, shipmentRequest.shippingServiceType) &&
        Objects.equals(this.shipmentRequestType, shipmentRequest.shipmentRequestType) &&
        Objects.equals(this.requiresSignature, shipmentRequest.requiresSignature) &&
        Objects.equals(this.labelFormat, shipmentRequest.labelFormat) &&
        Objects.equals(this.customerReferences, shipmentRequest.customerReferences);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isoCurrencyCode, shipment, customAttributes, carrierId, shippingServiceType, shipmentRequestType, requiresSignature, labelFormat, customerReferences);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentRequest {\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("    shipment: ").append(toIndentedString(shipment)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    shippingServiceType: ").append(toIndentedString(shippingServiceType)).append("\n");
    sb.append("    shipmentRequestType: ").append(toIndentedString(shipmentRequestType)).append("\n");
    sb.append("    requiresSignature: ").append(toIndentedString(requiresSignature)).append("\n");
    sb.append("    labelFormat: ").append(toIndentedString(labelFormat)).append("\n");
    sb.append("    customerReferences: ").append(toIndentedString(customerReferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isoCurrencyCode");
    openapiFields.add("shipment");
    openapiFields.add("customAttributes");
    openapiFields.add("carrierId");
    openapiFields.add("shippingServiceType");
    openapiFields.add("shipmentRequestType");
    openapiFields.add("requiresSignature");
    openapiFields.add("labelFormat");
    openapiFields.add("customerReferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipmentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShipmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentRequest is not found in the empty JSON string", ShipmentRequest.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShipmentRequest.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("isoCurrencyCode") != null && !jsonObj.get("isoCurrencyCode").isJsonNull()) && !jsonObj.get("isoCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoCurrencyCode").toString()));
      }
      // validate the optional field `shipment`
      if (jsonObj.get("shipment") != null && !jsonObj.get("shipment").isJsonNull()) {
        ShippingRuntimeShipment.validateJsonObject(jsonObj.getAsJsonObject("shipment"));
      }
      if (jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("customAttributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
          }

          // validate the optional field `customAttributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            CustomAttribute.validateJsonObject(jsonArraycustomAttributes.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("carrierId") != null && !jsonObj.get("carrierId").isJsonNull()) && !jsonObj.get("carrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierId").toString()));
      }
      if ((jsonObj.get("shippingServiceType") != null && !jsonObj.get("shippingServiceType").isJsonNull()) && !jsonObj.get("shippingServiceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingServiceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingServiceType").toString()));
      }
      if ((jsonObj.get("shipmentRequestType") != null && !jsonObj.get("shipmentRequestType").isJsonNull()) && !jsonObj.get("shipmentRequestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentRequestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentRequestType").toString()));
      }
      if ((jsonObj.get("labelFormat") != null && !jsonObj.get("labelFormat").isJsonNull()) && !jsonObj.get("labelFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelFormat").toString()));
      }
      if (jsonObj.get("customerReferences") != null && !jsonObj.get("customerReferences").isJsonNull()) {
        JsonArray jsonArraycustomerReferences = jsonObj.getAsJsonArray("customerReferences");
        if (jsonArraycustomerReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReferences` to be an array in the JSON string but got `%s`", jsonObj.get("customerReferences").toString()));
          }

          // validate the optional field `customerReferences` (array)
          for (int i = 0; i < jsonArraycustomerReferences.size(); i++) {
            CustomerReferences.validateJsonObject(jsonArraycustomerReferences.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentRequest>() {
           @Override
           public void write(JsonWriter out, ShipmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipmentRequest
  * @throws IOException if the JSON string is invalid with respect to ShipmentRequest
  */
  public static ShipmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentRequest.class);
  }

 /**
  * Convert an instance of ShipmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

