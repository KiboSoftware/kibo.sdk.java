/*
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.content.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.content.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.content.models.AddOrDeletePublishItem;
import com.kibocommerce.sdk.content.models.DocumentDraftSummaryPagedCollection;
import com.kibocommerce.sdk.content.models.PublishSetSummaryPagedCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentPublishSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public DocumentPublishSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentPublishSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public DocumentPublishSetApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public DocumentPublishSetApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public DocumentPublishSetApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPublishSetItems
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param addOrDeletePublishItem documentId/doclist pairs to add to the publish set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPublishSetItemsCall(String code, List<AddOrDeletePublishItem> addOrDeletePublishItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addOrDeletePublishItem;

        // create path and map variables
        String localVarPath = "/content/publishsets/{code}/items"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPublishSetItemsValidateBeforeCall(String code, List<AddOrDeletePublishItem> addOrDeletePublishItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addPublishSetItems(Async)");
        }
        

        okhttp3.Call localVarCall = addPublishSetItemsCall(code, addOrDeletePublishItem, _callback);
        return localVarCall;

    }

    /**
     * Add Publish Set Items
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param addOrDeletePublishItem documentId/doclist pairs to add to the publish set (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void addPublishSetItems(String code, List<AddOrDeletePublishItem> addOrDeletePublishItem) throws ApiException {
        addPublishSetItemsWithHttpInfo(code, addOrDeletePublishItem);
    }

    /**
     * Add Publish Set Items
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param addOrDeletePublishItem documentId/doclist pairs to add to the publish set (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addPublishSetItemsWithHttpInfo(String code, List<AddOrDeletePublishItem> addOrDeletePublishItem) throws ApiException {
        okhttp3.Call localVarCall = addPublishSetItemsValidateBeforeCall(code, addOrDeletePublishItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add Publish Set Items (asynchronously)
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param addOrDeletePublishItem documentId/doclist pairs to add to the publish set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPublishSetItemsAsync(String code, List<AddOrDeletePublishItem> addOrDeletePublishItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPublishSetItemsValidateBeforeCall(code, addOrDeletePublishItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePublishSet
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param shouldDiscard should trash the drafts in the publish set as well (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublishSetCall(String code, Boolean shouldDiscard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/publishsets/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDiscard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shouldDiscard", shouldDiscard));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePublishSetValidateBeforeCall(String code, Boolean shouldDiscard, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePublishSet(Async)");
        }
        

        okhttp3.Call localVarCall = deletePublishSetCall(code, shouldDiscard, _callback);
        return localVarCall;

    }

    /**
     * Delete Publish Set
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param shouldDiscard should trash the drafts in the publish set as well (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePublishSet(String code, Boolean shouldDiscard) throws ApiException {
        deletePublishSetWithHttpInfo(code, shouldDiscard);
    }

    /**
     * Delete Publish Set
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param shouldDiscard should trash the drafts in the publish set as well (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePublishSetWithHttpInfo(String code, Boolean shouldDiscard) throws ApiException {
        okhttp3.Call localVarCall = deletePublishSetValidateBeforeCall(code, shouldDiscard, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Publish Set (asynchronously)
     * Adds a set of documents by id to a publish set.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param shouldDiscard should trash the drafts in the publish set as well (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePublishSetAsync(String code, Boolean shouldDiscard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePublishSetValidateBeforeCall(code, shouldDiscard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublishSetItems
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishSetItemsCall(String code, Integer pageSize, Integer startIndex, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/publishsets/{code}/items"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishSetItemsValidateBeforeCall(String code, Integer pageSize, Integer startIndex, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPublishSetItems(Async)");
        }
        

        okhttp3.Call localVarCall = getPublishSetItemsCall(code, pageSize, startIndex, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Publish Set Items
     * Retrieve a paged collection of publish set Items.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return DocumentDraftSummaryPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentDraftSummaryPagedCollection getPublishSetItems(String code, Integer pageSize, Integer startIndex, String sortBy, String filter) throws ApiException {
        ApiResponse<DocumentDraftSummaryPagedCollection> localVarResp = getPublishSetItemsWithHttpInfo(code, pageSize, startIndex, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Publish Set Items
     * Retrieve a paged collection of publish set Items.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;DocumentDraftSummaryPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentDraftSummaryPagedCollection> getPublishSetItemsWithHttpInfo(String code, Integer pageSize, Integer startIndex, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getPublishSetItemsValidateBeforeCall(code, pageSize, startIndex, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<DocumentDraftSummaryPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Publish Set Items (asynchronously)
     * Retrieve a paged collection of publish set Items.
     * @param code code of the publish set.  Use UNASSIGNED or ALL to denote those special cases (required)
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishSetItemsAsync(String code, Integer pageSize, Integer startIndex, String sortBy, String filter, final ApiCallback<DocumentDraftSummaryPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishSetItemsValidateBeforeCall(code, pageSize, startIndex, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<DocumentDraftSummaryPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublishSets
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishSetsCall(Integer pageSize, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/publishsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishSetsValidateBeforeCall(Integer pageSize, Integer startIndex, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPublishSetsCall(pageSize, startIndex, _callback);
        return localVarCall;

    }

    /**
     * Get Publish Set
     * Returns a List of current Publishing sets with counts of drafts in each.
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @return PublishSetSummaryPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PublishSetSummaryPagedCollection getPublishSets(Integer pageSize, Integer startIndex) throws ApiException {
        ApiResponse<PublishSetSummaryPagedCollection> localVarResp = getPublishSetsWithHttpInfo(pageSize, startIndex);
        return localVarResp.getData();
    }

    /**
     * Get Publish Set
     * Returns a List of current Publishing sets with counts of drafts in each.
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @return ApiResponse&lt;PublishSetSummaryPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishSetSummaryPagedCollection> getPublishSetsWithHttpInfo(Integer pageSize, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = getPublishSetsValidateBeforeCall(pageSize, startIndex, null);
        Type localVarReturnType = new TypeToken<PublishSetSummaryPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Publish Set (asynchronously)
     * Returns a List of current Publishing sets with counts of drafts in each.
     * @param pageSize maximum number of items to return (optional, default to 100)
     * @param startIndex start index (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishSetsAsync(Integer pageSize, Integer startIndex, final ApiCallback<PublishSetSummaryPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishSetsValidateBeforeCall(pageSize, startIndex, _callback);
        Type localVarReturnType = new TypeToken<PublishSetSummaryPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public DocumentPublishSetApi build() {
            return new DocumentPublishSetApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
