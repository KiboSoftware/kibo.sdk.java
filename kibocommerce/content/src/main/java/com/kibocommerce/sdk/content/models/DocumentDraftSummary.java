/*
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.content.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Summary information on a Document Draft
 */
@ApiModel(description = "Summary information on a Document Draft")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DocumentDraftSummary implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_F_Q_N = "documentTypeFQN";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_F_Q_N)
  private String documentTypeFQN;

  public static final String SERIALIZED_NAME_LIST_F_Q_N = "listFQN";
  @SerializedName(SERIALIZED_NAME_LIST_F_Q_N)
  private String listFQN;

  public static final String SERIALIZED_NAME_ACTIVE_UPDATE_DATE = "activeUpdateDate";
  @SerializedName(SERIALIZED_NAME_ACTIVE_UPDATE_DATE)
  private OffsetDateTime activeUpdateDate;

  public static final String SERIALIZED_NAME_DRAFT_UPDATE_DATE = "draftUpdateDate";
  @SerializedName(SERIALIZED_NAME_DRAFT_UPDATE_DATE)
  private OffsetDateTime draftUpdateDate;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_ACTIVE_UPDATED_BY = "activeUpdatedBy";
  @SerializedName(SERIALIZED_NAME_ACTIVE_UPDATED_BY)
  private String activeUpdatedBy;

  public static final String SERIALIZED_NAME_PUBLISH_TYPE = "publishType";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TYPE)
  private String publishType;

  public static final String SERIALIZED_NAME_PUBLISH_SET_CODE = "publishSetCode";
  @SerializedName(SERIALIZED_NAME_PUBLISH_SET_CODE)
  private String publishSetCode;

  public static final String SERIALIZED_NAME_MASTER_CATALOG_ID = "masterCatalogId";
  @SerializedName(SERIALIZED_NAME_MASTER_CATALOG_ID)
  private Integer masterCatalogId;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private Integer catalogId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public DocumentDraftSummary() {
  }

  public DocumentDraftSummary id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The system generated 32 digit alpha-numeric string that uniquely identifies the document.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The system generated 32 digit alpha-numeric string that uniquely identifies the document.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public DocumentDraftSummary name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The unique name of the document.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique name of the document.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DocumentDraftSummary documentTypeFQN(String documentTypeFQN) {
    
    this.documentTypeFQN = documentTypeFQN;
    return this;
  }

   /**
   * The full name of the documentType that underlies this document.
   * @return documentTypeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full name of the documentType that underlies this document.")

  public String getDocumentTypeFQN() {
    return documentTypeFQN;
  }


  public void setDocumentTypeFQN(String documentTypeFQN) {
    this.documentTypeFQN = documentTypeFQN;
  }


  public DocumentDraftSummary listFQN(String listFQN) {
    
    this.listFQN = listFQN;
    return this;
  }

   /**
   * The fully qualified name of the documentList to which the document belongs.
   * @return listFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully qualified name of the documentList to which the document belongs.")

  public String getListFQN() {
    return listFQN;
  }


  public void setListFQN(String listFQN) {
    this.listFQN = listFQN;
  }


  public DocumentDraftSummary activeUpdateDate(OffsetDateTime activeUpdateDate) {
    
    this.activeUpdateDate = activeUpdateDate;
    return this;
  }

   /**
   * The date and time the document was last published, if any.
   * @return activeUpdateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the document was last published, if any.")

  public OffsetDateTime getActiveUpdateDate() {
    return activeUpdateDate;
  }


  public void setActiveUpdateDate(OffsetDateTime activeUpdateDate) {
    this.activeUpdateDate = activeUpdateDate;
  }


  public DocumentDraftSummary draftUpdateDate(OffsetDateTime draftUpdateDate) {
    
    this.draftUpdateDate = draftUpdateDate;
    return this;
  }

   /**
   * The date and time the document draft was last updated.
   * @return draftUpdateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the document draft was last updated.")

  public OffsetDateTime getDraftUpdateDate() {
    return draftUpdateDate;
  }


  public void setDraftUpdateDate(OffsetDateTime draftUpdateDate) {
    this.draftUpdateDate = draftUpdateDate;
  }


  public DocumentDraftSummary updatedBy(String updatedBy) {
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * The userId or applicationId that last updated the draft document.
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The userId or applicationId that last updated the draft document.")

  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public DocumentDraftSummary activeUpdatedBy(String activeUpdatedBy) {
    
    this.activeUpdatedBy = activeUpdatedBy;
    return this;
  }

   /**
   * Get activeUpdatedBy
   * @return activeUpdatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActiveUpdatedBy() {
    return activeUpdatedBy;
  }


  public void setActiveUpdatedBy(String activeUpdatedBy) {
    this.activeUpdatedBy = activeUpdatedBy;
  }


  public DocumentDraftSummary publishType(String publishType) {
    
    this.publishType = publishType;
    return this;
  }

   /**
   * Denotes the type of draft.   \&quot;Created\&quot; -- the document has never been published.   \&quot;Updated\&quot; -- the document has an \&quot;active\&quot; version and this is a subsequent draft.  \&quot;Deleted\&quot; -- the \&quot;active\&quot; document will be permanently deleted when this draft is published.
   * @return publishType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Denotes the type of draft.   \"Created\" -- the document has never been published.   \"Updated\" -- the document has an \"active\" version and this is a subsequent draft.  \"Deleted\" -- the \"active\" document will be permanently deleted when this draft is published.")

  public String getPublishType() {
    return publishType;
  }


  public void setPublishType(String publishType) {
    this.publishType = publishType;
  }


  public DocumentDraftSummary publishSetCode(String publishSetCode) {
    
    this.publishSetCode = publishSetCode;
    return this;
  }

   /**
   * Get publishSetCode
   * @return publishSetCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPublishSetCode() {
    return publishSetCode;
  }


  public void setPublishSetCode(String publishSetCode) {
    this.publishSetCode = publishSetCode;
  }


  public DocumentDraftSummary masterCatalogId(Integer masterCatalogId) {
    
    this.masterCatalogId = masterCatalogId;
    return this;
  }

   /**
   * Get masterCatalogId
   * @return masterCatalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMasterCatalogId() {
    return masterCatalogId;
  }


  public void setMasterCatalogId(Integer masterCatalogId) {
    this.masterCatalogId = masterCatalogId;
  }


  public DocumentDraftSummary catalogId(Integer catalogId) {
    
    this.catalogId = catalogId;
    return this;
  }

   /**
   * Get catalogId
   * @return catalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCatalogId() {
    return catalogId;
  }


  public void setCatalogId(Integer catalogId) {
    this.catalogId = catalogId;
  }


  public DocumentDraftSummary siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Get siteId
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDraftSummary documentDraftSummary = (DocumentDraftSummary) o;
    return Objects.equals(this.id, documentDraftSummary.id) &&
        Objects.equals(this.name, documentDraftSummary.name) &&
        Objects.equals(this.documentTypeFQN, documentDraftSummary.documentTypeFQN) &&
        Objects.equals(this.listFQN, documentDraftSummary.listFQN) &&
        Objects.equals(this.activeUpdateDate, documentDraftSummary.activeUpdateDate) &&
        Objects.equals(this.draftUpdateDate, documentDraftSummary.draftUpdateDate) &&
        Objects.equals(this.updatedBy, documentDraftSummary.updatedBy) &&
        Objects.equals(this.activeUpdatedBy, documentDraftSummary.activeUpdatedBy) &&
        Objects.equals(this.publishType, documentDraftSummary.publishType) &&
        Objects.equals(this.publishSetCode, documentDraftSummary.publishSetCode) &&
        Objects.equals(this.masterCatalogId, documentDraftSummary.masterCatalogId) &&
        Objects.equals(this.catalogId, documentDraftSummary.catalogId) &&
        Objects.equals(this.siteId, documentDraftSummary.siteId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, documentTypeFQN, listFQN, activeUpdateDate, draftUpdateDate, updatedBy, activeUpdatedBy, publishType, publishSetCode, masterCatalogId, catalogId, siteId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDraftSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    documentTypeFQN: ").append(toIndentedString(documentTypeFQN)).append("\n");
    sb.append("    listFQN: ").append(toIndentedString(listFQN)).append("\n");
    sb.append("    activeUpdateDate: ").append(toIndentedString(activeUpdateDate)).append("\n");
    sb.append("    draftUpdateDate: ").append(toIndentedString(draftUpdateDate)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    activeUpdatedBy: ").append(toIndentedString(activeUpdatedBy)).append("\n");
    sb.append("    publishType: ").append(toIndentedString(publishType)).append("\n");
    sb.append("    publishSetCode: ").append(toIndentedString(publishSetCode)).append("\n");
    sb.append("    masterCatalogId: ").append(toIndentedString(masterCatalogId)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("documentTypeFQN");
    openapiFields.add("listFQN");
    openapiFields.add("activeUpdateDate");
    openapiFields.add("draftUpdateDate");
    openapiFields.add("updatedBy");
    openapiFields.add("activeUpdatedBy");
    openapiFields.add("publishType");
    openapiFields.add("publishSetCode");
    openapiFields.add("masterCatalogId");
    openapiFields.add("catalogId");
    openapiFields.add("siteId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentDraftSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentDraftSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentDraftSummary is not found in the empty JSON string", DocumentDraftSummary.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!DocumentDraftSummary.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentDraftSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("documentTypeFQN") != null && !jsonObj.get("documentTypeFQN").isJsonNull()) && !jsonObj.get("documentTypeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTypeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTypeFQN").toString()));
      }
      if ((jsonObj.get("listFQN") != null && !jsonObj.get("listFQN").isJsonNull()) && !jsonObj.get("listFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listFQN").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      if ((jsonObj.get("activeUpdatedBy") != null && !jsonObj.get("activeUpdatedBy").isJsonNull()) && !jsonObj.get("activeUpdatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeUpdatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeUpdatedBy").toString()));
      }
      if ((jsonObj.get("publishType") != null && !jsonObj.get("publishType").isJsonNull()) && !jsonObj.get("publishType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishType").toString()));
      }
      if ((jsonObj.get("publishSetCode") != null && !jsonObj.get("publishSetCode").isJsonNull()) && !jsonObj.get("publishSetCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishSetCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishSetCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentDraftSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentDraftSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentDraftSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentDraftSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentDraftSummary>() {
           @Override
           public void write(JsonWriter out, DocumentDraftSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentDraftSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentDraftSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentDraftSummary
  * @throws IOException if the JSON string is invalid with respect to DocumentDraftSummary
  */
  public static DocumentDraftSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentDraftSummary.class);
  }

 /**
  * Convert an instance of DocumentDraftSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

