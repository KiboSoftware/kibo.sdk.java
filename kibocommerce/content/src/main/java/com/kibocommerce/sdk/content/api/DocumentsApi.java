/*
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.content.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.content.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.content.models.ContentHttpRequestMessage;
import com.kibocommerce.sdk.content.models.Document;
import com.kibocommerce.sdk.content.models.DocumentCollection;
import com.kibocommerce.sdk.content.models.DocumentCopyRequest;
import com.kibocommerce.sdk.content.models.DocumentCopyResponse;
import com.kibocommerce.sdk.content.models.DocumentMoveSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public DocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public DocumentsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public DocumentsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public DocumentsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copyDocuments
     * @param documentListName DocumentListName name where the documents reside (required)
     * @param documentCopyRequest Request containing Document Ids to copy and the destination path (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDocumentsCall(String documentListName, DocumentCopyRequest documentCopyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentCopyRequest;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/copy"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyDocumentsValidateBeforeCall(String documentListName, DocumentCopyRequest documentCopyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling copyDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = copyDocumentsCall(documentListName, documentCopyRequest, _callback);
        return localVarCall;

    }

    /**
     * Copy Document
     * Copy Document
     * @param documentListName DocumentListName name where the documents reside (required)
     * @param documentCopyRequest Request containing Document Ids to copy and the destination path (optional)
     * @return DocumentCopyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCopyResponse copyDocuments(String documentListName, DocumentCopyRequest documentCopyRequest) throws ApiException {
        ApiResponse<DocumentCopyResponse> localVarResp = copyDocumentsWithHttpInfo(documentListName, documentCopyRequest);
        return localVarResp.getData();
    }

    /**
     * Copy Document
     * Copy Document
     * @param documentListName DocumentListName name where the documents reside (required)
     * @param documentCopyRequest Request containing Document Ids to copy and the destination path (optional)
     * @return ApiResponse&lt;DocumentCopyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCopyResponse> copyDocumentsWithHttpInfo(String documentListName, DocumentCopyRequest documentCopyRequest) throws ApiException {
        okhttp3.Call localVarCall = copyDocumentsValidateBeforeCall(documentListName, documentCopyRequest, null);
        Type localVarReturnType = new TypeToken<DocumentCopyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy Document (asynchronously)
     * Copy Document
     * @param documentListName DocumentListName name where the documents reside (required)
     * @param documentCopyRequest Request containing Document Ids to copy and the destination path (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyDocumentsAsync(String documentListName, DocumentCopyRequest documentCopyRequest, final ApiCallback<DocumentCopyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyDocumentsValidateBeforeCall(documentListName, documentCopyRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentCopyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDocument
     * @param documentListName  (required)
     * @param document The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentCall(String documentListName, Document document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentValidateBeforeCall(String documentListName, Document document, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling createDocument(Async)");
        }
        

        okhttp3.Call localVarCall = createDocumentCall(documentListName, document, _callback);
        return localVarCall;

    }

    /**
     * Create Document
     * Create Document
     * @param documentListName  (required)
     * @param document The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Document createDocument(String documentListName, Document document) throws ApiException {
        ApiResponse<Document> localVarResp = createDocumentWithHttpInfo(documentListName, document);
        return localVarResp.getData();
    }

    /**
     * Create Document
     * Create Document
     * @param documentListName  (required)
     * @param document The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> createDocumentWithHttpInfo(String documentListName, Document document) throws ApiException {
        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(documentListName, document, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Document (asynchronously)
     * Create Document
     * @param documentListName  (required)
     * @param document The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentAsync(String documentListName, Document document, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentValidateBeforeCall(documentListName, document, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteByPath
     * @param documentListName  (required)
     * @param path  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByPathCall(String documentListName, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByPathValidateBeforeCall(String documentListName, String path, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling deleteByPath(Async)");
        }
        

        okhttp3.Call localVarCall = deleteByPathCall(documentListName, path, _callback);
        return localVarCall;

    }

    /**
     * Delete Document
     * Delete Document
     * @param documentListName  (required)
     * @param path  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteByPath(String documentListName, String path) throws ApiException {
        deleteByPathWithHttpInfo(documentListName, path);
    }

    /**
     * Delete Document
     * Delete Document
     * @param documentListName  (required)
     * @param path  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteByPathWithHttpInfo(String documentListName, String path) throws ApiException {
        okhttp3.Call localVarCall = deleteByPathValidateBeforeCall(documentListName, path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document (asynchronously)
     * Delete Document
     * @param documentListName  (required)
     * @param path  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteByPathAsync(String documentListName, String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByPathValidateBeforeCall(documentListName, path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling deleteDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDocumentCall(documentListName, documentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Document
     * Delete Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String documentListName, String documentId) throws ApiException {
        deleteDocumentWithHttpInfo(documentListName, documentId);
    }

    /**
     * Delete Document
     * Delete Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String documentListName, String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentListName, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document (asynchronously)
     * Delete Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String documentListName, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentListName, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocumentContent
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentContentCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentContentValidateBeforeCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling deleteDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDocumentContentCall(documentListName, documentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Document Content
     * Delete Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocumentContent(String documentListName, String documentId) throws ApiException {
        deleteDocumentContentWithHttpInfo(documentListName, documentId);
    }

    /**
     * Delete Document Content
     * Delete Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentContentWithHttpInfo(String documentListName, String documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentContentValidateBeforeCall(documentListName, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document Content (asynchronously)
     * Delete Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentContentAsync(String documentListName, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentContentValidateBeforeCall(documentListName, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTreeDocumentContent
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTreeDocumentContentCall(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentHttpRequestMessage;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTreeDocumentContentValidateBeforeCall(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling deleteTreeDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling deleteTreeDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTreeDocumentContentCall(documentListName, documentName, contentHttpRequestMessage, _callback);
        return localVarCall;

    }

    /**
     * Delete Document Content by Path
     * Delete Document Content by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTreeDocumentContent(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        deleteTreeDocumentContentWithHttpInfo(documentListName, documentName, contentHttpRequestMessage);
    }

    /**
     * Delete Document Content by Path
     * Delete Document Content by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTreeDocumentContentWithHttpInfo(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        okhttp3.Call localVarCall = deleteTreeDocumentContentValidateBeforeCall(documentListName, documentName, contentHttpRequestMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Document Content by Path (asynchronously)
     * Delete Document Content by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTreeDocumentContentAsync(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTreeDocumentContentValidateBeforeCall(documentListName, documentName, contentHttpRequestMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocument
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCall(String documentListName, String documentId, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(String documentListName, String documentId, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentCall(documentListName, documentId, includeInactive, _callback);
        return localVarCall;

    }

    /**
     * Get Document
     * Get Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Document getDocument(String documentListName, String documentId, Boolean includeInactive) throws ApiException {
        ApiResponse<Document> localVarResp = getDocumentWithHttpInfo(documentListName, documentId, includeInactive);
        return localVarResp.getData();
    }

    /**
     * Get Document
     * Get Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> getDocumentWithHttpInfo(String documentListName, String documentId, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(documentListName, documentId, includeInactive, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Document (asynchronously)
     * Get Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAsync(String documentListName, String documentId, Boolean includeInactive, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(documentListName, documentId, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentContent
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentContentValidateBeforeCall(String documentListName, String documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentContentCall(documentListName, documentId, _callback);
        return localVarCall;

    }

    /**
     * Get Document Content
     * Get Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getDocumentContent(String documentListName, String documentId) throws ApiException {
        getDocumentContentWithHttpInfo(documentListName, documentId);
    }

    /**
     * Get Document Content
     * Get Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDocumentContentWithHttpInfo(String documentListName, String documentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentContentValidateBeforeCall(documentListName, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Document Content (asynchronously)
     * Get Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentAsync(String documentListName, String documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentContentValidateBeforeCall(documentListName, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentContentHead
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentHeadCall(String documentListName, String documentId, String includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentContentHeadValidateBeforeCall(String documentListName, String documentId, String includeInactive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getDocumentContentHead(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentContentHead(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentContentHeadCall(documentListName, documentId, includeInactive, _callback);
        return localVarCall;

    }

    /**
     * Get Document Content Headers
     * Get Document Content Headers
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getDocumentContentHead(String documentListName, String documentId, String includeInactive) throws ApiException {
        getDocumentContentHeadWithHttpInfo(documentListName, documentId, includeInactive);
    }

    /**
     * Get Document Content Headers
     * Get Document Content Headers
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDocumentContentHeadWithHttpInfo(String documentListName, String documentId, String includeInactive) throws ApiException {
        okhttp3.Call localVarCall = getDocumentContentHeadValidateBeforeCall(documentListName, documentId, includeInactive, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Document Content Headers (asynchronously)
     * Get Document Content Headers
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param includeInactive  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentContentHeadAsync(String documentListName, String documentId, String includeInactive, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentContentHeadValidateBeforeCall(documentListName, documentId, includeInactive, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocuments
     * @param documentListName  (required)
     * @param filter Mozu.Content.Contracts.PropertyType filter expression to match against document properties. &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.FilterParser\&quot; /&gt; (optional)
     * @param sortBy Sort expression.  &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.SortParser\&quot; /&gt; (optional)
     * @param pageSize Page size (optional)
     * @param startIndex First item in the page to return from the total result set (optional)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param path path from which to return documents (optional)
     * @param includeSubPaths if true this call will populate Subpaths (optional, default to false)
     * @param queryScope Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.              Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global (optional, default to SpecifiedPathOnly)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsCall(String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, Boolean includeInactive, String path, Boolean includeSubPaths, String queryScope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (includeSubPaths != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSubPaths", includeSubPaths));
        }

        if (queryScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryScope", queryScope));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsValidateBeforeCall(String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, Boolean includeInactive, String path, Boolean includeSubPaths, String queryScope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = getDocumentsCall(documentListName, filter, sortBy, pageSize, startIndex, includeInactive, path, includeSubPaths, queryScope, _callback);
        return localVarCall;

    }

    /**
     * Get Documents
     * Get Documents
     * @param documentListName  (required)
     * @param filter Mozu.Content.Contracts.PropertyType filter expression to match against document properties. &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.FilterParser\&quot; /&gt; (optional)
     * @param sortBy Sort expression.  &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.SortParser\&quot; /&gt; (optional)
     * @param pageSize Page size (optional)
     * @param startIndex First item in the page to return from the total result set (optional)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param path path from which to return documents (optional)
     * @param includeSubPaths if true this call will populate Subpaths (optional, default to false)
     * @param queryScope Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.              Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global (optional, default to SpecifiedPathOnly)
     * @return DocumentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCollection getDocuments(String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, Boolean includeInactive, String path, Boolean includeSubPaths, String queryScope) throws ApiException {
        ApiResponse<DocumentCollection> localVarResp = getDocumentsWithHttpInfo(documentListName, filter, sortBy, pageSize, startIndex, includeInactive, path, includeSubPaths, queryScope);
        return localVarResp.getData();
    }

    /**
     * Get Documents
     * Get Documents
     * @param documentListName  (required)
     * @param filter Mozu.Content.Contracts.PropertyType filter expression to match against document properties. &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.FilterParser\&quot; /&gt; (optional)
     * @param sortBy Sort expression.  &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.SortParser\&quot; /&gt; (optional)
     * @param pageSize Page size (optional)
     * @param startIndex First item in the page to return from the total result set (optional)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param path path from which to return documents (optional)
     * @param includeSubPaths if true this call will populate Subpaths (optional, default to false)
     * @param queryScope Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.              Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global (optional, default to SpecifiedPathOnly)
     * @return ApiResponse&lt;DocumentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCollection> getDocumentsWithHttpInfo(String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, Boolean includeInactive, String path, Boolean includeSubPaths, String queryScope) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(documentListName, filter, sortBy, pageSize, startIndex, includeInactive, path, includeSubPaths, queryScope, null);
        Type localVarReturnType = new TypeToken<DocumentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Documents (asynchronously)
     * Get Documents
     * @param documentListName  (required)
     * @param filter Mozu.Content.Contracts.PropertyType filter expression to match against document properties. &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.FilterParser\&quot; /&gt; (optional)
     * @param sortBy Sort expression.  &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.SortParser\&quot; /&gt; (optional)
     * @param pageSize Page size (optional)
     * @param startIndex First item in the page to return from the total result set (optional)
     * @param includeInactive if this call should include a adocument that isn&#39;t active in the given preview date (optional)
     * @param path path from which to return documents (optional)
     * @param includeSubPaths if true this call will populate Subpaths (optional, default to false)
     * @param queryScope Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.              Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global (optional, default to SpecifiedPathOnly)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentsAsync(String documentListName, String filter, String sortBy, Integer pageSize, Integer startIndex, Boolean includeInactive, String path, Boolean includeSubPaths, String queryScope, final ApiCallback<DocumentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsValidateBeforeCall(documentListName, filter, sortBy, pageSize, startIndex, includeInactive, path, includeSubPaths, queryScope, _callback);
        Type localVarReturnType = new TypeToken<DocumentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreeDocument
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param includeInactive if this call should include a document that isn&#39;t active in the given preview date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentCall(String documentListName, String documentName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreeDocumentValidateBeforeCall(String documentListName, String documentName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getTreeDocument(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling getTreeDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getTreeDocumentCall(documentListName, documentName, includeInactive, _callback);
        return localVarCall;

    }

    /**
     * Get Document by Path
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param includeInactive if this call should include a document that isn&#39;t active in the given preview date (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Document getTreeDocument(String documentListName, String documentName, Boolean includeInactive) throws ApiException {
        ApiResponse<Document> localVarResp = getTreeDocumentWithHttpInfo(documentListName, documentName, includeInactive);
        return localVarResp.getData();
    }

    /**
     * Get Document by Path
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param includeInactive if this call should include a document that isn&#39;t active in the given preview date (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> getTreeDocumentWithHttpInfo(String documentListName, String documentName, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = getTreeDocumentValidateBeforeCall(documentListName, documentName, includeInactive, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Document by Path (asynchronously)
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param includeInactive if this call should include a document that isn&#39;t active in the given preview date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentAsync(String documentListName, String documentName, Boolean includeInactive, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreeDocumentValidateBeforeCall(documentListName, documentName, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreeDocumentContent
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentContentCall(String documentListName, String documentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreeDocumentContentValidateBeforeCall(String documentListName, String documentName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getTreeDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling getTreeDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = getTreeDocumentContentCall(documentListName, documentName, _callback);
        return localVarCall;

    }

    /**
     * Get Document Content by Path
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getTreeDocumentContent(String documentListName, String documentName) throws ApiException {
        getTreeDocumentContentWithHttpInfo(documentListName, documentName);
    }

    /**
     * Get Document Content by Path
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTreeDocumentContentWithHttpInfo(String documentListName, String documentName) throws ApiException {
        okhttp3.Call localVarCall = getTreeDocumentContentValidateBeforeCall(documentListName, documentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Document Content by Path (asynchronously)
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentContentAsync(String documentListName, String documentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreeDocumentContentValidateBeforeCall(documentListName, documentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTreeDocumentContentHead
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentContentHeadCall(String documentListName, String documentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTreeDocumentContentHeadValidateBeforeCall(String documentListName, String documentName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling getTreeDocumentContentHead(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling getTreeDocumentContentHead(Async)");
        }
        

        okhttp3.Call localVarCall = getTreeDocumentContentHeadCall(documentListName, documentName, _callback);
        return localVarCall;

    }

    /**
     * Get Document Content Headers by Path
     * Get Document Content Headers by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getTreeDocumentContentHead(String documentListName, String documentName) throws ApiException {
        getTreeDocumentContentHeadWithHttpInfo(documentListName, documentName);
    }

    /**
     * Get Document Content Headers by Path
     * Get Document Content Headers by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTreeDocumentContentHeadWithHttpInfo(String documentListName, String documentName) throws ApiException {
        okhttp3.Call localVarCall = getTreeDocumentContentHeadValidateBeforeCall(documentListName, documentName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Document Content Headers by Path (asynchronously)
     * Get Document Content Headers by Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTreeDocumentContentHeadAsync(String documentListName, String documentName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTreeDocumentContentHeadValidateBeforeCall(documentListName, documentName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveByPath
     * @param documentListName DocumentListName name where the document resides (required)
     * @param sourcePath Source path (optional)
     * @param destPath Destination path (optional)
     * @param renameDuplicates Flag to rename file if duplicate filename exists in destination (defaults to true) (optional, default to true)
     * @param previewMode Flag to denote whether to preview move operation or actually perform (defaults to false) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveByPathCall(String documentListName, String sourcePath, String destPath, Boolean renameDuplicates, Boolean previewMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/move"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourcePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourcePath", sourcePath));
        }

        if (destPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destPath", destPath));
        }

        if (renameDuplicates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("renameDuplicates", renameDuplicates));
        }

        if (previewMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previewMode", previewMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveByPathValidateBeforeCall(String documentListName, String sourcePath, String destPath, Boolean renameDuplicates, Boolean previewMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling moveByPath(Async)");
        }
        

        okhttp3.Call localVarCall = moveByPathCall(documentListName, sourcePath, destPath, renameDuplicates, previewMode, _callback);
        return localVarCall;

    }

    /**
     * Move Document
     * Move Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param sourcePath Source path (optional)
     * @param destPath Destination path (optional)
     * @param renameDuplicates Flag to rename file if duplicate filename exists in destination (defaults to true) (optional, default to true)
     * @param previewMode Flag to denote whether to preview move operation or actually perform (defaults to false) (optional, default to false)
     * @return DocumentMoveSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentMoveSummary moveByPath(String documentListName, String sourcePath, String destPath, Boolean renameDuplicates, Boolean previewMode) throws ApiException {
        ApiResponse<DocumentMoveSummary> localVarResp = moveByPathWithHttpInfo(documentListName, sourcePath, destPath, renameDuplicates, previewMode);
        return localVarResp.getData();
    }

    /**
     * Move Document
     * Move Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param sourcePath Source path (optional)
     * @param destPath Destination path (optional)
     * @param renameDuplicates Flag to rename file if duplicate filename exists in destination (defaults to true) (optional, default to true)
     * @param previewMode Flag to denote whether to preview move operation or actually perform (defaults to false) (optional, default to false)
     * @return ApiResponse&lt;DocumentMoveSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentMoveSummary> moveByPathWithHttpInfo(String documentListName, String sourcePath, String destPath, Boolean renameDuplicates, Boolean previewMode) throws ApiException {
        okhttp3.Call localVarCall = moveByPathValidateBeforeCall(documentListName, sourcePath, destPath, renameDuplicates, previewMode, null);
        Type localVarReturnType = new TypeToken<DocumentMoveSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move Document (asynchronously)
     * Move Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param sourcePath Source path (optional)
     * @param destPath Destination path (optional)
     * @param renameDuplicates Flag to rename file if duplicate filename exists in destination (defaults to true) (optional, default to true)
     * @param previewMode Flag to denote whether to preview move operation or actually perform (defaults to false) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveByPathAsync(String documentListName, String sourcePath, String destPath, Boolean renameDuplicates, Boolean previewMode, final ApiCallback<DocumentMoveSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveByPathValidateBeforeCall(documentListName, sourcePath, destPath, renameDuplicates, previewMode, _callback);
        Type localVarReturnType = new TypeToken<DocumentMoveSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDocument
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDocumentCall(String documentListName, String documentId, Document document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDocumentValidateBeforeCall(String documentListName, String documentId, Document document, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling patchDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling patchDocument(Async)");
        }
        

        okhttp3.Call localVarCall = patchDocumentCall(documentListName, documentId, document, _callback);
        return localVarCall;

    }

    /**
     * Patch Document
     * Patch Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param document  (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Document patchDocument(String documentListName, String documentId, Document document) throws ApiException {
        ApiResponse<Document> localVarResp = patchDocumentWithHttpInfo(documentListName, documentId, document);
        return localVarResp.getData();
    }

    /**
     * Patch Document
     * Patch Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param document  (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> patchDocumentWithHttpInfo(String documentListName, String documentId, Document document) throws ApiException {
        okhttp3.Call localVarCall = patchDocumentValidateBeforeCall(documentListName, documentId, document, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Document (asynchronously)
     * Patch Document
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDocumentAsync(String documentListName, String documentId, Document document, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDocumentValidateBeforeCall(documentListName, documentId, document, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformDocumentContent
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformDocumentContentCall(String documentListName, String documentId, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}/transform"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (crop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crop", crop));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformDocumentContentValidateBeforeCall(String documentListName, String documentId, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling transformDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling transformDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = transformDocumentContentCall(documentListName, documentId, width, height, max, maxWidth, maxHeight, crop, quality, _callback);
        return localVarCall;

    }

    /**
     * Get Resized Image
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void transformDocumentContent(String documentListName, String documentId, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality) throws ApiException {
        transformDocumentContentWithHttpInfo(documentListName, documentId, width, height, max, maxWidth, maxHeight, crop, quality);
    }

    /**
     * Get Resized Image
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transformDocumentContentWithHttpInfo(String documentListName, String documentId, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = transformDocumentContentValidateBeforeCall(documentListName, documentId, width, height, max, maxWidth, maxHeight, crop, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Resized Image (asynchronously)
     * Returns transformations on a document. For example, resizing an image.
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformDocumentContentAsync(String documentListName, String documentId, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformDocumentContentValidateBeforeCall(documentListName, documentId, width, height, max, maxWidth, maxHeight, crop, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformTreeDocumentContent
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformTreeDocumentContentCall(String documentListName, String documentName, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}/transform"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (maxWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxWidth", maxWidth));
        }

        if (maxHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxHeight", maxHeight));
        }

        if (crop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crop", crop));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformTreeDocumentContentValidateBeforeCall(String documentListName, String documentName, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling transformTreeDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling transformTreeDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = transformTreeDocumentContentCall(documentListName, documentName, width, height, max, maxWidth, maxHeight, crop, quality, _callback);
        return localVarCall;

    }

    /**
     * Get Resized Image by Path
     * Returns transformations on a document. For example, resizing an image. By Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void transformTreeDocumentContent(String documentListName, String documentName, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality) throws ApiException {
        transformTreeDocumentContentWithHttpInfo(documentListName, documentName, width, height, max, maxWidth, maxHeight, crop, quality);
    }

    /**
     * Get Resized Image by Path
     * Returns transformations on a document. For example, resizing an image. By Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transformTreeDocumentContentWithHttpInfo(String documentListName, String documentName, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = transformTreeDocumentContentValidateBeforeCall(documentListName, documentName, width, height, max, maxWidth, maxHeight, crop, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Resized Image by Path (asynchronously)
     * Returns transformations on a document. For example, resizing an image. By Path
     * @param documentListName  (required)
     * @param documentName  (required)
     * @param width  (optional)
     * @param height  (optional)
     * @param max  (optional)
     * @param maxWidth  (optional)
     * @param maxHeight  (optional)
     * @param crop  (optional)
     * @param quality  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transformTreeDocumentContentAsync(String documentListName, String documentName, Integer width, Integer height, Integer max, Integer maxWidth, Integer maxHeight, String crop, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformTreeDocumentContentValidateBeforeCall(documentListName, documentName, width, height, max, maxWidth, maxHeight, crop, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDocument
     * @param documentListName DocumentListName name where the document resides (required)
     * @param documentId Id of the document to update (required)
     * @param document  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentCall(String documentListName, String documentId, Document document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentValidateBeforeCall(String documentListName, String documentId, Document document, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling updateDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocument(Async)");
        }
        

        okhttp3.Call localVarCall = updateDocumentCall(documentListName, documentId, document, _callback);
        return localVarCall;

    }

    /**
     * Update Document
     * Update Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param documentId Id of the document to update (required)
     * @param document  (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Document updateDocument(String documentListName, String documentId, Document document) throws ApiException {
        ApiResponse<Document> localVarResp = updateDocumentWithHttpInfo(documentListName, documentId, document);
        return localVarResp.getData();
    }

    /**
     * Update Document
     * Update Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param documentId Id of the document to update (required)
     * @param document  (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> updateDocumentWithHttpInfo(String documentListName, String documentId, Document document) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(documentListName, documentId, document, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Document (asynchronously)
     * Update Document
     * @param documentListName DocumentListName name where the document resides (required)
     * @param documentId Id of the document to update (required)
     * @param document  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentAsync(String documentListName, String documentId, Document document, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(documentListName, documentId, document, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDocumentContent
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param contentHttpRequestMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentContentCall(String documentListName, String documentId, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentHttpRequestMessage;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documents/{documentId}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDocumentContentValidateBeforeCall(String documentListName, String documentId, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling updateDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = updateDocumentContentCall(documentListName, documentId, contentHttpRequestMessage, _callback);
        return localVarCall;

    }

    /**
     * Update Document Content
     * Update Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param contentHttpRequestMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateDocumentContent(String documentListName, String documentId, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        updateDocumentContentWithHttpInfo(documentListName, documentId, contentHttpRequestMessage);
    }

    /**
     * Update Document Content
     * Update Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param contentHttpRequestMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateDocumentContentWithHttpInfo(String documentListName, String documentId, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        okhttp3.Call localVarCall = updateDocumentContentValidateBeforeCall(documentListName, documentId, contentHttpRequestMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Document Content (asynchronously)
     * Update Document Content
     * @param documentListName  (required)
     * @param documentId  (required)
     * @param contentHttpRequestMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDocumentContentAsync(String documentListName, String documentId, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDocumentContentValidateBeforeCall(documentListName, documentId, contentHttpRequestMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTreeDocumentContent
     * @param documentListName The Mozu.Content.Contracts.DocumentList in which the document resides (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage Binary document content to store must be less than 16M (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTreeDocumentContentCall(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentHttpRequestMessage;

        // create path and map variables
        String localVarPath = "/content/documentlists/{documentListName}/documentTree/{documentName}/content"
            .replaceAll("\\{" + "documentListName" + "\\}", localVarApiClient.escapeString(documentListName.toString()))
            .replaceAll("\\{" + "documentName" + "\\}", localVarApiClient.escapeString(documentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain", "application/octet-stream", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTreeDocumentContentValidateBeforeCall(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentListName' is set
        if (documentListName == null) {
            throw new ApiException("Missing the required parameter 'documentListName' when calling updateTreeDocumentContent(Async)");
        }
        
        // verify the required parameter 'documentName' is set
        if (documentName == null) {
            throw new ApiException("Missing the required parameter 'documentName' when calling updateTreeDocumentContent(Async)");
        }
        

        okhttp3.Call localVarCall = updateTreeDocumentContentCall(documentListName, documentName, contentHttpRequestMessage, _callback);
        return localVarCall;

    }

    /**
     * Update Document Content by Path
     * Update Document Content by Path
     * @param documentListName The Mozu.Content.Contracts.DocumentList in which the document resides (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage Binary document content to store must be less than 16M (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void updateTreeDocumentContent(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        updateTreeDocumentContentWithHttpInfo(documentListName, documentName, contentHttpRequestMessage);
    }

    /**
     * Update Document Content by Path
     * Update Document Content by Path
     * @param documentListName The Mozu.Content.Contracts.DocumentList in which the document resides (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage Binary document content to store must be less than 16M (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTreeDocumentContentWithHttpInfo(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage) throws ApiException {
        okhttp3.Call localVarCall = updateTreeDocumentContentValidateBeforeCall(documentListName, documentName, contentHttpRequestMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Document Content by Path (asynchronously)
     * Update Document Content by Path
     * @param documentListName The Mozu.Content.Contracts.DocumentList in which the document resides (required)
     * @param documentName  (required)
     * @param contentHttpRequestMessage Binary document content to store must be less than 16M (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTreeDocumentContentAsync(String documentListName, String documentName, ContentHttpRequestMessage contentHttpRequestMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTreeDocumentContentValidateBeforeCall(documentListName, documentName, contentHttpRequestMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public DocumentsApi build() {
            return new DocumentsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
