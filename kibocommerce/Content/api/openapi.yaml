openapi: 3.0.1
info:
  description: OpenAPI Spec for Kibo Content Service
  title: Kibo Content Service
servers:
- description: TenantPod Host
  url: "https://{tenantPodHost}/api"
- description: Tenant Level Api
  url: "https://t{tenantId}.{env}.mozu.com/api"
  variables:
    tenantId:
      default: "0"
      description: Id of the Tenant
    env:
      default: sandbox
      enum:
      - sandbox
      - tp1
      - tp2
      - tp3
      - tp4
      - tp5
      - stg1
      - stg2
- description: Site Level Api
  url: "https://t{tenantId}-s{siteId}.{env}.mozu.com/api"
  variables:
    tenantId:
      default: "0"
      description: Id of the Tenant
    siteId:
      default: "0"
      description: Id of the Site
    env:
      default: sandbox
      enum:
      - sandbox
      - tp1
      - tp2
      - tp3
      - tp4
      - tp5
      - stg1
- description: HomePod Api
  url: https://home.mozu.com/api
- description: EURO Tenant Level Api
  url: "https://t{tenantId}.{env}.euw1.kibocommerce.com/api"
  variables:
    tenantId:
      default: "0"
      description: Id of the Tenant
    env:
      default: sandbox
      enum:
      - sb
      - tp1
- description: EURO Site Level Api
  url: "https://t{tenantId}-s{siteId}.{env}.euw1.kibocommerce.com/api"
  variables:
    tenantId:
      default: "0"
      description: Id of the Tenant
    siteId:
      default: "0"
      description: Id of the Site
    env:
      default: sandbox
      enum:
      - sb
      - tp1
- description: EURO HomePod Api
  url: https://home.euw1.kibocommerce.com/api
security:
- bearerAuth: []
  clientOauth2: []
paths:
  /content/documentlists/{documentListName}/documents/{documentId}/content:
    delete:
      description: Delete Document Content
      operationId: deleteDocumentContent
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Delete Document Content
      tags:
      - Documents
      x-accepts: application/json
    get:
      description: Get Document Content
      operationId: getDocumentContent
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Get Document Content
      tags:
      - Documents
      x-accepts: application/json
    head:
      description: Get Document Content Headers
      operationId: getDocumentContentHead
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Success
      summary: Get Document Content Headers
      tags:
      - Documents
      x-accepts: application/json
    put:
      description: Update Document Content
      operationId: updateDocumentContent
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/json:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
      responses:
        "200":
          description: Success
      summary: Update Document Content
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}/documents/{documentId}/transform:
    get:
      description: "Returns transformations on a document. For example, resizing an\
        \ image."
      operationId: transformDocumentContent
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: max
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: maxWidth
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: maxHeight
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: crop
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: quality
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          description: Success
      summary: Get Resized Image
      tags:
      - Documents
      x-accepts: application/json
  /content/documentlists/{documentListName}/documentTree/{documentName}/content:
    delete:
      description: Delete Document Content by Path
      operationId: deleteTreeDocumentContent
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/json:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
      responses:
        "200":
          description: Success
      summary: Delete Document Content by Path
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
    get:
      description: "Returns transformations on a document. For example, resizing an\
        \ image."
      operationId: getTreeDocumentContent
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Get Document Content by Path
      tags:
      - Documents
      x-accepts: application/json
    head:
      description: Get Document Content Headers by Path
      operationId: getTreeDocumentContentHead
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Get Document Content Headers by Path
      tags:
      - Documents
      x-accepts: application/json
    put:
      description: Update Document Content by Path
      operationId: updateTreeDocumentContent
      parameters:
      - description: The Mozu.Content.Contracts.DocumentList in which the document
          resides
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
          application/json:
            schema:
              $ref: '#/components/schemas/ContentHttpRequestMessage'
        description: Binary document content to store must be less than 16M
      responses:
        "200":
          description: Success
      summary: Update Document Content by Path
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}/documentTree/{documentName}/transform:
    get:
      description: "Returns transformations on a document. For example, resizing an\
        \ image. By Path"
      operationId: transformTreeDocumentContent
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: width
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: height
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: max
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: maxWidth
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: maxHeight
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: crop
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: quality
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          description: Success
      summary: Get Resized Image by Path
      tags:
      - Documents
      x-accepts: application/json
  /content/documentlists/{documentListName}/documents:
    delete:
      description: Delete Document
      operationId: deleteByPath
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Success
      summary: Delete Document
      tags:
      - Documents
      x-accepts: application/json
    get:
      description: Get Documents
      operationId: getDocuments
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: Mozu.Content.Contracts.PropertyType filter expression to match
          against document properties. <seealso cref="T:Mozu.Core.FilterParsing.FilterParser"
          />
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Sort expression.  <seealso cref="T:Mozu.Core.FilterParsing.SortParser"
          />
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - description: Page size
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: First item in the page to return from the total result set
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: if this call should include a adocument that isn't active in
          the given preview date
        explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: boolean
        style: form
      - description: path from which to return documents
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: if true this call will populate Subpaths
        explode: true
        in: query
        name: includeSubPaths
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Determines if the path parameter is used to scope the query\
          \ to the specified path or ignored for a global scope.\r\n            Defaults\
          \ to specified path only. Valid values are: SpecifiedPathOnly, Global"
        explode: true
        in: query
        name: queryScope
        required: false
        schema:
          default: SpecifiedPathOnly
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
          description: Success
      summary: Get Documents
      tags:
      - Documents
      x-accepts: application/json
    post:
      description: Create Document
      operationId: createDocument
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Document'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Document'
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        description: The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
          description: Success
      summary: Create Document
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}/documents/{documentId}:
    delete:
      description: Delete Document
      operationId: deleteDocument
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Delete Document
      tags:
      - Documents
      x-accepts: application/json
    get:
      description: Get Document
      operationId: getDocument
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: if this call should include a adocument that isn't active in
          the given preview date
        explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
          description: Success
      summary: Get Document
      tags:
      - Documents
      x-accepts: application/json
    patch:
      description: Patch Document
      operationId: patchDocument
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Document'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Document'
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
          description: Success
      summary: Patch Document
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
    put:
      description: Update Document
      operationId: updateDocument
      parameters:
      - description: DocumentListName name where the document resides
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the document to update
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/Document'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Document'
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
          description: Success
      summary: Update Document
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}/documentTree/{documentName}:
    get:
      description: "Retrieves a specific Document within the specified ContentCollection\
        \ using the specified document name, unique within a specific folder with\
        \ the specified documentId, version, and status."
      operationId: getTreeDocument
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: ""
        explode: false
        in: path
        name: documentName
        required: true
        schema:
          type: string
        style: simple
      - description: if this call should include a document that isn't active in the
          given preview date
        explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/json:
              schema:
                $ref: '#/components/schemas/Document'
            text/plain:
              schema:
                $ref: '#/components/schemas/Document'
          description: Success
      summary: Get Document by Path
      tags:
      - Documents
      x-accepts: application/json
  /content/documentlists/{documentListName}/documents/move:
    put:
      description: Move Document
      operationId: moveByPath
      parameters:
      - description: DocumentListName name where the document resides
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - description: Source path
        explode: true
        in: query
        name: sourcePath
        required: false
        schema:
          type: string
        style: form
      - description: Destination path
        explode: true
        in: query
        name: destPath
        required: false
        schema:
          type: string
        style: form
      - description: Flag to rename file if duplicate filename exists in destination
          (defaults to true)
        explode: true
        in: query
        name: renameDuplicates
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: Flag to denote whether to preview move operation or actually
          perform (defaults to false)
        explode: true
        in: query
        name: previewMode
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMoveSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentMoveSummary'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentMoveSummary'
          description: Success
      summary: Move Document
      tags:
      - Documents
      x-accepts: application/json
  /content/documentlists/{documentListName}/documents/copy:
    put:
      description: Copy Document
      operationId: copyDocuments
      parameters:
      - description: DocumentListName name where the documents reside
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentCopyRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentCopyRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCopyRequest'
        description: Request containing Document Ids to copy and the destination path
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCopyResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentCopyResponse'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentCopyResponse'
          description: Success
      summary: Copy Document
      tags:
      - Documents
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists:
    get:
      description: Retrieve a paged documentListName of all document lists
      operationId: getDocumentLists
      parameters:
      - description: maximum number of items to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentListCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentListCollection'
          description: Success
      summary: Get Document Lists
      tags:
      - DocumentList
      x-accepts: application/json
    post:
      description: Create DocumentList
      operationId: createDocumentList
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentList'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentList'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentList'
        description: DocumentListName
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentList'
          description: Success
      summary: Create DocumentList
      tags:
      - DocumentList
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}:
    delete:
      description: Delete Document List
      operationId: deleteDocumentList
      parameters:
      - description: Name of content documentListName to delete
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Delete Document List
      tags:
      - DocumentList
      x-accepts: application/json
    get:
      description: Get Document List
      operationId: getDocumentList
      parameters:
      - description: Name of document documentListName to retrieve
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentList'
          description: Success
      summary: Get Document List
      tags:
      - DocumentList
      x-accepts: application/json
    put:
      description: Update Document List
      operationId: updateDocumentList
      parameters:
      - description: The name of the documentList to update
        explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentList'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentList'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentList'
        description: Content Collection values to apply
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentList'
          description: Success
      summary: Update Document List
      tags:
      - DocumentList
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlists/{documentListName}/views/{viewName}/documents:
    get:
      description: Get View Documents
      operationId: getViewDocuments
      parameters:
      - explode: false
        in: path
        name: documentListName
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: viewName
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentCollection'
          description: Success
      summary: Get View Documents
      tags:
      - Views
      x-accepts: application/json
  /content/documentlistTypes:
    get:
      description: Get Document List Types
      operationId: getDocumentListTypes
      parameters:
      - explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListTypeCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentListTypeCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentListTypeCollection'
          description: Success
      summary: Get Document List Types
      tags:
      - DocumentListType
      x-accepts: application/json
    post:
      description: Create Document List Type
      operationId: createDocumentListType
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentListType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentListType'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentListType'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentListType'
          description: Success
      summary: Create Document List Type
      tags:
      - DocumentListType
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentlistTypes/{documentListTypeFQN}:
    get:
      description: Get Document List Type
      operationId: getDocumentListType
      parameters:
      - explode: false
        in: path
        name: documentListTypeFQN
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentListType'
          description: Success
      summary: Get Document List Type
      tags:
      - DocumentListType
      x-accepts: application/json
    put:
      description: Update Document List Type
      operationId: updateDocumentListType
      parameters:
      - description: The name of the document documentListName to update
        explode: false
        in: path
        name: documentListTypeFQN
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentListType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentListType'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentListType'
        description: Content Collection values to apply
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentListType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentListType'
          description: Success
      summary: Update Document List Type
      tags:
      - DocumentListType
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentpublishing/draft:
    get:
      description: Get Document Draft Summaries
      operationId: listDocumentDraftSummaries
      parameters:
      - description: maximum number of items to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: documentLists
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
          description: Success
      summary: Get Document Draft Summaries
      tags:
      - DocumentPublishing
      x-accepts: application/json
    post:
      description: Remove draft of each Document associated with te id in documentIds.
        Send empty body to remove all drafts
      operationId: deleteDocumentDrafts
      parameters:
      - description: ""
        explode: true
        in: query
        name: documentLists
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          text/plain:
            schema:
              items:
                type: string
              type: array
          application/octet-stream:
            schema:
              items:
                type: string
              type: array
          application/json:
            schema:
              items:
                type: string
              type: array
        description: ""
      responses:
        "200":
          description: Success
      summary: Delete Document Drafts
      tags:
      - DocumentPublishing
      x-content-type: text/plain
      x-accepts: application/json
  /content/documentpublishing/active:
    put:
      description: Publishes draft of each Document associated with the id in documentIds.
        Send empty body to publish all drafts
      operationId: publishDocuments
      parameters:
      - description: ""
        explode: true
        in: query
        name: documentLists
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          text/plain:
            schema:
              items:
                type: string
              type: array
          application/octet-stream:
            schema:
              items:
                type: string
              type: array
          application/json:
            schema:
              items:
                type: string
              type: array
        description: ""
      responses:
        "200":
          description: Success
      summary: Publish Documents
      tags:
      - DocumentPublishing
      x-content-type: text/plain
      x-accepts: application/json
  /content/publishsets/{code}/items:
    get:
      description: Retrieve a paged collection of publish set Items.
      operationId: getPublishSetItems
      parameters:
      - description: code of the publish set.  Use UNASSIGNED or ALL to denote those
          special cases
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: string
        style: simple
      - description: maximum number of items to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      - description: start index
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: sortBy
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentDraftSummaryPagedCollection'
          description: Success
      summary: Get Publish Set Items
      tags:
      - DocumentPublishSet
      x-accepts: application/json
    put:
      description: Adds a set of documents by id to a publish set.
      operationId: addPublishSetItems
      parameters:
      - description: code of the publish set.  Use UNASSIGNED or ALL to denote those
          special cases
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              items:
                $ref: '#/components/schemas/AddOrDeletePublishItem'
              type: array
          application/octet-stream:
            schema:
              items:
                $ref: '#/components/schemas/AddOrDeletePublishItem'
              type: array
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/AddOrDeletePublishItem'
              type: array
        description: documentId/doclist pairs to add to the publish set
      responses:
        "200":
          description: Success
      summary: Add Publish Set Items
      tags:
      - DocumentPublishSet
      x-content-type: text/plain
      x-accepts: application/json
  /content/publishsets/{code}:
    post:
      description: Adds a set of documents by id to a publish set.
      operationId: deletePublishSet
      parameters:
      - description: code of the publish set.  Use UNASSIGNED or ALL to denote those
          special cases
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: string
        style: simple
      - description: should trash the drafts in the publish set as well
        explode: true
        in: query
        name: shouldDiscard
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: Success
      summary: Delete Publish Set
      tags:
      - DocumentPublishSet
      x-accepts: application/json
  /content/publishsets:
    get:
      description: Returns a List of current Publishing sets with counts of drafts
        in each.
      operationId: getPublishSets
      parameters:
      - description: maximum number of items to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      - description: start index
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishSetSummaryPagedCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/PublishSetSummaryPagedCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/PublishSetSummaryPagedCollection'
          description: Success
      summary: Get Publish Set
      tags:
      - DocumentPublishSet
      x-accepts: application/json
  /content/documenttypes:
    get:
      description: Get Document Types
      operationId: getDocumentTypes
      parameters:
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentTypeCollection'
          description: Success
      summary: Get Document Types
      tags:
      - DocumentType
      x-accepts: application/json
    post:
      description: Create Document Type
      operationId: createDocumentType
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentType'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentType'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Success
      summary: Create Document Type
      tags:
      - DocumentType
      x-content-type: text/plain
      x-accepts: application/json
  /content/documenttypes/{documentTypeName}:
    get:
      description: Get Document Type
      operationId: getDocumentType
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentTypeName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Success
      summary: Get Document Type
      tags:
      - DocumentType
      x-accepts: application/json
    put:
      description: Update Document Type
      operationId: updateDocumentType
      parameters:
      - description: ""
        explode: false
        in: path
        name: documentTypeName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/DocumentType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/DocumentType'
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentType'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/json:
              schema:
                $ref: '#/components/schemas/DocumentType'
            text/plain:
              schema:
                $ref: '#/components/schemas/DocumentType'
          description: Success
      summary: Update Document Type
      tags:
      - DocumentType
      x-content-type: text/plain
      x-accepts: application/json
  /content/propertytypes:
    get:
      description: Retrieves a PagedCollection of PropertyTypes
      operationId: getPropertyTypes
      parameters:
      - description: ""
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      - description: ""
        explode: true
        in: query
        name: startIndex
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyTypeCollection'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyTypeCollection'
            text/plain:
              schema:
                $ref: '#/components/schemas/PropertyTypeCollection'
          description: Success
      summary: Get Property Types
      tags:
      - DocumentPropertyType
      x-accepts: application/json
    post:
      description: Create Property Type
      operationId: createPropertyType
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/PropertyType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PropertyType'
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyType'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/plain:
              schema:
                $ref: '#/components/schemas/PropertyType'
          description: Success
      summary: Create Property Type
      tags:
      - DocumentPropertyType
      x-content-type: text/plain
      x-accepts: application/json
  /content/propertytypes/{propertyTypeName}:
    delete:
      description: Delete Property Type
      operationId: deletePropertyType
      parameters:
      - description: ""
        explode: false
        in: path
        name: propertyTypeName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
      summary: Delete Property Type
      tags:
      - DocumentPropertyType
      x-accepts: application/json
    get:
      description: Get Property Type
      operationId: getPropertyType
      parameters:
      - description: ""
        explode: false
        in: path
        name: propertyTypeName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/plain:
              schema:
                $ref: '#/components/schemas/PropertyType'
          description: Success
      summary: Get Property Type
      tags:
      - DocumentPropertyType
      x-accepts: application/json
    put:
      description: Update Property Type
      operationId: updatePropertyType
      parameters:
      - description: ""
        explode: false
        in: path
        name: propertyTypeName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/PropertyType'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PropertyType'
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyType'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyType'
            text/plain:
              schema:
                $ref: '#/components/schemas/PropertyType'
          description: Success
      summary: Update Property Type
      tags:
      - DocumentPropertyType
      x-content-type: text/plain
      x-accepts: application/json
components:
  schemas:
    KeyValuePair`2:
      additionalProperties: false
      example:
        value:
        - value
        - value
        key: key
      properties:
        key:
          nullable: true
          type: string
        value:
          items:
            type: string
          nullable: true
          type: array
      type: object
    HttpMethod:
      additionalProperties: false
      example:
        method: method
      properties:
        method:
          nullable: true
          type: string
      type: object
    Document:
      additionalProperties: false
      description: "Container for schema-enforced and schemaless data. A document\
        \ is primarily used to store content (html, text,\r\nnumbers, dates, JSON,\
        \ binary data) that is directly or indirectly used for the storefront website\
        \ experience\r\nand may be addressed via the Hypr theming engine language.\
        \ A document belongs to a documentList and has an\r\nunderlying documentType.\
        \  The documentType describes any required and optional schema. Additionally,\
        \ a binary\r\nobject may be stored on the document's content subresource and\
        \ edge cached via the Mozu CDN."
      example:
        publishState: publishState
        extension: extension
        updateDate: 2000-01-23T04:56:07.000+00:00
        insertDate: 2000-01-23T04:56:07.000+00:00
        documentTypeFQN: documentTypeFQN
        activeDateRange:
          endDate: 2000-01-23T04:56:07.000+00:00
          startDate: 2000-01-23T04:56:07.000+00:00
        path: path
        contentUpdateDate: 2000-01-23T04:56:07.000+00:00
        name: name
        contentLength: 5
        id: id
        contentMimeType: contentMimeType
        listFQN: listFQN
        properties: ""
        publishSetCode: publishSetCode
      properties:
        id:
          description: "Read-only, system generated 32 digit alpha-numeric string\
            \ that uniquely identifies the document."
          nullable: true
          type: string
        name:
          description: "The fully qualified name of the document including path.\r\
            \nUnique within the documentList. This field is a required field, but\
            \ it can be updated."
          nullable: true
          type: string
        path:
          description: "ReadOnly, path portion of the Name property."
          nullable: true
          type: string
        publishSetCode:
          description: "The name of the publish set that this document belongs to,\
            \ if any."
          nullable: true
          type: string
        extension:
          description: "If applicable, the file extension associated with the document\
            \ content."
          nullable: true
          type: string
        documentTypeFQN:
          description: "The full name of the documentType that underlies this document.\r\
            \nThis field must be supplied upon document creation and cannot be updated."
          nullable: true
          type: string
        listFQN:
          description: "The fully qualified name of the documentList to which the\
            \ document belongs.\r\nThis field is read-only and represents which documentList\
            \ the document is created in."
          nullable: true
          type: string
        contentLength:
          description: "The size of the content subresource in decimal number of OCTETs.\r\
            \nWhen updating the content subresource, the  contentLength is captured\
            \ from the\r\nContent-Length header, if present, or is otherwise computed\
            \ from the total size of the http body."
          format: int64
          nullable: true
          type: integer
        contentMimeType:
          description: "The mime type of the document's binary content, provided via\
            \ the Content-Type header when updating the content\r\nsubresource. If\
            \ no value is provided then \"application/octet-stream\" is set by default."
          nullable: true
          type: string
        contentUpdateDate:
          description: "The date and time the most recent content update was made\
            \ via the content subresource. UTC date/time.\r\nSystem-supplied and read-only."
          format: date-time
          nullable: true
          type: string
        publishState:
          description: "The current publish status of the document. If publishing\
            \ is not supported or is currently disabled in the\r\ndocumentList then\
            \ the value will be \"active\".\r\nIf publishing is supported and enabled,\
            \ then the publish state may be \"draft\" or \"active\". A document may\
            \ have both\r\nan \"active\" and \"draft\" version. The publishState\r\
            \ndenotes which version of the document being interacted with. This field\
            \ is read-only."
          nullable: true
          type: string
        properties:
          description: "A JSON object of name/value pairs. Name parts are matched\
            \ against the underlying documentType properties names. Any\r\nmatching\
            \ name parts must have a value part that conforms to the matching property\
            \ schema.\r\nAny non-matching name/value pairs are considered dynamic\
            \ schema and may have a value part of valid JSON.\r\nThe properties field\
            \ can be used for sorting/filtering and can be projected in the documents\
            \ returned within a\r\ndocumentList view."
          nullable: true
        insertDate:
          description: The date and time the document was added to the documentList.
            This field is system-supplied and read-only.
          format: date-time
          nullable: true
          type: string
        updateDate:
          description: "The date and time the most recent document update was made.\
            \ If publishing is enabled, then this value will\r\nrepresent\r\nthe last\
            \ draft update if the publishState is draft, or the last publish date\
            \ if the publishState is active."
          format: date-time
          nullable: true
          type: string
        activeDateRange:
          $ref: '#/components/schemas/ContentActiveDateRange'
      type: object
    DocumentCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - publishState: publishState
          extension: extension
          updateDate: 2000-01-23T04:56:07.000+00:00
          insertDate: 2000-01-23T04:56:07.000+00:00
          documentTypeFQN: documentTypeFQN
          activeDateRange:
            endDate: 2000-01-23T04:56:07.000+00:00
            startDate: 2000-01-23T04:56:07.000+00:00
          path: path
          contentUpdateDate: 2000-01-23T04:56:07.000+00:00
          name: name
          contentLength: 5
          id: id
          contentMimeType: contentMimeType
          listFQN: listFQN
          properties: ""
          publishSetCode: publishSetCode
        - publishState: publishState
          extension: extension
          updateDate: 2000-01-23T04:56:07.000+00:00
          insertDate: 2000-01-23T04:56:07.000+00:00
          documentTypeFQN: documentTypeFQN
          activeDateRange:
            endDate: 2000-01-23T04:56:07.000+00:00
            startDate: 2000-01-23T04:56:07.000+00:00
          path: path
          contentUpdateDate: 2000-01-23T04:56:07.000+00:00
          name: name
          contentLength: 5
          id: id
          contentMimeType: contentMimeType
          listFQN: listFQN
          properties: ""
          publishSetCode: publishSetCode
        subPaths:
        - subPaths
        - subPaths
      properties:
        subPaths:
          items:
            type: string
          nullable: true
          type: array
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/Document'
          nullable: true
          type: array
      type: object
    DocumentMoveSummary:
      additionalProperties: false
      description: Summary information for Move operation
      example:
        preview: true
        duplicateCount: 1
        renameDuplicates: true
        destPath: destPath
        messages:
        - messages
        - messages
        totalCount: 0
        moveCount: 6
        sourcePath: sourcePath
      properties:
        totalCount:
          format: int64
          type: integer
        moveCount:
          format: int64
          type: integer
        duplicateCount:
          format: int64
          type: integer
        messages:
          items:
            type: string
          nullable: true
          type: array
        sourcePath:
          nullable: true
          type: string
        destPath:
          nullable: true
          type: string
        preview:
          type: boolean
        renameDuplicates:
          type: boolean
      type: object
    DocumentCopyRequest:
      additionalProperties: false
      example:
        updatedBy: updatedBy
        destinationPath: destinationPath
        documentIds:
        - documentIds
        - documentIds
      properties:
        documentIds:
          description: Document Id's to copy
          items:
            type: string
          nullable: true
          type: array
        destinationPath:
          description: The destination path to copy documents to
          nullable: true
          type: string
        updatedBy:
          nullable: true
          type: string
      type: object
    DocumentCopyMessage:
      additionalProperties: false
      example:
        success: true
        originalDocumentId: originalDocumentId
        documentId: documentId
        documentName: documentName
        message: message
        documentPublishSetCode: documentPublishSetCode
      properties:
        originalDocumentId:
          nullable: true
          type: string
        documentId:
          nullable: true
          type: string
        documentName:
          nullable: true
          type: string
        documentPublishSetCode:
          nullable: true
          type: string
        message:
          nullable: true
          type: string
        success:
          type: boolean
      type: object
    DocumentCopyResponse:
      additionalProperties: false
      example:
        numberFilesErrored: 6
        messages:
        - success: true
          originalDocumentId: originalDocumentId
          documentId: documentId
          documentName: documentName
          message: message
          documentPublishSetCode: documentPublishSetCode
        - success: true
          originalDocumentId: originalDocumentId
          documentId: documentId
          documentName: documentName
          message: message
          documentPublishSetCode: documentPublishSetCode
        numberFilesCopied: 0
      properties:
        messages:
          items:
            $ref: '#/components/schemas/DocumentCopyMessage'
          nullable: true
          type: array
        numberFilesCopied:
          format: int32
          type: integer
        numberFilesErrored:
          format: int32
          type: integer
      type: object
    ViewField:
      additionalProperties: false
      description: The projection of an individual field in a view.
      example:
        name: name
        target: target
      properties:
        name:
          description: "The name of the field projected into the view document, meaning\
            \ the name given to the target field after it is projected.\r\nThe name\
            \ must be unique within the list of viewFields provided in the view."
          nullable: true
          type: string
        target:
          description: "Specifies the document field to project. First-class fields\
            \ will be returned on the document, but can be projected into the view\
            \ properties. \r\nValid first-class fields include name, id, documentTypeFqn,\
            \ listFqn and publishState. Dynamic fields within the properties field\
            \ can be projected by prefixing the target string with \"properties.\"\
            \r\nExample: \"properties.property1\". If a property is an object, then\
            \ dot notation can be used to walk to particular subelements. Example:\
            \ \"properties.property1.subProperty1\"\r\nIndividual array elements can\
            \ be selected as well. Example: \"properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem\"\
            \r\nAny target miss will result in a null value returning for the projected\
            \ field."
          nullable: true
          type: string
      type: object
    View:
      additionalProperties: false
      description: "A view provides GET access to documents within the documentList\
        \ the view belongs to. The view can designate which document fields are returned\
        \ (projection) and\r\na security model for providing GET access independent\
        \ of the documentList's security model."
      example:
        filter: filter
        metadata: ""
        includeInactiveMode: includeInactiveMode
        isAdminDefault: true
        name: name
        usages:
        - usages
        - usages
        fields:
        - name: name
          target: target
        - name: name
          target: target
        isVisibleInStorefront: true
      properties:
        name:
          description: "A view is addressed via its name, which is unique within the\
            \ documentList or documentListType in which it is defined."
          nullable: true
          type: string
        usages:
          description: tbd
          items:
            type: string
          nullable: true
          type: array
        metadata:
          description: The metadata field allows arbitrary data to be stored on the
            view.
          nullable: true
        isVisibleInStorefront:
          description: "The isVisibleInStorefront field indicates whether documents\
            \ in the view can be accessed from the Mozu storefront application. If\
            \ true, the storefront application and storefront client application (javascript\
            \ tier) \r\ncan GET documents from the view."
          nullable: true
          type: boolean
        filter:
          description: "Filter criteria to apply automatically when documents from\
            \ this view are accessed, using the standard Mozu filter syntax. Only\
            \ documents matching the filter criteria will be returned. \r\nAny filter\
            \ provided by an operation is combined with the view filter."
          nullable: true
          type: string
        includeInactiveMode:
          description: "If view documents are requested with includeInactive=true,\
            \ then this controls which documents return. If includeInactive is not\
            \ provided or set to false, then only active documents return.\r\nIf not\
            \ set, or set to \"all\", then all documents return.\r\nIf set to \"active\"\
            , then only documents within the active date range and documents with\
            \ no active date range are returned.\r\nIf set to \"scheduled\", then\
            \ only documents with an active date range in the future are returned.\r\
            \nIf set to \"activeOrScheduled\", then only documents that are active\
            \ or documents with an active date range in the future are returned.\r\
            \nIf set to \"ended\", then only documents with an active date range in\
            \ the past are returned."
          nullable: true
          type: string
        isAdminDefault:
          nullable: true
          type: boolean
        fields:
          description: Designation of which document fields are returned (projection)
            when GETing documents from the view.
          items:
            $ref: '#/components/schemas/ViewField'
          nullable: true
          type: array
      type: object
    DocumentList:
      additionalProperties: false
      description: "A container for documents and related settings, such as supported\
        \ documentTypes and publishing. \r\nA documentList belongs to a Mozu context,\
        \ denoted by the documentList scopyeType and scopeId fields. \r\nExample:\
        \ documentList A belongs to catalog 123, denoted by the documentList scopeType\
        \ value of catalog and scopeId value of 123.\r\nA documentList can only be\
        \ accessed if the API context is inclusive of the documentList's scope.\r\n\
        Example: documentList A belongs to catalog 123. An API call with an API context\
        \ of catalog 123 will be able to address documentList A.\r\nExample: site\
        \ 456 uses catalog 123. An API call with an API context of site 456 will be\
        \ able to address documentList A.\r\nExample: masterCatalog 789 is the parent\
        \ of catalog 123. An API call with an API context of masterCatalog 789 will\
        \ NOT be able to address documentList A.\r\nDocuments can be created, queried,\
        \ managed and published from within a documentList. A documentList may be\
        \ directly created, or indirectly created from a documentListType."
      example:
        scopeId: 5
        metadata: ""
        enablePublishing: true
        supportsActiveDateRanges: true
        supportsPublishing: true
        documentListType: documentListType
        security: security
        scopeType: scopeType
        documentTypes:
        - documentTypes
        - documentTypes
        enableActiveDateRanges: true
        name: name
        namespace: namespace
        usages:
        - usages
        - usages
        listFQN: listFQN
        views:
        - filter: filter
          metadata: ""
          includeInactiveMode: includeInactiveMode
          isAdminDefault: true
          name: name
          usages:
          - usages
          - usages
          fields:
          - name: name
            target: target
          - name: name
            target: target
          isVisibleInStorefront: true
        - filter: filter
          metadata: ""
          includeInactiveMode: includeInactiveMode
          isAdminDefault: true
          name: name
          usages:
          - usages
          - usages
          fields:
          - name: name
            target: target
          - name: name
            target: target
          isVisibleInStorefront: true
      properties:
        name:
          description: "The name component of the listFQN, name@namespace. The name\
            \ must be unique within the namespace component and cannot be updated.\r\
            \nIf the documentList is based on a documentListType, then this value\
            \ will be derived from the documentListType."
          nullable: true
          type: string
        namespace:
          description: "The namespace component of the listFQN, name@namespace. The\
            \ issued dev account namespace must be used unless elevated privileges\
            \ allow a blank namespace to be used. The namespace cannot be updated.\r\
            \nIf the documentList is based on a documentListType, then this value\
            \ will be derived from the documentListType."
          nullable: true
          type: string
        listFQN:
          description: "The unique identifier of the documentList, represented by\
            \ name@namespace. The listFQN must be provided when creating the documentList,\
            \ or the name and namespace fields must be provided.\r\nIf the documentList\
            \ is based on a documentListType, then this value will be derived from\
            \ the documentListType."
          nullable: true
          type: string
        documentTypes:
          description: "An array of the full names (name@namespace) of the documentTypes\
            \ supported by the documentList. A document in the documentList must belong\
            \ to one of these documentTypes.\r\nIf the documentList is based on a\
            \ documentListType, then this value will be derived from the documentListType.\
            \ DocumentTypes can be added/removed to the documentList, even when\r\n\
            based on a documentListType. Existing documents that belong to a documentType\
            \ removed from the documentList will not be removed."
          items:
            type: string
          nullable: true
          type: array
        supportsPublishing:
          description: "Determines if the documentList will support drafting and publishing\
            \ documents. \r\nThis field defaults to false and cannot be updated.\r\
            \nIf the documentList is based on a documentListType, then this value\
            \ will be derived from the documentListType."
          nullable: true
          type: boolean
        enablePublishing:
          description: "Determines if the documentList has publishing turned on or\
            \ off. If the documentList has a supportsPublishing value of true, then\
            \ the enablePublishing value will be honored.\r\nIf enablePublishing is\
            \ true, then a document draft will be created for a document create or\
            \ update operation. A document must then be published to become \"active\"\
            .\r\nIf enablePublish is false, then all document changes are immediately\
            \ \"active\".\r\nIf enablePublish is true, then updating it to false will\
            \ immediately publish all draft changes.\r\nIf the documentList is based\
            \ on a documentListType, then this value will be derived from the documentListType,\
            \ but can be overridden on update."
          nullable: true
          type: boolean
        supportsActiveDateRanges:
          description: "Determines if the documentList will support ranges of dates\
            \ that documents are considered 'active'. \r\nThis field defaults to false\
            \ and cannot be updated.\r\nIf the documentList is based on a documentListType,\
            \ then this value will be derived from the documentListType."
          nullable: true
          type: boolean
        enableActiveDateRanges:
          description: "Determines if the documentList has ActiveDateRanges turned\
            \ on or off. If the documentList has a supportsActiveDateRanges value\
            \ of true, then the enableActiveDateRanges value will be honored.\r\n\
            If enableActiveDateRanges is true, then a document will only be returned\
            \ if the request is made within the time frame the document has been set\
            \ to be 'active'.\r\nIf enableActiveDateRanges is false, then the properties\
            \ can be set but will not be honored.\r\nIf enableActiveDateRanges is\
            \ true, then updating it to false will immediately start honoring the\
            \ previously-set date range.\r\nIf the documentList is based on a documentListType,\
            \ then this value will be derived from the documentListType, but can be\
            \ overridden on update."
          nullable: true
          type: boolean
        views:
          description: "An array of one or more views, which each allow GET access\
            \ to a projection of fields from the documents in the given documentList.\
            \ \r\nIf the documentList is based on a documentListType, then this value\
            \ will be derived from the documentListType. Views can be added/removed\
            \ to the documentList, even when\r\nthe documentList derives from a documentListType."
          items:
            $ref: '#/components/schemas/View'
          nullable: true
          type: array
        usages:
          description: "An array of strings that describes to the Mozu platform the\
            \ manner(s) in which a documentList can be used. The following values\
            \ are valid:\r\nentitymanager -- the documentList should be visible in\
            \ the Admin Content/Entities UI, which allows admin users to create, manage\
            \ and publish documents within the documentList.\r\nsitebuilder -- the\
            \ documentList should be visible in Site Builder. A documentList will\
            \ display in the Site Builder Navigation Content List node, which supports\
            \ document creation, management and web cms integration.\r\nIf the documentList\
            \ is based on a documentListType, then this value will be derived from\
            \ the documentListType. Usages can be added or removed from the documentList,\
            \ even when the documentList derives from a\r\ndocumentListType."
          items:
            type: string
          nullable: true
          type: array
        security:
          description: tbd
          nullable: true
          type: string
        scopeId:
          description: "Used in conjunction with the scopeType field to determine\
            \ the exact context within which the documentList resides.\r\nExample:\
            \ A documentList with a scopeId of 5 and scopeType of masterCatalog belongs\
            \ to masterCatalog 5.\r\nIf the documentList is based on a documentListType,\
            \ then this value will be derived from the documentListType. This value\
            \ is read-only after the documentList is created."
          format: int32
          nullable: true
          type: integer
        scopeType:
          description: "The context level the documentList resides in. Valid values\
            \ are \"tenant\", \"masterCatalog\", \"catalog\" and \"site\". This field\
            \ is used in conjunction with the scopeId field\r\nto determine the exact\
            \ context within which this documentList resides. This field is read-only\
            \ after insert.\r\nIf the documentList is based on a documentListType,\
            \ then this value will be derived from the documentListType. This value\
            \ is read-only after the documentList is created."
          nullable: true
          type: string
        documentListType:
          description: "The full name of the documentListType (name@namespace) that\
            \ underlies the documentList. This value is only populated when the Mozu\
            \ platform creates a documentList from a documentListType.\r\nA documentList\
            \ that is directly created cannot specify a documentListType. This field\
            \ is therefore read-only."
          nullable: true
          type: string
        metadata:
          description: "Allows arbitrary data to be stored on the documentList.\r\n\
            If the documentList is based on a documentListType, then this value will\
            \ be derived from the documentListType, but can be overridden on update."
          nullable: true
      type: object
    DocumentListCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - scopeId: 5
          metadata: ""
          enablePublishing: true
          supportsActiveDateRanges: true
          supportsPublishing: true
          documentListType: documentListType
          security: security
          scopeType: scopeType
          documentTypes:
          - documentTypes
          - documentTypes
          enableActiveDateRanges: true
          name: name
          namespace: namespace
          usages:
          - usages
          - usages
          listFQN: listFQN
          views:
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
        - scopeId: 5
          metadata: ""
          enablePublishing: true
          supportsActiveDateRanges: true
          supportsPublishing: true
          documentListType: documentListType
          security: security
          scopeType: scopeType
          documentTypes:
          - documentTypes
          - documentTypes
          enableActiveDateRanges: true
          name: name
          namespace: namespace
          usages:
          - usages
          - usages
          listFQN: listFQN
          views:
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/DocumentList'
          nullable: true
          type: array
      type: object
    DocumentInstallation:
      additionalProperties: false
      description: The definition of a document to create when a documentList is created.
      example:
        name: name
        documentTypeFQN: documentTypeFQN
        locale: locale
        properties: ""
      properties:
        name:
          description: The name of the document to create.
          nullable: true
          type: string
        documentTypeFQN:
          description: The full name of the documentType that underlies this document.
          nullable: true
          type: string
        properties:
          description: The properties of this document.
          nullable: true
        locale:
          description: tbd
          nullable: true
          type: string
      type: object
    DocumentListType:
      additionalProperties: false
      description: "A documentListType instructs the Mozu platform to automatically\
        \ create documentLists within a scopeType. Example: Creating a documentListType\
        \ in tenant X with a \r\nscopeType of site tells the Mozu platform to immediately\
        \ create a documentList in each site tenant X has. The Mozu platform will\
        \ also automatically create a new \r\ndocumentList for every site subsequently\
        \ provisioned in tenant X. Any defaultDocuments defined on the documentListType\
        \ will be created within \r\neach documentList. Each documentList will be\
        \ addressable via the documenetListType's fully qualified name and will, by\
        \ default, use the documentListType's views, \r\nusages and metadata. Therefore\
        \ the documentListType can be used to centrally manage each associated documentList."
      example:
        installationPackage: installationPackage
        metadata: ""
        enablePublishing: true
        defaultDocuments:
        - name: name
          documentTypeFQN: documentTypeFQN
          locale: locale
          properties: ""
        - name: name
          documentTypeFQN: documentTypeFQN
          locale: locale
          properties: ""
        supportsActiveDateRanges: true
        version: version
        supportsPublishing: true
        documentTypeFQNs:
        - documentTypeFQNs
        - documentTypeFQNs
        scopeType: scopeType
        enableActiveDateRanges: true
        name: name
        namespace: namespace
        usages:
        - usages
        - usages
        documentListTypeFQN: documentListTypeFQN
        views:
        - filter: filter
          metadata: ""
          includeInactiveMode: includeInactiveMode
          isAdminDefault: true
          name: name
          usages:
          - usages
          - usages
          fields:
          - name: name
            target: target
          - name: name
            target: target
          isVisibleInStorefront: true
        - filter: filter
          metadata: ""
          includeInactiveMode: includeInactiveMode
          isAdminDefault: true
          name: name
          usages:
          - usages
          - usages
          fields:
          - name: name
            target: target
          - name: name
            target: target
          isVisibleInStorefront: true
      properties:
        name:
          description: "The name component of the documentListTypeFQN, name@namespace.\
            \ The name must be unique within the namespace component and cannot be\
            \ updated.\r\nEach documentList created from the documentListType will\
            \ use this value."
          nullable: true
          type: string
        namespace:
          description: "The namespace component of the documentListTypeFQN, name@namespace.\
            \ The issued dev account namespace must be used unless elevated privileges\
            \ allow a blank namespace to be used. The namespace cannot be updated.\r\
            \nEach documentList created from the documentListType will use this value."
          nullable: true
          type: string
        documentListTypeFQN:
          description: "The unique identifier of the documentListType, represented\
            \ by name@namespace. The documentListTypeFQN must be provided when creating\
            \ the documentListType, or the name and namespace fields must be provided.\r\
            \nThis field cannot be updated and each documentList created from the\
            \ documentListType will use this value."
          nullable: true
          type: string
        scopeType:
          description: "The context level at which this documentListType will create\
            \ documentLists. Valid values are \"tenant\", \"masterCatalog\", \"catalog\"\
            \ and \"site\". This field is read-only after insert."
          nullable: true
          type: string
        installationPackage:
          description: "Optionally, a documentListType can be defined in an installationPackage\
            \ and then installed into a tenant. Installed documentListsTypes can only\
            \ be updated via installation upgrades. \r\nCurrently only internal Mozu\
            \ platform components can create installations. This field is system-supplied\
            \ and read-only."
          nullable: true
          type: string
        version:
          description: The version of the installationPackge installed. This field
            is read-only.
          nullable: true
          type: string
        defaultDocuments:
          description: The definition of any documents to create when a documentList
            is created.
          items:
            $ref: '#/components/schemas/DocumentInstallation'
          nullable: true
          type: array
        documentTypeFQNs:
          description: "The full names (name@namespace) of the types of documents\
            \ that can be created within the documentLists belonging to this documentListType.\
            \ \r\nEach documentList created from the documentListType will use this\
            \ value, but it can be overridden in an individual documentList."
          items:
            type: string
          nullable: true
          type: array
        supportsPublishing:
          description: "Determines if documentLists belonging to this documentListType\
            \ will support drafting and publishing documents. \r\nThis field defaults\
            \ to false and cannot be updated. Each documentList created from the documentListType\
            \ will use this value."
          type: boolean
        enablePublishing:
          description: "Determines if documentLists belonging to this documentListType\
            \ have publishing turned on or off. \r\nEach documentList created from\
            \ the documentListType will use this value, but it can be overridden in\
            \ an individual documentList."
          nullable: true
          type: boolean
        supportsActiveDateRanges:
          description: "Determines if documentLists belonging to this documentListType\
            \ will support drafting and ActiveDateRanges documents. \r\nThis field\
            \ defaults to false and cannot be updated. Each documentList created from\
            \ the documentListType will use this value."
          type: boolean
        enableActiveDateRanges:
          description: "Determines if documentLists belonging to this documentListType\
            \ have ActiveDateRanges turned on or off. \r\nEach documentList created\
            \ from the documentListType will use this value, but it can be overridden\
            \ in an individual documentList."
          nullable: true
          type: boolean
        views:
          description: "An array of one or more views, which each allow GET access\
            \ to a projection of fields from the documents in the given documentList.\
            \ \r\nEach documentList created from this documentListType will use this\
            \ value, but it can be overridden in an individual documentList."
          items:
            $ref: '#/components/schemas/View'
          nullable: true
          type: array
        usages:
          description: "An array of strings that describes to the Mozu platform the\
            \ manner(s) in which a documentList can be used. The following values\
            \ are valid:\r\nentitymanager -- the documentList should be visible in\
            \ the Admin Content/Entities screen, which allows admin users to create,\
            \ manage and publish documents within the documentList.\r\nsitebuilder\
            \ -- the documentList should be visible in Sitebuilder. A documentList\
            \ will display in the Sitebuilder Navigation Content List node, which\
            \ supports document creation, management and web cms integration.\r\n\
            Each documentList created from this documentListType will use this value,\
            \ but it can be overridden in an individual documentList."
          items:
            type: string
          nullable: true
          type: array
        metadata:
          description: "Allows arbitrary data to be stored on the documentListType.\
            \ Each documentList created from this documentListType will use this value,\
            \ \r\nbut it can be overridden in an individual documentList."
          nullable: true
      type: object
    DocumentListTypeCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - installationPackage: installationPackage
          metadata: ""
          enablePublishing: true
          defaultDocuments:
          - name: name
            documentTypeFQN: documentTypeFQN
            locale: locale
            properties: ""
          - name: name
            documentTypeFQN: documentTypeFQN
            locale: locale
            properties: ""
          supportsActiveDateRanges: true
          version: version
          supportsPublishing: true
          documentTypeFQNs:
          - documentTypeFQNs
          - documentTypeFQNs
          scopeType: scopeType
          enableActiveDateRanges: true
          name: name
          namespace: namespace
          usages:
          - usages
          - usages
          documentListTypeFQN: documentListTypeFQN
          views:
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
        - installationPackage: installationPackage
          metadata: ""
          enablePublishing: true
          defaultDocuments:
          - name: name
            documentTypeFQN: documentTypeFQN
            locale: locale
            properties: ""
          - name: name
            documentTypeFQN: documentTypeFQN
            locale: locale
            properties: ""
          supportsActiveDateRanges: true
          version: version
          supportsPublishing: true
          documentTypeFQNs:
          - documentTypeFQNs
          - documentTypeFQNs
          scopeType: scopeType
          enableActiveDateRanges: true
          name: name
          namespace: namespace
          usages:
          - usages
          - usages
          documentListTypeFQN: documentListTypeFQN
          views:
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
          - filter: filter
            metadata: ""
            includeInactiveMode: includeInactiveMode
            isAdminDefault: true
            name: name
            usages:
            - usages
            - usages
            fields:
            - name: name
              target: target
            - name: name
              target: target
            isVisibleInStorefront: true
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/DocumentListType'
          nullable: true
          type: array
      type: object
    DocumentDraftSummary:
      additionalProperties: false
      description: Summary information on a Document Draft
      example:
        activeUpdateDate: 2000-01-23T04:56:07.000+00:00
        updatedBy: updatedBy
        activeUpdatedBy: activeUpdatedBy
        documentTypeFQN: documentTypeFQN
        masterCatalogId: 5
        catalogId: 2
        publishType: publishType
        draftUpdateDate: 2000-01-23T04:56:07.000+00:00
        name: name
        siteId: 7
        id: id
        listFQN: listFQN
        publishSetCode: publishSetCode
      properties:
        id:
          description: The system generated 32 digit alpha-numeric string that uniquely
            identifies the document.
          nullable: true
          type: string
        name:
          description: The unique name of the document.
          nullable: true
          type: string
        documentTypeFQN:
          description: The full name of the documentType that underlies this document.
          nullable: true
          type: string
        listFQN:
          description: The fully qualified name of the documentList to which the document
            belongs.
          nullable: true
          type: string
        activeUpdateDate:
          description: "The date and time the document was last published, if any."
          format: date-time
          nullable: true
          type: string
        draftUpdateDate:
          description: The date and time the document draft was last updated.
          format: date-time
          type: string
        updatedBy:
          description: The userId or applicationId that last updated the draft document.
          nullable: true
          type: string
        activeUpdatedBy:
          nullable: true
          type: string
        publishType:
          description: "Denotes the type of draft. \r\n\"Created\" -- the document\
            \ has never been published. \r\n\"Updated\" -- the document has an \"\
            active\" version and this is a subsequent draft.\r\n\"Deleted\" -- the\
            \ \"active\" document will be permanently deleted when this draft is published."
          nullable: true
          type: string
        publishSetCode:
          nullable: true
          type: string
        masterCatalogId:
          format: int32
          nullable: true
          type: integer
        catalogId:
          format: int32
          nullable: true
          type: integer
        siteId:
          format: int32
          nullable: true
          type: integer
      type: object
    DocumentDraftSummaryPagedCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - activeUpdateDate: 2000-01-23T04:56:07.000+00:00
          updatedBy: updatedBy
          activeUpdatedBy: activeUpdatedBy
          documentTypeFQN: documentTypeFQN
          masterCatalogId: 5
          catalogId: 2
          publishType: publishType
          draftUpdateDate: 2000-01-23T04:56:07.000+00:00
          name: name
          siteId: 7
          id: id
          listFQN: listFQN
          publishSetCode: publishSetCode
        - activeUpdateDate: 2000-01-23T04:56:07.000+00:00
          updatedBy: updatedBy
          activeUpdatedBy: activeUpdatedBy
          documentTypeFQN: documentTypeFQN
          masterCatalogId: 5
          catalogId: 2
          publishType: publishType
          draftUpdateDate: 2000-01-23T04:56:07.000+00:00
          name: name
          siteId: 7
          id: id
          listFQN: listFQN
          publishSetCode: publishSetCode
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/DocumentDraftSummary'
          nullable: true
          type: array
      type: object
    AddOrDeletePublishItem:
      additionalProperties: false
      example:
        scopeId: 0
        scopeType: scopeType
        documentId: documentId
        docListFQN: docListFQN
      properties:
        documentId:
          nullable: true
          type: string
        docListFQN:
          nullable: true
          type: string
        scopeType:
          nullable: true
          type: string
        scopeId:
          format: int32
          type: integer
      type: object
    PublishSetSummary:
      additionalProperties: false
      description: Summary information of documents in a publishing set
      example:
        count: 5
        publishSetCode: publishSetCode
      properties:
        publishSetCode:
          description: the code of the associated publish set
          nullable: true
          type: string
        count:
          description: the count of documents in the associated publish set
          format: int32
          type: integer
      type: object
    PublishSetSummaryPagedCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - count: 5
          publishSetCode: publishSetCode
        - count: 5
          publishSetCode: publishSetCode
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/PublishSetSummary'
          nullable: true
          type: array
      type: object
    PropertyType:
      additionalProperties: false
      description: "The schema a document property value must implement. A propertyType\
        \ is created at a tenant scope and is therefore shared amongst all child contexts\
        \ (masterCatalog, catalog, site).\r\nA propertyType is analogous to the type\
        \ argument of a class property in object oriented programming. \r\nA propertyType's\
        \ dataType field is analogous to an intrinsic value type in object oriented\
        \ programming, or to a column data type in relational database terminology."
      example:
        adminName: adminName
        installationPackage: installationPackage
        dataType: dataType
        name: name
        namespace: namespace
        isQueryable: true
        isSortable: true
        propertyTypeFQN: propertyTypeFQN
        version: version
        isAggregatable: true
      properties:
        name:
          description: "The name component of the propertyType, name@namespace. The\
            \ name must be unique within the namespace component and cannot be updated."
          nullable: true
          type: string
        namespace:
          description: "The namespace component of the propertyType, name@namespace.\
            \ The issued dev account namespace must be used unless elevated privileges\
            \ allow a blank namespace to be used. The namespace cannot be updated."
          nullable: true
          type: string
        propertyTypeFQN:
          description: "The unique identifier of the propertyTYpe, represented by\
            \ name@namespace. The propertyTypeFQN must be provided when creating the\
            \ propertyType, or the name and namespace fields must be provided."
          nullable: true
          type: string
        adminName:
          description: The administrative name of the propertyType.
          nullable: true
          type: string
        installationPackage:
          description: "Optionally, a propertyType can be defined in an installationPackage\
            \ and then installed into a tenant. Installed propertyTypes can only be\
            \ updated via installation upgrades. \r\nCurrently only internal Mozu\
            \ platform components can create installations. This field is system-supplied\
            \ and read-only."
          nullable: true
          type: string
        version:
          description: The version of the installationPackge installed. This field
            is read-only.
          nullable: true
          type: string
        dataType:
          description: "The underlying value type that can be held in the document's\
            \ property value. Valid values are\r\nstring\r\nnumber\r\nboolean\r\n\
            datetime\r\njson\r\nThe dataType is analogous to an intrinsic value type\
            \ in object oriented programming, or to a column data type in relational\
            \ database terminology."
          nullable: true
          type: string
        isQueryable:
          description: tbd
          nullable: true
          type: boolean
        isSortable:
          description: tbd
          nullable: true
          type: boolean
        isAggregatable:
          description: tbd
          nullable: true
          type: boolean
      type: object
    Property:
      additionalProperties: false
      description: "A schema element describing a name/value pair that can be stored\
        \ on a document's properties field, where the name is directly defined by\
        \ the propertyName and the value is constrained by the propertyType."
      example:
        isRequired: true
        isMultiValued: true
        propertyType:
          adminName: adminName
          installationPackage: installationPackage
          dataType: dataType
          name: name
          namespace: namespace
          isQueryable: true
          isSortable: true
          propertyTypeFQN: propertyTypeFQN
          version: version
          isAggregatable: true
        name: name
      properties:
        name:
          description: "The name portion of the name/value pair stored on a document's\
            \ properties field. The property name value must be unique within the\
            \ properties defined on the documentType.\r\nThis value cannot be updated\
            \ after property creation."
          nullable: true
          type: string
        isRequired:
          description: True if the property must be present on the document. This
            value is false by default.
          type: boolean
        isMultiValued:
          description: "True if the property value is an array, where each array value\
            \ must conform to the propertyType. When false, the property value must\
            \ directly conform to the propertyType. This value is false by default."
          type: boolean
        propertyType:
          $ref: '#/components/schemas/PropertyType'
      type: object
    DocumentType:
      additionalProperties: false
      description: "The schema a document must implement and associated metadata.\
        \ A documentType is created at a tenant scope and is therefore shared amongst\
        \ all child contexts (masterCatalog, catalog, site)."
      example:
        adminName: adminName
        installationPackage: installationPackage
        metadata: ""
        name: name
        namespace: namespace
        documentTypeFQN: documentTypeFQN
        version: version
        properties:
        - isRequired: true
          isMultiValued: true
          propertyType:
            adminName: adminName
            installationPackage: installationPackage
            dataType: dataType
            name: name
            namespace: namespace
            isQueryable: true
            isSortable: true
            propertyTypeFQN: propertyTypeFQN
            version: version
            isAggregatable: true
          name: name
        - isRequired: true
          isMultiValued: true
          propertyType:
            adminName: adminName
            installationPackage: installationPackage
            dataType: dataType
            name: name
            namespace: namespace
            isQueryable: true
            isSortable: true
            propertyTypeFQN: propertyTypeFQN
            version: version
            isAggregatable: true
          name: name
      properties:
        name:
          description: "The name component of the documentType, name@namespace. The\
            \ name must be unique within the namespace component and cannot be updated."
          nullable: true
          type: string
        namespace:
          description: "The namespace component of the documentType, name@namespace.\
            \ The issued dev account namespace must be used unless elevated privileges\
            \ allow a blank namespace to be used. The namespace cannot be updated."
          nullable: true
          type: string
        documentTypeFQN:
          description: "The unique identifier of the documentType, represented by\
            \ name@namespace. The documentTypeFQN must be provided when creating the\
            \ documentType, or the name and namespace fields must be provided."
          nullable: true
          type: string
        adminName:
          description: The administrative name of the documentType.
          nullable: true
          type: string
        installationPackage:
          description: "Optionally, a documentType can be defined in an installationPackage\
            \ and then installed into a tenant. Installed documentTypes can only be\
            \ updated via installation upgrades. \r\nCurrently only internal Mozu\
            \ platform components can create installations. This field is system-supplied\
            \ and read-only."
          nullable: true
          type: string
        version:
          description: The version of the installationPackge installed. This field
            is read-only.
          nullable: true
          type: string
        metadata:
          description: Allows arbitrary data to be stored on the documentType.
          nullable: true
        properties:
          description: An array of the schema elements that a document implementing
            this documentType will have.
          items:
            $ref: '#/components/schemas/Property'
          nullable: true
          type: array
      type: object
    DocumentTypeCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - adminName: adminName
          installationPackage: installationPackage
          metadata: ""
          name: name
          namespace: namespace
          documentTypeFQN: documentTypeFQN
          version: version
          properties:
          - isRequired: true
            isMultiValued: true
            propertyType:
              adminName: adminName
              installationPackage: installationPackage
              dataType: dataType
              name: name
              namespace: namespace
              isQueryable: true
              isSortable: true
              propertyTypeFQN: propertyTypeFQN
              version: version
              isAggregatable: true
            name: name
          - isRequired: true
            isMultiValued: true
            propertyType:
              adminName: adminName
              installationPackage: installationPackage
              dataType: dataType
              name: name
              namespace: namespace
              isQueryable: true
              isSortable: true
              propertyTypeFQN: propertyTypeFQN
              version: version
              isAggregatable: true
            name: name
        - adminName: adminName
          installationPackage: installationPackage
          metadata: ""
          name: name
          namespace: namespace
          documentTypeFQN: documentTypeFQN
          version: version
          properties:
          - isRequired: true
            isMultiValued: true
            propertyType:
              adminName: adminName
              installationPackage: installationPackage
              dataType: dataType
              name: name
              namespace: namespace
              isQueryable: true
              isSortable: true
              propertyTypeFQN: propertyTypeFQN
              version: version
              isAggregatable: true
            name: name
          - isRequired: true
            isMultiValued: true
            propertyType:
              adminName: adminName
              installationPackage: installationPackage
              dataType: dataType
              name: name
              namespace: namespace
              isQueryable: true
              isSortable: true
              propertyTypeFQN: propertyTypeFQN
              version: version
              isAggregatable: true
            name: name
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/DocumentType'
          nullable: true
          type: array
      type: object
    PropertyTypeCollection:
      additionalProperties: false
      example:
        startIndex: 0
        pageCount: 1
        pageSize: 6
        totalCount: 5
        items:
        - adminName: adminName
          installationPackage: installationPackage
          dataType: dataType
          name: name
          namespace: namespace
          isQueryable: true
          isSortable: true
          propertyTypeFQN: propertyTypeFQN
          version: version
          isAggregatable: true
        - adminName: adminName
          installationPackage: installationPackage
          dataType: dataType
          name: name
          namespace: namespace
          isQueryable: true
          isSortable: true
          propertyTypeFQN: propertyTypeFQN
          version: version
          isAggregatable: true
      properties:
        startIndex:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        pageCount:
          format: int32
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/PropertyType'
          nullable: true
          type: array
      type: object
    ContentHttpContent:
      additionalProperties: false
      example:
        headers:
        - value:
          - value
          - value
          key: key
        - value:
          - value
          - value
          key: key
      properties:
        headers:
          items:
            $ref: '#/components/schemas/KeyValuePair`2'
          nullable: true
          readOnly: true
          type: array
      type: object
    ContentHttpRequestMessage:
      additionalProperties: false
      example:
        headers:
        - value:
          - value
          - value
          key: key
        - value:
          - value
          - value
          key: key
        method:
          method: method
        options:
          key: ""
        requestUri: https://openapi-generator.tech
        version: version
        versionPolicy: null
        content:
          headers:
          - value:
            - value
            - value
            key: key
          - value:
            - value
            - value
            key: key
        properties:
          key: ""
      properties:
        version:
          nullable: true
          type: string
        versionPolicy:
          $ref: '#/components/schemas/ContentHttpVersionPolicy'
        content:
          $ref: '#/components/schemas/ContentHttpContent'
        method:
          $ref: '#/components/schemas/HttpMethod'
        requestUri:
          format: uri
          nullable: true
          type: string
        headers:
          items:
            $ref: '#/components/schemas/KeyValuePair`2'
          nullable: true
          readOnly: true
          type: array
        properties:
          additionalProperties: {}
          deprecated: true
          nullable: true
          readOnly: true
          type: object
        options:
          additionalProperties: {}
          nullable: true
          readOnly: true
          type: object
      type: object
    ContentHttpVersionPolicy:
      enum:
      - 0
      - 1
      - 2
      format: int32
      type: integer
    ContentActiveDateRange:
      additionalProperties: false
      example:
        endDate: 2000-01-23T04:56:07.000+00:00
        startDate: 2000-01-23T04:56:07.000+00:00
      properties:
        startDate:
          description: The beginning of the active date range of this document
          format: date-time
          nullable: true
          type: string
        endDate:
          description: The end of the active date range for this document
          format: date-time
          nullable: true
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme.
      scheme: bearer
      type: http
    clientOauth2:
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /api/platform/applications/authtickets/oauth
      type: oauth2

