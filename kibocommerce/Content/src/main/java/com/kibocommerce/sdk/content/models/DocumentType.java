/*
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.content.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.content.models.Property;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * The schema a document must implement and associated metadata. A documentType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site).
 */
@ApiModel(description = "The schema a document must implement and associated metadata. A documentType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site).")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DocumentType implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE_F_Q_N = "documentTypeFQN";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE_F_Q_N)
  private String documentTypeFQN;

  public static final String SERIALIZED_NAME_ADMIN_NAME = "adminName";
  @SerializedName(SERIALIZED_NAME_ADMIN_NAME)
  private String adminName;

  public static final String SERIALIZED_NAME_INSTALLATION_PACKAGE = "installationPackage";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_PACKAGE)
  private String installationPackage;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Property> properties = null;

  public DocumentType() {
  }

  public DocumentType name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name component of the documentType, name@namespace. The name must be unique within the namespace component and cannot be updated.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name component of the documentType, name@namespace. The name must be unique within the namespace component and cannot be updated.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DocumentType namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The namespace component of the documentType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The namespace component of the documentType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public DocumentType documentTypeFQN(String documentTypeFQN) {
    
    this.documentTypeFQN = documentTypeFQN;
    return this;
  }

   /**
   * The unique identifier of the documentType, represented by name@namespace. The documentTypeFQN must be provided when creating the documentType, or the name and namespace fields must be provided.
   * @return documentTypeFQN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the documentType, represented by name@namespace. The documentTypeFQN must be provided when creating the documentType, or the name and namespace fields must be provided.")

  public String getDocumentTypeFQN() {
    return documentTypeFQN;
  }


  public void setDocumentTypeFQN(String documentTypeFQN) {
    this.documentTypeFQN = documentTypeFQN;
  }


  public DocumentType adminName(String adminName) {
    
    this.adminName = adminName;
    return this;
  }

   /**
   * The administrative name of the documentType.
   * @return adminName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The administrative name of the documentType.")

  public String getAdminName() {
    return adminName;
  }


  public void setAdminName(String adminName) {
    this.adminName = adminName;
  }


  public DocumentType installationPackage(String installationPackage) {
    
    this.installationPackage = installationPackage;
    return this;
  }

   /**
   * Optionally, a documentType can be defined in an installationPackage and then installed into a tenant. Installed documentTypes can only be updated via installation upgrades.   Currently only internal Mozu platform components can create installations. This field is system-supplied and read-only.
   * @return installationPackage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optionally, a documentType can be defined in an installationPackage and then installed into a tenant. Installed documentTypes can only be updated via installation upgrades.   Currently only internal Mozu platform components can create installations. This field is system-supplied and read-only.")

  public String getInstallationPackage() {
    return installationPackage;
  }


  public void setInstallationPackage(String installationPackage) {
    this.installationPackage = installationPackage;
  }


  public DocumentType version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the installationPackge installed. This field is read-only.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the installationPackge installed. This field is read-only.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public DocumentType metadata(Object metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Allows arbitrary data to be stored on the documentType.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allows arbitrary data to be stored on the documentType.")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public DocumentType properties(List<Property> properties) {
    
    this.properties = properties;
    return this;
  }

  public DocumentType addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * An array of the schema elements that a document implementing this documentType will have.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of the schema elements that a document implementing this documentType will have.")

  public List<Property> getProperties() {
    return properties;
  }


  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentType documentType = (DocumentType) o;
    return Objects.equals(this.name, documentType.name) &&
        Objects.equals(this.namespace, documentType.namespace) &&
        Objects.equals(this.documentTypeFQN, documentType.documentTypeFQN) &&
        Objects.equals(this.adminName, documentType.adminName) &&
        Objects.equals(this.installationPackage, documentType.installationPackage) &&
        Objects.equals(this.version, documentType.version) &&
        Objects.equals(this.metadata, documentType.metadata) &&
        Objects.equals(this.properties, documentType.properties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, namespace, documentTypeFQN, adminName, installationPackage, version, metadata, properties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentType {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    documentTypeFQN: ").append(toIndentedString(documentTypeFQN)).append("\n");
    sb.append("    adminName: ").append(toIndentedString(adminName)).append("\n");
    sb.append("    installationPackage: ").append(toIndentedString(installationPackage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("documentTypeFQN");
    openapiFields.add("adminName");
    openapiFields.add("installationPackage");
    openapiFields.add("version");
    openapiFields.add("metadata");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentType
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentType.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentType is not found in the empty JSON string", DocumentType.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!DocumentType.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentType` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("documentTypeFQN") != null && !jsonObj.get("documentTypeFQN").isJsonNull()) && !jsonObj.get("documentTypeFQN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTypeFQN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTypeFQN").toString()));
      }
      if ((jsonObj.get("adminName") != null && !jsonObj.get("adminName").isJsonNull()) && !jsonObj.get("adminName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminName").toString()));
      }
      if ((jsonObj.get("installationPackage") != null && !jsonObj.get("installationPackage").isJsonNull()) && !jsonObj.get("installationPackage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installationPackage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installationPackage").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Property.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentType.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentType>() {
           @Override
           public void write(JsonWriter out, DocumentType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentType read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentType
  * @throws IOException if the JSON string is invalid with respect to DocumentType
  */
  public static DocumentType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentType.class);
  }

 /**
  * Convert an instance of DocumentType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

