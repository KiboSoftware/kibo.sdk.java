/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShippingRate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CheckoutGroupRates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckoutGroupRates implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_GROUPING_ID = "groupingId";
  @SerializedName(SERIALIZED_NAME_GROUPING_ID)
  private String groupingId;

  public static final String SERIALIZED_NAME_SHIPPING_RATES = "shippingRates";
  @SerializedName(SERIALIZED_NAME_SHIPPING_RATES)
  private List<CommerceRuntimeShippingRate> shippingRates = null;

  public CheckoutGroupRates() {
  }

  public CheckoutGroupRates groupingId(String groupingId) {
    
    this.groupingId = groupingId;
    return this;
  }

   /**
   * Get groupingId
   * @return groupingId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGroupingId() {
    return groupingId;
  }


  public void setGroupingId(String groupingId) {
    this.groupingId = groupingId;
  }


  public CheckoutGroupRates shippingRates(List<CommerceRuntimeShippingRate> shippingRates) {
    
    this.shippingRates = shippingRates;
    return this;
  }

  public CheckoutGroupRates addShippingRatesItem(CommerceRuntimeShippingRate shippingRatesItem) {
    if (this.shippingRates == null) {
      this.shippingRates = new ArrayList<>();
    }
    this.shippingRates.add(shippingRatesItem);
    return this;
  }

   /**
   * Get shippingRates
   * @return shippingRates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeShippingRate> getShippingRates() {
    return shippingRates;
  }


  public void setShippingRates(List<CommerceRuntimeShippingRate> shippingRates) {
    this.shippingRates = shippingRates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutGroupRates checkoutGroupRates = (CheckoutGroupRates) o;
    return Objects.equals(this.groupingId, checkoutGroupRates.groupingId) &&
        Objects.equals(this.shippingRates, checkoutGroupRates.shippingRates);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupingId, shippingRates);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutGroupRates {\n");
    sb.append("    groupingId: ").append(toIndentedString(groupingId)).append("\n");
    sb.append("    shippingRates: ").append(toIndentedString(shippingRates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupingId");
    openapiFields.add("shippingRates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutGroupRates
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutGroupRates.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutGroupRates is not found in the empty JSON string", CheckoutGroupRates.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CheckoutGroupRates.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutGroupRates` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("groupingId") != null && !jsonObj.get("groupingId").isJsonNull()) && !jsonObj.get("groupingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupingId").toString()));
      }
      if (jsonObj.get("shippingRates") != null && !jsonObj.get("shippingRates").isJsonNull()) {
        JsonArray jsonArrayshippingRates = jsonObj.getAsJsonArray("shippingRates");
        if (jsonArrayshippingRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingRates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingRates` to be an array in the JSON string but got `%s`", jsonObj.get("shippingRates").toString()));
          }

          // validate the optional field `shippingRates` (array)
          for (int i = 0; i < jsonArrayshippingRates.size(); i++) {
            CommerceRuntimeShippingRate.validateJsonObject(jsonArrayshippingRates.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutGroupRates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutGroupRates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutGroupRates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutGroupRates.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutGroupRates>() {
           @Override
           public void write(JsonWriter out, CheckoutGroupRates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutGroupRates read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutGroupRates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutGroupRates
  * @throws IOException if the JSON string is invalid with respect to CheckoutGroupRates
  */
  public static CheckoutGroupRates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutGroupRates.class);
  }

 /**
  * Convert an instance of CheckoutGroupRates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

