/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.commerce.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.commerce.models.Wishlist;
import com.kibocommerce.sdk.commerce.models.WishlistCollection;
import com.kibocommerce.sdk.commerce.models.WishlistItem;
import com.kibocommerce.sdk.commerce.models.WishlistItemCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WishlistApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public WishlistApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WishlistApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public WishlistApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public WishlistApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public WishlistApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addItemToWishlist
     * @param wishlistId  (required)
     * @param wishlistItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemToWishlistCall(String wishlistId, WishlistItem wishlistItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wishlistItem;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemToWishlistValidateBeforeCall(String wishlistId, WishlistItem wishlistItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling addItemToWishlist(Async)");
        }
        

        okhttp3.Call localVarCall = addItemToWishlistCall(wishlistId, wishlistItem, _callback);
        return localVarCall;

    }

    /**
     * Add Item To Wishlist
     * Adds an item to the wishlist of the current shopper.
     * @param wishlistId  (required)
     * @param wishlistItem  (optional)
     * @return WishlistItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItem addItemToWishlist(String wishlistId, WishlistItem wishlistItem) throws ApiException {
        ApiResponse<WishlistItem> localVarResp = addItemToWishlistWithHttpInfo(wishlistId, wishlistItem);
        return localVarResp.getData();
    }

    /**
     * Add Item To Wishlist
     * Adds an item to the wishlist of the current shopper.
     * @param wishlistId  (required)
     * @param wishlistItem  (optional)
     * @return ApiResponse&lt;WishlistItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItem> addItemToWishlistWithHttpInfo(String wishlistId, WishlistItem wishlistItem) throws ApiException {
        okhttp3.Call localVarCall = addItemToWishlistValidateBeforeCall(wishlistId, wishlistItem, null);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Item To Wishlist (asynchronously)
     * Adds an item to the wishlist of the current shopper.
     * @param wishlistId  (required)
     * @param wishlistItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemToWishlistAsync(String wishlistId, WishlistItem wishlistItem, final ApiCallback<WishlistItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemToWishlistValidateBeforeCall(wishlistId, wishlistItem, _callback);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWishlist
     * @param wishlist  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWishlistCall(Wishlist wishlist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wishlist;

        // create path and map variables
        String localVarPath = "/commerce/wishlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWishlistValidateBeforeCall(Wishlist wishlist, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createWishlistCall(wishlist, _callback);
        return localVarCall;

    }

    /**
     * Create Wishlist
     * Create wishlist.
     * @param wishlist  (optional)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist createWishlist(Wishlist wishlist) throws ApiException {
        ApiResponse<Wishlist> localVarResp = createWishlistWithHttpInfo(wishlist);
        return localVarResp.getData();
    }

    /**
     * Create Wishlist
     * Create wishlist.
     * @param wishlist  (optional)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> createWishlistWithHttpInfo(Wishlist wishlist) throws ApiException {
        okhttp3.Call localVarCall = createWishlistValidateBeforeCall(wishlist, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Wishlist (asynchronously)
     * Create wishlist.
     * @param wishlist  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWishlistAsync(Wishlist wishlist, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWishlistValidateBeforeCall(wishlist, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWishlist
     * @param wishlistId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWishlistCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWishlistValidateBeforeCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling deleteWishlist(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWishlistCall(wishlistId, _callback);
        return localVarCall;

    }

    /**
     * Deletes Wishlist
     * Deletes a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWishlist(String wishlistId) throws ApiException {
        deleteWishlistWithHttpInfo(wishlistId);
    }

    /**
     * Deletes Wishlist
     * Deletes a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWishlistWithHttpInfo(String wishlistId) throws ApiException {
        okhttp3.Call localVarCall = deleteWishlistValidateBeforeCall(wishlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes Wishlist (asynchronously)
     * Deletes a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWishlistAsync(String wishlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWishlistValidateBeforeCall(wishlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteWishlistItem
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWishlistItemCall(String wishlistId, String wishlistItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()))
            .replaceAll("\\{" + "wishlistItemId" + "\\}", localVarApiClient.escapeString(wishlistItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWishlistItemValidateBeforeCall(String wishlistId, String wishlistItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling deleteWishlistItem(Async)");
        }
        
        // verify the required parameter 'wishlistItemId' is set
        if (wishlistItemId == null) {
            throw new ApiException("Missing the required parameter 'wishlistItemId' when calling deleteWishlistItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteWishlistItemCall(wishlistId, wishlistItemId, _callback);
        return localVarCall;

    }

    /**
     * Delete Wishlist Item
     * Delete/remove wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteWishlistItem(String wishlistId, String wishlistItemId) throws ApiException {
        deleteWishlistItemWithHttpInfo(wishlistId, wishlistItemId);
    }

    /**
     * Delete Wishlist Item
     * Delete/remove wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWishlistItemWithHttpInfo(String wishlistId, String wishlistItemId) throws ApiException {
        okhttp3.Call localVarCall = deleteWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Wishlist Item (asynchronously)
     * Delete/remove wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteWishlistItemAsync(String wishlistId, String wishlistItemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlist
     * @param wishlistId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistValidateBeforeCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling getWishlist(Async)");
        }
        

        okhttp3.Call localVarCall = getWishlistCall(wishlistId, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlist
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * @param wishlistId  (required)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist getWishlist(String wishlistId) throws ApiException {
        ApiResponse<Wishlist> localVarResp = getWishlistWithHttpInfo(wishlistId);
        return localVarResp.getData();
    }

    /**
     * Get Wishlist
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * @param wishlistId  (required)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> getWishlistWithHttpInfo(String wishlistId) throws ApiException {
        okhttp3.Call localVarCall = getWishlistValidateBeforeCall(wishlistId, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlist (asynchronously)
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * @param wishlistId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistAsync(String wishlistId, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistValidateBeforeCall(wishlistId, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlistByName
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistByNameCall(Integer customerAccountId, String wishlistName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}"
            .replaceAll("\\{" + "customerAccountId" + "\\}", localVarApiClient.escapeString(customerAccountId.toString()))
            .replaceAll("\\{" + "wishlistName" + "\\}", localVarApiClient.escapeString(wishlistName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistByNameValidateBeforeCall(Integer customerAccountId, String wishlistName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerAccountId' is set
        if (customerAccountId == null) {
            throw new ApiException("Missing the required parameter 'customerAccountId' when calling getWishlistByName(Async)");
        }
        
        // verify the required parameter 'wishlistName' is set
        if (wishlistName == null) {
            throw new ApiException("Missing the required parameter 'wishlistName' when calling getWishlistByName(Async)");
        }
        

        okhttp3.Call localVarCall = getWishlistByNameCall(customerAccountId, wishlistName, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlist By Name
     * Retrieves wishlist by name.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist getWishlistByName(Integer customerAccountId, String wishlistName) throws ApiException {
        ApiResponse<Wishlist> localVarResp = getWishlistByNameWithHttpInfo(customerAccountId, wishlistName);
        return localVarResp.getData();
    }

    /**
     * Get Wishlist By Name
     * Retrieves wishlist by name.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> getWishlistByNameWithHttpInfo(Integer customerAccountId, String wishlistName) throws ApiException {
        okhttp3.Call localVarCall = getWishlistByNameValidateBeforeCall(customerAccountId, wishlistName, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlist By Name (asynchronously)
     * Retrieves wishlist by name.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistByNameAsync(Integer customerAccountId, String wishlistName, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistByNameValidateBeforeCall(customerAccountId, wishlistName, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlistItem
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemCall(String wishlistId, String wishlistItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()))
            .replaceAll("\\{" + "wishlistItemId" + "\\}", localVarApiClient.escapeString(wishlistItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistItemValidateBeforeCall(String wishlistId, String wishlistItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling getWishlistItem(Async)");
        }
        
        // verify the required parameter 'wishlistItemId' is set
        if (wishlistItemId == null) {
            throw new ApiException("Missing the required parameter 'wishlistItemId' when calling getWishlistItem(Async)");
        }
        

        okhttp3.Call localVarCall = getWishlistItemCall(wishlistId, wishlistItemId, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlist Item
     * Retrieves an individual wishlist item from a wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @return WishlistItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItem getWishlistItem(String wishlistId, String wishlistItemId) throws ApiException {
        ApiResponse<WishlistItem> localVarResp = getWishlistItemWithHttpInfo(wishlistId, wishlistItemId);
        return localVarResp.getData();
    }

    /**
     * Get Wishlist Item
     * Retrieves an individual wishlist item from a wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @return ApiResponse&lt;WishlistItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItem> getWishlistItemWithHttpInfo(String wishlistId, String wishlistItemId) throws ApiException {
        okhttp3.Call localVarCall = getWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, null);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlist Item (asynchronously)
     * Retrieves an individual wishlist item from a wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemAsync(String wishlistId, String wishlistItemId, final ApiCallback<WishlistItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, _callback);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlistItems
     * @param wishlistId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemsCall(String wishlistId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistItemsValidateBeforeCall(String wishlistId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling getWishlistItems(Async)");
        }
        

        okhttp3.Call localVarCall = getWishlistItemsCall(wishlistId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlist Items
     * Returns a listing of wishlists.
     * @param wishlistId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return WishlistItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItemCollection getWishlistItems(String wishlistId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<WishlistItemCollection> localVarResp = getWishlistItemsWithHttpInfo(wishlistId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Wishlist Items
     * Returns a listing of wishlists.
     * @param wishlistId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;WishlistItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItemCollection> getWishlistItemsWithHttpInfo(String wishlistId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getWishlistItemsValidateBeforeCall(wishlistId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<WishlistItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlist Items (asynchronously)
     * Returns a listing of wishlists.
     * @param wishlistId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemsAsync(String wishlistId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<WishlistItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistItemsValidateBeforeCall(wishlistId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<WishlistItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlistItemsByWishlistName
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemsByWishlistNameCall(Integer customerAccountId, String wishlistName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items"
            .replaceAll("\\{" + "customerAccountId" + "\\}", localVarApiClient.escapeString(customerAccountId.toString()))
            .replaceAll("\\{" + "wishlistName" + "\\}", localVarApiClient.escapeString(wishlistName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistItemsByWishlistNameValidateBeforeCall(Integer customerAccountId, String wishlistName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerAccountId' is set
        if (customerAccountId == null) {
            throw new ApiException("Missing the required parameter 'customerAccountId' when calling getWishlistItemsByWishlistName(Async)");
        }
        
        // verify the required parameter 'wishlistName' is set
        if (wishlistName == null) {
            throw new ApiException("Missing the required parameter 'wishlistName' when calling getWishlistItemsByWishlistName(Async)");
        }
        

        okhttp3.Call localVarCall = getWishlistItemsByWishlistNameCall(customerAccountId, wishlistName, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlist Items By WishlistName
     * Returns a listing of wishlists.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return WishlistItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItemCollection getWishlistItemsByWishlistName(Integer customerAccountId, String wishlistName, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<WishlistItemCollection> localVarResp = getWishlistItemsByWishlistNameWithHttpInfo(customerAccountId, wishlistName, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Wishlist Items By WishlistName
     * Returns a listing of wishlists.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;WishlistItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItemCollection> getWishlistItemsByWishlistNameWithHttpInfo(Integer customerAccountId, String wishlistName, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getWishlistItemsByWishlistNameValidateBeforeCall(customerAccountId, wishlistName, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<WishlistItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlist Items By WishlistName (asynchronously)
     * Returns a listing of wishlists.
     * @param customerAccountId  (required)
     * @param wishlistName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistItemsByWishlistNameAsync(Integer customerAccountId, String wishlistName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<WishlistItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistItemsByWishlistNameValidateBeforeCall(customerAccountId, wishlistName, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<WishlistItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWishlists
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWishlistsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getWishlistsCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        return localVarCall;

    }

    /**
     * Get Wishlists
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return WishlistCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistCollection getWishlists(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        ApiResponse<WishlistCollection> localVarResp = getWishlistsWithHttpInfo(startIndex, pageSize, sortBy, filter, q, qLimit);
        return localVarResp.getData();
    }

    /**
     * Get Wishlists
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return ApiResponse&lt;WishlistCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistCollection> getWishlistsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        okhttp3.Call localVarCall = getWishlistsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, null);
        Type localVarReturnType = new TypeToken<WishlistCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Wishlists (asynchronously)
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWishlistsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback<WishlistCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWishlistsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        Type localVarReturnType = new TypeToken<WishlistCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAllWishlistItems
     * @param wishlistId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllWishlistItemsCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAllWishlistItemsValidateBeforeCall(String wishlistId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling removeAllWishlistItems(Async)");
        }
        

        okhttp3.Call localVarCall = removeAllWishlistItemsCall(wishlistId, _callback);
        return localVarCall;

    }

    /**
     * Remove All Wishlist Items
     * Clears all items in the wishlist.
     * @param wishlistId  (required)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist removeAllWishlistItems(String wishlistId) throws ApiException {
        ApiResponse<Wishlist> localVarResp = removeAllWishlistItemsWithHttpInfo(wishlistId);
        return localVarResp.getData();
    }

    /**
     * Remove All Wishlist Items
     * Clears all items in the wishlist.
     * @param wishlistId  (required)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> removeAllWishlistItemsWithHttpInfo(String wishlistId) throws ApiException {
        okhttp3.Call localVarCall = removeAllWishlistItemsValidateBeforeCall(wishlistId, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove All Wishlist Items (asynchronously)
     * Clears all items in the wishlist.
     * @param wishlistId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAllWishlistItemsAsync(String wishlistId, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAllWishlistItemsValidateBeforeCall(wishlistId, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWishlist
     * @param wishlistId  (required)
     * @param wishlist  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistCall(String wishlistId, Wishlist wishlist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wishlist;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWishlistValidateBeforeCall(String wishlistId, Wishlist wishlist, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling updateWishlist(Async)");
        }
        

        okhttp3.Call localVarCall = updateWishlistCall(wishlistId, wishlist, _callback);
        return localVarCall;

    }

    /**
     * Update Wishlist
     * Updates a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @param wishlist  (optional)
     * @return Wishlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Wishlist updateWishlist(String wishlistId, Wishlist wishlist) throws ApiException {
        ApiResponse<Wishlist> localVarResp = updateWishlistWithHttpInfo(wishlistId, wishlist);
        return localVarResp.getData();
    }

    /**
     * Update Wishlist
     * Updates a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @param wishlist  (optional)
     * @return ApiResponse&lt;Wishlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wishlist> updateWishlistWithHttpInfo(String wishlistId, Wishlist wishlist) throws ApiException {
        okhttp3.Call localVarCall = updateWishlistValidateBeforeCall(wishlistId, wishlist, null);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Wishlist (asynchronously)
     * Updates a wishlist specified by wishlist Id.
     * @param wishlistId  (required)
     * @param wishlist  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistAsync(String wishlistId, Wishlist wishlist, final ApiCallback<Wishlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWishlistValidateBeforeCall(wishlistId, wishlist, _callback);
        Type localVarReturnType = new TypeToken<Wishlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWishlistItem
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param wishlistItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistItemCall(String wishlistId, String wishlistItemId, WishlistItem wishlistItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wishlistItem;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()))
            .replaceAll("\\{" + "wishlistItemId" + "\\}", localVarApiClient.escapeString(wishlistItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWishlistItemValidateBeforeCall(String wishlistId, String wishlistItemId, WishlistItem wishlistItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling updateWishlistItem(Async)");
        }
        
        // verify the required parameter 'wishlistItemId' is set
        if (wishlistItemId == null) {
            throw new ApiException("Missing the required parameter 'wishlistItemId' when calling updateWishlistItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateWishlistItemCall(wishlistId, wishlistItemId, wishlistItem, _callback);
        return localVarCall;

    }

    /**
     * Update Wishlist Item
     * Updates a wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param wishlistItem  (optional)
     * @return WishlistItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItem updateWishlistItem(String wishlistId, String wishlistItemId, WishlistItem wishlistItem) throws ApiException {
        ApiResponse<WishlistItem> localVarResp = updateWishlistItemWithHttpInfo(wishlistId, wishlistItemId, wishlistItem);
        return localVarResp.getData();
    }

    /**
     * Update Wishlist Item
     * Updates a wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param wishlistItem  (optional)
     * @return ApiResponse&lt;WishlistItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItem> updateWishlistItemWithHttpInfo(String wishlistId, String wishlistItemId, WishlistItem wishlistItem) throws ApiException {
        okhttp3.Call localVarCall = updateWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, wishlistItem, null);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Wishlist Item (asynchronously)
     * Updates a wishlist item.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param wishlistItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistItemAsync(String wishlistId, String wishlistItemId, WishlistItem wishlistItem, final ApiCallback<WishlistItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWishlistItemValidateBeforeCall(wishlistId, wishlistItemId, wishlistItem, _callback);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWishlistItemQuantity
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param quantity  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistItemQuantityCall(String wishlistId, String wishlistItemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}"
            .replaceAll("\\{" + "wishlistId" + "\\}", localVarApiClient.escapeString(wishlistId.toString()))
            .replaceAll("\\{" + "wishlistItemId" + "\\}", localVarApiClient.escapeString(wishlistItemId.toString()))
            .replaceAll("\\{" + "quantity" + "\\}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWishlistItemQuantityValidateBeforeCall(String wishlistId, String wishlistItemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wishlistId' is set
        if (wishlistId == null) {
            throw new ApiException("Missing the required parameter 'wishlistId' when calling updateWishlistItemQuantity(Async)");
        }
        
        // verify the required parameter 'wishlistItemId' is set
        if (wishlistItemId == null) {
            throw new ApiException("Missing the required parameter 'wishlistItemId' when calling updateWishlistItemQuantity(Async)");
        }
        
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling updateWishlistItemQuantity(Async)");
        }
        

        okhttp3.Call localVarCall = updateWishlistItemQuantityCall(wishlistId, wishlistItemId, quantity, _callback);
        return localVarCall;

    }

    /**
     * Update Wishlist Item Quantity
     * Updates the quantity of an item in the wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param quantity  (required)
     * @return WishlistItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public WishlistItem updateWishlistItemQuantity(String wishlistId, String wishlistItemId, Integer quantity) throws ApiException {
        ApiResponse<WishlistItem> localVarResp = updateWishlistItemQuantityWithHttpInfo(wishlistId, wishlistItemId, quantity);
        return localVarResp.getData();
    }

    /**
     * Update Wishlist Item Quantity
     * Updates the quantity of an item in the wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param quantity  (required)
     * @return ApiResponse&lt;WishlistItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WishlistItem> updateWishlistItemQuantityWithHttpInfo(String wishlistId, String wishlistItemId, Integer quantity) throws ApiException {
        okhttp3.Call localVarCall = updateWishlistItemQuantityValidateBeforeCall(wishlistId, wishlistItemId, quantity, null);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Wishlist Item Quantity (asynchronously)
     * Updates the quantity of an item in the wishlist.
     * @param wishlistId  (required)
     * @param wishlistItemId  (required)
     * @param quantity  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWishlistItemQuantityAsync(String wishlistId, String wishlistItemId, Integer quantity, final ApiCallback<WishlistItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWishlistItemQuantityValidateBeforeCall(wishlistId, wishlistItemId, quantity, _callback);
        Type localVarReturnType = new TypeToken<WishlistItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public WishlistApi build() {
            return new WishlistApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
