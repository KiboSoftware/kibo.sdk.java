/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.ShippingDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CheckoutGrouping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckoutGrouping implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESTINATION_ID = "destinationId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
  private String destinationId;

  public static final String SERIALIZED_NAME_FULFILLMENT_METHOD = "fulfillmentMethod";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_METHOD)
  private String fulfillmentMethod;

  public static final String SERIALIZED_NAME_ORDER_ITEM_IDS = "orderItemIds";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_IDS)
  private List<String> orderItemIds = null;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_CODE = "shippingMethodCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_CODE)
  private String shippingMethodCode;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_NAME = "shippingMethodName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_NAME)
  private String shippingMethodName;

  public static final String SERIALIZED_NAME_STANDALONE_GROUP = "standaloneGroup";
  @SerializedName(SERIALIZED_NAME_STANDALONE_GROUP)
  private Boolean standaloneGroup;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNTS = "shippingDiscounts";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNTS)
  private List<ShippingDiscount> shippingDiscounts = null;

  public static final String SERIALIZED_NAME_HANDLING_DISCOUNTS = "handlingDiscounts";
  @SerializedName(SERIALIZED_NAME_HANDLING_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> handlingDiscounts = null;

  public static final String SERIALIZED_NAME_DUTY_AMOUNT = "dutyAmount";
  @SerializedName(SERIALIZED_NAME_DUTY_AMOUNT)
  private Double dutyAmount;

  public static final String SERIALIZED_NAME_DUTY_TOTAL = "dutyTotal";
  @SerializedName(SERIALIZED_NAME_DUTY_TOTAL)
  private Double dutyTotal;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shippingAmount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private Double shippingAmount;

  public static final String SERIALIZED_NAME_SHIPPING_SUB_TOTAL = "shippingSubTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SUB_TOTAL)
  private Double shippingSubTotal;

  public static final String SERIALIZED_NAME_ITEM_LEVEL_SHIPPING_DISCOUNT_TOTAL = "itemLevelShippingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL_SHIPPING_DISCOUNT_TOTAL)
  private Double itemLevelShippingDiscountTotal;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_SHIPPING_DISCOUNT_TOTAL = "orderLevelShippingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_SHIPPING_DISCOUNT_TOTAL)
  private Double orderLevelShippingDiscountTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TAX = "shippingTax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX)
  private Double shippingTax;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_TOTAL = "shippingTaxTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_TOTAL)
  private Double shippingTaxTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Double shippingTotal;

  public static final String SERIALIZED_NAME_HANDLING_AMOUNT = "handlingAmount";
  @SerializedName(SERIALIZED_NAME_HANDLING_AMOUNT)
  private Double handlingAmount;

  public static final String SERIALIZED_NAME_HANDLING_SUB_TOTAL = "handlingSubTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_SUB_TOTAL)
  private Double handlingSubTotal;

  public static final String SERIALIZED_NAME_ITEM_LEVEL_HANDLING_DISCOUNT_TOTAL = "itemLevelHandlingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL_HANDLING_DISCOUNT_TOTAL)
  private Double itemLevelHandlingDiscountTotal;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_HANDLING_DISCOUNT_TOTAL = "orderLevelHandlingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_HANDLING_DISCOUNT_TOTAL)
  private Double orderLevelHandlingDiscountTotal;

  public static final String SERIALIZED_NAME_HANDLING_TAX = "handlingTax";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX)
  private Double handlingTax;

  public static final String SERIALIZED_NAME_HANDLING_TAX_TOTAL = "handlingTaxTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX_TOTAL)
  private Double handlingTaxTotal;

  public static final String SERIALIZED_NAME_HANDLING_TOTAL = "handlingTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TOTAL)
  private Double handlingTotal;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData;

  public CheckoutGrouping() {
  }

  public CheckoutGrouping id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * A unique identifier for this grouping.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier for this grouping.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CheckoutGrouping destinationId(String destinationId) {
    
    this.destinationId = destinationId;
    return this;
  }

   /**
   * The DestinationId used by items in this grouping, which may be {null}.
   * @return destinationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DestinationId used by items in this grouping, which may be {null}.")

  public String getDestinationId() {
    return destinationId;
  }


  public void setDestinationId(String destinationId) {
    this.destinationId = destinationId;
  }


  public CheckoutGrouping fulfillmentMethod(String fulfillmentMethod) {
    
    this.fulfillmentMethod = fulfillmentMethod;
    return this;
  }

   /**
   * The FulfillmentMethod used by items in this grouping.
   * @return fulfillmentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The FulfillmentMethod used by items in this grouping.")

  public String getFulfillmentMethod() {
    return fulfillmentMethod;
  }


  public void setFulfillmentMethod(String fulfillmentMethod) {
    this.fulfillmentMethod = fulfillmentMethod;
  }


  public CheckoutGrouping orderItemIds(List<String> orderItemIds) {
    
    this.orderItemIds = orderItemIds;
    return this;
  }

  public CheckoutGrouping addOrderItemIdsItem(String orderItemIdsItem) {
    if (this.orderItemIds == null) {
      this.orderItemIds = new ArrayList<>();
    }
    this.orderItemIds.add(orderItemIdsItem);
    return this;
  }

   /**
   * Identifiers of the items that make up this grouping.
   * @return orderItemIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifiers of the items that make up this grouping.")

  public List<String> getOrderItemIds() {
    return orderItemIds;
  }


  public void setOrderItemIds(List<String> orderItemIds) {
    this.orderItemIds = orderItemIds;
  }


  public CheckoutGrouping shippingMethodCode(String shippingMethodCode) {
    
    this.shippingMethodCode = shippingMethodCode;
    return this;
  }

   /**
   * Code that uniquely identifies the shipping method such as \&quot;Ground,\&quot; \&quot;Overnight,\&quot; or \&quot;Digital.\&quot;  The site&#39;s shipping settings lists the valid shipping methods specified for this site.
   * @return shippingMethodCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code that uniquely identifies the shipping method such as \"Ground,\" \"Overnight,\" or \"Digital.\"  The site's shipping settings lists the valid shipping methods specified for this site.")

  public String getShippingMethodCode() {
    return shippingMethodCode;
  }


  public void setShippingMethodCode(String shippingMethodCode) {
    this.shippingMethodCode = shippingMethodCode;
  }


  public CheckoutGrouping shippingMethodName(String shippingMethodName) {
    
    this.shippingMethodName = shippingMethodName;
    return this;
  }

   /**
   * Readable name of the shipping method.
   * @return shippingMethodName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Readable name of the shipping method.")

  public String getShippingMethodName() {
    return shippingMethodName;
  }


  public void setShippingMethodName(String shippingMethodName) {
    this.shippingMethodName = shippingMethodName;
  }


  public CheckoutGrouping standaloneGroup(Boolean standaloneGroup) {
    
    this.standaloneGroup = standaloneGroup;
    return this;
  }

   /**
   * Indicates whether a non ship group should combine with a ship group
   * @return standaloneGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether a non ship group should combine with a ship group")

  public Boolean getStandaloneGroup() {
    return standaloneGroup;
  }


  public void setStandaloneGroup(Boolean standaloneGroup) {
    this.standaloneGroup = standaloneGroup;
  }


  public CheckoutGrouping shippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
    
    this.shippingDiscounts = shippingDiscounts;
    return this;
  }

  public CheckoutGrouping addShippingDiscountsItem(ShippingDiscount shippingDiscountsItem) {
    if (this.shippingDiscounts == null) {
      this.shippingDiscounts = new ArrayList<>();
    }
    this.shippingDiscounts.add(shippingDiscountsItem);
    return this;
  }

   /**
   * Get shippingDiscounts
   * @return shippingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ShippingDiscount> getShippingDiscounts() {
    return shippingDiscounts;
  }


  public void setShippingDiscounts(List<ShippingDiscount> shippingDiscounts) {
    this.shippingDiscounts = shippingDiscounts;
  }


  public CheckoutGrouping handlingDiscounts(List<CommerceRuntimeAppliedDiscount> handlingDiscounts) {
    
    this.handlingDiscounts = handlingDiscounts;
    return this;
  }

  public CheckoutGrouping addHandlingDiscountsItem(CommerceRuntimeAppliedDiscount handlingDiscountsItem) {
    if (this.handlingDiscounts == null) {
      this.handlingDiscounts = new ArrayList<>();
    }
    this.handlingDiscounts.add(handlingDiscountsItem);
    return this;
  }

   /**
   * Get handlingDiscounts
   * @return handlingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeAppliedDiscount> getHandlingDiscounts() {
    return handlingDiscounts;
  }


  public void setHandlingDiscounts(List<CommerceRuntimeAppliedDiscount> handlingDiscounts) {
    this.handlingDiscounts = handlingDiscounts;
  }


  public CheckoutGrouping dutyAmount(Double dutyAmount) {
    
    this.dutyAmount = dutyAmount;
    return this;
  }

   /**
   * Any duty fee applied directly to this group. Items can also have their own duty fee.
   * @return dutyAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any duty fee applied directly to this group. Items can also have their own duty fee.")

  public Double getDutyAmount() {
    return dutyAmount;
  }


  public void setDutyAmount(Double dutyAmount) {
    this.dutyAmount = dutyAmount;
  }


  public CheckoutGrouping dutyTotal(Double dutyTotal) {
    
    this.dutyTotal = dutyTotal;
    return this;
  }

   /**
   * Total raw duty amounts for this group.
   * @return dutyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total raw duty amounts for this group.")

  public Double getDutyTotal() {
    return dutyTotal;
  }


  public void setDutyTotal(Double dutyTotal) {
    this.dutyTotal = dutyTotal;
  }


  public CheckoutGrouping shippingAmount(Double shippingAmount) {
    
    this.shippingAmount = shippingAmount;
    return this;
  }

   /**
   * If a shipping method applies directly to this grouping (versus the items), this is the raw shipping amount for the group.
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If a shipping method applies directly to this grouping (versus the items), this is the raw shipping amount for the group.")

  public Double getShippingAmount() {
    return shippingAmount;
  }


  public void setShippingAmount(Double shippingAmount) {
    this.shippingAmount = shippingAmount;
  }


  public CheckoutGrouping shippingSubTotal(Double shippingSubTotal) {
    
    this.shippingSubTotal = shippingSubTotal;
    return this;
  }

   /**
   * The raw shipping amount minus shipping discounts.
   * @return shippingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The raw shipping amount minus shipping discounts.")

  public Double getShippingSubTotal() {
    return shippingSubTotal;
  }


  public void setShippingSubTotal(Double shippingSubTotal) {
    this.shippingSubTotal = shippingSubTotal;
  }


  public CheckoutGrouping itemLevelShippingDiscountTotal(Double itemLevelShippingDiscountTotal) {
    
    this.itemLevelShippingDiscountTotal = itemLevelShippingDiscountTotal;
    return this;
  }

   /**
   * The total value of item-level shipping discounts applied to this group.
   * @return itemLevelShippingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of item-level shipping discounts applied to this group.")

  public Double getItemLevelShippingDiscountTotal() {
    return itemLevelShippingDiscountTotal;
  }


  public void setItemLevelShippingDiscountTotal(Double itemLevelShippingDiscountTotal) {
    this.itemLevelShippingDiscountTotal = itemLevelShippingDiscountTotal;
  }


  public CheckoutGrouping orderLevelShippingDiscountTotal(Double orderLevelShippingDiscountTotal) {
    
    this.orderLevelShippingDiscountTotal = orderLevelShippingDiscountTotal;
    return this;
  }

   /**
   * The total value of order-level (group-level) shipping discounts applied to this group.
   * @return orderLevelShippingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of order-level (group-level) shipping discounts applied to this group.")

  public Double getOrderLevelShippingDiscountTotal() {
    return orderLevelShippingDiscountTotal;
  }


  public void setOrderLevelShippingDiscountTotal(Double orderLevelShippingDiscountTotal) {
    this.orderLevelShippingDiscountTotal = orderLevelShippingDiscountTotal;
  }


  public CheckoutGrouping shippingTax(Double shippingTax) {
    
    this.shippingTax = shippingTax;
    return this;
  }

   /**
   * Group-level shipping tax. Does not account for item shipping tax.
   * @return shippingTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group-level shipping tax. Does not account for item shipping tax.")

  public Double getShippingTax() {
    return shippingTax;
  }


  public void setShippingTax(Double shippingTax) {
    this.shippingTax = shippingTax;
  }


  public CheckoutGrouping shippingTaxTotal(Double shippingTaxTotal) {
    
    this.shippingTaxTotal = shippingTaxTotal;
    return this;
  }

   /**
   * The total shipping tax for this group, accounting for both group-level and item-level shipping tax.
   * @return shippingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total shipping tax for this group, accounting for both group-level and item-level shipping tax.")

  public Double getShippingTaxTotal() {
    return shippingTaxTotal;
  }


  public void setShippingTaxTotal(Double shippingTaxTotal) {
    this.shippingTaxTotal = shippingTaxTotal;
  }


  public CheckoutGrouping shippingTotal(Double shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * The total shipping cost for this group, accounting for discounts and tax.
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total shipping cost for this group, accounting for discounts and tax.")

  public Double getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Double shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public CheckoutGrouping handlingAmount(Double handlingAmount) {
    
    this.handlingAmount = handlingAmount;
    return this;
  }

   /**
   * The handling fee amount that&#39;s applicable to this grouping.
   * @return handlingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The handling fee amount that's applicable to this grouping.")

  public Double getHandlingAmount() {
    return handlingAmount;
  }


  public void setHandlingAmount(Double handlingAmount) {
    this.handlingAmount = handlingAmount;
  }


  public CheckoutGrouping handlingSubTotal(Double handlingSubTotal) {
    
    this.handlingSubTotal = handlingSubTotal;
    return this;
  }

   /**
   * The total raw handling amounts minus handling discounts.
   * @return handlingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total raw handling amounts minus handling discounts.")

  public Double getHandlingSubTotal() {
    return handlingSubTotal;
  }


  public void setHandlingSubTotal(Double handlingSubTotal) {
    this.handlingSubTotal = handlingSubTotal;
  }


  public CheckoutGrouping itemLevelHandlingDiscountTotal(Double itemLevelHandlingDiscountTotal) {
    
    this.itemLevelHandlingDiscountTotal = itemLevelHandlingDiscountTotal;
    return this;
  }

   /**
   * The total value of item-level handling discounts applied to this group.
   * @return itemLevelHandlingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of item-level handling discounts applied to this group.")

  public Double getItemLevelHandlingDiscountTotal() {
    return itemLevelHandlingDiscountTotal;
  }


  public void setItemLevelHandlingDiscountTotal(Double itemLevelHandlingDiscountTotal) {
    this.itemLevelHandlingDiscountTotal = itemLevelHandlingDiscountTotal;
  }


  public CheckoutGrouping orderLevelHandlingDiscountTotal(Double orderLevelHandlingDiscountTotal) {
    
    this.orderLevelHandlingDiscountTotal = orderLevelHandlingDiscountTotal;
    return this;
  }

   /**
   * The total value of order-level (group-level) handling discounts applied to this group.
   * @return orderLevelHandlingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of order-level (group-level) handling discounts applied to this group.")

  public Double getOrderLevelHandlingDiscountTotal() {
    return orderLevelHandlingDiscountTotal;
  }


  public void setOrderLevelHandlingDiscountTotal(Double orderLevelHandlingDiscountTotal) {
    this.orderLevelHandlingDiscountTotal = orderLevelHandlingDiscountTotal;
  }


  public CheckoutGrouping handlingTax(Double handlingTax) {
    
    this.handlingTax = handlingTax;
    return this;
  }

   /**
   * Group-level handling tax. Does not account for item handling tax.
   * @return handlingTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group-level handling tax. Does not account for item handling tax.")

  public Double getHandlingTax() {
    return handlingTax;
  }


  public void setHandlingTax(Double handlingTax) {
    this.handlingTax = handlingTax;
  }


  public CheckoutGrouping handlingTaxTotal(Double handlingTaxTotal) {
    
    this.handlingTaxTotal = handlingTaxTotal;
    return this;
  }

   /**
   * The total handling tax for this group, accounting for both group-level and item-level handling tax.
   * @return handlingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total handling tax for this group, accounting for both group-level and item-level handling tax.")

  public Double getHandlingTaxTotal() {
    return handlingTaxTotal;
  }


  public void setHandlingTaxTotal(Double handlingTaxTotal) {
    this.handlingTaxTotal = handlingTaxTotal;
  }


  public CheckoutGrouping handlingTotal(Double handlingTotal) {
    
    this.handlingTotal = handlingTotal;
    return this;
  }

   /**
   * The total handling cost for this group, accounting for discounts and tax.
   * @return handlingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total handling cost for this group, accounting for discounts and tax.")

  public Double getHandlingTotal() {
    return handlingTotal;
  }


  public void setHandlingTotal(Double handlingTotal) {
    this.handlingTotal = handlingTotal;
  }


  public CheckoutGrouping taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Get taxData
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutGrouping checkoutGrouping = (CheckoutGrouping) o;
    return Objects.equals(this.id, checkoutGrouping.id) &&
        Objects.equals(this.destinationId, checkoutGrouping.destinationId) &&
        Objects.equals(this.fulfillmentMethod, checkoutGrouping.fulfillmentMethod) &&
        Objects.equals(this.orderItemIds, checkoutGrouping.orderItemIds) &&
        Objects.equals(this.shippingMethodCode, checkoutGrouping.shippingMethodCode) &&
        Objects.equals(this.shippingMethodName, checkoutGrouping.shippingMethodName) &&
        Objects.equals(this.standaloneGroup, checkoutGrouping.standaloneGroup) &&
        Objects.equals(this.shippingDiscounts, checkoutGrouping.shippingDiscounts) &&
        Objects.equals(this.handlingDiscounts, checkoutGrouping.handlingDiscounts) &&
        Objects.equals(this.dutyAmount, checkoutGrouping.dutyAmount) &&
        Objects.equals(this.dutyTotal, checkoutGrouping.dutyTotal) &&
        Objects.equals(this.shippingAmount, checkoutGrouping.shippingAmount) &&
        Objects.equals(this.shippingSubTotal, checkoutGrouping.shippingSubTotal) &&
        Objects.equals(this.itemLevelShippingDiscountTotal, checkoutGrouping.itemLevelShippingDiscountTotal) &&
        Objects.equals(this.orderLevelShippingDiscountTotal, checkoutGrouping.orderLevelShippingDiscountTotal) &&
        Objects.equals(this.shippingTax, checkoutGrouping.shippingTax) &&
        Objects.equals(this.shippingTaxTotal, checkoutGrouping.shippingTaxTotal) &&
        Objects.equals(this.shippingTotal, checkoutGrouping.shippingTotal) &&
        Objects.equals(this.handlingAmount, checkoutGrouping.handlingAmount) &&
        Objects.equals(this.handlingSubTotal, checkoutGrouping.handlingSubTotal) &&
        Objects.equals(this.itemLevelHandlingDiscountTotal, checkoutGrouping.itemLevelHandlingDiscountTotal) &&
        Objects.equals(this.orderLevelHandlingDiscountTotal, checkoutGrouping.orderLevelHandlingDiscountTotal) &&
        Objects.equals(this.handlingTax, checkoutGrouping.handlingTax) &&
        Objects.equals(this.handlingTaxTotal, checkoutGrouping.handlingTaxTotal) &&
        Objects.equals(this.handlingTotal, checkoutGrouping.handlingTotal) &&
        Objects.equals(this.taxData, checkoutGrouping.taxData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, destinationId, fulfillmentMethod, orderItemIds, shippingMethodCode, shippingMethodName, standaloneGroup, shippingDiscounts, handlingDiscounts, dutyAmount, dutyTotal, shippingAmount, shippingSubTotal, itemLevelShippingDiscountTotal, orderLevelShippingDiscountTotal, shippingTax, shippingTaxTotal, shippingTotal, handlingAmount, handlingSubTotal, itemLevelHandlingDiscountTotal, orderLevelHandlingDiscountTotal, handlingTax, handlingTaxTotal, handlingTotal, taxData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutGrouping {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
    sb.append("    fulfillmentMethod: ").append(toIndentedString(fulfillmentMethod)).append("\n");
    sb.append("    orderItemIds: ").append(toIndentedString(orderItemIds)).append("\n");
    sb.append("    shippingMethodCode: ").append(toIndentedString(shippingMethodCode)).append("\n");
    sb.append("    shippingMethodName: ").append(toIndentedString(shippingMethodName)).append("\n");
    sb.append("    standaloneGroup: ").append(toIndentedString(standaloneGroup)).append("\n");
    sb.append("    shippingDiscounts: ").append(toIndentedString(shippingDiscounts)).append("\n");
    sb.append("    handlingDiscounts: ").append(toIndentedString(handlingDiscounts)).append("\n");
    sb.append("    dutyAmount: ").append(toIndentedString(dutyAmount)).append("\n");
    sb.append("    dutyTotal: ").append(toIndentedString(dutyTotal)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    shippingSubTotal: ").append(toIndentedString(shippingSubTotal)).append("\n");
    sb.append("    itemLevelShippingDiscountTotal: ").append(toIndentedString(itemLevelShippingDiscountTotal)).append("\n");
    sb.append("    orderLevelShippingDiscountTotal: ").append(toIndentedString(orderLevelShippingDiscountTotal)).append("\n");
    sb.append("    shippingTax: ").append(toIndentedString(shippingTax)).append("\n");
    sb.append("    shippingTaxTotal: ").append(toIndentedString(shippingTaxTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    handlingAmount: ").append(toIndentedString(handlingAmount)).append("\n");
    sb.append("    handlingSubTotal: ").append(toIndentedString(handlingSubTotal)).append("\n");
    sb.append("    itemLevelHandlingDiscountTotal: ").append(toIndentedString(itemLevelHandlingDiscountTotal)).append("\n");
    sb.append("    orderLevelHandlingDiscountTotal: ").append(toIndentedString(orderLevelHandlingDiscountTotal)).append("\n");
    sb.append("    handlingTax: ").append(toIndentedString(handlingTax)).append("\n");
    sb.append("    handlingTaxTotal: ").append(toIndentedString(handlingTaxTotal)).append("\n");
    sb.append("    handlingTotal: ").append(toIndentedString(handlingTotal)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("destinationId");
    openapiFields.add("fulfillmentMethod");
    openapiFields.add("orderItemIds");
    openapiFields.add("shippingMethodCode");
    openapiFields.add("shippingMethodName");
    openapiFields.add("standaloneGroup");
    openapiFields.add("shippingDiscounts");
    openapiFields.add("handlingDiscounts");
    openapiFields.add("dutyAmount");
    openapiFields.add("dutyTotal");
    openapiFields.add("shippingAmount");
    openapiFields.add("shippingSubTotal");
    openapiFields.add("itemLevelShippingDiscountTotal");
    openapiFields.add("orderLevelShippingDiscountTotal");
    openapiFields.add("shippingTax");
    openapiFields.add("shippingTaxTotal");
    openapiFields.add("shippingTotal");
    openapiFields.add("handlingAmount");
    openapiFields.add("handlingSubTotal");
    openapiFields.add("itemLevelHandlingDiscountTotal");
    openapiFields.add("orderLevelHandlingDiscountTotal");
    openapiFields.add("handlingTax");
    openapiFields.add("handlingTaxTotal");
    openapiFields.add("handlingTotal");
    openapiFields.add("taxData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutGrouping
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CheckoutGrouping.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutGrouping is not found in the empty JSON string", CheckoutGrouping.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CheckoutGrouping.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutGrouping` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("destinationId") != null && !jsonObj.get("destinationId").isJsonNull()) && !jsonObj.get("destinationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationId").toString()));
      }
      if ((jsonObj.get("fulfillmentMethod") != null && !jsonObj.get("fulfillmentMethod").isJsonNull()) && !jsonObj.get("fulfillmentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentMethod").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("orderItemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderItemIds` to be an array in the JSON string but got `%s`", jsonObj.get("orderItemIds").toString()));
      }
      if ((jsonObj.get("shippingMethodCode") != null && !jsonObj.get("shippingMethodCode").isJsonNull()) && !jsonObj.get("shippingMethodCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethodCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethodCode").toString()));
      }
      if ((jsonObj.get("shippingMethodName") != null && !jsonObj.get("shippingMethodName").isJsonNull()) && !jsonObj.get("shippingMethodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethodName").toString()));
      }
      if (jsonObj.get("shippingDiscounts") != null && !jsonObj.get("shippingDiscounts").isJsonNull()) {
        JsonArray jsonArrayshippingDiscounts = jsonObj.getAsJsonArray("shippingDiscounts");
        if (jsonArrayshippingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("shippingDiscounts").toString()));
          }

          // validate the optional field `shippingDiscounts` (array)
          for (int i = 0; i < jsonArrayshippingDiscounts.size(); i++) {
            ShippingDiscount.validateJsonObject(jsonArrayshippingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("handlingDiscounts") != null && !jsonObj.get("handlingDiscounts").isJsonNull()) {
        JsonArray jsonArrayhandlingDiscounts = jsonObj.getAsJsonArray("handlingDiscounts");
        if (jsonArrayhandlingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("handlingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `handlingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("handlingDiscounts").toString()));
          }

          // validate the optional field `handlingDiscounts` (array)
          for (int i = 0; i < jsonArrayhandlingDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayhandlingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutGrouping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutGrouping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutGrouping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutGrouping.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutGrouping>() {
           @Override
           public void write(JsonWriter out, CheckoutGrouping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutGrouping read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutGrouping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutGrouping
  * @throws IOException if the JSON string is invalid with respect to CheckoutGrouping
  */
  public static CheckoutGrouping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutGrouping.class);
  }

 /**
  * Convert an instance of CheckoutGrouping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

