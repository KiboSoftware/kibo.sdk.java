/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.commerce.models.CapturableShipmentSummary;
import com.kibocommerce.sdk.commerce.models.PaymentActionTarget;
import com.kibocommerce.sdk.commerce.models.PaymentGatewayResponseData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * A single interaction of a potential list of intereactions for a transaction. The scope of the transaction is the entire payment  interchange. It is created upon authorization and is used for all subsequent interactions performed against the authorize,  such as consecutive captures.
 */
@ApiModel(description = "A single interaction of a potential list of intereactions for a transaction. The scope of the transaction is the entire payment  interchange. It is created upon authorization and is used for all subsequent interactions performed against the authorize,  such as consecutive captures.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentInteraction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GATEWAY_INTERACTION_ID = "gatewayInteractionId";
  @SerializedName(SERIALIZED_NAME_GATEWAY_INTERACTION_ID)
  private Integer gatewayInteractionId;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private PaymentActionTarget target;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INTERACTION_TYPE = "interactionType";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE)
  private String interactionType;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "checkNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private String checkNumber;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PAYMENT_ENTRY_STATUS = "paymentEntryStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ENTRY_STATUS)
  private String paymentEntryStatus;

  public static final String SERIALIZED_NAME_IS_RECURRING = "isRecurring";
  @SerializedName(SERIALIZED_NAME_IS_RECURRING)
  private Boolean isRecurring;

  public static final String SERIALIZED_NAME_IS_MANUAL = "isManual";
  @SerializedName(SERIALIZED_NAME_IS_MANUAL)
  private Boolean isManual;

  public static final String SERIALIZED_NAME_GATEWAY_TRANSACTION_ID = "gatewayTransactionId";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TRANSACTION_ID)
  private String gatewayTransactionId;

  public static final String SERIALIZED_NAME_GATEWAY_AUTH_CODE = "gatewayAuthCode";
  @SerializedName(SERIALIZED_NAME_GATEWAY_AUTH_CODE)
  private String gatewayAuthCode;

  public static final String SERIALIZED_NAME_GATEWAY_A_V_S_CODES = "gatewayAVSCodes";
  @SerializedName(SERIALIZED_NAME_GATEWAY_A_V_S_CODES)
  private String gatewayAVSCodes;

  public static final String SERIALIZED_NAME_GATEWAY_C_V_V2_CODES = "gatewayCVV2Codes";
  @SerializedName(SERIALIZED_NAME_GATEWAY_C_V_V2_CODES)
  private String gatewayCVV2Codes;

  public static final String SERIALIZED_NAME_GATEWAY_RESPONSE_CODE = "gatewayResponseCode";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESPONSE_CODE)
  private String gatewayResponseCode;

  public static final String SERIALIZED_NAME_GATEWAY_RESPONSE_TEXT = "gatewayResponseText";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESPONSE_TEXT)
  private String gatewayResponseText;

  public static final String SERIALIZED_NAME_GATEWAY_RESPONSE_DATA = "gatewayResponseData";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESPONSE_DATA)
  private List<PaymentGatewayResponseData> gatewayResponseData = null;

  public static final String SERIALIZED_NAME_PAYMENT_TRANSACTION_INTERACTION_ID_REFERENCE = "paymentTransactionInteractionIdReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TRANSACTION_INTERACTION_ID_REFERENCE)
  private Integer paymentTransactionInteractionIdReference;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_INTERACTION_DATE = "interactionDate";
  @SerializedName(SERIALIZED_NAME_INTERACTION_DATE)
  private OffsetDateTime interactionDate;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_RETURN_ID = "returnId";
  @SerializedName(SERIALIZED_NAME_RETURN_ID)
  private String returnId;

  public static final String SERIALIZED_NAME_REFUND_ID = "refundId";
  @SerializedName(SERIALIZED_NAME_REFUND_ID)
  private String refundId;

  public static final String SERIALIZED_NAME_CAPTURABLE_SHIPMENTS_SUMMARY = "capturableShipmentsSummary";
  @SerializedName(SERIALIZED_NAME_CAPTURABLE_SHIPMENTS_SUMMARY)
  private List<CapturableShipmentSummary> capturableShipmentsSummary = null;

  public PaymentInteraction() {
  }

  public PaymentInteraction id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of this payment transaction interaction.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of this payment transaction interaction.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PaymentInteraction gatewayInteractionId(Integer gatewayInteractionId) {
    
    this.gatewayInteractionId = gatewayInteractionId;
    return this;
  }

   /**
   * Unique identifier of the gateway interaction. Used for credit card transactions, where the  payment service creates a GatewayInteractionId for each transaction interaction.
   * @return gatewayInteractionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the gateway interaction. Used for credit card transactions, where the  payment service creates a GatewayInteractionId for each transaction interaction.")

  public Integer getGatewayInteractionId() {
    return gatewayInteractionId;
  }


  public void setGatewayInteractionId(Integer gatewayInteractionId) {
    this.gatewayInteractionId = gatewayInteractionId;
  }


  public PaymentInteraction paymentId(String paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Unique identifier of the original transaction of which this current interaction is a part.
   * @return paymentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the original transaction of which this current interaction is a part.")

  public String getPaymentId() {
    return paymentId;
  }


  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public PaymentInteraction orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Unique identifier of the order with which this transaction is associated.
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the order with which this transaction is associated.")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentInteraction target(PaymentActionTarget target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentActionTarget getTarget() {
    return target;
  }


  public void setTarget(PaymentActionTarget target) {
    this.target = target;
  }


  public PaymentInteraction currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO currency code for the transaction. Currently, only USD is supported.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO currency code for the transaction. Currently, only USD is supported.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PaymentInteraction interactionType(String interactionType) {
    
    this.interactionType = interactionType;
    return this;
  }

   /**
   * Types of transaction interactions which can be \&quot;Authorization,\&quot; \&quot;Capture,\&quot; \&quot;AuthorizeAndCapture,\&quot;  \&quot;Void,\&quot; or \&quot;Credit,\&quot; \&quot;CheckRequested,\&quot; or \&quot;CheckReceived.\&quot;
   * @return interactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Types of transaction interactions which can be \"Authorization,\" \"Capture,\" \"AuthorizeAndCapture,\"  \"Void,\" or \"Credit,\" \"CheckRequested,\" or \"CheckReceived.\"")

  public String getInteractionType() {
    return interactionType;
  }


  public void setInteractionType(String interactionType) {
    this.interactionType = interactionType;
  }


  public PaymentInteraction checkNumber(String checkNumber) {
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * If paying by check, the check number.
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If paying by check, the check number.")

  public String getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(String checkNumber) {
    this.checkNumber = checkNumber;
  }


  public PaymentInteraction status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the payment transaction interaction which can be either \&quot;Success\&quot; or \&quot;Failure.\&quot;
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the payment transaction interaction which can be either \"Success\" or \"Failure.\"")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public PaymentInteraction paymentEntryStatus(String paymentEntryStatus) {
    
    this.paymentEntryStatus = paymentEntryStatus;
    return this;
  }

   /**
   * Status of the payment when the transaction interaction was created
   * @return paymentEntryStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the payment when the transaction interaction was created")

  public String getPaymentEntryStatus() {
    return paymentEntryStatus;
  }


  public void setPaymentEntryStatus(String paymentEntryStatus) {
    this.paymentEntryStatus = paymentEntryStatus;
  }


  public PaymentInteraction isRecurring(Boolean isRecurring) {
    
    this.isRecurring = isRecurring;
    return this;
  }

   /**
   * If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription. (Not currently implemented.)
   * @return isRecurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the product is purchased or fulfilled at regular intervals, for example, a monthly billing or a subscription. (Not currently implemented.)")

  public Boolean getIsRecurring() {
    return isRecurring;
  }


  public void setIsRecurring(Boolean isRecurring) {
    this.isRecurring = isRecurring;
  }


  public PaymentInteraction isManual(Boolean isManual) {
    
    this.isManual = isManual;
    return this;
  }

   /**
   * If the payment is a manual payment, this is set to true
   * @return isManual
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the payment is a manual payment, this is set to true")

  public Boolean getIsManual() {
    return isManual;
  }


  public void setIsManual(Boolean isManual) {
    this.isManual = isManual;
  }


  public PaymentInteraction gatewayTransactionId(String gatewayTransactionId) {
    
    this.gatewayTransactionId = gatewayTransactionId;
    return this;
  }

   /**
   * Unique identifier of the transaction supplied by PCIaaS.
   * @return gatewayTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the transaction supplied by PCIaaS.")

  public String getGatewayTransactionId() {
    return gatewayTransactionId;
  }


  public void setGatewayTransactionId(String gatewayTransactionId) {
    this.gatewayTransactionId = gatewayTransactionId;
  }


  public PaymentInteraction gatewayAuthCode(String gatewayAuthCode) {
    
    this.gatewayAuthCode = gatewayAuthCode;
    return this;
  }

   /**
   * If required by the payment gateway, the authorization code of the transaction. Supplied by PCIaaS.
   * @return gatewayAuthCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If required by the payment gateway, the authorization code of the transaction. Supplied by PCIaaS.")

  public String getGatewayAuthCode() {
    return gatewayAuthCode;
  }


  public void setGatewayAuthCode(String gatewayAuthCode) {
    this.gatewayAuthCode = gatewayAuthCode;
  }


  public PaymentInteraction gatewayAVSCodes(String gatewayAVSCodes) {
    
    this.gatewayAVSCodes = gatewayAVSCodes;
    return this;
  }

   /**
   * Gateway AVS Codes. Supplied by PCIaaS.
   * @return gatewayAVSCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway AVS Codes. Supplied by PCIaaS.")

  public String getGatewayAVSCodes() {
    return gatewayAVSCodes;
  }


  public void setGatewayAVSCodes(String gatewayAVSCodes) {
    this.gatewayAVSCodes = gatewayAVSCodes;
  }


  public PaymentInteraction gatewayCVV2Codes(String gatewayCVV2Codes) {
    
    this.gatewayCVV2Codes = gatewayCVV2Codes;
    return this;
  }

   /**
   * Gateway CVV2 Codes. Supplied by PCIaaS.
   * @return gatewayCVV2Codes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway CVV2 Codes. Supplied by PCIaaS.")

  public String getGatewayCVV2Codes() {
    return gatewayCVV2Codes;
  }


  public void setGatewayCVV2Codes(String gatewayCVV2Codes) {
    this.gatewayCVV2Codes = gatewayCVV2Codes;
  }


  public PaymentInteraction gatewayResponseCode(String gatewayResponseCode) {
    
    this.gatewayResponseCode = gatewayResponseCode;
    return this;
  }

   /**
   * Gateway response code. Supplied by PCIaaS.
   * @return gatewayResponseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway response code. Supplied by PCIaaS.")

  public String getGatewayResponseCode() {
    return gatewayResponseCode;
  }


  public void setGatewayResponseCode(String gatewayResponseCode) {
    this.gatewayResponseCode = gatewayResponseCode;
  }


  public PaymentInteraction gatewayResponseText(String gatewayResponseText) {
    
    this.gatewayResponseText = gatewayResponseText;
    return this;
  }

   /**
   * Gateway response text. Supplied by PCIaaS.
   * @return gatewayResponseText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway response text. Supplied by PCIaaS.")

  public String getGatewayResponseText() {
    return gatewayResponseText;
  }


  public void setGatewayResponseText(String gatewayResponseText) {
    this.gatewayResponseText = gatewayResponseText;
  }


  public PaymentInteraction gatewayResponseData(List<PaymentGatewayResponseData> gatewayResponseData) {
    
    this.gatewayResponseData = gatewayResponseData;
    return this;
  }

  public PaymentInteraction addGatewayResponseDataItem(PaymentGatewayResponseData gatewayResponseDataItem) {
    if (this.gatewayResponseData == null) {
      this.gatewayResponseData = new ArrayList<>();
    }
    this.gatewayResponseData.add(gatewayResponseDataItem);
    return this;
  }

   /**
   * A List of payment response data required to act on authorization when using external order management systems
   * @return gatewayResponseData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A List of payment response data required to act on authorization when using external order management systems")

  public List<PaymentGatewayResponseData> getGatewayResponseData() {
    return gatewayResponseData;
  }


  public void setGatewayResponseData(List<PaymentGatewayResponseData> gatewayResponseData) {
    this.gatewayResponseData = gatewayResponseData;
  }


  public PaymentInteraction paymentTransactionInteractionIdReference(Integer paymentTransactionInteractionIdReference) {
    
    this.paymentTransactionInteractionIdReference = paymentTransactionInteractionIdReference;
    return this;
  }

   /**
   * Unique identifier of previous PaymentTransactionInteraction that this PaymentTransactionInteraction is modifying.  For instance, when crediting a capture, set the PaymentTransactionInteractionIdReference to the capture PaymentTransactionInteractionID.
   * @return paymentTransactionInteractionIdReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of previous PaymentTransactionInteraction that this PaymentTransactionInteraction is modifying.  For instance, when crediting a capture, set the PaymentTransactionInteractionIdReference to the capture PaymentTransactionInteractionID.")

  public Integer getPaymentTransactionInteractionIdReference() {
    return paymentTransactionInteractionIdReference;
  }


  public void setPaymentTransactionInteractionIdReference(Integer paymentTransactionInteractionIdReference) {
    this.paymentTransactionInteractionIdReference = paymentTransactionInteractionIdReference;
  }


  public PaymentInteraction amount(Double amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount of funds associated with this interaction.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of funds associated with this interaction.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public PaymentInteraction note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * Note to be entered by merchant/application
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Note to be entered by merchant/application")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    this.note = note;
  }


  public PaymentInteraction interactionDate(OffsetDateTime interactionDate) {
    
    this.interactionDate = interactionDate;
    return this;
  }

   /**
   * Date the interaction occurred
   * @return interactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the interaction occurred")

  public OffsetDateTime getInteractionDate() {
    return interactionDate;
  }


  public void setInteractionDate(OffsetDateTime interactionDate) {
    this.interactionDate = interactionDate;
  }


  public PaymentInteraction auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public PaymentInteraction returnId(String returnId) {
    
    this.returnId = returnId;
    return this;
  }

   /**
   * Return Id, if the interaction is a Credit for a return-refund.
   * @return returnId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Return Id, if the interaction is a Credit for a return-refund.")

  public String getReturnId() {
    return returnId;
  }


  public void setReturnId(String returnId) {
    this.returnId = returnId;
  }


  public PaymentInteraction refundId(String refundId) {
    
    this.refundId = refundId;
    return this;
  }

   /**
   * Refund Id, if the interaction is for a stand alone refund.
   * @return refundId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refund Id, if the interaction is for a stand alone refund.")

  public String getRefundId() {
    return refundId;
  }


  public void setRefundId(String refundId) {
    this.refundId = refundId;
  }


  public PaymentInteraction capturableShipmentsSummary(List<CapturableShipmentSummary> capturableShipmentsSummary) {
    
    this.capturableShipmentsSummary = capturableShipmentsSummary;
    return this;
  }

  public PaymentInteraction addCapturableShipmentsSummaryItem(CapturableShipmentSummary capturableShipmentsSummaryItem) {
    if (this.capturableShipmentsSummary == null) {
      this.capturableShipmentsSummary = new ArrayList<>();
    }
    this.capturableShipmentsSummary.add(capturableShipmentsSummaryItem);
    return this;
  }

   /**
   * Stores pairings of shipment number to shipment total for all captured shipments. This was added for generating TLogs.
   * @return capturableShipmentsSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stores pairings of shipment number to shipment total for all captured shipments. This was added for generating TLogs.")

  public List<CapturableShipmentSummary> getCapturableShipmentsSummary() {
    return capturableShipmentsSummary;
  }


  public void setCapturableShipmentsSummary(List<CapturableShipmentSummary> capturableShipmentsSummary) {
    this.capturableShipmentsSummary = capturableShipmentsSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInteraction paymentInteraction = (PaymentInteraction) o;
    return Objects.equals(this.id, paymentInteraction.id) &&
        Objects.equals(this.gatewayInteractionId, paymentInteraction.gatewayInteractionId) &&
        Objects.equals(this.paymentId, paymentInteraction.paymentId) &&
        Objects.equals(this.orderId, paymentInteraction.orderId) &&
        Objects.equals(this.target, paymentInteraction.target) &&
        Objects.equals(this.currencyCode, paymentInteraction.currencyCode) &&
        Objects.equals(this.interactionType, paymentInteraction.interactionType) &&
        Objects.equals(this.checkNumber, paymentInteraction.checkNumber) &&
        Objects.equals(this.status, paymentInteraction.status) &&
        Objects.equals(this.paymentEntryStatus, paymentInteraction.paymentEntryStatus) &&
        Objects.equals(this.isRecurring, paymentInteraction.isRecurring) &&
        Objects.equals(this.isManual, paymentInteraction.isManual) &&
        Objects.equals(this.gatewayTransactionId, paymentInteraction.gatewayTransactionId) &&
        Objects.equals(this.gatewayAuthCode, paymentInteraction.gatewayAuthCode) &&
        Objects.equals(this.gatewayAVSCodes, paymentInteraction.gatewayAVSCodes) &&
        Objects.equals(this.gatewayCVV2Codes, paymentInteraction.gatewayCVV2Codes) &&
        Objects.equals(this.gatewayResponseCode, paymentInteraction.gatewayResponseCode) &&
        Objects.equals(this.gatewayResponseText, paymentInteraction.gatewayResponseText) &&
        Objects.equals(this.gatewayResponseData, paymentInteraction.gatewayResponseData) &&
        Objects.equals(this.paymentTransactionInteractionIdReference, paymentInteraction.paymentTransactionInteractionIdReference) &&
        Objects.equals(this.amount, paymentInteraction.amount) &&
        Objects.equals(this.note, paymentInteraction.note) &&
        Objects.equals(this.interactionDate, paymentInteraction.interactionDate) &&
        Objects.equals(this.auditInfo, paymentInteraction.auditInfo) &&
        Objects.equals(this.returnId, paymentInteraction.returnId) &&
        Objects.equals(this.refundId, paymentInteraction.refundId) &&
        Objects.equals(this.capturableShipmentsSummary, paymentInteraction.capturableShipmentsSummary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, gatewayInteractionId, paymentId, orderId, target, currencyCode, interactionType, checkNumber, status, paymentEntryStatus, isRecurring, isManual, gatewayTransactionId, gatewayAuthCode, gatewayAVSCodes, gatewayCVV2Codes, gatewayResponseCode, gatewayResponseText, gatewayResponseData, paymentTransactionInteractionIdReference, amount, note, interactionDate, auditInfo, returnId, refundId, capturableShipmentsSummary);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInteraction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    gatewayInteractionId: ").append(toIndentedString(gatewayInteractionId)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    interactionType: ").append(toIndentedString(interactionType)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    paymentEntryStatus: ").append(toIndentedString(paymentEntryStatus)).append("\n");
    sb.append("    isRecurring: ").append(toIndentedString(isRecurring)).append("\n");
    sb.append("    isManual: ").append(toIndentedString(isManual)).append("\n");
    sb.append("    gatewayTransactionId: ").append(toIndentedString(gatewayTransactionId)).append("\n");
    sb.append("    gatewayAuthCode: ").append(toIndentedString(gatewayAuthCode)).append("\n");
    sb.append("    gatewayAVSCodes: ").append(toIndentedString(gatewayAVSCodes)).append("\n");
    sb.append("    gatewayCVV2Codes: ").append(toIndentedString(gatewayCVV2Codes)).append("\n");
    sb.append("    gatewayResponseCode: ").append(toIndentedString(gatewayResponseCode)).append("\n");
    sb.append("    gatewayResponseText: ").append(toIndentedString(gatewayResponseText)).append("\n");
    sb.append("    gatewayResponseData: ").append(toIndentedString(gatewayResponseData)).append("\n");
    sb.append("    paymentTransactionInteractionIdReference: ").append(toIndentedString(paymentTransactionInteractionIdReference)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    interactionDate: ").append(toIndentedString(interactionDate)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    returnId: ").append(toIndentedString(returnId)).append("\n");
    sb.append("    refundId: ").append(toIndentedString(refundId)).append("\n");
    sb.append("    capturableShipmentsSummary: ").append(toIndentedString(capturableShipmentsSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("gatewayInteractionId");
    openapiFields.add("paymentId");
    openapiFields.add("orderId");
    openapiFields.add("target");
    openapiFields.add("currencyCode");
    openapiFields.add("interactionType");
    openapiFields.add("checkNumber");
    openapiFields.add("status");
    openapiFields.add("paymentEntryStatus");
    openapiFields.add("isRecurring");
    openapiFields.add("isManual");
    openapiFields.add("gatewayTransactionId");
    openapiFields.add("gatewayAuthCode");
    openapiFields.add("gatewayAVSCodes");
    openapiFields.add("gatewayCVV2Codes");
    openapiFields.add("gatewayResponseCode");
    openapiFields.add("gatewayResponseText");
    openapiFields.add("gatewayResponseData");
    openapiFields.add("paymentTransactionInteractionIdReference");
    openapiFields.add("amount");
    openapiFields.add("note");
    openapiFields.add("interactionDate");
    openapiFields.add("auditInfo");
    openapiFields.add("returnId");
    openapiFields.add("refundId");
    openapiFields.add("capturableShipmentsSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentInteraction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentInteraction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentInteraction is not found in the empty JSON string", PaymentInteraction.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PaymentInteraction.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentInteraction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("paymentId") != null && !jsonObj.get("paymentId").isJsonNull()) && !jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      // validate the optional field `target`
      if (jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) {
        PaymentActionTarget.validateJsonObject(jsonObj.getAsJsonObject("target"));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("interactionType") != null && !jsonObj.get("interactionType").isJsonNull()) && !jsonObj.get("interactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionType").toString()));
      }
      if ((jsonObj.get("checkNumber") != null && !jsonObj.get("checkNumber").isJsonNull()) && !jsonObj.get("checkNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkNumber").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("paymentEntryStatus") != null && !jsonObj.get("paymentEntryStatus").isJsonNull()) && !jsonObj.get("paymentEntryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentEntryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentEntryStatus").toString()));
      }
      if ((jsonObj.get("gatewayTransactionId") != null && !jsonObj.get("gatewayTransactionId").isJsonNull()) && !jsonObj.get("gatewayTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayTransactionId").toString()));
      }
      if ((jsonObj.get("gatewayAuthCode") != null && !jsonObj.get("gatewayAuthCode").isJsonNull()) && !jsonObj.get("gatewayAuthCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayAuthCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayAuthCode").toString()));
      }
      if ((jsonObj.get("gatewayAVSCodes") != null && !jsonObj.get("gatewayAVSCodes").isJsonNull()) && !jsonObj.get("gatewayAVSCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayAVSCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayAVSCodes").toString()));
      }
      if ((jsonObj.get("gatewayCVV2Codes") != null && !jsonObj.get("gatewayCVV2Codes").isJsonNull()) && !jsonObj.get("gatewayCVV2Codes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayCVV2Codes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayCVV2Codes").toString()));
      }
      if ((jsonObj.get("gatewayResponseCode") != null && !jsonObj.get("gatewayResponseCode").isJsonNull()) && !jsonObj.get("gatewayResponseCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayResponseCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayResponseCode").toString()));
      }
      if ((jsonObj.get("gatewayResponseText") != null && !jsonObj.get("gatewayResponseText").isJsonNull()) && !jsonObj.get("gatewayResponseText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayResponseText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayResponseText").toString()));
      }
      if (jsonObj.get("gatewayResponseData") != null && !jsonObj.get("gatewayResponseData").isJsonNull()) {
        JsonArray jsonArraygatewayResponseData = jsonObj.getAsJsonArray("gatewayResponseData");
        if (jsonArraygatewayResponseData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gatewayResponseData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gatewayResponseData` to be an array in the JSON string but got `%s`", jsonObj.get("gatewayResponseData").toString()));
          }

          // validate the optional field `gatewayResponseData` (array)
          for (int i = 0; i < jsonArraygatewayResponseData.size(); i++) {
            PaymentGatewayResponseData.validateJsonObject(jsonArraygatewayResponseData.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if ((jsonObj.get("returnId") != null && !jsonObj.get("returnId").isJsonNull()) && !jsonObj.get("returnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnId").toString()));
      }
      if ((jsonObj.get("refundId") != null && !jsonObj.get("refundId").isJsonNull()) && !jsonObj.get("refundId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundId").toString()));
      }
      if (jsonObj.get("capturableShipmentsSummary") != null && !jsonObj.get("capturableShipmentsSummary").isJsonNull()) {
        JsonArray jsonArraycapturableShipmentsSummary = jsonObj.getAsJsonArray("capturableShipmentsSummary");
        if (jsonArraycapturableShipmentsSummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("capturableShipmentsSummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `capturableShipmentsSummary` to be an array in the JSON string but got `%s`", jsonObj.get("capturableShipmentsSummary").toString()));
          }

          // validate the optional field `capturableShipmentsSummary` (array)
          for (int i = 0; i < jsonArraycapturableShipmentsSummary.size(); i++) {
            CapturableShipmentSummary.validateJsonObject(jsonArraycapturableShipmentsSummary.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentInteraction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentInteraction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentInteraction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentInteraction.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentInteraction>() {
           @Override
           public void write(JsonWriter out, PaymentInteraction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentInteraction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentInteraction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentInteraction
  * @throws IOException if the JSON string is invalid with respect to PaymentInteraction
  */
  public static PaymentInteraction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentInteraction.class);
  }

 /**
  * Convert an instance of PaymentInteraction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

