/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.commerce.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.commerce.models.AutoRefundRequest;
import com.kibocommerce.sdk.commerce.models.CarrierServiceGenerateLabelResponse;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimePackage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShipment;
import com.kibocommerce.sdk.commerce.models.ModelReturn;
import com.kibocommerce.sdk.commerce.models.Order;
import com.kibocommerce.sdk.commerce.models.OrderNote;
import com.kibocommerce.sdk.commerce.models.Payment;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.PaymentCollection;
import com.kibocommerce.sdk.commerce.models.ReasonCollection;
import com.kibocommerce.sdk.commerce.models.RestockableReturnItem;
import com.kibocommerce.sdk.commerce.models.ReturnAction;
import com.kibocommerce.sdk.commerce.models.ReturnCollection;
import com.kibocommerce.sdk.commerce.models.ReturnItem;
import com.kibocommerce.sdk.commerce.models.ReturnItemCollection;
import com.kibocommerce.sdk.commerce.models.ReturnItemSpecifier;
import com.kibocommerce.sdk.commerce.models.ReturnRefundDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReturnApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ReturnApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ReturnApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ReturnApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ReturnApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoRefund
     * @param returnId Return Id (required)
     * @param autoRefundRequest List of return item id with proccessing fee (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoRefundCall(String returnId, List<AutoRefundRequest> autoRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = autoRefundRequest;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/autorefund"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoRefundValidateBeforeCall(String returnId, List<AutoRefundRequest> autoRefundRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling autoRefund(Async)");
        }
        

        okhttp3.Call localVarCall = autoRefundCall(returnId, autoRefundRequest, _callback);
        return localVarCall;

    }

    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     * @param returnId Return Id (required)
     * @param autoRefundRequest List of return item id with proccessing fee (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn autoRefund(String returnId, List<AutoRefundRequest> autoRefundRequest) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = autoRefundWithHttpInfo(returnId, autoRefundRequest);
        return localVarResp.getData();
    }

    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     * @param returnId Return Id (required)
     * @param autoRefundRequest List of return item id with proccessing fee (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> autoRefundWithHttpInfo(String returnId, List<AutoRefundRequest> autoRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = autoRefundValidateBeforeCall(returnId, autoRefundRequest, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attempt to automatically refund the return (asynchronously)
     * Attempt to automatically refund the return
     * @param returnId Return Id (required)
     * @param autoRefundRequest List of return item id with proccessing fee (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoRefundAsync(String returnId, List<AutoRefundRequest> autoRefundRequest, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoRefundValidateBeforeCall(returnId, autoRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPackage
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageCall(String returnId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimePackage;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/packages"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPackageValidateBeforeCall(String returnId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createPackage(Async)");
        }
        

        okhttp3.Call localVarCall = createPackageCall(returnId, commerceRuntimePackage, _callback);
        return localVarCall;

    }

    /**
     * Apply a package to the return
     *  package?
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the return (optional)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage createPackage(String returnId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = createPackageWithHttpInfo(returnId, commerceRuntimePackage);
        return localVarResp.getData();
    }

    /**
     * Apply a package to the return
     *  package?
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the return (optional)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> createPackageWithHttpInfo(String returnId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        okhttp3.Call localVarCall = createPackageValidateBeforeCall(returnId, commerceRuntimePackage, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply a package to the return (asynchronously)
     *  package?
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageAsync(String returnId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPackageValidateBeforeCall(returnId, commerceRuntimePackage, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPackageShipments
     * @param returnId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageShipmentsCall(String returnId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/shipments"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPackageShipmentsValidateBeforeCall(String returnId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createPackageShipments(Async)");
        }
        

        okhttp3.Call localVarCall = createPackageShipmentsCall(returnId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     * 
     * @param returnId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @return List&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimePackage> createPackageShipments(String returnId, List<String> requestBody) throws ApiException {
        ApiResponse<List<CommerceRuntimePackage>> localVarResp = createPackageShipmentsWithHttpInfo(returnId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     * 
     * @param returnId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimePackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimePackage>> createPackageShipmentsWithHttpInfo(String returnId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createPackageShipmentsValidateBeforeCall(returnId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimePackage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments (asynchronously)
     * 
     * @param returnId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageShipmentsAsync(String returnId, List<String> requestBody, final ApiCallback<List<CommerceRuntimePackage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPackageShipmentsValidateBeforeCall(returnId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimePackage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentActionForReturn
     * @param returnId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionForReturnCall(String returnId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/payments/actions"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentActionForReturnValidateBeforeCall(String returnId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createPaymentActionForReturn(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentActionForReturnCall(returnId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Action For Return
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param returnId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn createPaymentActionForReturn(String returnId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = createPaymentActionForReturnWithHttpInfo(returnId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Create Payment Action For Return
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param returnId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> createPaymentActionForReturnWithHttpInfo(String returnId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = createPaymentActionForReturnValidateBeforeCall(returnId, paymentAction, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Action For Return (asynchronously)
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param returnId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionForReturnAsync(String returnId, PaymentAction paymentAction, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentActionForReturnValidateBeforeCall(returnId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReturn
     * @param modelReturn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnCall(ModelReturn modelReturn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelReturn;

        // create path and map variables
        String localVarPath = "/commerce/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnValidateBeforeCall(ModelReturn modelReturn, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createReturnCall(modelReturn, _callback);
        return localVarCall;

    }

    /**
     * Create Returns
     * Creates a new Return for an order or product list.
     * @param modelReturn  (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn createReturn(ModelReturn modelReturn) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = createReturnWithHttpInfo(modelReturn);
        return localVarResp.getData();
    }

    /**
     * Create Returns
     * Creates a new Return for an order or product list.
     * @param modelReturn  (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> createReturnWithHttpInfo(ModelReturn modelReturn) throws ApiException {
        okhttp3.Call localVarCall = createReturnValidateBeforeCall(modelReturn, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Returns (asynchronously)
     * Creates a new Return for an order or product list.
     * @param modelReturn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnAsync(ModelReturn modelReturn, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnValidateBeforeCall(modelReturn, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReturnItem
     * @param returnId ID of the order to add an item to. (required)
     * @param returnItem All properties of the new return item. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnItemCall(String returnId, ReturnItem returnItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnItem;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/items"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnItemValidateBeforeCall(String returnId, ReturnItem returnItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createReturnItem(Async)");
        }
        

        okhttp3.Call localVarCall = createReturnItemCall(returnId, returnItem, _callback);
        return localVarCall;

    }

    /**
     * Create Return Item
     * Adds a return item to the return.
     * @param returnId ID of the order to add an item to. (required)
     * @param returnItem All properties of the new return item. (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn createReturnItem(String returnId, ReturnItem returnItem) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = createReturnItemWithHttpInfo(returnId, returnItem);
        return localVarResp.getData();
    }

    /**
     * Create Return Item
     * Adds a return item to the return.
     * @param returnId ID of the order to add an item to. (required)
     * @param returnItem All properties of the new return item. (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> createReturnItemWithHttpInfo(String returnId, ReturnItem returnItem) throws ApiException {
        okhttp3.Call localVarCall = createReturnItemValidateBeforeCall(returnId, returnItem, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Return Item (asynchronously)
     * Adds a return item to the return.
     * @param returnId ID of the order to add an item to. (required)
     * @param returnItem All properties of the new return item. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnItemAsync(String returnId, ReturnItem returnItem, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnItemValidateBeforeCall(returnId, returnItem, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReturnNote
     * @param returnId Unique identifier of the return to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnNoteCall(String returnId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderNote;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/notes"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnNoteValidateBeforeCall(String returnId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createReturnNote(Async)");
        }
        

        okhttp3.Call localVarCall = createReturnNoteCall(returnId, orderNote, _callback);
        return localVarCall;

    }

    /**
     * Create Return Note
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * @param returnId Unique identifier of the return to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote createReturnNote(String returnId, OrderNote orderNote) throws ApiException {
        ApiResponse<OrderNote> localVarResp = createReturnNoteWithHttpInfo(returnId, orderNote);
        return localVarResp.getData();
    }

    /**
     * Create Return Note
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * @param returnId Unique identifier of the return to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> createReturnNoteWithHttpInfo(String returnId, OrderNote orderNote) throws ApiException {
        okhttp3.Call localVarCall = createReturnNoteValidateBeforeCall(returnId, orderNote, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Return Note (asynchronously)
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * @param returnId Unique identifier of the return to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnNoteAsync(String returnId, OrderNote orderNote, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnNoteValidateBeforeCall(returnId, orderNote, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReturnShippingOrder
     * @param returnId The ID of the parent return (required)
     * @param returnItemSpecifier Optionally specify which items to include and in what quantities (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnShippingOrderCall(String returnId, List<ReturnItemSpecifier> returnItemSpecifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnItemSpecifier;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/ship"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnShippingOrderValidateBeforeCall(String returnId, List<ReturnItemSpecifier> returnItemSpecifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling createReturnShippingOrder(Async)");
        }
        

        okhttp3.Call localVarCall = createReturnShippingOrderCall(returnId, returnItemSpecifier, _callback);
        return localVarCall;

    }

    /**
     * Create Return Shipping Order
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * @param returnId The ID of the parent return (required)
     * @param returnItemSpecifier Optionally specify which items to include and in what quantities (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order createReturnShippingOrder(String returnId, List<ReturnItemSpecifier> returnItemSpecifier) throws ApiException {
        ApiResponse<Order> localVarResp = createReturnShippingOrderWithHttpInfo(returnId, returnItemSpecifier);
        return localVarResp.getData();
    }

    /**
     * Create Return Shipping Order
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * @param returnId The ID of the parent return (required)
     * @param returnItemSpecifier Optionally specify which items to include and in what quantities (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createReturnShippingOrderWithHttpInfo(String returnId, List<ReturnItemSpecifier> returnItemSpecifier) throws ApiException {
        okhttp3.Call localVarCall = createReturnShippingOrderValidateBeforeCall(returnId, returnItemSpecifier, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Return Shipping Order (asynchronously)
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * @param returnId The ID of the parent return (required)
     * @param returnItemSpecifier Optionally specify which items to include and in what quantities (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReturnShippingOrderAsync(String returnId, List<ReturnItemSpecifier> returnItemSpecifier, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnShippingOrderValidateBeforeCall(returnId, returnItemSpecifier, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderItem
     * @param orderId  (required)
     * @param orderItemId  (required)
     * @param returnId  (optional)
     * @param returnItemId Unique identifier of the order item. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderItemCall(String orderId, String orderItemId, String returnId, String returnItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{orderId}/items/{orderItemId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnId", returnId));
        }

        if (returnItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnItemId", returnItemId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderItemValidateBeforeCall(String orderId, String orderItemId, String returnId, String returnItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderItem(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling deleteOrderItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderItemCall(orderId, orderItemId, returnId, returnItemId, _callback);
        return localVarCall;

    }

    /**
     * Delete Order Item
     * Removes a particular return item from the return of the current shopper.
     * @param orderId  (required)
     * @param orderItemId  (required)
     * @param returnId  (optional)
     * @param returnItemId Unique identifier of the order item. (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn deleteOrderItem(String orderId, String orderItemId, String returnId, String returnItemId) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = deleteOrderItemWithHttpInfo(orderId, orderItemId, returnId, returnItemId);
        return localVarResp.getData();
    }

    /**
     * Delete Order Item
     * Removes a particular return item from the return of the current shopper.
     * @param orderId  (required)
     * @param orderItemId  (required)
     * @param returnId  (optional)
     * @param returnItemId Unique identifier of the order item. (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> deleteOrderItemWithHttpInfo(String orderId, String orderItemId, String returnId, String returnItemId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderItemValidateBeforeCall(orderId, orderItemId, returnId, returnItemId, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Order Item (asynchronously)
     * Removes a particular return item from the return of the current shopper.
     * @param orderId  (required)
     * @param orderItemId  (required)
     * @param returnId  (optional)
     * @param returnItemId Unique identifier of the order item. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderItemAsync(String orderId, String orderItemId, String returnId, String returnItemId, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderItemValidateBeforeCall(orderId, orderItemId, returnId, returnItemId, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePackage
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageCall(String returnId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/packages/{packageId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePackageValidateBeforeCall(String returnId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling deletePackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling deletePackage(Async)");
        }
        

        okhttp3.Call localVarCall = deletePackageCall(returnId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Delete an order package
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePackage(String returnId, String packageId) throws ApiException {
        deletePackageWithHttpInfo(returnId, packageId);
    }

    /**
     * Delete an order package
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePackageWithHttpInfo(String returnId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = deletePackageValidateBeforeCall(returnId, packageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an order package (asynchronously)
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageAsync(String returnId, String packageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePackageValidateBeforeCall(returnId, packageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReturn
     * @param returnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReturnCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReturnValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling deleteReturn(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReturnCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Delete Return
     * Deletes a return specified by return Id.
     * @param returnId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReturn(String returnId) throws ApiException {
        deleteReturnWithHttpInfo(returnId);
    }

    /**
     * Delete Return
     * Deletes a return specified by return Id.
     * @param returnId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReturnWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = deleteReturnValidateBeforeCall(returnId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Return (asynchronously)
     * Deletes a return specified by return Id.
     * @param returnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReturnAsync(String returnId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReturnValidateBeforeCall(returnId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReturnNote
     * @param returnId Unique identifier of the return whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReturnNoteCall(String returnId, String noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/notes/{noteId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReturnNoteValidateBeforeCall(String returnId, String noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling deleteReturnNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteReturnNote(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReturnNoteCall(returnId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Delete Return Note
     * Deletes a specific note on a return.
     * @param returnId Unique identifier of the return whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReturnNote(String returnId, String noteId) throws ApiException {
        deleteReturnNoteWithHttpInfo(returnId, noteId);
    }

    /**
     * Delete Return Note
     * Deletes a specific note on a return.
     * @param returnId Unique identifier of the return whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReturnNoteWithHttpInfo(String returnId, String noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteReturnNoteValidateBeforeCall(returnId, noteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Return Note (asynchronously)
     * Deletes a specific note on a return.
     * @param returnId Unique identifier of the return whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReturnNoteAsync(String returnId, String noteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReturnNoteValidateBeforeCall(returnId, noteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteShipment
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShipmentCall(String returnId, String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/shipments/{shipmentId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "shipmentId" + "\\}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShipmentValidateBeforeCall(String returnId, String shipmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling deleteShipment(Async)");
        }
        
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling deleteShipment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteShipmentCall(returnId, shipmentId, _callback);
        return localVarCall;

    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteShipment(String returnId, String shipmentId) throws ApiException {
        deleteShipmentWithHttpInfo(returnId, shipmentId);
    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteShipmentWithHttpInfo(String returnId, String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteShipmentValidateBeforeCall(returnId, shipmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing return shipment (asynchronously)
     * Deletes an existing return shipment
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShipmentAsync(String returnId, String shipmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShipmentValidateBeforeCall(returnId, shipmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableReturnActions
     * @param returnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableReturnActionsCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/actions"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableReturnActionsValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getAvailableReturnActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableReturnActionsCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Return Actions
     * Gets all the available actions on the return specified by return Id.
     * @param returnId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailableReturnActions(String returnId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailableReturnActionsWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Available Return Actions
     * Gets all the available actions on the return specified by return Id.
     * @param returnId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailableReturnActionsWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableReturnActionsValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Return Actions (asynchronously)
     * Gets all the available actions on the return specified by return Id.
     * @param returnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableReturnActionsAsync(String returnId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableReturnActionsValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackage
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageCall(String returnId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/packages/{packageId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageValidateBeforeCall(String returnId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getPackage(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageCall(returnId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Get an order package
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage getPackage(String returnId, String packageId) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = getPackageWithHttpInfo(returnId, packageId);
        return localVarResp.getData();
    }

    /**
     * Get an order package
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> getPackageWithHttpInfo(String returnId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = getPackageValidateBeforeCall(returnId, packageId, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an order package (asynchronously)
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAsync(String returnId, String packageId, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageValidateBeforeCall(returnId, packageId, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageLabel
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param returnAsBase64Png Return as base64 png (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageLabelCall(String returnId, String packageId, Boolean returnAsBase64Png, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/packages/{packageId}/label"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnAsBase64Png != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAsBase64Png", returnAsBase64Png));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageLabelValidateBeforeCall(String returnId, String packageId, Boolean returnAsBase64Png, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getPackageLabel(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getPackageLabel(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageLabelCall(returnId, packageId, returnAsBase64Png, _callback);
        return localVarCall;

    }

    /**
     * Get an order package
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param returnAsBase64Png Return as base64 png (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getPackageLabel(String returnId, String packageId, Boolean returnAsBase64Png) throws ApiException {
        getPackageLabelWithHttpInfo(returnId, packageId, returnAsBase64Png);
    }

    /**
     * Get an order package
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param returnAsBase64Png Return as base64 png (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageLabelWithHttpInfo(String returnId, String packageId, Boolean returnAsBase64Png) throws ApiException {
        okhttp3.Call localVarCall = getPackageLabelValidateBeforeCall(returnId, packageId, returnAsBase64Png, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an order package (asynchronously)
     * Get an order package
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to remove from the return (required)
     * @param returnAsBase64Png Return as base64 png (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageLabelAsync(String returnId, String packageId, Boolean returnAsBase64Png, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageLabelValidateBeforeCall(returnId, packageId, returnAsBase64Png, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayment
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCall(String returnId, String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/payments/{paymentId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentValidateBeforeCall(String returnId, String paymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getPayment(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPayment(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentCall(returnId, paymentId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment
     * Gets specific payment on the return specified by return Id and payment Id.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @return Payment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Payment getPayment(String returnId, String paymentId) throws ApiException {
        ApiResponse<Payment> localVarResp = getPaymentWithHttpInfo(returnId, paymentId);
        return localVarResp.getData();
    }

    /**
     * Get Payment
     * Gets specific payment on the return specified by return Id and payment Id.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @return ApiResponse&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payment> getPaymentWithHttpInfo(String returnId, String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(returnId, paymentId, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment (asynchronously)
     * Gets specific payment on the return specified by return Id and payment Id.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAsync(String returnId, String paymentId, final ApiCallback<Payment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(returnId, paymentId, _callback);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentDistribution
     * @param returnId Return Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentDistributionCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/paymentDistribution"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentDistributionValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getPaymentDistribution(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentDistributionCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     * @param returnId Return Id (required)
     * @return ReturnRefundDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRefundDetails getPaymentDistribution(String returnId) throws ApiException {
        ApiResponse<ReturnRefundDetails> localVarResp = getPaymentDistributionWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     * @param returnId Return Id (required)
     * @return ApiResponse&lt;ReturnRefundDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnRefundDetails> getPaymentDistributionWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentDistributionValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<ReturnRefundDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Distribution (asynchronously)
     * Get Payment Distribution
     * @param returnId Return Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentDistributionAsync(String returnId, final ApiCallback<ReturnRefundDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentDistributionValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<ReturnRefundDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayments
     * @param returnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/payments"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getPayments(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentsCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Payments
     * Gets payments on the return specified by return Id.
     * @param returnId  (required)
     * @return PaymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PaymentCollection getPayments(String returnId) throws ApiException {
        ApiResponse<PaymentCollection> localVarResp = getPaymentsWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Payments
     * Gets payments on the return specified by return Id.
     * @param returnId  (required)
     * @return ApiResponse&lt;PaymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentCollection> getPaymentsWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<PaymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payments (asynchronously)
     * Gets payments on the return specified by return Id.
     * @param returnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsAsync(String returnId, final ApiCallback<PaymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<PaymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReasons
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReasonsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReasonsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Reasons
     * Gets all the return reasons.
     * @return ReasonCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReasonCollection getReasons() throws ApiException {
        ApiResponse<ReasonCollection> localVarResp = getReasonsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Reasons
     * Gets all the return reasons.
     * @return ApiResponse&lt;ReasonCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReasonCollection> getReasonsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ReasonCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reasons (asynchronously)
     * Gets all the return reasons.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsAsync(final ApiCallback<ReasonCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ReasonCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturn
     * @param returnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturn(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Return
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * @param returnId  (required)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn getReturn(String returnId) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = getReturnWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Return
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * @param returnId  (required)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> getReturnWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getReturnValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return (asynchronously)
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * @param returnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnAsync(String returnId, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturnItem
     * @param returnId Unique identifier of the return whose item you want to get. (required)
     * @param returnItemId Unique identifier of the return item whose details you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnItemCall(String returnId, String returnItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/items/{returnItemId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "returnItemId" + "\\}", localVarApiClient.escapeString(returnItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnItemValidateBeforeCall(String returnId, String returnItemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturnItem(Async)");
        }
        
        // verify the required parameter 'returnItemId' is set
        if (returnItemId == null) {
            throw new ApiException("Missing the required parameter 'returnItemId' when calling getReturnItem(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnItemCall(returnId, returnItemId, _callback);
        return localVarCall;

    }

    /**
     * Get Return Item
     * Retrieves the details of a single return item.
     * @param returnId Unique identifier of the return whose item you want to get. (required)
     * @param returnItemId Unique identifier of the return item whose details you want to get. (required)
     * @return ReturnItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReturnItem getReturnItem(String returnId, String returnItemId) throws ApiException {
        ApiResponse<ReturnItem> localVarResp = getReturnItemWithHttpInfo(returnId, returnItemId);
        return localVarResp.getData();
    }

    /**
     * Get Return Item
     * Retrieves the details of a single return item.
     * @param returnId Unique identifier of the return whose item you want to get. (required)
     * @param returnItemId Unique identifier of the return item whose details you want to get. (required)
     * @return ApiResponse&lt;ReturnItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnItem> getReturnItemWithHttpInfo(String returnId, String returnItemId) throws ApiException {
        okhttp3.Call localVarCall = getReturnItemValidateBeforeCall(returnId, returnItemId, null);
        Type localVarReturnType = new TypeToken<ReturnItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return Item (asynchronously)
     * Retrieves the details of a single return item.
     * @param returnId Unique identifier of the return whose item you want to get. (required)
     * @param returnItemId Unique identifier of the return item whose details you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnItemAsync(String returnId, String returnItemId, final ApiCallback<ReturnItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnItemValidateBeforeCall(returnId, returnItemId, _callback);
        Type localVarReturnType = new TypeToken<ReturnItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturnItems
     * @param returnId Unique identifier of the return whose items you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnItemsCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/items"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnItemsValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturnItems(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnItemsCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Return Items
     * Retrieves the details of all return items in an order.
     * @param returnId Unique identifier of the return whose items you want to get. (required)
     * @return ReturnItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReturnItemCollection getReturnItems(String returnId) throws ApiException {
        ApiResponse<ReturnItemCollection> localVarResp = getReturnItemsWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Return Items
     * Retrieves the details of all return items in an order.
     * @param returnId Unique identifier of the return whose items you want to get. (required)
     * @return ApiResponse&lt;ReturnItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnItemCollection> getReturnItemsWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getReturnItemsValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<ReturnItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return Items (asynchronously)
     * Retrieves the details of all return items in an order.
     * @param returnId Unique identifier of the return whose items you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnItemsAsync(String returnId, final ApiCallback<ReturnItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnItemsValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<ReturnItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturnLabel
     * @param returnId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnLabelCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/shipping/label"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnLabelValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturnLabel(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnLabelCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Return Label
     * Gets the return label specified by returnId.
     * @param returnId  (required)
     * @return CarrierServiceGenerateLabelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CarrierServiceGenerateLabelResponse getReturnLabel(String returnId) throws ApiException {
        ApiResponse<CarrierServiceGenerateLabelResponse> localVarResp = getReturnLabelWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Return Label
     * Gets the return label specified by returnId.
     * @param returnId  (required)
     * @return ApiResponse&lt;CarrierServiceGenerateLabelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CarrierServiceGenerateLabelResponse> getReturnLabelWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getReturnLabelValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<CarrierServiceGenerateLabelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return Label (asynchronously)
     * Gets the return label specified by returnId.
     * @param returnId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnLabelAsync(String returnId, final ApiCallback<CarrierServiceGenerateLabelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnLabelValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<CarrierServiceGenerateLabelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturnNote
     * @param returnId Unique identifier of the return whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnNoteCall(String returnId, String noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/notes/{noteId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnNoteValidateBeforeCall(String returnId, String noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturnNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getReturnNote(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnNoteCall(returnId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Get Return Note
     * Retrieves a specific note from a return.
     * @param returnId Unique identifier of the return whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote getReturnNote(String returnId, String noteId) throws ApiException {
        ApiResponse<OrderNote> localVarResp = getReturnNoteWithHttpInfo(returnId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get Return Note
     * Retrieves a specific note from a return.
     * @param returnId Unique identifier of the return whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> getReturnNoteWithHttpInfo(String returnId, String noteId) throws ApiException {
        okhttp3.Call localVarCall = getReturnNoteValidateBeforeCall(returnId, noteId, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return Note (asynchronously)
     * Retrieves a specific note from a return.
     * @param returnId Unique identifier of the return whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnNoteAsync(String returnId, String noteId, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnNoteValidateBeforeCall(returnId, noteId, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturnNotes
     * @param returnId Unique identifier of the return whose notes you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnNotesCall(String returnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/notes"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnNotesValidateBeforeCall(String returnId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getReturnNotes(Async)");
        }
        

        okhttp3.Call localVarCall = getReturnNotesCall(returnId, _callback);
        return localVarCall;

    }

    /**
     * Get Return Notes
     * Retrieves a list of all notes for a return.
     * @param returnId Unique identifier of the return whose notes you want to get. (required)
     * @return List&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderNote> getReturnNotes(String returnId) throws ApiException {
        ApiResponse<List<OrderNote>> localVarResp = getReturnNotesWithHttpInfo(returnId);
        return localVarResp.getData();
    }

    /**
     * Get Return Notes
     * Retrieves a list of all notes for a return.
     * @param returnId Unique identifier of the return whose notes you want to get. (required)
     * @return ApiResponse&lt;List&lt;OrderNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderNote>> getReturnNotesWithHttpInfo(String returnId) throws ApiException {
        okhttp3.Call localVarCall = getReturnNotesValidateBeforeCall(returnId, null);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Return Notes (asynchronously)
     * Retrieves a list of all notes for a return.
     * @param returnId Unique identifier of the return whose notes you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnNotesAsync(String returnId, final ApiCallback<List<OrderNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnNotesValidateBeforeCall(returnId, _callback);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturns
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturnsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReturnsCall(startIndex, pageSize, sortBy, filter, q, _callback);
        return localVarCall;

    }

    /**
     * Get Returns
     * Provides a paged, collection of returns for a Site.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @return ReturnCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReturnCollection getReturns(Integer startIndex, Integer pageSize, String sortBy, String filter, String q) throws ApiException {
        ApiResponse<ReturnCollection> localVarResp = getReturnsWithHttpInfo(startIndex, pageSize, sortBy, filter, q);
        return localVarResp.getData();
    }

    /**
     * Get Returns
     * Provides a paged, collection of returns for a Site.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @return ApiResponse&lt;ReturnCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnCollection> getReturnsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q) throws ApiException {
        okhttp3.Call localVarCall = getReturnsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, null);
        Type localVarReturnType = new TypeToken<ReturnCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Returns (asynchronously)
     * Provides a paged, collection of returns for a Site.
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param q  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturnsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, final ApiCallback<ReturnCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturnsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, _callback);
        Type localVarReturnType = new TypeToken<ReturnCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipment
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentCall(String returnId, String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/shipments/{shipmentId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "shipmentId" + "\\}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentValidateBeforeCall(String returnId, String shipmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling getShipment(Async)");
        }
        
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getShipment(Async)");
        }
        

        okhttp3.Call localVarCall = getShipmentCall(returnId, shipmentId, _callback);
        return localVarCall;

    }

    /**
     * Allows a shipment to be retrieved for the order
     * 
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @return CommerceRuntimeShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeShipment getShipment(String returnId, String shipmentId) throws ApiException {
        ApiResponse<CommerceRuntimeShipment> localVarResp = getShipmentWithHttpInfo(returnId, shipmentId);
        return localVarResp.getData();
    }

    /**
     * Allows a shipment to be retrieved for the order
     * 
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @return ApiResponse&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeShipment> getShipmentWithHttpInfo(String returnId, String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = getShipmentValidateBeforeCall(returnId, shipmentId, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Allows a shipment to be retrieved for the order (asynchronously)
     * 
     * @param returnId ID of the return (required)
     * @param shipmentId Shipment ID of the return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentAsync(String returnId, String shipmentId, final ApiCallback<CommerceRuntimeShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentValidateBeforeCall(returnId, shipmentId, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performPaymentActionForReturn
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionForReturnCall(String returnId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/payments/{paymentId}/actions"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performPaymentActionForReturnValidateBeforeCall(String returnId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling performPaymentActionForReturn(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling performPaymentActionForReturn(Async)");
        }
        

        okhttp3.Call localVarCall = performPaymentActionForReturnCall(returnId, paymentId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Payment Action For Return
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn performPaymentActionForReturn(String returnId, String paymentId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = performPaymentActionForReturnWithHttpInfo(returnId, paymentId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Perform Payment Action For Return
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> performPaymentActionForReturnWithHttpInfo(String returnId, String paymentId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = performPaymentActionForReturnValidateBeforeCall(returnId, paymentId, paymentAction, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Payment Action For Return (asynchronously)
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * @param returnId  (required)
     * @param paymentId  (required)
     * @param paymentAction Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionForReturnAsync(String returnId, String paymentId, PaymentAction paymentAction, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = performPaymentActionForReturnValidateBeforeCall(returnId, paymentId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performReturnActions
     * @param returnAction A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performReturnActionsCall(ReturnAction returnAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnAction;

        // create path and map variables
        String localVarPath = "/commerce/returns/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performReturnActionsValidateBeforeCall(ReturnAction returnAction, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = performReturnActionsCall(returnAction, _callback);
        return localVarCall;

    }

    /**
     * Delete Return
     * Perform Return Action.
     * @param returnAction A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action. (optional)
     * @return ReturnCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReturnCollection performReturnActions(ReturnAction returnAction) throws ApiException {
        ApiResponse<ReturnCollection> localVarResp = performReturnActionsWithHttpInfo(returnAction);
        return localVarResp.getData();
    }

    /**
     * Delete Return
     * Perform Return Action.
     * @param returnAction A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action. (optional)
     * @return ApiResponse&lt;ReturnCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReturnCollection> performReturnActionsWithHttpInfo(ReturnAction returnAction) throws ApiException {
        okhttp3.Call localVarCall = performReturnActionsValidateBeforeCall(returnAction, null);
        Type localVarReturnType = new TypeToken<ReturnCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Return (asynchronously)
     * Perform Return Action.
     * @param returnAction A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performReturnActionsAsync(ReturnAction returnAction, final ApiCallback<ReturnCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = performReturnActionsValidateBeforeCall(returnAction, _callback);
        Type localVarReturnType = new TypeToken<ReturnCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendReturnEmail
     * @param returnAction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendReturnEmailCall(ReturnAction returnAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnAction;

        // create path and map variables
        String localVarPath = "/commerce/returns/email/resend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendReturnEmailValidateBeforeCall(ReturnAction returnAction, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = resendReturnEmailCall(returnAction, _callback);
        return localVarCall;

    }

    /**
     * Resend Return Email
     * Resends return email.
     * @param returnAction  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resendReturnEmail(ReturnAction returnAction) throws ApiException {
        resendReturnEmailWithHttpInfo(returnAction);
    }

    /**
     * Resend Return Email
     * Resends return email.
     * @param returnAction  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendReturnEmailWithHttpInfo(ReturnAction returnAction) throws ApiException {
        okhttp3.Call localVarCall = resendReturnEmailValidateBeforeCall(returnAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Return Email (asynchronously)
     * Resends return email.
     * @param returnAction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendReturnEmailAsync(ReturnAction returnAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendReturnEmailValidateBeforeCall(returnAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for restockReturnItems
     * @param returnId Return ID (required)
     * @param restockableReturnItem List of return items with quantity to be restocked (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restockReturnItemsCall(String returnId, List<RestockableReturnItem> restockableReturnItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restockableReturnItem;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/restock"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restockReturnItemsValidateBeforeCall(String returnId, List<RestockableReturnItem> restockableReturnItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling restockReturnItems(Async)");
        }
        

        okhttp3.Call localVarCall = restockReturnItemsCall(returnId, restockableReturnItem, _callback);
        return localVarCall;

    }

    /**
     * Restock Return Items
     * API to restock return item.
     * @param returnId Return ID (required)
     * @param restockableReturnItem List of return items with quantity to be restocked (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn restockReturnItems(String returnId, List<RestockableReturnItem> restockableReturnItem) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = restockReturnItemsWithHttpInfo(returnId, restockableReturnItem);
        return localVarResp.getData();
    }

    /**
     * Restock Return Items
     * API to restock return item.
     * @param returnId Return ID (required)
     * @param restockableReturnItem List of return items with quantity to be restocked (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> restockReturnItemsWithHttpInfo(String returnId, List<RestockableReturnItem> restockableReturnItem) throws ApiException {
        okhttp3.Call localVarCall = restockReturnItemsValidateBeforeCall(returnId, restockableReturnItem, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restock Return Items (asynchronously)
     * API to restock return item.
     * @param returnId Return ID (required)
     * @param restockableReturnItem List of return items with quantity to be restocked (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restockReturnItemsAsync(String returnId, List<RestockableReturnItem> restockableReturnItem, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = restockReturnItemsValidateBeforeCall(returnId, restockableReturnItem, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePackage
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to update on the return (required)
     * @param commerceRuntimePackage Package content to update on the return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageCall(String returnId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimePackage;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/packages/{packageId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePackageValidateBeforeCall(String returnId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling updatePackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling updatePackage(Async)");
        }
        

        okhttp3.Call localVarCall = updatePackageCall(returnId, packageId, commerceRuntimePackage, _callback);
        return localVarCall;

    }

    /**
     * Delete an order package
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to update on the return (required)
     * @param commerceRuntimePackage Package content to update on the return (optional)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage updatePackage(String returnId, String packageId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = updatePackageWithHttpInfo(returnId, packageId, commerceRuntimePackage);
        return localVarResp.getData();
    }

    /**
     * Delete an order package
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to update on the return (required)
     * @param commerceRuntimePackage Package content to update on the return (optional)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> updatePackageWithHttpInfo(String returnId, String packageId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        okhttp3.Call localVarCall = updatePackageValidateBeforeCall(returnId, packageId, commerceRuntimePackage, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an order package (asynchronously)
     * 
     * @param returnId Unique identifier of the return with which to associate the package. (required)
     * @param packageId Package to update on the return (required)
     * @param commerceRuntimePackage Package content to update on the return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageAsync(String returnId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePackageValidateBeforeCall(returnId, packageId, commerceRuntimePackage, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReturn
     * @param returnId  (required)
     * @param modelReturn  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReturnCall(String returnId, ModelReturn modelReturn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelReturn;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReturnValidateBeforeCall(String returnId, ModelReturn modelReturn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling updateReturn(Async)");
        }
        

        okhttp3.Call localVarCall = updateReturnCall(returnId, modelReturn, _callback);
        return localVarCall;

    }

    /**
     * Get Reasons
     * Gets all the return reasons.
     * @param returnId  (required)
     * @param modelReturn  (optional)
     * @return ModelReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelReturn updateReturn(String returnId, ModelReturn modelReturn) throws ApiException {
        ApiResponse<ModelReturn> localVarResp = updateReturnWithHttpInfo(returnId, modelReturn);
        return localVarResp.getData();
    }

    /**
     * Get Reasons
     * Gets all the return reasons.
     * @param returnId  (required)
     * @param modelReturn  (optional)
     * @return ApiResponse&lt;ModelReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelReturn> updateReturnWithHttpInfo(String returnId, ModelReturn modelReturn) throws ApiException {
        okhttp3.Call localVarCall = updateReturnValidateBeforeCall(returnId, modelReturn, null);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reasons (asynchronously)
     * Gets all the return reasons.
     * @param returnId  (required)
     * @param modelReturn  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReturnAsync(String returnId, ModelReturn modelReturn, final ApiCallback<ModelReturn> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReturnValidateBeforeCall(returnId, modelReturn, _callback);
        Type localVarReturnType = new TypeToken<ModelReturn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReturnNote
     * @param returnId Unique identifier of the return whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReturnNoteCall(String returnId, String noteId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderNote;

        // create path and map variables
        String localVarPath = "/commerce/returns/{returnId}/notes/{noteId}"
            .replaceAll("\\{" + "returnId" + "\\}", localVarApiClient.escapeString(returnId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReturnNoteValidateBeforeCall(String returnId, String noteId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'returnId' is set
        if (returnId == null) {
            throw new ApiException("Missing the required parameter 'returnId' when calling updateReturnNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateReturnNote(Async)");
        }
        

        okhttp3.Call localVarCall = updateReturnNoteCall(returnId, noteId, orderNote, _callback);
        return localVarCall;

    }

    /**
     * Update Return Note
     * Updates a specific note for a return.
     * @param returnId Unique identifier of the return whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote updateReturnNote(String returnId, String noteId, OrderNote orderNote) throws ApiException {
        ApiResponse<OrderNote> localVarResp = updateReturnNoteWithHttpInfo(returnId, noteId, orderNote);
        return localVarResp.getData();
    }

    /**
     * Update Return Note
     * Updates a specific note for a return.
     * @param returnId Unique identifier of the return whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> updateReturnNoteWithHttpInfo(String returnId, String noteId, OrderNote orderNote) throws ApiException {
        okhttp3.Call localVarCall = updateReturnNoteValidateBeforeCall(returnId, noteId, orderNote, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Return Note (asynchronously)
     * Updates a specific note for a return.
     * @param returnId Unique identifier of the return whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReturnNoteAsync(String returnId, String noteId, OrderNote orderNote, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReturnNoteValidateBeforeCall(returnId, noteId, orderNote, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ReturnApi build() {
            return new ReturnApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
