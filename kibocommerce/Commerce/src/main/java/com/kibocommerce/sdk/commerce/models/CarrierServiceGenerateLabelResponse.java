/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CarrierServiceGenerateLabelResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CarrierServiceGenerateLabelResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_IMAGE_U_R_L = "imageURL";
  @SerializedName(SERIALIZED_NAME_IMAGE_U_R_L)
  private String imageURL;

  public static final String SERIALIZED_NAME_INTEGRATOR_ID = "integratorId";
  @SerializedName(SERIALIZED_NAME_INTEGRATOR_ID)
  private String integratorId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "trackingNumber";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public CarrierServiceGenerateLabelResponse() {
  }

  public CarrierServiceGenerateLabelResponse imageURL(String imageURL) {
    
    this.imageURL = imageURL;
    return this;
  }

   /**
   * Get imageURL
   * @return imageURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageURL() {
    return imageURL;
  }


  public void setImageURL(String imageURL) {
    this.imageURL = imageURL;
  }


  public CarrierServiceGenerateLabelResponse integratorId(String integratorId) {
    
    this.integratorId = integratorId;
    return this;
  }

   /**
   * Get integratorId
   * @return integratorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIntegratorId() {
    return integratorId;
  }


  public void setIntegratorId(String integratorId) {
    this.integratorId = integratorId;
  }


  public CarrierServiceGenerateLabelResponse price(Double price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    this.price = price;
  }


  public CarrierServiceGenerateLabelResponse trackingNumber(String trackingNumber) {
    
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * Get trackingNumber
   * @return trackingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackingNumber() {
    return trackingNumber;
  }


  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarrierServiceGenerateLabelResponse carrierServiceGenerateLabelResponse = (CarrierServiceGenerateLabelResponse) o;
    return Objects.equals(this.imageURL, carrierServiceGenerateLabelResponse.imageURL) &&
        Objects.equals(this.integratorId, carrierServiceGenerateLabelResponse.integratorId) &&
        Objects.equals(this.price, carrierServiceGenerateLabelResponse.price) &&
        Objects.equals(this.trackingNumber, carrierServiceGenerateLabelResponse.trackingNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageURL, integratorId, price, trackingNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarrierServiceGenerateLabelResponse {\n");
    sb.append("    imageURL: ").append(toIndentedString(imageURL)).append("\n");
    sb.append("    integratorId: ").append(toIndentedString(integratorId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageURL");
    openapiFields.add("integratorId");
    openapiFields.add("price");
    openapiFields.add("trackingNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CarrierServiceGenerateLabelResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CarrierServiceGenerateLabelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CarrierServiceGenerateLabelResponse is not found in the empty JSON string", CarrierServiceGenerateLabelResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CarrierServiceGenerateLabelResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CarrierServiceGenerateLabelResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("imageURL") != null && !jsonObj.get("imageURL").isJsonNull()) && !jsonObj.get("imageURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageURL").toString()));
      }
      if ((jsonObj.get("integratorId") != null && !jsonObj.get("integratorId").isJsonNull()) && !jsonObj.get("integratorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integratorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integratorId").toString()));
      }
      if ((jsonObj.get("trackingNumber") != null && !jsonObj.get("trackingNumber").isJsonNull()) && !jsonObj.get("trackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CarrierServiceGenerateLabelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CarrierServiceGenerateLabelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CarrierServiceGenerateLabelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CarrierServiceGenerateLabelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CarrierServiceGenerateLabelResponse>() {
           @Override
           public void write(JsonWriter out, CarrierServiceGenerateLabelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CarrierServiceGenerateLabelResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CarrierServiceGenerateLabelResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CarrierServiceGenerateLabelResponse
  * @throws IOException if the JSON string is invalid with respect to CarrierServiceGenerateLabelResponse
  */
  public static CarrierServiceGenerateLabelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CarrierServiceGenerateLabelResponse.class);
  }

 /**
  * Convert an instance of CarrierServiceGenerateLabelResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

