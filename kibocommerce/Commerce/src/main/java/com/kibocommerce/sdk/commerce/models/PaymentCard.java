/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * If the customer is paying by credit card, the card holder&#39;s details, such as the name on the card, number, billing   address, and expiration dates.
 */
@ApiModel(description = "If the customer is paying by credit card, the card holder's details, such as the name on the card, number, billing   address, and expiration dates.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentCard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PAYMENT_SERVICE_CARD_ID = "paymentServiceCardId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SERVICE_CARD_ID)
  private String paymentServiceCardId;

  public static final String SERIALIZED_NAME_IS_USED_RECURRING = "isUsedRecurring";
  @SerializedName(SERIALIZED_NAME_IS_USED_RECURRING)
  private Boolean isUsedRecurring;

  public static final String SERIALIZED_NAME_NAME_ON_CARD = "nameOnCard";
  @SerializedName(SERIALIZED_NAME_NAME_ON_CARD)
  private String nameOnCard;

  public static final String SERIALIZED_NAME_IS_CARD_INFO_SAVED = "isCardInfoSaved";
  @SerializedName(SERIALIZED_NAME_IS_CARD_INFO_SAVED)
  private Boolean isCardInfoSaved;

  public static final String SERIALIZED_NAME_IS_TOKENIZED = "isTokenized";
  @SerializedName(SERIALIZED_NAME_IS_TOKENIZED)
  private Boolean isTokenized;

  public static final String SERIALIZED_NAME_CC_LAST_FOUR = "ccLastFour";
  @SerializedName(SERIALIZED_NAME_CC_LAST_FOUR)
  private String ccLastFour;

  public static final String SERIALIZED_NAME_PAYMENT_OR_CARD_TYPE = "paymentOrCardType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OR_CARD_TYPE)
  private String paymentOrCardType;

  public static final String SERIALIZED_NAME_CARD_NUMBER_PART_OR_MASK = "cardNumberPartOrMask";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_PART_OR_MASK)
  private String cardNumberPartOrMask;

  public static final String SERIALIZED_NAME_EXPIRE_MONTH = "expireMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRE_MONTH)
  private Integer expireMonth;

  public static final String SERIALIZED_NAME_EXPIRE_YEAR = "expireYear";
  @SerializedName(SERIALIZED_NAME_EXPIRE_YEAR)
  private Integer expireYear;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public PaymentCard() {
  }

  public PaymentCard paymentServiceCardId(String paymentServiceCardId) {
    
    this.paymentServiceCardId = paymentServiceCardId;
    return this;
  }

   /**
   * Credit card number.
   * @return paymentServiceCardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit card number.")

  public String getPaymentServiceCardId() {
    return paymentServiceCardId;
  }


  public void setPaymentServiceCardId(String paymentServiceCardId) {
    this.paymentServiceCardId = paymentServiceCardId;
  }


  public PaymentCard isUsedRecurring(Boolean isUsedRecurring) {
    
    this.isUsedRecurring = isUsedRecurring;
    return this;
  }

   /**
   * If true, the credit card is charged on a regular interval, such as for a subscription. (Not supported currently.)
   * @return isUsedRecurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the credit card is charged on a regular interval, such as for a subscription. (Not supported currently.)")

  public Boolean getIsUsedRecurring() {
    return isUsedRecurring;
  }


  public void setIsUsedRecurring(Boolean isUsedRecurring) {
    this.isUsedRecurring = isUsedRecurring;
  }


  public PaymentCard nameOnCard(String nameOnCard) {
    
    this.nameOnCard = nameOnCard;
    return this;
  }

   /**
   * Card holder&#39;s name as it appears on the card.
   * @return nameOnCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card holder's name as it appears on the card.")

  public String getNameOnCard() {
    return nameOnCard;
  }


  public void setNameOnCard(String nameOnCard) {
    this.nameOnCard = nameOnCard;
  }


  public PaymentCard isCardInfoSaved(Boolean isCardInfoSaved) {
    
    this.isCardInfoSaved = isCardInfoSaved;
    return this;
  }

   /**
   * If true, the card information is stored in the customer&#39;s account.
   * @return isCardInfoSaved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the card information is stored in the customer's account.")

  public Boolean getIsCardInfoSaved() {
    return isCardInfoSaved;
  }


  public void setIsCardInfoSaved(Boolean isCardInfoSaved) {
    this.isCardInfoSaved = isCardInfoSaved;
  }


  public PaymentCard isTokenized(Boolean isTokenized) {
    
    this.isTokenized = isTokenized;
    return this;
  }

   /**
   * If true, the card is tokenized by external provider
   * @return isTokenized
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the card is tokenized by external provider")

  public Boolean getIsTokenized() {
    return isTokenized;
  }


  public void setIsTokenized(Boolean isTokenized) {
    this.isTokenized = isTokenized;
  }


  public PaymentCard ccLastFour(String ccLastFour) {
    
    this.ccLastFour = ccLastFour;
    return this;
  }

   /**
   * Last four digit of Credit card  Only for OMS Only tenant.
   * @return ccLastFour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last four digit of Credit card  Only for OMS Only tenant.")

  public String getCcLastFour() {
    return ccLastFour;
  }


  public void setCcLastFour(String ccLastFour) {
    this.ccLastFour = ccLastFour;
  }


  public PaymentCard paymentOrCardType(String paymentOrCardType) {
    
    this.paymentOrCardType = paymentOrCardType;
    return this;
  }

   /**
   * Card type such as Visa, MasterCard, American Express, or Discover.
   * @return paymentOrCardType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card type such as Visa, MasterCard, American Express, or Discover.")

  public String getPaymentOrCardType() {
    return paymentOrCardType;
  }


  public void setPaymentOrCardType(String paymentOrCardType) {
    this.paymentOrCardType = paymentOrCardType;
  }


  public PaymentCard cardNumberPartOrMask(String cardNumberPartOrMask) {
    
    this.cardNumberPartOrMask = cardNumberPartOrMask;
    return this;
  }

   /**
   * The visible part of the card number that the merchant uses to refer to   payment information, for example, the last for digits of the card number.
   * @return cardNumberPartOrMask
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The visible part of the card number that the merchant uses to refer to   payment information, for example, the last for digits of the card number.")

  public String getCardNumberPartOrMask() {
    return cardNumberPartOrMask;
  }


  public void setCardNumberPartOrMask(String cardNumberPartOrMask) {
    this.cardNumberPartOrMask = cardNumberPartOrMask;
  }


  public PaymentCard expireMonth(Integer expireMonth) {
    
    this.expireMonth = expireMonth;
    return this;
  }

   /**
   * Month when the card expires.
   * @return expireMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Month when the card expires.")

  public Integer getExpireMonth() {
    return expireMonth;
  }


  public void setExpireMonth(Integer expireMonth) {
    this.expireMonth = expireMonth;
  }


  public PaymentCard expireYear(Integer expireYear) {
    
    this.expireYear = expireYear;
    return this;
  }

   /**
   * Year when the card expires.
   * @return expireYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year when the card expires.")

  public Integer getExpireYear() {
    return expireYear;
  }


  public void setExpireYear(Integer expireYear) {
    this.expireYear = expireYear;
  }


  public PaymentCard bin(String bin) {
    
    this.bin = bin;
    return this;
  }

   /**
   * Year when the card expires.
   * @return bin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year when the card expires.")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    this.bin = bin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCard paymentCard = (PaymentCard) o;
    return Objects.equals(this.paymentServiceCardId, paymentCard.paymentServiceCardId) &&
        Objects.equals(this.isUsedRecurring, paymentCard.isUsedRecurring) &&
        Objects.equals(this.nameOnCard, paymentCard.nameOnCard) &&
        Objects.equals(this.isCardInfoSaved, paymentCard.isCardInfoSaved) &&
        Objects.equals(this.isTokenized, paymentCard.isTokenized) &&
        Objects.equals(this.ccLastFour, paymentCard.ccLastFour) &&
        Objects.equals(this.paymentOrCardType, paymentCard.paymentOrCardType) &&
        Objects.equals(this.cardNumberPartOrMask, paymentCard.cardNumberPartOrMask) &&
        Objects.equals(this.expireMonth, paymentCard.expireMonth) &&
        Objects.equals(this.expireYear, paymentCard.expireYear) &&
        Objects.equals(this.bin, paymentCard.bin);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentServiceCardId, isUsedRecurring, nameOnCard, isCardInfoSaved, isTokenized, ccLastFour, paymentOrCardType, cardNumberPartOrMask, expireMonth, expireYear, bin);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCard {\n");
    sb.append("    paymentServiceCardId: ").append(toIndentedString(paymentServiceCardId)).append("\n");
    sb.append("    isUsedRecurring: ").append(toIndentedString(isUsedRecurring)).append("\n");
    sb.append("    nameOnCard: ").append(toIndentedString(nameOnCard)).append("\n");
    sb.append("    isCardInfoSaved: ").append(toIndentedString(isCardInfoSaved)).append("\n");
    sb.append("    isTokenized: ").append(toIndentedString(isTokenized)).append("\n");
    sb.append("    ccLastFour: ").append(toIndentedString(ccLastFour)).append("\n");
    sb.append("    paymentOrCardType: ").append(toIndentedString(paymentOrCardType)).append("\n");
    sb.append("    cardNumberPartOrMask: ").append(toIndentedString(cardNumberPartOrMask)).append("\n");
    sb.append("    expireMonth: ").append(toIndentedString(expireMonth)).append("\n");
    sb.append("    expireYear: ").append(toIndentedString(expireYear)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentOrCardType");
    openapiFields.add("cardNumberPartOrMask");
    openapiFields.add("expireMonth");
    openapiFields.add("expireYear");
    openapiFields.add("bin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCard is not found in the empty JSON string", PaymentCard.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PaymentCard.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("paymentServiceCardId") != null && !jsonObj.get("paymentServiceCardId").isJsonNull()) && !jsonObj.get("paymentServiceCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentServiceCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentServiceCardId").toString()));
      }
      if ((jsonObj.get("nameOnCard") != null && !jsonObj.get("nameOnCard").isJsonNull()) && !jsonObj.get("nameOnCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameOnCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameOnCard").toString()));
      }
      if ((jsonObj.get("ccLastFour") != null && !jsonObj.get("ccLastFour").isJsonNull()) && !jsonObj.get("ccLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccLastFour").toString()));
      }
      if ((jsonObj.get("paymentOrCardType") != null && !jsonObj.get("paymentOrCardType").isJsonNull()) && !jsonObj.get("paymentOrCardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentOrCardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentOrCardType").toString()));
      }
      if ((jsonObj.get("cardNumberPartOrMask") != null && !jsonObj.get("cardNumberPartOrMask").isJsonNull()) && !jsonObj.get("cardNumberPartOrMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumberPartOrMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumberPartOrMask").toString()));
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCard.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCard>() {
           @Override
           public void write(JsonWriter out, PaymentCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentCard
  * @throws IOException if the JSON string is invalid with respect to PaymentCard
  */
  public static PaymentCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCard.class);
  }

 /**
  * Convert an instance of PaymentCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

