/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.commerce.models.AlternateContact;
import com.kibocommerce.sdk.commerce.models.CheckoutGrouping;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeDestination;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShopperNotes;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeThresholdMessage;
import com.kibocommerce.sdk.commerce.models.InvalidCoupon;
import com.kibocommerce.sdk.commerce.models.Payment;
import com.kibocommerce.sdk.commerce.models.SuggestedDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Checkout
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Checkout implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_ORIGINAL_CART_ID = "originalCartId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CART_ID)
  private String originalCartId;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private OffsetDateTime submittedDate;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CommerceRuntimeOrderItem> items = null;

  public static final String SERIALIZED_NAME_GROUPINGS = "groupings";
  @SerializedName(SERIALIZED_NAME_GROUPINGS)
  private List<CheckoutGrouping> groupings = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<CommerceRuntimeDestination> destinations = null;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<Payment> payments = null;

  public static final String SERIALIZED_NAME_AMOUNT_REMAINING_FOR_PAYMENT = "amountRemainingForPayment";
  @SerializedName(SERIALIZED_NAME_AMOUNT_REMAINING_FOR_PAYMENT)
  private Double amountRemainingForPayment;

  public static final String SERIALIZED_NAME_ACCEPTS_MARKETING = "acceptsMarketing";
  @SerializedName(SERIALIZED_NAME_ACCEPTS_MARKETING)
  private Boolean acceptsMarketing;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID = "customerAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID)
  private Integer customerAccountId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ALTERNATE_CONTACT = "alternateContact";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_CONTACT)
  private AlternateContact alternateContact;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID = "customerTaxId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID)
  private String customerTaxId;

  public static final String SERIALIZED_NAME_IS_TAX_EXEMPT = "isTaxExempt";
  @SerializedName(SERIALIZED_NAME_IS_TAX_EXEMPT)
  private Boolean isTaxExempt;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CommerceRuntimeOrderAttribute> attributes = null;

  public static final String SERIALIZED_NAME_SHOPPER_NOTES = "shopperNotes";
  @SerializedName(SERIALIZED_NAME_SHOPPER_NOTES)
  private CommerceRuntimeShopperNotes shopperNotes;

  public static final String SERIALIZED_NAME_AVAILABLE_ACTIONS = "availableActions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACTIONS)
  private List<String> availableActions = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_SOURCE_DEVICE = "sourceDevice";
  @SerializedName(SERIALIZED_NAME_SOURCE_DEVICE)
  private String sourceDevice;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public static final String SERIALIZED_NAME_WEB_SESSION_ID = "webSessionId";
  @SerializedName(SERIALIZED_NAME_WEB_SESSION_ID)
  private String webSessionId;

  public static final String SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE = "customerInteractionType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE)
  private String customerInteractionType;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNTS = "orderDiscounts";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> orderDiscounts = null;

  public static final String SERIALIZED_NAME_COUPON_CODES = "couponCodes";
  @SerializedName(SERIALIZED_NAME_COUPON_CODES)
  private List<String> couponCodes = null;

  public static final String SERIALIZED_NAME_INVALID_COUPONS = "invalidCoupons";
  @SerializedName(SERIALIZED_NAME_INVALID_COUPONS)
  private List<InvalidCoupon> invalidCoupons = null;

  public static final String SERIALIZED_NAME_SUGGESTED_DISCOUNTS = "suggestedDiscounts";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DISCOUNTS)
  private List<SuggestedDiscount> suggestedDiscounts = null;

  public static final String SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES = "discountThresholdMessages";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES)
  private List<CommerceRuntimeThresholdMessage> discountThresholdMessages = null;

  public static final String SERIALIZED_NAME_DUTY_TOTAL = "dutyTotal";
  @SerializedName(SERIALIZED_NAME_DUTY_TOTAL)
  private Double dutyTotal;

  public static final String SERIALIZED_NAME_FEE_TOTAL = "feeTotal";
  @SerializedName(SERIALIZED_NAME_FEE_TOTAL)
  private Double feeTotal;

  public static final String SERIALIZED_NAME_SUB_TOTAL = "subTotal";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL)
  private Double subTotal;

  public static final String SERIALIZED_NAME_ITEM_LEVEL_PRODUCT_DISCOUNT_TOTAL = "itemLevelProductDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL_PRODUCT_DISCOUNT_TOTAL)
  private Double itemLevelProductDiscountTotal;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_PRODUCT_DISCOUNT_TOTAL = "orderLevelProductDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_PRODUCT_DISCOUNT_TOTAL)
  private Double orderLevelProductDiscountTotal;

  public static final String SERIALIZED_NAME_ITEM_TAX_TOTAL = "itemTaxTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_TAX_TOTAL)
  private Double itemTaxTotal;

  public static final String SERIALIZED_NAME_ITEM_TOTAL = "itemTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_TOTAL)
  private Double itemTotal;

  public static final String SERIALIZED_NAME_SHIPPING_SUB_TOTAL = "shippingSubTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SUB_TOTAL)
  private Double shippingSubTotal;

  public static final String SERIALIZED_NAME_ITEM_LEVEL_SHIPPING_DISCOUNT_TOTAL = "itemLevelShippingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL_SHIPPING_DISCOUNT_TOTAL)
  private Double itemLevelShippingDiscountTotal;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_SHIPPING_DISCOUNT_TOTAL = "orderLevelShippingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_SHIPPING_DISCOUNT_TOTAL)
  private Double orderLevelShippingDiscountTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_TOTAL = "shippingTaxTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_TOTAL)
  private Double shippingTaxTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Double shippingTotal;

  public static final String SERIALIZED_NAME_HANDLING_SUB_TOTAL = "handlingSubTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_SUB_TOTAL)
  private Double handlingSubTotal;

  public static final String SERIALIZED_NAME_ITEM_LEVEL_HANDLING_DISCOUNT_TOTAL = "itemLevelHandlingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL_HANDLING_DISCOUNT_TOTAL)
  private Double itemLevelHandlingDiscountTotal;

  public static final String SERIALIZED_NAME_ORDER_LEVEL_HANDLING_DISCOUNT_TOTAL = "orderLevelHandlingDiscountTotal";
  @SerializedName(SERIALIZED_NAME_ORDER_LEVEL_HANDLING_DISCOUNT_TOTAL)
  private Double orderLevelHandlingDiscountTotal;

  public static final String SERIALIZED_NAME_HANDLING_TAX_TOTAL = "handlingTaxTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX_TOTAL)
  private Double handlingTaxTotal;

  public static final String SERIALIZED_NAME_HANDLING_TOTAL = "handlingTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TOTAL)
  private Double handlingTotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public Checkout() {
  }

  
  public Checkout(
     String customerTaxId, 
     Boolean isTaxExempt
  ) {
    this();
    this.customerTaxId = customerTaxId;
    this.isTaxExempt = isTaxExempt;
  }

  public Checkout id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Checkout siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Unique identifier of the Site.
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Site.")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public Checkout tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Unique identifier of the Tenant.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Tenant.")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public Checkout number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * A checkout number that is only assigned after the checkout is placed.
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A checkout number that is only assigned after the checkout is placed.")

  public Integer getNumber() {
    return number;
  }


  public void setNumber(Integer number) {
    this.number = number;
  }


  public Checkout originalCartId(String originalCartId) {
    
    this.originalCartId = originalCartId;
    return this;
  }

   /**
   * Unique identifier for the cart that was converted to checkout.
   * @return originalCartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the cart that was converted to checkout.")

  public String getOriginalCartId() {
    return originalCartId;
  }


  public void setOriginalCartId(String originalCartId) {
    this.originalCartId = originalCartId;
  }


  public Checkout submittedDate(OffsetDateTime submittedDate) {
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * When the customer placed (submitted) the order.
   * @return submittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the customer placed (submitted) the order.")

  public OffsetDateTime getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(OffsetDateTime submittedDate) {
    this.submittedDate = submittedDate;
  }


  public Checkout type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Checkout items(List<CommerceRuntimeOrderItem> items) {
    
    this.items = items;
    return this;
  }

  public Checkout addItemsItem(CommerceRuntimeOrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of items in the checkout.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of items in the checkout.")

  public List<CommerceRuntimeOrderItem> getItems() {
    return items;
  }


  public void setItems(List<CommerceRuntimeOrderItem> items) {
    this.items = items;
  }


  public Checkout groupings(List<CheckoutGrouping> groupings) {
    
    this.groupings = groupings;
    return this;
  }

  public Checkout addGroupingsItem(CheckoutGrouping groupingsItem) {
    if (this.groupings == null) {
      this.groupings = new ArrayList<>();
    }
    this.groupings.add(groupingsItem);
    return this;
  }

   /**
   * List of checkout grouping.
   * @return groupings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of checkout grouping.")

  public List<CheckoutGrouping> getGroupings() {
    return groupings;
  }


  public void setGroupings(List<CheckoutGrouping> groupings) {
    this.groupings = groupings;
  }


  public Checkout auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public Checkout destinations(List<CommerceRuntimeDestination> destinations) {
    
    this.destinations = destinations;
    return this;
  }

  public Checkout addDestinationsItem(CommerceRuntimeDestination destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

   /**
   * Get destinations
   * @return destinations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeDestination> getDestinations() {
    return destinations;
  }


  public void setDestinations(List<CommerceRuntimeDestination> destinations) {
    this.destinations = destinations;
  }


  public Checkout payments(List<Payment> payments) {
    
    this.payments = payments;
    return this;
  }

  public Checkout addPaymentsItem(Payment paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Payment transaction associated with this checkout. It is the entire payment interchange between the merchant   who is forwarding the customer&#39;s payment information and the payment service who is authorizing and   capturing payment. Payment can be either by credit card, check, or PayPal.
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment transaction associated with this checkout. It is the entire payment interchange between the merchant   who is forwarding the customer's payment information and the payment service who is authorizing and   capturing payment. Payment can be either by credit card, check, or PayPal.")

  public List<Payment> getPayments() {
    return payments;
  }


  public void setPayments(List<Payment> payments) {
    this.payments = payments;
  }


  public Checkout amountRemainingForPayment(Double amountRemainingForPayment) {
    
    this.amountRemainingForPayment = amountRemainingForPayment;
    return this;
  }

   /**
   * A counter for how much of the total has not been claimed by payments.  This is computed by Total - (sum of Payments where State is not Voided/Declined)
   * @return amountRemainingForPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A counter for how much of the total has not been claimed by payments.  This is computed by Total - (sum of Payments where State is not Voided/Declined)")

  public Double getAmountRemainingForPayment() {
    return amountRemainingForPayment;
  }


  public void setAmountRemainingForPayment(Double amountRemainingForPayment) {
    this.amountRemainingForPayment = amountRemainingForPayment;
  }


  public Checkout acceptsMarketing(Boolean acceptsMarketing) {
    
    this.acceptsMarketing = acceptsMarketing;
    return this;
  }

   /**
   * Does the customer accept marketing
   * @return acceptsMarketing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Does the customer accept marketing")

  public Boolean getAcceptsMarketing() {
    return acceptsMarketing;
  }


  public void setAcceptsMarketing(Boolean acceptsMarketing) {
    this.acceptsMarketing = acceptsMarketing;
  }


  public Checkout customerAccountId(Integer customerAccountId) {
    
    this.customerAccountId = customerAccountId;
    return this;
  }

   /**
   * Unique identifier of the customer account.
   * @return customerAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the customer account.")

  public Integer getCustomerAccountId() {
    return customerAccountId;
  }


  public void setCustomerAccountId(Integer customerAccountId) {
    this.customerAccountId = customerAccountId;
  }


  public Checkout email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email address for checkout
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address for checkout")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public Checkout alternateContact(AlternateContact alternateContact) {
    
    this.alternateContact = alternateContact;
    return this;
  }

   /**
   * Get alternateContact
   * @return alternateContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AlternateContact getAlternateContact() {
    return alternateContact;
  }


  public void setAlternateContact(AlternateContact alternateContact) {
    this.alternateContact = alternateContact;
  }


   /**
   * The customers tax ID. If Customer Account ID exists in the system, will set this.
   * @return customerTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The customers tax ID. If Customer Account ID exists in the system, will set this.")

  public String getCustomerTaxId() {
    return customerTaxId;
  }




   /**
   * Unique identifier of the customer account.
   * @return isTaxExempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the customer account.")

  public Boolean getIsTaxExempt() {
    return isTaxExempt;
  }




  public Checkout currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO Currency Code.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Currency Code.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Checkout priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * Pricelist code for the checkout
   * @return priceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricelist code for the checkout")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public Checkout attributes(List<CommerceRuntimeOrderAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public Checkout addAttributesItem(CommerceRuntimeOrderAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeOrderAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CommerceRuntimeOrderAttribute> attributes) {
    this.attributes = attributes;
  }


  public Checkout shopperNotes(CommerceRuntimeShopperNotes shopperNotes) {
    
    this.shopperNotes = shopperNotes;
    return this;
  }

   /**
   * Get shopperNotes
   * @return shopperNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CommerceRuntimeShopperNotes getShopperNotes() {
    return shopperNotes;
  }


  public void setShopperNotes(CommerceRuntimeShopperNotes shopperNotes) {
    this.shopperNotes = shopperNotes;
  }


  public Checkout availableActions(List<String> availableActions) {
    
    this.availableActions = availableActions;
    return this;
  }

  public Checkout addAvailableActionsItem(String availableActionsItem) {
    if (this.availableActions == null) {
      this.availableActions = new ArrayList<>();
    }
    this.availableActions.add(availableActionsItem);
    return this;
  }

   /**
   * Get availableActions
   * @return availableActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAvailableActions() {
    return availableActions;
  }


  public void setAvailableActions(List<String> availableActions) {
    this.availableActions = availableActions;
  }


  public Checkout data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Custom data for a given vendor set within the commerce process.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom data for a given vendor set within the commerce process.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public Checkout taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Storage for any additional/custom tax data.
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage for any additional/custom tax data.")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }


  public Checkout channelCode(String channelCode) {
    
    this.channelCode = channelCode;
    return this;
  }

   /**
   * Unique identifier of the channel for this item.
   * @return channelCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the channel for this item.")

  public String getChannelCode() {
    return channelCode;
  }


  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public Checkout locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Identifies the location at which the order was placed if the order was placed externally.
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the location at which the order was placed if the order was placed externally.")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public Checkout ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address of the user placing the order. (User or customer?)
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address of the user placing the order. (User or customer?)")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Checkout sourceDevice(String sourceDevice) {
    
    this.sourceDevice = sourceDevice;
    return this;
  }

   /**
   * Source device of the user placing the order. (User or customer?)
   * @return sourceDevice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source device of the user placing the order. (User or customer?)")

  public String getSourceDevice() {
    return sourceDevice;
  }


  public void setSourceDevice(String sourceDevice) {
    this.sourceDevice = sourceDevice;
  }


  public Checkout visitId(String visitId) {
    
    this.visitId = visitId;
    return this;
  }

   /**
   * Identifies the Visit ID that was current when the order was placed or when the cart was last updated.
   * @return visitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.")

  public String getVisitId() {
    return visitId;
  }


  public void setVisitId(String visitId) {
    this.visitId = visitId;
  }


  public Checkout webSessionId(String webSessionId) {
    
    this.webSessionId = webSessionId;
    return this;
  }

   /**
   * Identifies the web session used to place the order or last update the cart.
   * @return webSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the web session used to place the order or last update the cart.")

  public String getWebSessionId() {
    return webSessionId;
  }


  public void setWebSessionId(String webSessionId) {
    this.webSessionId = webSessionId;
  }


  public Checkout customerInteractionType(String customerInteractionType) {
    
    this.customerInteractionType = customerInteractionType;
    return this;
  }

   /**
   * Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown
   * @return customerInteractionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown")

  public String getCustomerInteractionType() {
    return customerInteractionType;
  }


  public void setCustomerInteractionType(String customerInteractionType) {
    this.customerInteractionType = customerInteractionType;
  }


  public Checkout orderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    
    this.orderDiscounts = orderDiscounts;
    return this;
  }

  public Checkout addOrderDiscountsItem(CommerceRuntimeAppliedDiscount orderDiscountsItem) {
    if (this.orderDiscounts == null) {
      this.orderDiscounts = new ArrayList<>();
    }
    this.orderDiscounts.add(orderDiscountsItem);
    return this;
  }

   /**
   * Get orderDiscounts
   * @return orderDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CommerceRuntimeAppliedDiscount> getOrderDiscounts() {
    return orderDiscounts;
  }


  public void setOrderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }


  public Checkout couponCodes(List<String> couponCodes) {
    
    this.couponCodes = couponCodes;
    return this;
  }

  public Checkout addCouponCodesItem(String couponCodesItem) {
    if (this.couponCodes == null) {
      this.couponCodes = new ArrayList<>();
    }
    this.couponCodes.add(couponCodesItem);
    return this;
  }

   /**
   * Coupon codes associated with this order.
   * @return couponCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupon codes associated with this order.")

  public List<String> getCouponCodes() {
    return couponCodes;
  }


  public void setCouponCodes(List<String> couponCodes) {
    this.couponCodes = couponCodes;
  }


  public Checkout invalidCoupons(List<InvalidCoupon> invalidCoupons) {
    
    this.invalidCoupons = invalidCoupons;
    return this;
  }

  public Checkout addInvalidCouponsItem(InvalidCoupon invalidCouponsItem) {
    if (this.invalidCoupons == null) {
      this.invalidCoupons = new ArrayList<>();
    }
    this.invalidCoupons.add(invalidCouponsItem);
    return this;
  }

   /**
   * A list of invalid coupons that were attempted on the order.
   * @return invalidCoupons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of invalid coupons that were attempted on the order.")

  public List<InvalidCoupon> getInvalidCoupons() {
    return invalidCoupons;
  }


  public void setInvalidCoupons(List<InvalidCoupon> invalidCoupons) {
    this.invalidCoupons = invalidCoupons;
  }


  public Checkout suggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    
    this.suggestedDiscounts = suggestedDiscounts;
    return this;
  }

  public Checkout addSuggestedDiscountsItem(SuggestedDiscount suggestedDiscountsItem) {
    if (this.suggestedDiscounts == null) {
      this.suggestedDiscounts = new ArrayList<>();
    }
    this.suggestedDiscounts.add(suggestedDiscountsItem);
    return this;
  }

   /**
   * Get suggestedDiscounts
   * @return suggestedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getSuggestedDiscounts() {
    return suggestedDiscounts;
  }


  public void setSuggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    this.suggestedDiscounts = suggestedDiscounts;
  }


  public Checkout discountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    
    this.discountThresholdMessages = discountThresholdMessages;
    return this;
  }

  public Checkout addDiscountThresholdMessagesItem(CommerceRuntimeThresholdMessage discountThresholdMessagesItem) {
    if (this.discountThresholdMessages == null) {
      this.discountThresholdMessages = new ArrayList<>();
    }
    this.discountThresholdMessages.add(discountThresholdMessagesItem);
    return this;
  }

   /**
   * List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.
   * @return discountThresholdMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.")

  public List<CommerceRuntimeThresholdMessage> getDiscountThresholdMessages() {
    return discountThresholdMessages;
  }


  public void setDiscountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    this.discountThresholdMessages = discountThresholdMessages;
  }


  public Checkout dutyTotal(Double dutyTotal) {
    
    this.dutyTotal = dutyTotal;
    return this;
  }

   /**
   * Total duty fees
   * @return dutyTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total duty fees")

  public Double getDutyTotal() {
    return dutyTotal;
  }


  public void setDutyTotal(Double dutyTotal) {
    this.dutyTotal = dutyTotal;
  }


  public Checkout feeTotal(Double feeTotal) {
    
    this.feeTotal = feeTotal;
    return this;
  }

   /**
   * Total Fees
   * @return feeTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total Fees")

  public Double getFeeTotal() {
    return feeTotal;
  }


  public void setFeeTotal(Double feeTotal) {
    this.feeTotal = feeTotal;
  }


  public Checkout subTotal(Double subTotal) {
    
    this.subTotal = subTotal;
    return this;
  }

   /**
   * Subtotal before any coupon codes, taxes, fees, etc.
   * @return subTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subtotal before any coupon codes, taxes, fees, etc.")

  public Double getSubTotal() {
    return subTotal;
  }


  public void setSubTotal(Double subTotal) {
    this.subTotal = subTotal;
  }


  public Checkout itemLevelProductDiscountTotal(Double itemLevelProductDiscountTotal) {
    
    this.itemLevelProductDiscountTotal = itemLevelProductDiscountTotal;
    return this;
  }

   /**
   * The total value of item-level product discounts.
   * @return itemLevelProductDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of item-level product discounts.")

  public Double getItemLevelProductDiscountTotal() {
    return itemLevelProductDiscountTotal;
  }


  public void setItemLevelProductDiscountTotal(Double itemLevelProductDiscountTotal) {
    this.itemLevelProductDiscountTotal = itemLevelProductDiscountTotal;
  }


  public Checkout orderLevelProductDiscountTotal(Double orderLevelProductDiscountTotal) {
    
    this.orderLevelProductDiscountTotal = orderLevelProductDiscountTotal;
    return this;
  }

   /**
   * The total value of order-level (group-level) product discounts.
   * @return orderLevelProductDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of order-level (group-level) product discounts.")

  public Double getOrderLevelProductDiscountTotal() {
    return orderLevelProductDiscountTotal;
  }


  public void setOrderLevelProductDiscountTotal(Double orderLevelProductDiscountTotal) {
    this.orderLevelProductDiscountTotal = orderLevelProductDiscountTotal;
  }


  public Checkout itemTaxTotal(Double itemTaxTotal) {
    
    this.itemTaxTotal = itemTaxTotal;
    return this;
  }

   /**
   * Total tax on products.
   * @return itemTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on products.")

  public Double getItemTaxTotal() {
    return itemTaxTotal;
  }


  public void setItemTaxTotal(Double itemTaxTotal) {
    this.itemTaxTotal = itemTaxTotal;
  }


  public Checkout itemTotal(Double itemTotal) {
    
    this.itemTotal = itemTotal;
    return this;
  }

   /**
   * The total product cost, accounting for discounts and tax.
   * @return itemTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total product cost, accounting for discounts and tax.")

  public Double getItemTotal() {
    return itemTotal;
  }


  public void setItemTotal(Double itemTotal) {
    this.itemTotal = itemTotal;
  }


  public Checkout shippingSubTotal(Double shippingSubTotal) {
    
    this.shippingSubTotal = shippingSubTotal;
    return this;
  }

   /**
   * Shipping does not appear on cart.
   * @return shippingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping does not appear on cart.")

  public Double getShippingSubTotal() {
    return shippingSubTotal;
  }


  public void setShippingSubTotal(Double shippingSubTotal) {
    this.shippingSubTotal = shippingSubTotal;
  }


  public Checkout itemLevelShippingDiscountTotal(Double itemLevelShippingDiscountTotal) {
    
    this.itemLevelShippingDiscountTotal = itemLevelShippingDiscountTotal;
    return this;
  }

   /**
   * The total value of item-level shipping discounts.
   * @return itemLevelShippingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of item-level shipping discounts.")

  public Double getItemLevelShippingDiscountTotal() {
    return itemLevelShippingDiscountTotal;
  }


  public void setItemLevelShippingDiscountTotal(Double itemLevelShippingDiscountTotal) {
    this.itemLevelShippingDiscountTotal = itemLevelShippingDiscountTotal;
  }


  public Checkout orderLevelShippingDiscountTotal(Double orderLevelShippingDiscountTotal) {
    
    this.orderLevelShippingDiscountTotal = orderLevelShippingDiscountTotal;
    return this;
  }

   /**
   * The total value of order-level (group-level) shipping discounts.
   * @return orderLevelShippingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of order-level (group-level) shipping discounts.")

  public Double getOrderLevelShippingDiscountTotal() {
    return orderLevelShippingDiscountTotal;
  }


  public void setOrderLevelShippingDiscountTotal(Double orderLevelShippingDiscountTotal) {
    this.orderLevelShippingDiscountTotal = orderLevelShippingDiscountTotal;
  }


  public Checkout shippingTaxTotal(Double shippingTaxTotal) {
    
    this.shippingTaxTotal = shippingTaxTotal;
    return this;
  }

   /**
   * Total tax on shipping.
   * @return shippingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on shipping.")

  public Double getShippingTaxTotal() {
    return shippingTaxTotal;
  }


  public void setShippingTaxTotal(Double shippingTaxTotal) {
    this.shippingTaxTotal = shippingTaxTotal;
  }


  public Checkout shippingTotal(Double shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * Overall shipping total, accounting for item and order-level shipping costs, any shipping discounts, and shipping tax.
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overall shipping total, accounting for item and order-level shipping costs, any shipping discounts, and shipping tax.")

  public Double getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Double shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public Checkout handlingSubTotal(Double handlingSubTotal) {
    
    this.handlingSubTotal = handlingSubTotal;
    return this;
  }

   /**
   * Pre-Discounted Handling Subtotal of the CommerceAggregate and its Items.  Returns {null} if the calculated value is negative.
   * @return handlingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pre-Discounted Handling Subtotal of the CommerceAggregate and its Items.  Returns {null} if the calculated value is negative.")

  public Double getHandlingSubTotal() {
    return handlingSubTotal;
  }


  public void setHandlingSubTotal(Double handlingSubTotal) {
    this.handlingSubTotal = handlingSubTotal;
  }


  public Checkout itemLevelHandlingDiscountTotal(Double itemLevelHandlingDiscountTotal) {
    
    this.itemLevelHandlingDiscountTotal = itemLevelHandlingDiscountTotal;
    return this;
  }

   /**
   * The total value of item-level handling discounts.
   * @return itemLevelHandlingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of item-level handling discounts.")

  public Double getItemLevelHandlingDiscountTotal() {
    return itemLevelHandlingDiscountTotal;
  }


  public void setItemLevelHandlingDiscountTotal(Double itemLevelHandlingDiscountTotal) {
    this.itemLevelHandlingDiscountTotal = itemLevelHandlingDiscountTotal;
  }


  public Checkout orderLevelHandlingDiscountTotal(Double orderLevelHandlingDiscountTotal) {
    
    this.orderLevelHandlingDiscountTotal = orderLevelHandlingDiscountTotal;
    return this;
  }

   /**
   * The total value of order-level (group-level) handling discounts.
   * @return orderLevelHandlingDiscountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total value of order-level (group-level) handling discounts.")

  public Double getOrderLevelHandlingDiscountTotal() {
    return orderLevelHandlingDiscountTotal;
  }


  public void setOrderLevelHandlingDiscountTotal(Double orderLevelHandlingDiscountTotal) {
    this.orderLevelHandlingDiscountTotal = orderLevelHandlingDiscountTotal;
  }


  public Checkout handlingTaxTotal(Double handlingTaxTotal) {
    
    this.handlingTaxTotal = handlingTaxTotal;
    return this;
  }

   /**
   * Total tax on handling.
   * @return handlingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on handling.")

  public Double getHandlingTaxTotal() {
    return handlingTaxTotal;
  }


  public void setHandlingTaxTotal(Double handlingTaxTotal) {
    this.handlingTaxTotal = handlingTaxTotal;
  }


  public Checkout handlingTotal(Double handlingTotal) {
    
    this.handlingTotal = handlingTotal;
    return this;
  }

   /**
   * Overall handling total, accounting for line and order-level handling costs, any handling discounts, and handling tax.
   * @return handlingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overall handling total, accounting for line and order-level handling costs, any handling discounts, and handling tax.")

  public Double getHandlingTotal() {
    return handlingTotal;
  }


  public void setHandlingTotal(Double handlingTotal) {
    this.handlingTotal = handlingTotal;
  }


  public Checkout total(Double total) {
    
    this.total = total;
    return this;
  }

   /**
   * Final total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Final total")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Checkout checkout = (Checkout) o;
    return Objects.equals(this.id, checkout.id) &&
        Objects.equals(this.siteId, checkout.siteId) &&
        Objects.equals(this.tenantId, checkout.tenantId) &&
        Objects.equals(this.number, checkout.number) &&
        Objects.equals(this.originalCartId, checkout.originalCartId) &&
        Objects.equals(this.submittedDate, checkout.submittedDate) &&
        Objects.equals(this.type, checkout.type) &&
        Objects.equals(this.items, checkout.items) &&
        Objects.equals(this.groupings, checkout.groupings) &&
        Objects.equals(this.auditInfo, checkout.auditInfo) &&
        Objects.equals(this.destinations, checkout.destinations) &&
        Objects.equals(this.payments, checkout.payments) &&
        Objects.equals(this.amountRemainingForPayment, checkout.amountRemainingForPayment) &&
        Objects.equals(this.acceptsMarketing, checkout.acceptsMarketing) &&
        Objects.equals(this.customerAccountId, checkout.customerAccountId) &&
        Objects.equals(this.email, checkout.email) &&
        Objects.equals(this.alternateContact, checkout.alternateContact) &&
        Objects.equals(this.customerTaxId, checkout.customerTaxId) &&
        Objects.equals(this.isTaxExempt, checkout.isTaxExempt) &&
        Objects.equals(this.currencyCode, checkout.currencyCode) &&
        Objects.equals(this.priceListCode, checkout.priceListCode) &&
        Objects.equals(this.attributes, checkout.attributes) &&
        Objects.equals(this.shopperNotes, checkout.shopperNotes) &&
        Objects.equals(this.availableActions, checkout.availableActions) &&
        Objects.equals(this.data, checkout.data) &&
        Objects.equals(this.taxData, checkout.taxData) &&
        Objects.equals(this.channelCode, checkout.channelCode) &&
        Objects.equals(this.locationCode, checkout.locationCode) &&
        Objects.equals(this.ipAddress, checkout.ipAddress) &&
        Objects.equals(this.sourceDevice, checkout.sourceDevice) &&
        Objects.equals(this.visitId, checkout.visitId) &&
        Objects.equals(this.webSessionId, checkout.webSessionId) &&
        Objects.equals(this.customerInteractionType, checkout.customerInteractionType) &&
        Objects.equals(this.orderDiscounts, checkout.orderDiscounts) &&
        Objects.equals(this.couponCodes, checkout.couponCodes) &&
        Objects.equals(this.invalidCoupons, checkout.invalidCoupons) &&
        Objects.equals(this.suggestedDiscounts, checkout.suggestedDiscounts) &&
        Objects.equals(this.discountThresholdMessages, checkout.discountThresholdMessages) &&
        Objects.equals(this.dutyTotal, checkout.dutyTotal) &&
        Objects.equals(this.feeTotal, checkout.feeTotal) &&
        Objects.equals(this.subTotal, checkout.subTotal) &&
        Objects.equals(this.itemLevelProductDiscountTotal, checkout.itemLevelProductDiscountTotal) &&
        Objects.equals(this.orderLevelProductDiscountTotal, checkout.orderLevelProductDiscountTotal) &&
        Objects.equals(this.itemTaxTotal, checkout.itemTaxTotal) &&
        Objects.equals(this.itemTotal, checkout.itemTotal) &&
        Objects.equals(this.shippingSubTotal, checkout.shippingSubTotal) &&
        Objects.equals(this.itemLevelShippingDiscountTotal, checkout.itemLevelShippingDiscountTotal) &&
        Objects.equals(this.orderLevelShippingDiscountTotal, checkout.orderLevelShippingDiscountTotal) &&
        Objects.equals(this.shippingTaxTotal, checkout.shippingTaxTotal) &&
        Objects.equals(this.shippingTotal, checkout.shippingTotal) &&
        Objects.equals(this.handlingSubTotal, checkout.handlingSubTotal) &&
        Objects.equals(this.itemLevelHandlingDiscountTotal, checkout.itemLevelHandlingDiscountTotal) &&
        Objects.equals(this.orderLevelHandlingDiscountTotal, checkout.orderLevelHandlingDiscountTotal) &&
        Objects.equals(this.handlingTaxTotal, checkout.handlingTaxTotal) &&
        Objects.equals(this.handlingTotal, checkout.handlingTotal) &&
        Objects.equals(this.total, checkout.total);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, siteId, tenantId, number, originalCartId, submittedDate, type, items, groupings, auditInfo, destinations, payments, amountRemainingForPayment, acceptsMarketing, customerAccountId, email, alternateContact, customerTaxId, isTaxExempt, currencyCode, priceListCode, attributes, shopperNotes, availableActions, data, taxData, channelCode, locationCode, ipAddress, sourceDevice, visitId, webSessionId, customerInteractionType, orderDiscounts, couponCodes, invalidCoupons, suggestedDiscounts, discountThresholdMessages, dutyTotal, feeTotal, subTotal, itemLevelProductDiscountTotal, orderLevelProductDiscountTotal, itemTaxTotal, itemTotal, shippingSubTotal, itemLevelShippingDiscountTotal, orderLevelShippingDiscountTotal, shippingTaxTotal, shippingTotal, handlingSubTotal, itemLevelHandlingDiscountTotal, orderLevelHandlingDiscountTotal, handlingTaxTotal, handlingTotal, total);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Checkout {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    originalCartId: ").append(toIndentedString(originalCartId)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    groupings: ").append(toIndentedString(groupings)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    amountRemainingForPayment: ").append(toIndentedString(amountRemainingForPayment)).append("\n");
    sb.append("    acceptsMarketing: ").append(toIndentedString(acceptsMarketing)).append("\n");
    sb.append("    customerAccountId: ").append(toIndentedString(customerAccountId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    alternateContact: ").append(toIndentedString(alternateContact)).append("\n");
    sb.append("    customerTaxId: ").append(toIndentedString(customerTaxId)).append("\n");
    sb.append("    isTaxExempt: ").append(toIndentedString(isTaxExempt)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    shopperNotes: ").append(toIndentedString(shopperNotes)).append("\n");
    sb.append("    availableActions: ").append(toIndentedString(availableActions)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    sourceDevice: ").append(toIndentedString(sourceDevice)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    webSessionId: ").append(toIndentedString(webSessionId)).append("\n");
    sb.append("    customerInteractionType: ").append(toIndentedString(customerInteractionType)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    couponCodes: ").append(toIndentedString(couponCodes)).append("\n");
    sb.append("    invalidCoupons: ").append(toIndentedString(invalidCoupons)).append("\n");
    sb.append("    suggestedDiscounts: ").append(toIndentedString(suggestedDiscounts)).append("\n");
    sb.append("    discountThresholdMessages: ").append(toIndentedString(discountThresholdMessages)).append("\n");
    sb.append("    dutyTotal: ").append(toIndentedString(dutyTotal)).append("\n");
    sb.append("    feeTotal: ").append(toIndentedString(feeTotal)).append("\n");
    sb.append("    subTotal: ").append(toIndentedString(subTotal)).append("\n");
    sb.append("    itemLevelProductDiscountTotal: ").append(toIndentedString(itemLevelProductDiscountTotal)).append("\n");
    sb.append("    orderLevelProductDiscountTotal: ").append(toIndentedString(orderLevelProductDiscountTotal)).append("\n");
    sb.append("    itemTaxTotal: ").append(toIndentedString(itemTaxTotal)).append("\n");
    sb.append("    itemTotal: ").append(toIndentedString(itemTotal)).append("\n");
    sb.append("    shippingSubTotal: ").append(toIndentedString(shippingSubTotal)).append("\n");
    sb.append("    itemLevelShippingDiscountTotal: ").append(toIndentedString(itemLevelShippingDiscountTotal)).append("\n");
    sb.append("    orderLevelShippingDiscountTotal: ").append(toIndentedString(orderLevelShippingDiscountTotal)).append("\n");
    sb.append("    shippingTaxTotal: ").append(toIndentedString(shippingTaxTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    handlingSubTotal: ").append(toIndentedString(handlingSubTotal)).append("\n");
    sb.append("    itemLevelHandlingDiscountTotal: ").append(toIndentedString(itemLevelHandlingDiscountTotal)).append("\n");
    sb.append("    orderLevelHandlingDiscountTotal: ").append(toIndentedString(orderLevelHandlingDiscountTotal)).append("\n");
    sb.append("    handlingTaxTotal: ").append(toIndentedString(handlingTaxTotal)).append("\n");
    sb.append("    handlingTotal: ").append(toIndentedString(handlingTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("siteId");
    openapiFields.add("tenantId");
    openapiFields.add("number");
    openapiFields.add("originalCartId");
    openapiFields.add("submittedDate");
    openapiFields.add("type");
    openapiFields.add("items");
    openapiFields.add("groupings");
    openapiFields.add("auditInfo");
    openapiFields.add("destinations");
    openapiFields.add("payments");
    openapiFields.add("amountRemainingForPayment");
    openapiFields.add("acceptsMarketing");
    openapiFields.add("customerAccountId");
    openapiFields.add("email");
    openapiFields.add("alternateContact");
    openapiFields.add("customerTaxId");
    openapiFields.add("isTaxExempt");
    openapiFields.add("currencyCode");
    openapiFields.add("priceListCode");
    openapiFields.add("attributes");
    openapiFields.add("shopperNotes");
    openapiFields.add("availableActions");
    openapiFields.add("data");
    openapiFields.add("taxData");
    openapiFields.add("channelCode");
    openapiFields.add("locationCode");
    openapiFields.add("ipAddress");
    openapiFields.add("sourceDevice");
    openapiFields.add("visitId");
    openapiFields.add("webSessionId");
    openapiFields.add("customerInteractionType");
    openapiFields.add("orderDiscounts");
    openapiFields.add("couponCodes");
    openapiFields.add("invalidCoupons");
    openapiFields.add("suggestedDiscounts");
    openapiFields.add("discountThresholdMessages");
    openapiFields.add("dutyTotal");
    openapiFields.add("feeTotal");
    openapiFields.add("subTotal");
    openapiFields.add("itemLevelProductDiscountTotal");
    openapiFields.add("orderLevelProductDiscountTotal");
    openapiFields.add("itemTaxTotal");
    openapiFields.add("itemTotal");
    openapiFields.add("shippingSubTotal");
    openapiFields.add("itemLevelShippingDiscountTotal");
    openapiFields.add("orderLevelShippingDiscountTotal");
    openapiFields.add("shippingTaxTotal");
    openapiFields.add("shippingTotal");
    openapiFields.add("handlingSubTotal");
    openapiFields.add("itemLevelHandlingDiscountTotal");
    openapiFields.add("orderLevelHandlingDiscountTotal");
    openapiFields.add("handlingTaxTotal");
    openapiFields.add("handlingTotal");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Checkout
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Checkout.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Checkout is not found in the empty JSON string", Checkout.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Checkout.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Checkout` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("originalCartId") != null && !jsonObj.get("originalCartId").isJsonNull()) && !jsonObj.get("originalCartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalCartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalCartId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            CommerceRuntimeOrderItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("groupings") != null && !jsonObj.get("groupings").isJsonNull()) {
        JsonArray jsonArraygroupings = jsonObj.getAsJsonArray("groupings");
        if (jsonArraygroupings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupings` to be an array in the JSON string but got `%s`", jsonObj.get("groupings").toString()));
          }

          // validate the optional field `groupings` (array)
          for (int i = 0; i < jsonArraygroupings.size(); i++) {
            CheckoutGrouping.validateJsonObject(jsonArraygroupings.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            CommerceRuntimeDestination.validateJsonObject(jsonArraydestinations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            Payment.validateJsonObject(jsonArraypayments.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `alternateContact`
      if (jsonObj.get("alternateContact") != null && !jsonObj.get("alternateContact").isJsonNull()) {
        AlternateContact.validateJsonObject(jsonObj.getAsJsonObject("alternateContact"));
      }
      if ((jsonObj.get("customerTaxId") != null && !jsonObj.get("customerTaxId").isJsonNull()) && !jsonObj.get("customerTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerTaxId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("priceListCode") != null && !jsonObj.get("priceListCode").isJsonNull()) && !jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            CommerceRuntimeOrderAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `shopperNotes`
      if (jsonObj.get("shopperNotes") != null && !jsonObj.get("shopperNotes").isJsonNull()) {
        CommerceRuntimeShopperNotes.validateJsonObject(jsonObj.getAsJsonObject("shopperNotes"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("availableActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableActions` to be an array in the JSON string but got `%s`", jsonObj.get("availableActions").toString()));
      }
      if ((jsonObj.get("channelCode") != null && !jsonObj.get("channelCode").isJsonNull()) && !jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("sourceDevice") != null && !jsonObj.get("sourceDevice").isJsonNull()) && !jsonObj.get("sourceDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDevice").toString()));
      }
      if ((jsonObj.get("visitId") != null && !jsonObj.get("visitId").isJsonNull()) && !jsonObj.get("visitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitId").toString()));
      }
      if ((jsonObj.get("webSessionId") != null && !jsonObj.get("webSessionId").isJsonNull()) && !jsonObj.get("webSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSessionId").toString()));
      }
      if ((jsonObj.get("customerInteractionType") != null && !jsonObj.get("customerInteractionType").isJsonNull()) && !jsonObj.get("customerInteractionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerInteractionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerInteractionType").toString()));
      }
      if (jsonObj.get("orderDiscounts") != null && !jsonObj.get("orderDiscounts").isJsonNull()) {
        JsonArray jsonArrayorderDiscounts = jsonObj.getAsJsonArray("orderDiscounts");
        if (jsonArrayorderDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("orderDiscounts").toString()));
          }

          // validate the optional field `orderDiscounts` (array)
          for (int i = 0; i < jsonArrayorderDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayorderDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("couponCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponCodes` to be an array in the JSON string but got `%s`", jsonObj.get("couponCodes").toString()));
      }
      if (jsonObj.get("invalidCoupons") != null && !jsonObj.get("invalidCoupons").isJsonNull()) {
        JsonArray jsonArrayinvalidCoupons = jsonObj.getAsJsonArray("invalidCoupons");
        if (jsonArrayinvalidCoupons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidCoupons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidCoupons` to be an array in the JSON string but got `%s`", jsonObj.get("invalidCoupons").toString()));
          }

          // validate the optional field `invalidCoupons` (array)
          for (int i = 0; i < jsonArrayinvalidCoupons.size(); i++) {
            InvalidCoupon.validateJsonObject(jsonArrayinvalidCoupons.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("suggestedDiscounts") != null && !jsonObj.get("suggestedDiscounts").isJsonNull()) {
        JsonArray jsonArraysuggestedDiscounts = jsonObj.getAsJsonArray("suggestedDiscounts");
        if (jsonArraysuggestedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDiscounts").toString()));
          }

          // validate the optional field `suggestedDiscounts` (array)
          for (int i = 0; i < jsonArraysuggestedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArraysuggestedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("discountThresholdMessages") != null && !jsonObj.get("discountThresholdMessages").isJsonNull()) {
        JsonArray jsonArraydiscountThresholdMessages = jsonObj.getAsJsonArray("discountThresholdMessages");
        if (jsonArraydiscountThresholdMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountThresholdMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountThresholdMessages` to be an array in the JSON string but got `%s`", jsonObj.get("discountThresholdMessages").toString()));
          }

          // validate the optional field `discountThresholdMessages` (array)
          for (int i = 0; i < jsonArraydiscountThresholdMessages.size(); i++) {
            CommerceRuntimeThresholdMessage.validateJsonObject(jsonArraydiscountThresholdMessages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Checkout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Checkout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Checkout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Checkout.class));

       return (TypeAdapter<T>) new TypeAdapter<Checkout>() {
           @Override
           public void write(JsonWriter out, Checkout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Checkout read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Checkout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Checkout
  * @throws IOException if the JSON string is invalid with respect to Checkout
  */
  public static Checkout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Checkout.class);
  }

 /**
  * Convert an instance of Checkout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

