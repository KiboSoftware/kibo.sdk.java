/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Pricing details for the product listed on a cart item, including the original price, discount amount, and final price.
 */
@ApiModel(description = "Pricing details for the product listed on a cart item, including the original price, discount amount, and final price.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommerceUnitPrice implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EXTENDED_AMOUNT = "extendedAmount";
  @SerializedName(SERIALIZED_NAME_EXTENDED_AMOUNT)
  private Double extendedAmount;

  public static final String SERIALIZED_NAME_LIST_AMOUNT = "listAmount";
  @SerializedName(SERIALIZED_NAME_LIST_AMOUNT)
  private Double listAmount;

  public static final String SERIALIZED_NAME_SALE_AMOUNT = "saleAmount";
  @SerializedName(SERIALIZED_NAME_SALE_AMOUNT)
  private Double saleAmount;

  public static final String SERIALIZED_NAME_OVERRIDE_AMOUNT = "overrideAmount";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_AMOUNT)
  private Double overrideAmount;

  public CommerceUnitPrice() {
  }

  public CommerceUnitPrice extendedAmount(Double extendedAmount) {
    
    this.extendedAmount = extendedAmount;
    return this;
  }

   /**
   * Extended amount, this is in order of precedence: OverrideAmount, SaleAmount, ListAmount
   * @return extendedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extended amount, this is in order of precedence: OverrideAmount, SaleAmount, ListAmount")

  public Double getExtendedAmount() {
    return extendedAmount;
  }


  public void setExtendedAmount(Double extendedAmount) {
    this.extendedAmount = extendedAmount;
  }


  public CommerceUnitPrice listAmount(Double listAmount) {
    
    this.listAmount = listAmount;
    return this;
  }

   /**
   * Product list amount.
   * @return listAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Product list amount.")

  public Double getListAmount() {
    return listAmount;
  }


  public void setListAmount(Double listAmount) {
    this.listAmount = listAmount;
  }


  public CommerceUnitPrice saleAmount(Double saleAmount) {
    
    this.saleAmount = saleAmount;
    return this;
  }

   /**
   * Sale amount indicated on the product.
   * @return saleAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sale amount indicated on the product.")

  public Double getSaleAmount() {
    return saleAmount;
  }


  public void setSaleAmount(Double saleAmount) {
    this.saleAmount = saleAmount;
  }


  public CommerceUnitPrice overrideAmount(Double overrideAmount) {
    
    this.overrideAmount = overrideAmount;
    return this;
  }

   /**
   * Amount as manually overridden by the Merchant
   * @return overrideAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount as manually overridden by the Merchant")

  public Double getOverrideAmount() {
    return overrideAmount;
  }


  public void setOverrideAmount(Double overrideAmount) {
    this.overrideAmount = overrideAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommerceUnitPrice commerceUnitPrice = (CommerceUnitPrice) o;
    return Objects.equals(this.extendedAmount, commerceUnitPrice.extendedAmount) &&
        Objects.equals(this.listAmount, commerceUnitPrice.listAmount) &&
        Objects.equals(this.saleAmount, commerceUnitPrice.saleAmount) &&
        Objects.equals(this.overrideAmount, commerceUnitPrice.overrideAmount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendedAmount, listAmount, saleAmount, overrideAmount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommerceUnitPrice {\n");
    sb.append("    extendedAmount: ").append(toIndentedString(extendedAmount)).append("\n");
    sb.append("    listAmount: ").append(toIndentedString(listAmount)).append("\n");
    sb.append("    saleAmount: ").append(toIndentedString(saleAmount)).append("\n");
    sb.append("    overrideAmount: ").append(toIndentedString(overrideAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extendedAmount");
    openapiFields.add("listAmount");
    openapiFields.add("saleAmount");
    openapiFields.add("overrideAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommerceUnitPrice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommerceUnitPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommerceUnitPrice is not found in the empty JSON string", CommerceUnitPrice.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CommerceUnitPrice.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommerceUnitPrice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommerceUnitPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommerceUnitPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommerceUnitPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommerceUnitPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<CommerceUnitPrice>() {
           @Override
           public void write(JsonWriter out, CommerceUnitPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommerceUnitPrice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommerceUnitPrice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommerceUnitPrice
  * @throws IOException if the JSON string is invalid with respect to CommerceUnitPrice
  */
  public static CommerceUnitPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommerceUnitPrice.class);
  }

 /**
  * Convert an instance of CommerceUnitPrice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

