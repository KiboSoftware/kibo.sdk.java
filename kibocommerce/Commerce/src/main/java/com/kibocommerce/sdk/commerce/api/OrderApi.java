/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.commerce.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.commerce.models.Adjustment;
import com.kibocommerce.sdk.commerce.models.AlternateContact;
import com.kibocommerce.sdk.commerce.models.BillingInfo;
import com.kibocommerce.sdk.commerce.models.CancelReasonCollection;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeCanceledReason;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimePackage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShipment;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.commerce.models.DigitalPackage;
import com.kibocommerce.sdk.commerce.models.DigitalWallet;
import com.kibocommerce.sdk.commerce.models.ExtendedProperty;
import com.kibocommerce.sdk.commerce.models.FulfillmentAction;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.InventoryTags;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.commerce.models.Order;
import com.kibocommerce.sdk.commerce.models.OrderAction;
import com.kibocommerce.sdk.commerce.models.OrderCollection;
import com.kibocommerce.sdk.commerce.models.OrderItemCollection;
import com.kibocommerce.sdk.commerce.models.OrderNote;
import com.kibocommerce.sdk.commerce.models.OrderReturnableItemCollection;
import com.kibocommerce.sdk.commerce.models.OrderValidationResult;
import com.kibocommerce.sdk.commerce.models.Payment;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.PaymentCollection;
import com.kibocommerce.sdk.commerce.models.Pickup;
import com.kibocommerce.sdk.commerce.models.PricingTaxableOrder;
import com.kibocommerce.sdk.commerce.models.Refund;
import com.kibocommerce.sdk.commerce.models.RefundReasonCollection;
import com.kibocommerce.sdk.commerce.models.RepriceShipmentObject;
import com.kibocommerce.sdk.commerce.models.ShipmentAdjustment;
import com.kibocommerce.sdk.commerce.models.ShipmentItemAdjustment;
import com.kibocommerce.sdk.commerce.models.SplitShipmentsObject;
import com.kibocommerce.sdk.commerce.models.SubscriptionInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public OrderApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public OrderApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public OrderApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addExtendedProperties
     * @param orderId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param extendedProperty Extended properties. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtendedPropertiesCall(String orderId, String updateMode, String version, List<ExtendedProperty> extendedProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extendedProperty;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtendedPropertiesValidateBeforeCall(String orderId, String updateMode, String version, List<ExtendedProperty> extendedProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling addExtendedProperties(Async)");
        }
        

        okhttp3.Call localVarCall = addExtendedPropertiesCall(orderId, updateMode, version, extendedProperty, _callback);
        return localVarCall;

    }

    /**
     * Adds Extended Properties
     * Adds extended properties.
     * @param orderId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param extendedProperty Extended properties. (optional)
     * @return List&lt;ExtendedProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ExtendedProperty> addExtendedProperties(String orderId, String updateMode, String version, List<ExtendedProperty> extendedProperty) throws ApiException {
        ApiResponse<List<ExtendedProperty>> localVarResp = addExtendedPropertiesWithHttpInfo(orderId, updateMode, version, extendedProperty);
        return localVarResp.getData();
    }

    /**
     * Adds Extended Properties
     * Adds extended properties.
     * @param orderId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param extendedProperty Extended properties. (optional)
     * @return ApiResponse&lt;List&lt;ExtendedProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExtendedProperty>> addExtendedPropertiesWithHttpInfo(String orderId, String updateMode, String version, List<ExtendedProperty> extendedProperty) throws ApiException {
        okhttp3.Call localVarCall = addExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, extendedProperty, null);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds Extended Properties (asynchronously)
     * Adds extended properties.
     * @param orderId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param extendedProperty Extended properties. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtendedPropertiesAsync(String orderId, String updateMode, String version, List<ExtendedProperty> extendedProperty, final ApiCallback<List<ExtendedProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, extendedProperty, _callback);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addValidationResult
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderValidationResult The order validation result. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addValidationResultCall(String orderId, OrderValidationResult orderValidationResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderValidationResult;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/validationresults"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidationResultValidateBeforeCall(String orderId, OrderValidationResult orderValidationResult, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling addValidationResult(Async)");
        }
        

        okhttp3.Call localVarCall = addValidationResultCall(orderId, orderValidationResult, _callback);
        return localVarCall;

    }

    /**
     * Add Validation Result
     * Adds a validation result from an external system to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderValidationResult The order validation result. (optional)
     * @return OrderValidationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderValidationResult addValidationResult(String orderId, OrderValidationResult orderValidationResult) throws ApiException {
        ApiResponse<OrderValidationResult> localVarResp = addValidationResultWithHttpInfo(orderId, orderValidationResult);
        return localVarResp.getData();
    }

    /**
     * Add Validation Result
     * Adds a validation result from an external system to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderValidationResult The order validation result. (optional)
     * @return ApiResponse&lt;OrderValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderValidationResult> addValidationResultWithHttpInfo(String orderId, OrderValidationResult orderValidationResult) throws ApiException {
        okhttp3.Call localVarCall = addValidationResultValidateBeforeCall(orderId, orderValidationResult, null);
        Type localVarReturnType = new TypeToken<OrderValidationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Validation Result (asynchronously)
     * Adds a validation result from an external system to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderValidationResult The order validation result. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addValidationResultAsync(String orderId, OrderValidationResult orderValidationResult, final ApiCallback<OrderValidationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidationResultValidateBeforeCall(orderId, orderValidationResult, _callback);
        Type localVarReturnType = new TypeToken<OrderValidationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyAdjustment
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyAdjustmentCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustment;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling applyAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = applyAdjustmentCall(orderId, updateMode, version, adjustment, _callback);
        return localVarCall;

    }

    /**
     * Apply Adjustment
     * Apply a pricing adjustment to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order applyAdjustment(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        ApiResponse<Order> localVarResp = applyAdjustmentWithHttpInfo(orderId, updateMode, version, adjustment);
        return localVarResp.getData();
    }

    /**
     * Apply Adjustment
     * Apply a pricing adjustment to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> applyAdjustmentWithHttpInfo(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        okhttp3.Call localVarCall = applyAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Adjustment (asynchronously)
     * Apply a pricing adjustment to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyAdjustmentAsync(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCoupon
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponCall(String orderId, String couponCode, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/coupons/{couponCode}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCouponValidateBeforeCall(String orderId, String couponCode, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling applyCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling applyCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = applyCouponCall(orderId, couponCode, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Apply Coupon
     * Apply a coupon to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order applyCoupon(String orderId, String couponCode, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = applyCouponWithHttpInfo(orderId, couponCode, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Apply Coupon
     * Apply a coupon to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> applyCouponWithHttpInfo(String orderId, String couponCode, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(orderId, couponCode, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Coupon (asynchronously)
     * Apply a coupon to the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponAsync(String orderId, String couponCode, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(orderId, couponCode, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyHandlingAdjustment
     * @param orderId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft). (optional)
     * @param version  (optional)
     * @param adjustment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyHandlingAdjustmentCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustment;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment/handling"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyHandlingAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling applyHandlingAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = applyHandlingAdjustmentCall(orderId, updateMode, version, adjustment, _callback);
        return localVarCall;

    }

    /**
     * Apply Handling Adjustment
     * Apply a handling adjustment to the order.
     * @param orderId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft). (optional)
     * @param version  (optional)
     * @param adjustment  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order applyHandlingAdjustment(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        ApiResponse<Order> localVarResp = applyHandlingAdjustmentWithHttpInfo(orderId, updateMode, version, adjustment);
        return localVarResp.getData();
    }

    /**
     * Apply Handling Adjustment
     * Apply a handling adjustment to the order.
     * @param orderId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft). (optional)
     * @param version  (optional)
     * @param adjustment  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> applyHandlingAdjustmentWithHttpInfo(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        okhttp3.Call localVarCall = applyHandlingAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Handling Adjustment (asynchronously)
     * Apply a handling adjustment to the order.
     * @param orderId  (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft). (optional)
     * @param version  (optional)
     * @param adjustment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyHandlingAdjustmentAsync(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyHandlingAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyShippingAdjustment
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyShippingAdjustmentCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustment;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment/shipping"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyShippingAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling applyShippingAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = applyShippingAdjustmentCall(orderId, updateMode, version, adjustment, _callback);
        return localVarCall;

    }

    /**
     * Apply Shipping Adjustment
     * Apply a shipping adjustment to the order specified by order Id.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order applyShippingAdjustment(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        ApiResponse<Order> localVarResp = applyShippingAdjustmentWithHttpInfo(orderId, updateMode, version, adjustment);
        return localVarResp.getData();
    }

    /**
     * Apply Shipping Adjustment
     * Apply a shipping adjustment to the order specified by order Id.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> applyShippingAdjustmentWithHttpInfo(String orderId, String updateMode, String version, Adjustment adjustment) throws ApiException {
        okhttp3.Call localVarCall = applyShippingAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Shipping Adjustment (asynchronously)
     * Apply a shipping adjustment to the order specified by order Id.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param adjustment Adjustment to apply to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyShippingAdjustmentAsync(String orderId, String updateMode, String version, Adjustment adjustment, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyShippingAdjustmentValidateBeforeCall(orderId, updateMode, version, adjustment, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoCapturePayments
     * @param orderId Unique identifier of the order you want to auto capture. (required)
     * @param forceCapture Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCapturePaymentsCall(String orderId, Boolean forceCapture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments/autocapture"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceCapture != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceCapture", forceCapture));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoCapturePaymentsValidateBeforeCall(String orderId, Boolean forceCapture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling autoCapturePayments(Async)");
        }
        

        okhttp3.Call localVarCall = autoCapturePaymentsCall(orderId, forceCapture, _callback);
        return localVarCall;

    }

    /**
     * Auto Capture Payments
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * @param orderId Unique identifier of the order you want to auto capture. (required)
     * @param forceCapture Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire. (optional, default to false)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order autoCapturePayments(String orderId, Boolean forceCapture) throws ApiException {
        ApiResponse<Order> localVarResp = autoCapturePaymentsWithHttpInfo(orderId, forceCapture);
        return localVarResp.getData();
    }

    /**
     * Auto Capture Payments
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * @param orderId Unique identifier of the order you want to auto capture. (required)
     * @param forceCapture Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire. (optional, default to false)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> autoCapturePaymentsWithHttpInfo(String orderId, Boolean forceCapture) throws ApiException {
        okhttp3.Call localVarCall = autoCapturePaymentsValidateBeforeCall(orderId, forceCapture, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Auto Capture Payments (asynchronously)
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * @param orderId Unique identifier of the order you want to auto capture. (required)
     * @param forceCapture Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoCapturePaymentsAsync(String orderId, Boolean forceCapture, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoCapturePaymentsValidateBeforeCall(orderId, forceCapture, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelOrder
     * @param orderId  (required)
     * @param commerceRuntimeCanceledReason  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderCall(String orderId, CommerceRuntimeCanceledReason commerceRuntimeCanceledReason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeCanceledReason;

        // create path and map variables
        String localVarPath = "/commerce/orders/cancel/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrderValidateBeforeCall(String orderId, CommerceRuntimeCanceledReason commerceRuntimeCanceledReason, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrder(Async)");
        }
        

        okhttp3.Call localVarCall = cancelOrderCall(orderId, commerceRuntimeCanceledReason, _callback);
        return localVarCall;

    }

    /**
     * Cancel Order
     * Cancel an order with the cancel reason.
     * @param orderId  (required)
     * @param commerceRuntimeCanceledReason  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order cancelOrder(String orderId, CommerceRuntimeCanceledReason commerceRuntimeCanceledReason) throws ApiException {
        ApiResponse<Order> localVarResp = cancelOrderWithHttpInfo(orderId, commerceRuntimeCanceledReason);
        return localVarResp.getData();
    }

    /**
     * Cancel Order
     * Cancel an order with the cancel reason.
     * @param orderId  (required)
     * @param commerceRuntimeCanceledReason  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> cancelOrderWithHttpInfo(String orderId, CommerceRuntimeCanceledReason commerceRuntimeCanceledReason) throws ApiException {
        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(orderId, commerceRuntimeCanceledReason, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel Order (asynchronously)
     * Cancel an order with the cancel reason.
     * @param orderId  (required)
     * @param commerceRuntimeCanceledReason  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderAsync(String orderId, CommerceRuntimeCanceledReason commerceRuntimeCanceledReason, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(orderId, commerceRuntimeCanceledReason, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeOrderPriceList
     * @param orderId Unique identifier of the order to change (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body The code for the pricelist to apply (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderPriceListCall(String orderId, String updateMode, String version, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/priceList"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderPriceListValidateBeforeCall(String orderId, String updateMode, String version, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling changeOrderPriceList(Async)");
        }
        

        okhttp3.Call localVarCall = changeOrderPriceListCall(orderId, updateMode, version, body, _callback);
        return localVarCall;

    }

    /**
     * Change Order Price List
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * @param orderId Unique identifier of the order to change (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body The code for the pricelist to apply (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order changeOrderPriceList(String orderId, String updateMode, String version, String body) throws ApiException {
        ApiResponse<Order> localVarResp = changeOrderPriceListWithHttpInfo(orderId, updateMode, version, body);
        return localVarResp.getData();
    }

    /**
     * Change Order Price List
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * @param orderId Unique identifier of the order to change (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body The code for the pricelist to apply (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> changeOrderPriceListWithHttpInfo(String orderId, String updateMode, String version, String body) throws ApiException {
        okhttp3.Call localVarCall = changeOrderPriceListValidateBeforeCall(orderId, updateMode, version, body, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Order Price List (asynchronously)
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * @param orderId Unique identifier of the order to change (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body The code for the pricelist to apply (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderPriceListAsync(String orderId, String updateMode, String version, String body, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderPriceListValidateBeforeCall(orderId, updateMode, version, body, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeOrderUserId
     * @param orderId Unique identifier of the order to change. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderUserIdCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/users"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeOrderUserIdValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling changeOrderUserId(Async)");
        }
        

        okhttp3.Call localVarCall = changeOrderUserIdCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Change Order UserId
     * Changes the User ID associated with an order.
     * @param orderId Unique identifier of the order to change. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order changeOrderUserId(String orderId) throws ApiException {
        ApiResponse<Order> localVarResp = changeOrderUserIdWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Change Order UserId
     * Changes the User ID associated with an order.
     * @param orderId Unique identifier of the order to change. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> changeOrderUserIdWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = changeOrderUserIdValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Order UserId (asynchronously)
     * Changes the User ID associated with an order.
     * @param orderId Unique identifier of the order to change. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeOrderUserIdAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeOrderUserIdValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDigitalPackage
     * @param orderId Unique identifier of the order with which to associate the digital package. (required)
     * @param digitalPackage Digital Package to create and add to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDigitalPackageCall(String orderId, DigitalPackage digitalPackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = digitalPackage;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalpackages"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDigitalPackageValidateBeforeCall(String orderId, DigitalPackage digitalPackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createDigitalPackage(Async)");
        }
        

        okhttp3.Call localVarCall = createDigitalPackageCall(orderId, digitalPackage, _callback);
        return localVarCall;

    }

    /**
     * Create Digital Package
     * Apply a digital package to the order.
     * @param orderId Unique identifier of the order with which to associate the digital package. (required)
     * @param digitalPackage Digital Package to create and add to the order (optional)
     * @return DigitalPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DigitalPackage createDigitalPackage(String orderId, DigitalPackage digitalPackage) throws ApiException {
        ApiResponse<DigitalPackage> localVarResp = createDigitalPackageWithHttpInfo(orderId, digitalPackage);
        return localVarResp.getData();
    }

    /**
     * Create Digital Package
     * Apply a digital package to the order.
     * @param orderId Unique identifier of the order with which to associate the digital package. (required)
     * @param digitalPackage Digital Package to create and add to the order (optional)
     * @return ApiResponse&lt;DigitalPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalPackage> createDigitalPackageWithHttpInfo(String orderId, DigitalPackage digitalPackage) throws ApiException {
        okhttp3.Call localVarCall = createDigitalPackageValidateBeforeCall(orderId, digitalPackage, null);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Digital Package (asynchronously)
     * Apply a digital package to the order.
     * @param orderId Unique identifier of the order with which to associate the digital package. (required)
     * @param digitalPackage Digital Package to create and add to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDigitalPackageAsync(String orderId, DigitalPackage digitalPackage, final ApiCallback<DigitalPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDigitalPackageValidateBeforeCall(orderId, digitalPackage, _callback);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrder
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param quoteId Unique identifier of the quote. (optional)
     * @param order All properties of the order to place. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(String cartId, String quoteId, Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/commerce/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cartId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cartId", cartId));
        }

        if (quoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteId", quoteId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(String cartId, String quoteId, Order order, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createOrderCall(cartId, quoteId, order, _callback);
        return localVarCall;

    }

    /**
     * Create Order
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param quoteId Unique identifier of the quote. (optional)
     * @param order All properties of the order to place. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order createOrder(String cartId, String quoteId, Order order) throws ApiException {
        ApiResponse<Order> localVarResp = createOrderWithHttpInfo(cartId, quoteId, order);
        return localVarResp.getData();
    }

    /**
     * Create Order
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param quoteId Unique identifier of the quote. (optional)
     * @param order All properties of the order to place. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createOrderWithHttpInfo(String cartId, String quoteId, Order order) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(cartId, quoteId, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order (asynchronously)
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param quoteId Unique identifier of the quote. (optional)
     * @param order All properties of the order to place. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(String cartId, String quoteId, Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(cartId, quoteId, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrderAttributes
     * @param orderId Unique identifier of the order to which you want to add a attributeSet. (required)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAttributesCall(String orderId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderAttribute;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/attributes"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderAttributesValidateBeforeCall(String orderId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createOrderAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderAttributesCall(orderId, commerceRuntimeOrderAttribute, _callback);
        return localVarCall;

    }

    /**
     * Create Order Attributes
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a attributeSet. (required)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> createOrderAttributes(String orderId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = createOrderAttributesWithHttpInfo(orderId, commerceRuntimeOrderAttribute);
        return localVarResp.getData();
    }

    /**
     * Create Order Attributes
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a attributeSet. (required)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> createOrderAttributesWithHttpInfo(String orderId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        okhttp3.Call localVarCall = createOrderAttributesValidateBeforeCall(orderId, commerceRuntimeOrderAttribute, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order Attributes (asynchronously)
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a attributeSet. (required)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAttributesAsync(String orderId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderAttributesValidateBeforeCall(orderId, commerceRuntimeOrderAttribute, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrderItem
     * @param orderId ID of the order to add an item to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param skipInventoryCheck Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order (optional)
     * @param zipCode  (optional)
     * @param commerceRuntimeOrderItem All properties of the new cart item. Required property: Product.ProductCode. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderItemCall(String orderId, String updateMode, String version, Boolean skipInventoryCheck, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderItem;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (skipInventoryCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipInventoryCheck", skipInventoryCheck));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderItemValidateBeforeCall(String orderId, String updateMode, String version, Boolean skipInventoryCheck, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createOrderItem(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderItemCall(orderId, updateMode, version, skipInventoryCheck, zipCode, commerceRuntimeOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Create Order Item
     * Adds a product or other item to the cart of the current shopper.
     * @param orderId ID of the order to add an item to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param skipInventoryCheck Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order (optional)
     * @param zipCode  (optional)
     * @param commerceRuntimeOrderItem All properties of the new cart item. Required property: Product.ProductCode. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order createOrderItem(String orderId, String updateMode, String version, Boolean skipInventoryCheck, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        ApiResponse<Order> localVarResp = createOrderItemWithHttpInfo(orderId, updateMode, version, skipInventoryCheck, zipCode, commerceRuntimeOrderItem);
        return localVarResp.getData();
    }

    /**
     * Create Order Item
     * Adds a product or other item to the cart of the current shopper.
     * @param orderId ID of the order to add an item to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param skipInventoryCheck Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order (optional)
     * @param zipCode  (optional)
     * @param commerceRuntimeOrderItem All properties of the new cart item. Required property: Product.ProductCode. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createOrderItemWithHttpInfo(String orderId, String updateMode, String version, Boolean skipInventoryCheck, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        okhttp3.Call localVarCall = createOrderItemValidateBeforeCall(orderId, updateMode, version, skipInventoryCheck, zipCode, commerceRuntimeOrderItem, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order Item (asynchronously)
     * Adds a product or other item to the cart of the current shopper.
     * @param orderId ID of the order to add an item to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param skipInventoryCheck Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order (optional)
     * @param zipCode  (optional)
     * @param commerceRuntimeOrderItem All properties of the new cart item. Required property: Product.ProductCode. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderItemAsync(String orderId, String updateMode, String version, Boolean skipInventoryCheck, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderItemValidateBeforeCall(orderId, updateMode, version, skipInventoryCheck, zipCode, commerceRuntimeOrderItem, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrderNote
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderNoteCall(String orderId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderNote;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/notes"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderNoteValidateBeforeCall(String orderId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createOrderNote(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderNoteCall(orderId, orderNote, _callback);
        return localVarCall;

    }

    /**
     * Create Order Note
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote createOrderNote(String orderId, OrderNote orderNote) throws ApiException {
        ApiResponse<OrderNote> localVarResp = createOrderNoteWithHttpInfo(orderId, orderNote);
        return localVarResp.getData();
    }

    /**
     * Create Order Note
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> createOrderNoteWithHttpInfo(String orderId, OrderNote orderNote) throws ApiException {
        okhttp3.Call localVarCall = createOrderNoteValidateBeforeCall(orderId, orderNote, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order Note (asynchronously)
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param orderNote Text of the note. Maximum 256 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderNoteAsync(String orderId, OrderNote orderNote, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderNoteValidateBeforeCall(orderId, orderNote, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageCall(String orderId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimePackage;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPackageValidateBeforeCall(String orderId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createPackage(Async)");
        }
        

        okhttp3.Call localVarCall = createPackageCall(orderId, commerceRuntimePackage, _callback);
        return localVarCall;

    }

    /**
     * Apply a package to the order
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the order (optional)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage createPackage(String orderId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = createPackageWithHttpInfo(orderId, commerceRuntimePackage);
        return localVarResp.getData();
    }

    /**
     * Apply a package to the order
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the order (optional)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> createPackageWithHttpInfo(String orderId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        okhttp3.Call localVarCall = createPackageValidateBeforeCall(orderId, commerceRuntimePackage, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply a package to the order (asynchronously)
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param commerceRuntimePackage Package to create and add to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageAsync(String orderId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPackageValidateBeforeCall(orderId, commerceRuntimePackage, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPackageShipments
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageShipmentsCall(String orderId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPackageShipmentsValidateBeforeCall(String orderId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createPackageShipments(Async)");
        }
        

        okhttp3.Call localVarCall = createPackageShipmentsCall(orderId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     * 
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @return List&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimePackage> createPackageShipments(String orderId, List<String> requestBody) throws ApiException {
        ApiResponse<List<CommerceRuntimePackage>> localVarResp = createPackageShipmentsWithHttpInfo(orderId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments
     * 
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimePackage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimePackage>> createPackageShipmentsWithHttpInfo(String orderId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createPackageShipmentsValidateBeforeCall(orderId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimePackage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a shipment by grouping together multiple packages into logical shipments (asynchronously)
     * 
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param requestBody Package ids to use in creating shipments. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPackageShipmentsAsync(String orderId, List<String> requestBody, final ApiCallback<List<CommerceRuntimePackage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPackageShipmentsValidateBeforeCall(orderId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimePackage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentAction
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionCall(String orderId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentActionValidateBeforeCall(String orderId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createPaymentAction(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentActionCall(orderId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order createPaymentAction(String orderId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<Order> localVarResp = createPaymentActionWithHttpInfo(orderId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Create Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createPaymentActionWithHttpInfo(String orderId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = createPaymentActionValidateBeforeCall(orderId, paymentAction, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Action (asynchronously)
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionAsync(String orderId, PaymentAction paymentAction, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentActionValidateBeforeCall(orderId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPickup
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickup Pickup to create and add to the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPickupCall(String orderId, Pickup pickup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pickup;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/pickups"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPickupValidateBeforeCall(String orderId, Pickup pickup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createPickup(Async)");
        }
        

        okhttp3.Call localVarCall = createPickupCall(orderId, pickup, _callback);
        return localVarCall;

    }

    /**
     * Create Pickup
     * Apply a pickup to the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickup Pickup to create and add to the order (optional)
     * @return Pickup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Pickup createPickup(String orderId, Pickup pickup) throws ApiException {
        ApiResponse<Pickup> localVarResp = createPickupWithHttpInfo(orderId, pickup);
        return localVarResp.getData();
    }

    /**
     * Create Pickup
     * Apply a pickup to the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickup Pickup to create and add to the order (optional)
     * @return ApiResponse&lt;Pickup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pickup> createPickupWithHttpInfo(String orderId, Pickup pickup) throws ApiException {
        okhttp3.Call localVarCall = createPickupValidateBeforeCall(orderId, pickup, null);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Pickup (asynchronously)
     * Apply a pickup to the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickup Pickup to create and add to the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPickupAsync(String orderId, Pickup pickup, final ApiCallback<Pickup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPickupValidateBeforeCall(orderId, pickup, _callback);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRefund
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param refund Refund to create on the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRefundCall(String orderId, Refund refund, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refund;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/refunds"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRefundValidateBeforeCall(String orderId, Refund refund, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling createRefund(Async)");
        }
        

        okhttp3.Call localVarCall = createRefundCall(orderId, refund, _callback);
        return localVarCall;

    }

    /**
     * Create Refund
     * Apply a refund to the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param refund Refund to create on the order (optional)
     * @return Refund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Refund createRefund(String orderId, Refund refund) throws ApiException {
        ApiResponse<Refund> localVarResp = createRefundWithHttpInfo(orderId, refund);
        return localVarResp.getData();
    }

    /**
     * Create Refund
     * Apply a refund to the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param refund Refund to create on the order (optional)
     * @return ApiResponse&lt;Refund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Refund> createRefundWithHttpInfo(String orderId, Refund refund) throws ApiException {
        okhttp3.Call localVarCall = createRefundValidateBeforeCall(orderId, refund, null);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Refund (asynchronously)
     * Apply a refund to the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param refund Refund to create on the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRefundAsync(String orderId, Refund refund, final ApiCallback<Refund> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRefundValidateBeforeCall(orderId, refund, _callback);
        Type localVarReturnType = new TypeToken<Refund>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDigitalPackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital package to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDigitalPackageCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "digitalPackageId" + "\\}", localVarApiClient.escapeString(digitalPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDigitalPackageValidateBeforeCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteDigitalPackage(Async)");
        }
        
        // verify the required parameter 'digitalPackageId' is set
        if (digitalPackageId == null) {
            throw new ApiException("Missing the required parameter 'digitalPackageId' when calling deleteDigitalPackage(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDigitalPackageCall(orderId, digitalPackageId, _callback);
        return localVarCall;

    }

    /**
     * Delete Digital Package
     * Delete an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital package to remove from the order (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDigitalPackage(String orderId, String digitalPackageId) throws ApiException {
        deleteDigitalPackageWithHttpInfo(orderId, digitalPackageId);
    }

    /**
     * Delete Digital Package
     * Delete an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital package to remove from the order (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDigitalPackageWithHttpInfo(String orderId, String digitalPackageId) throws ApiException {
        okhttp3.Call localVarCall = deleteDigitalPackageValidateBeforeCall(orderId, digitalPackageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Digital Package (asynchronously)
     * Delete an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital package to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDigitalPackageAsync(String orderId, String digitalPackageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDigitalPackageValidateBeforeCall(orderId, digitalPackageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtendedProperties
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param requestBody Keys of extended properties (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtendedPropertiesCall(String orderId, String updateMode, String version, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtendedPropertiesValidateBeforeCall(String orderId, String updateMode, String version, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteExtendedProperties(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExtendedPropertiesCall(orderId, updateMode, version, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Delete Extended Properties
     * Delete extended properties on the order.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param requestBody Keys of extended properties (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExtendedProperties(String orderId, String updateMode, String version, List<String> requestBody) throws ApiException {
        deleteExtendedPropertiesWithHttpInfo(orderId, updateMode, version, requestBody);
    }

    /**
     * Delete Extended Properties
     * Delete extended properties on the order.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param requestBody Keys of extended properties (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExtendedPropertiesWithHttpInfo(String orderId, String updateMode, String version, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Extended Properties (asynchronously)
     * Delete extended properties on the order.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param requestBody Keys of extended properties (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtendedPropertiesAsync(String orderId, String updateMode, String version, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtendedProperty
     * @param orderId  (required)
     * @param key Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtendedPropertyCall(String orderId, String key, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties/{key}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtendedPropertyValidateBeforeCall(String orderId, String key, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteExtendedProperty(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteExtendedProperty(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExtendedPropertyCall(orderId, key, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Delete Extended Property
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param key Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExtendedProperty(String orderId, String key, String updateMode, String version) throws ApiException {
        deleteExtendedPropertyWithHttpInfo(orderId, key, updateMode, version);
    }

    /**
     * Delete Extended Property
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param key Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExtendedPropertyWithHttpInfo(String orderId, String key, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteExtendedPropertyValidateBeforeCall(orderId, key, updateMode, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Extended Property (asynchronously)
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param key Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtendedPropertyAsync(String orderId, String key, String updateMode, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtendedPropertyValidateBeforeCall(orderId, key, updateMode, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderDraft
     * @param orderId The order ID to update. (required)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderDraftCall(String orderId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/draft"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderDraftValidateBeforeCall(String orderId, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderDraft(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderDraftCall(orderId, version, _callback);
        return localVarCall;

    }

    /**
     * Delete Order Draft
     * Deletes a draft version of an order.
     * @param orderId The order ID to update. (required)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrderDraft(String orderId, String version) throws ApiException {
        deleteOrderDraftWithHttpInfo(orderId, version);
    }

    /**
     * Delete Order Draft
     * Deletes a draft version of an order.
     * @param orderId The order ID to update. (required)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrderDraftWithHttpInfo(String orderId, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderDraftValidateBeforeCall(orderId, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Order Draft (asynchronously)
     * Deletes a draft version of an order.
     * @param orderId The order ID to update. (required)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderDraftAsync(String orderId, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderDraftValidateBeforeCall(orderId, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderItem
     * @param orderId  (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderItemCall(String orderId, String orderItemId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderItemValidateBeforeCall(String orderId, String orderItemId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderItem(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling deleteOrderItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderItemCall(orderId, orderItemId, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Delete Order Item
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order deleteOrderItem(String orderId, String orderItemId, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = deleteOrderItemWithHttpInfo(orderId, orderItemId, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Delete Order Item
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> deleteOrderItemWithHttpInfo(String orderId, String orderItemId, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderItemValidateBeforeCall(orderId, orderItemId, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Order Item (asynchronously)
     * Removes a particular order item from the order of the current shopper.
     * @param orderId  (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderItemAsync(String orderId, String orderItemId, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderItemValidateBeforeCall(orderId, orderItemId, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderNote
     * @param orderId Unique identifier of the order whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderNoteCall(String orderId, String noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/notes/{noteId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderNoteValidateBeforeCall(String orderId, String noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteOrderNote(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderNoteCall(orderId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Delete Order Note
     * Deletes a specific order note on an order.
     * @param orderId Unique identifier of the order whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrderNote(String orderId, String noteId) throws ApiException {
        deleteOrderNoteWithHttpInfo(orderId, noteId);
    }

    /**
     * Delete Order Note
     * Deletes a specific order note on an order.
     * @param orderId Unique identifier of the order whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrderNoteWithHttpInfo(String orderId, String noteId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderNoteValidateBeforeCall(orderId, noteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Order Note (asynchronously)
     * Deletes a specific order note on an order.
     * @param orderId Unique identifier of the order whose note you want to delete. (required)
     * @param noteId Unique identifier of the note whose text you want to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderNoteAsync(String orderId, String noteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderNoteValidateBeforeCall(orderId, noteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages/{packageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePackageValidateBeforeCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deletePackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling deletePackage(Async)");
        }
        

        okhttp3.Call localVarCall = deletePackageCall(orderId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Delete an order package
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePackage(String orderId, String packageId) throws ApiException {
        deletePackageWithHttpInfo(orderId, packageId);
    }

    /**
     * Delete an order package
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePackageWithHttpInfo(String orderId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = deletePackageValidateBeforeCall(orderId, packageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an order package (asynchronously)
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePackageAsync(String orderId, String packageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePackageValidateBeforeCall(orderId, packageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePickup
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePickupCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/pickups/{pickupId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "pickupId" + "\\}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePickupValidateBeforeCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deletePickup(Async)");
        }
        
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling deletePickup(Async)");
        }
        

        okhttp3.Call localVarCall = deletePickupCall(orderId, pickupId, _callback);
        return localVarCall;

    }

    /**
     * Delete Pickup
     * Delete an order pickup.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePickup(String orderId, String pickupId) throws ApiException {
        deletePickupWithHttpInfo(orderId, pickupId);
    }

    /**
     * Delete Pickup
     * Delete an order pickup.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePickupWithHttpInfo(String orderId, String pickupId) throws ApiException {
        okhttp3.Call localVarCall = deletePickupValidateBeforeCall(orderId, pickupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Pickup (asynchronously)
     * Delete an order pickup.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePickupAsync(String orderId, String pickupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePickupValidateBeforeCall(orderId, pickupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteShipment
     * @param orderId  (required)
     * @param shipmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShipmentCall(String orderId, String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "shipmentId" + "\\}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShipmentValidateBeforeCall(String orderId, String shipmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteShipment(Async)");
        }
        
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling deleteShipment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteShipmentCall(orderId, shipmentId, _callback);
        return localVarCall;

    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     * @param orderId  (required)
     * @param shipmentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteShipment(String orderId, String shipmentId) throws ApiException {
        deleteShipmentWithHttpInfo(orderId, shipmentId);
    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     * @param orderId  (required)
     * @param shipmentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteShipmentWithHttpInfo(String orderId, String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteShipmentValidateBeforeCall(orderId, shipmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an existing order shipment (asynchronously)
     * Deletes an existing order shipment
     * @param orderId  (required)
     * @param shipmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteShipmentAsync(String orderId, String shipmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShipmentValidateBeforeCall(orderId, shipmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluateOrderRollupStatus
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateOrderRollupStatusCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/evaluaterollupstatus"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateOrderRollupStatusValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling evaluateOrderRollupStatus(Async)");
        }
        

        okhttp3.Call localVarCall = evaluateOrderRollupStatusCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     * @param orderId  (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order evaluateOrderRollupStatus(String orderId) throws ApiException {
        ApiResponse<Order> localVarResp = evaluateOrderRollupStatusWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     * @param orderId  (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> evaluateOrderRollupStatusWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = evaluateOrderRollupStatusValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate Order Rollup Status (asynchronously)
     * Evaluate Order Rollup Status
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateOrderRollupStatusAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateOrderRollupStatusValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableActions
     * @param orderId Unique identifier of the order whose available order actions you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableActionsCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableActionsValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailableActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableActionsCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Actions
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * @param orderId Unique identifier of the order whose available order actions you want to get. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailableActions(String orderId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailableActionsWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Available Actions
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * @param orderId Unique identifier of the order whose available order actions you want to get. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailableActionsWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableActionsValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Actions (asynchronously)
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * @param orderId Unique identifier of the order whose available order actions you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableActionsAsync(String orderId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableActionsValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableDigitalPackageFulfillmentActions
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param digitalPackageId Package ID to get fulfillment actions for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableDigitalPackageFulfillmentActionsCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "digitalPackageId" + "\\}", localVarApiClient.escapeString(digitalPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableDigitalPackageFulfillmentActionsValidateBeforeCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailableDigitalPackageFulfillmentActions(Async)");
        }
        
        // verify the required parameter 'digitalPackageId' is set
        if (digitalPackageId == null) {
            throw new ApiException("Missing the required parameter 'digitalPackageId' when calling getAvailableDigitalPackageFulfillmentActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableDigitalPackageFulfillmentActionsCall(orderId, digitalPackageId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Digital Package Fulfillment Actions
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param digitalPackageId Package ID to get fulfillment actions for. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailableDigitalPackageFulfillmentActions(String orderId, String digitalPackageId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailableDigitalPackageFulfillmentActionsWithHttpInfo(orderId, digitalPackageId);
        return localVarResp.getData();
    }

    /**
     * Get Available Digital Package Fulfillment Actions
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param digitalPackageId Package ID to get fulfillment actions for. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailableDigitalPackageFulfillmentActionsWithHttpInfo(String orderId, String digitalPackageId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableDigitalPackageFulfillmentActionsValidateBeforeCall(orderId, digitalPackageId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Digital Package Fulfillment Actions (asynchronously)
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param digitalPackageId Package ID to get fulfillment actions for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableDigitalPackageFulfillmentActionsAsync(String orderId, String digitalPackageId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableDigitalPackageFulfillmentActionsValidateBeforeCall(orderId, digitalPackageId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailablePackageFulfillmentActions
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param packageId Package ID to get fulfillment actions for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePackageFulfillmentActionsCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages/{packageId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailablePackageFulfillmentActionsValidateBeforeCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailablePackageFulfillmentActions(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getAvailablePackageFulfillmentActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailablePackageFulfillmentActionsCall(orderId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves available fulfillment actions
     * 
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param packageId Package ID to get fulfillment actions for. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailablePackageFulfillmentActions(String orderId, String packageId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailablePackageFulfillmentActionsWithHttpInfo(orderId, packageId);
        return localVarResp.getData();
    }

    /**
     * Retrieves available fulfillment actions
     * 
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param packageId Package ID to get fulfillment actions for. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailablePackageFulfillmentActionsWithHttpInfo(String orderId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = getAvailablePackageFulfillmentActionsValidateBeforeCall(orderId, packageId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves available fulfillment actions (asynchronously)
     * 
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param packageId Package ID to get fulfillment actions for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePackageFulfillmentActionsAsync(String orderId, String packageId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailablePackageFulfillmentActionsValidateBeforeCall(orderId, packageId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailablePaymentActions
     * @param orderId Unique identifier of the order whose available payment actions you want to get. (required)
     * @param paymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePaymentActionsCall(String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments/{paymentId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailablePaymentActionsValidateBeforeCall(String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailablePaymentActions(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getAvailablePaymentActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailablePaymentActionsCall(orderId, paymentId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Payment Actions
     * Retrieves available payment actions which depends on the status of the order&#39;s payment transaction.   Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     * @param orderId Unique identifier of the order whose available payment actions you want to get. (required)
     * @param paymentId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailablePaymentActions(String orderId, String paymentId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailablePaymentActionsWithHttpInfo(orderId, paymentId);
        return localVarResp.getData();
    }

    /**
     * Get Available Payment Actions
     * Retrieves available payment actions which depends on the status of the order&#39;s payment transaction.   Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     * @param orderId Unique identifier of the order whose available payment actions you want to get. (required)
     * @param paymentId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailablePaymentActionsWithHttpInfo(String orderId, String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getAvailablePaymentActionsValidateBeforeCall(orderId, paymentId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Payment Actions (asynchronously)
     * Retrieves available payment actions which depends on the status of the order&#39;s payment transaction.   Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     * @param orderId Unique identifier of the order whose available payment actions you want to get. (required)
     * @param paymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePaymentActionsAsync(String orderId, String paymentId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailablePaymentActionsValidateBeforeCall(orderId, paymentId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailablePickupFulfillmentActions
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param pickupId Pickup ID to get fulfillment actions for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePickupFulfillmentActionsCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/pickups/{pickupId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "pickupId" + "\\}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailablePickupFulfillmentActionsValidateBeforeCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailablePickupFulfillmentActions(Async)");
        }
        
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling getAvailablePickupFulfillmentActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailablePickupFulfillmentActionsCall(orderId, pickupId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Pickup Fulfillment Actions
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param pickupId Pickup ID to get fulfillment actions for. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailablePickupFulfillmentActions(String orderId, String pickupId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailablePickupFulfillmentActionsWithHttpInfo(orderId, pickupId);
        return localVarResp.getData();
    }

    /**
     * Get Available Pickup Fulfillment Actions
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param pickupId Pickup ID to get fulfillment actions for. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailablePickupFulfillmentActionsWithHttpInfo(String orderId, String pickupId) throws ApiException {
        okhttp3.Call localVarCall = getAvailablePickupFulfillmentActionsValidateBeforeCall(orderId, pickupId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Pickup Fulfillment Actions (asynchronously)
     * Retrieves available fulfillment actions.
     * @param orderId Unique identifier of the order on which to get a list of available actions. (required)
     * @param pickupId Pickup ID to get fulfillment actions for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailablePickupFulfillmentActionsAsync(String orderId, String pickupId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailablePickupFulfillmentActionsValidateBeforeCall(orderId, pickupId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableShipmentMethods
     * @param orderId Unique identifier of the order whose shipping methods you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShipmentMethodsCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/methods"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableShipmentMethodsValidateBeforeCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getAvailableShipmentMethods(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableShipmentMethodsCall(orderId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Available Shipment Methods
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * @param orderId Unique identifier of the order whose shipping methods you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available. (optional)
     * @return List&lt;CommerceRuntimeShippingRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeShippingRate> getAvailableShipmentMethods(String orderId, Boolean draft) throws ApiException {
        ApiResponse<List<CommerceRuntimeShippingRate>> localVarResp = getAvailableShipmentMethodsWithHttpInfo(orderId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Available Shipment Methods
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * @param orderId Unique identifier of the order whose shipping methods you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available. (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeShippingRate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeShippingRate>> getAvailableShipmentMethodsWithHttpInfo(String orderId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getAvailableShipmentMethodsValidateBeforeCall(orderId, draft, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Shipment Methods (asynchronously)
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * @param orderId Unique identifier of the order whose shipping methods you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShipmentMethodsAsync(String orderId, Boolean draft, final ApiCallback<List<CommerceRuntimeShippingRate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableShipmentMethodsValidateBeforeCall(orderId, draft, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBillingInfo
     * @param orderId Unique identifer of the order whose customer&#39;s payment source you want to get. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingInfoCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/billinginfo"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBillingInfoValidateBeforeCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getBillingInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getBillingInfoCall(orderId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Billing Info
     * Retrieves the customer&#39;s billing address.If paying by credit card, it retrieves the card&#39;s number, expiration date, card holder&#39;s name and billing address.
     * @param orderId Unique identifer of the order whose customer&#39;s payment source you want to get. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @return BillingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BillingInfo getBillingInfo(String orderId, Boolean draft) throws ApiException {
        ApiResponse<BillingInfo> localVarResp = getBillingInfoWithHttpInfo(orderId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Billing Info
     * Retrieves the customer&#39;s billing address.If paying by credit card, it retrieves the card&#39;s number, expiration date, card holder&#39;s name and billing address.
     * @param orderId Unique identifer of the order whose customer&#39;s payment source you want to get. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @return ApiResponse&lt;BillingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingInfo> getBillingInfoWithHttpInfo(String orderId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getBillingInfoValidateBeforeCall(orderId, draft, null);
        Type localVarReturnType = new TypeToken<BillingInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Billing Info (asynchronously)
     * Retrieves the customer&#39;s billing address.If paying by credit card, it retrieves the card&#39;s number, expiration date, card holder&#39;s name and billing address.
     * @param orderId Unique identifer of the order whose customer&#39;s payment source you want to get. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBillingInfoAsync(String orderId, Boolean draft, final ApiCallback<BillingInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBillingInfoValidateBeforeCall(orderId, draft, _callback);
        Type localVarReturnType = new TypeToken<BillingInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDigitalPackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital Package Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalPackageCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "digitalPackageId" + "\\}", localVarApiClient.escapeString(digitalPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDigitalPackageValidateBeforeCall(String orderId, String digitalPackageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getDigitalPackage(Async)");
        }
        
        // verify the required parameter 'digitalPackageId' is set
        if (digitalPackageId == null) {
            throw new ApiException("Missing the required parameter 'digitalPackageId' when calling getDigitalPackage(Async)");
        }
        

        okhttp3.Call localVarCall = getDigitalPackageCall(orderId, digitalPackageId, _callback);
        return localVarCall;

    }

    /**
     * Get Digital Package
     * Get an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital Package Id (required)
     * @return DigitalPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DigitalPackage getDigitalPackage(String orderId, String digitalPackageId) throws ApiException {
        ApiResponse<DigitalPackage> localVarResp = getDigitalPackageWithHttpInfo(orderId, digitalPackageId);
        return localVarResp.getData();
    }

    /**
     * Get Digital Package
     * Get an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital Package Id (required)
     * @return ApiResponse&lt;DigitalPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalPackage> getDigitalPackageWithHttpInfo(String orderId, String digitalPackageId) throws ApiException {
        okhttp3.Call localVarCall = getDigitalPackageValidateBeforeCall(orderId, digitalPackageId, null);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Digital Package (asynchronously)
     * Get an order digital package.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Digital Package Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDigitalPackageAsync(String orderId, String digitalPackageId, final ApiCallback<DigitalPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDigitalPackageValidateBeforeCall(orderId, digitalPackageId, _callback);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtendedProperties
     * @param orderId  (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtendedPropertiesCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtendedPropertiesValidateBeforeCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getExtendedProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getExtendedPropertiesCall(orderId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Extended Properties
     * Get extended properties on an order.
     * @param orderId  (required)
     * @param draft  (optional)
     * @return List&lt;ExtendedProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ExtendedProperty> getExtendedProperties(String orderId, Boolean draft) throws ApiException {
        ApiResponse<List<ExtendedProperty>> localVarResp = getExtendedPropertiesWithHttpInfo(orderId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Extended Properties
     * Get extended properties on an order.
     * @param orderId  (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;List&lt;ExtendedProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExtendedProperty>> getExtendedPropertiesWithHttpInfo(String orderId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getExtendedPropertiesValidateBeforeCall(orderId, draft, null);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Extended Properties (asynchronously)
     * Get extended properties on an order.
     * @param orderId  (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtendedPropertiesAsync(String orderId, Boolean draft, final ApiCallback<List<ExtendedProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtendedPropertiesValidateBeforeCall(orderId, draft, _callback);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFulfillmentInfo
     * @param orderId Unique identifier of the order. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFulfillmentInfoCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/fulfillmentinfo"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFulfillmentInfoValidateBeforeCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getFulfillmentInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getFulfillmentInfoCall(orderId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Fulfillment Info
     * Retrieves an order&#39;s fulfillment information specified by order ID.
     * @param orderId Unique identifier of the order. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @return FulfillmentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FulfillmentInfo getFulfillmentInfo(String orderId, Boolean draft) throws ApiException {
        ApiResponse<FulfillmentInfo> localVarResp = getFulfillmentInfoWithHttpInfo(orderId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Fulfillment Info
     * Retrieves an order&#39;s fulfillment information specified by order ID.
     * @param orderId Unique identifier of the order. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @return ApiResponse&lt;FulfillmentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FulfillmentInfo> getFulfillmentInfoWithHttpInfo(String orderId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getFulfillmentInfoValidateBeforeCall(orderId, draft, null);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Fulfillment Info (asynchronously)
     * Retrieves an order&#39;s fulfillment information specified by order ID.
     * @param orderId Unique identifier of the order. (required)
     * @param draft Determines whether the draft version should be retrieved if one exists. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFulfillmentInfoAsync(String orderId, Boolean draft, final ApiCallback<FulfillmentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFulfillmentInfoValidateBeforeCall(orderId, draft, _callback);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     * @param orderId Unique identifier of the order whose details you want. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCall(String orderId, Boolean draft, Boolean includeBin, String mode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        if (includeBin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBin", includeBin));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(String orderId, Boolean draft, Boolean includeBin, String mode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderCall(orderId, draft, includeBin, mode, _callback);
        return localVarCall;

    }

    /**
     * Get Order
     * Retrieves the details of an order specified by the order ID.
     * @param orderId Unique identifier of the order whose details you want. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order getOrder(String orderId, Boolean draft, Boolean includeBin, String mode) throws ApiException {
        ApiResponse<Order> localVarResp = getOrderWithHttpInfo(orderId, draft, includeBin, mode);
        return localVarResp.getData();
    }

    /**
     * Get Order
     * Retrieves the details of an order specified by the order ID.
     * @param orderId Unique identifier of the order whose details you want. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> getOrderWithHttpInfo(String orderId, Boolean draft, Boolean includeBin, String mode) throws ApiException {
        okhttp3.Call localVarCall = getOrderValidateBeforeCall(orderId, draft, includeBin, mode, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order (asynchronously)
     * Retrieves the details of an order specified by the order ID.
     * @param orderId Unique identifier of the order whose details you want. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAsync(String orderId, Boolean draft, Boolean includeBin, String mode, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderValidateBeforeCall(orderId, draft, includeBin, mode, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderAttributes
     * @param orderId Unique identifier of the order whose attributeSets you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAttributesCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/attributes"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderAttributesValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderAttributesCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Order Attributes
     * Retrieves a list of all attribute sets for an order.
     * @param orderId Unique identifier of the order whose attributeSets you want to get. (required)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> getOrderAttributes(String orderId) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = getOrderAttributesWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Order Attributes
     * Retrieves a list of all attribute sets for an order.
     * @param orderId Unique identifier of the order whose attributeSets you want to get. (required)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> getOrderAttributesWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderAttributesValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Attributes (asynchronously)
     * Retrieves a list of all attribute sets for an order.
     * @param orderId Unique identifier of the order whose attributeSets you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAttributesAsync(String orderId, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderAttributesValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderItem
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param orderItemId Unique identifier of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemCall(String orderId, String orderItemId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderItemValidateBeforeCall(String orderId, String orderItemId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderItem(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling getOrderItem(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderItemCall(orderId, orderItemId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Order Item
     * Retrieves the details of a single order item.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param orderItemId Unique identifier of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return CommerceRuntimeOrderItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeOrderItem getOrderItem(String orderId, String orderItemId, Boolean draft) throws ApiException {
        ApiResponse<CommerceRuntimeOrderItem> localVarResp = getOrderItemWithHttpInfo(orderId, orderItemId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Order Item
     * Retrieves the details of a single order item.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param orderItemId Unique identifier of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return ApiResponse&lt;CommerceRuntimeOrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeOrderItem> getOrderItemWithHttpInfo(String orderId, String orderItemId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getOrderItemValidateBeforeCall(orderId, orderItemId, draft, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Item (asynchronously)
     * Retrieves the details of a single order item.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param orderItemId Unique identifier of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemAsync(String orderId, String orderItemId, Boolean draft, final ApiCallback<CommerceRuntimeOrderItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderItemValidateBeforeCall(orderId, orderItemId, draft, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderItemViaLineId
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param lineId Line ID of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemViaLineIdCall(String orderId, Integer lineId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{lineId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "lineId" + "\\}", localVarApiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderItemViaLineIdValidateBeforeCall(String orderId, Integer lineId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderItemViaLineId(Async)");
        }
        
        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling getOrderItemViaLineId(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderItemViaLineIdCall(orderId, lineId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Order Item Via LineId
     * Retrieves the details of a single order item via its line id.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param lineId Line ID of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return CommerceRuntimeOrderItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeOrderItem getOrderItemViaLineId(String orderId, Integer lineId, Boolean draft) throws ApiException {
        ApiResponse<CommerceRuntimeOrderItem> localVarResp = getOrderItemViaLineIdWithHttpInfo(orderId, lineId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Order Item Via LineId
     * Retrieves the details of a single order item via its line id.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param lineId Line ID of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return ApiResponse&lt;CommerceRuntimeOrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeOrderItem> getOrderItemViaLineIdWithHttpInfo(String orderId, Integer lineId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getOrderItemViaLineIdValidateBeforeCall(orderId, lineId, draft, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Item Via LineId (asynchronously)
     * Retrieves the details of a single order item via its line id.
     * @param orderId Unique identifier of the order whose item you want to get. (required)
     * @param lineId Line ID of the order item whose details you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemViaLineIdAsync(String orderId, Integer lineId, Boolean draft, final ApiCallback<CommerceRuntimeOrderItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderItemViaLineIdValidateBeforeCall(orderId, lineId, draft, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderItems
     * @param orderId Unique identifier of the order whose items you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemsCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderItemsValidateBeforeCall(String orderId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderItems(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderItemsCall(orderId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Order Items
     * Retrieves the details of all items in an order specified by order Id.
     * @param orderId Unique identifier of the order whose items you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return OrderItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderItemCollection getOrderItems(String orderId, Boolean draft) throws ApiException {
        ApiResponse<OrderItemCollection> localVarResp = getOrderItemsWithHttpInfo(orderId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Order Items
     * Retrieves the details of all items in an order specified by order Id.
     * @param orderId Unique identifier of the order whose items you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @return ApiResponse&lt;OrderItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderItemCollection> getOrderItemsWithHttpInfo(String orderId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getOrderItemsValidateBeforeCall(orderId, draft, null);
        Type localVarReturnType = new TypeToken<OrderItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Items (asynchronously)
     * Retrieves the details of all items in an order specified by order Id.
     * @param orderId Unique identifier of the order whose items you want to get. (required)
     * @param draft Gets a draft copy of the order if one is available (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderItemsAsync(String orderId, Boolean draft, final ApiCallback<OrderItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderItemsValidateBeforeCall(orderId, draft, _callback);
        Type localVarReturnType = new TypeToken<OrderItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderNote
     * @param orderId Unique identifier of the order whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderNoteCall(String orderId, String noteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/notes/{noteId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderNoteValidateBeforeCall(String orderId, String noteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getOrderNote(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderNoteCall(orderId, noteId, _callback);
        return localVarCall;

    }

    /**
     * Get Order Note
     * Retrieves a specific order note from an order.
     * @param orderId Unique identifier of the order whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote getOrderNote(String orderId, String noteId) throws ApiException {
        ApiResponse<OrderNote> localVarResp = getOrderNoteWithHttpInfo(orderId, noteId);
        return localVarResp.getData();
    }

    /**
     * Get Order Note
     * Retrieves a specific order note from an order.
     * @param orderId Unique identifier of the order whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> getOrderNoteWithHttpInfo(String orderId, String noteId) throws ApiException {
        okhttp3.Call localVarCall = getOrderNoteValidateBeforeCall(orderId, noteId, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Note (asynchronously)
     * Retrieves a specific order note from an order.
     * @param orderId Unique identifier of the order whose note you want to get. (required)
     * @param noteId Unique identifier of the note whose text you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderNoteAsync(String orderId, String noteId, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderNoteValidateBeforeCall(orderId, noteId, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderNotes
     * @param orderId Unique identifier of the order whose notes you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderNotesCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/notes"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderNotesValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderNotes(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderNotesCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Order Notes
     * Retrieves a list of all notes for an order.
     * @param orderId Unique identifier of the order whose notes you want to get. (required)
     * @return List&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderNote> getOrderNotes(String orderId) throws ApiException {
        ApiResponse<List<OrderNote>> localVarResp = getOrderNotesWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Order Notes
     * Retrieves a list of all notes for an order.
     * @param orderId Unique identifier of the order whose notes you want to get. (required)
     * @return ApiResponse&lt;List&lt;OrderNote&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderNote>> getOrderNotesWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderNotesValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Notes (asynchronously)
     * Retrieves a list of all notes for an order.
     * @param orderId Unique identifier of the order whose notes you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderNotesAsync(String orderId, final ApiCallback<List<OrderNote>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderNotesValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<List<OrderNote>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderReturnableItems
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderReturnableItemsCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/returnableitems"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderReturnableItemsValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderReturnableItems(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderReturnableItemsCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Order Returnable Items
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * @param orderId  (required)
     * @return OrderReturnableItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderReturnableItemCollection getOrderReturnableItems(String orderId) throws ApiException {
        ApiResponse<OrderReturnableItemCollection> localVarResp = getOrderReturnableItemsWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Order Returnable Items
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * @param orderId  (required)
     * @return ApiResponse&lt;OrderReturnableItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderReturnableItemCollection> getOrderReturnableItemsWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderReturnableItemsValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<OrderReturnableItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Returnable Items (asynchronously)
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderReturnableItemsAsync(String orderId, final ApiCallback<OrderReturnableItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderReturnableItemsValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<OrderReturnableItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrders
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param responseGroups Response groups to return or filter the order graph (optional)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, Boolean includeBin, String responseGroups, String mode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        if (includeBin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBin", includeBin));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, Boolean includeBin, String responseGroups, String mode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOrdersCall(startIndex, pageSize, sortBy, filter, q, qLimit, includeBin, responseGroups, mode, _callback);
        return localVarCall;

    }

    /**
     * Get Orders
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param responseGroups Response groups to return or filter the order graph (optional)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @return OrderCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderCollection getOrders(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, Boolean includeBin, String responseGroups, String mode) throws ApiException {
        ApiResponse<OrderCollection> localVarResp = getOrdersWithHttpInfo(startIndex, pageSize, sortBy, filter, q, qLimit, includeBin, responseGroups, mode);
        return localVarResp.getData();
    }

    /**
     * Get Orders
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param responseGroups Response groups to return or filter the order graph (optional)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @return ApiResponse&lt;OrderCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderCollection> getOrdersWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, Boolean includeBin, String responseGroups, String mode) throws ApiException {
        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, includeBin, responseGroups, mode, null);
        Type localVarReturnType = new TypeToken<OrderCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Orders (asynchronously)
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param includeBin Whether to include BIN numbers on credit card payments (optional, default to false)
     * @param responseGroups Response groups to return or filter the order graph (optional)
     * @param mode &#39;synthesized&#39; to provide a synthesized order from shipment data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrdersAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, Boolean includeBin, String responseGroups, String mode, final ApiCallback<OrderCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, includeBin, responseGroups, mode, _callback);
        Type localVarReturnType = new TypeToken<OrderCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages/{packageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageValidateBeforeCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getPackage(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageCall(orderId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Get an order package
     * Get an order package
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage getPackage(String orderId, String packageId) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = getPackageWithHttpInfo(orderId, packageId);
        return localVarResp.getData();
    }

    /**
     * Get an order package
     * Get an order package
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> getPackageWithHttpInfo(String orderId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = getPackageValidateBeforeCall(orderId, packageId, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an order package (asynchronously)
     * Get an order package
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAsync(String orderId, String packageId, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageValidateBeforeCall(orderId, packageId, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageLabel
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageLabelCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages/{packageId}/label"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageLabelValidateBeforeCall(String orderId, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPackageLabel(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getPackageLabel(Async)");
        }
        

        okhttp3.Call localVarCall = getPackageLabelCall(orderId, packageId, _callback);
        return localVarCall;

    }

    /**
     * Get an order package label
     * Get an order package label
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void getPackageLabel(String orderId, String packageId) throws ApiException {
        getPackageLabelWithHttpInfo(orderId, packageId);
    }

    /**
     * Get an order package label
     * Get an order package label
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageLabelWithHttpInfo(String orderId, String packageId) throws ApiException {
        okhttp3.Call localVarCall = getPackageLabelValidateBeforeCall(orderId, packageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an order package label (asynchronously)
     * Get an order package label
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageLabelAsync(String orderId, String packageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageLabelValidateBeforeCall(orderId, packageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayment
     * @param orderId Unique identifier of the order whose payment transaction you want to get. (required)
     * @param paymentId Unique identifier of the payment transaction you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCall(String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments/{paymentId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentValidateBeforeCall(String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPayment(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPayment(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentCall(orderId, paymentId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment
     * Retrieves a specific payment transaction from the order.
     * @param orderId Unique identifier of the order whose payment transaction you want to get. (required)
     * @param paymentId Unique identifier of the payment transaction you want to get. (required)
     * @return Payment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Payment getPayment(String orderId, String paymentId) throws ApiException {
        ApiResponse<Payment> localVarResp = getPaymentWithHttpInfo(orderId, paymentId);
        return localVarResp.getData();
    }

    /**
     * Get Payment
     * Retrieves a specific payment transaction from the order.
     * @param orderId Unique identifier of the order whose payment transaction you want to get. (required)
     * @param paymentId Unique identifier of the payment transaction you want to get. (required)
     * @return ApiResponse&lt;Payment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Payment> getPaymentWithHttpInfo(String orderId, String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(orderId, paymentId, null);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment (asynchronously)
     * Retrieves a specific payment transaction from the order.
     * @param orderId Unique identifier of the order whose payment transaction you want to get. (required)
     * @param paymentId Unique identifier of the payment transaction you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAsync(String orderId, String paymentId, final ApiCallback<Payment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentValidateBeforeCall(orderId, paymentId, _callback);
        Type localVarReturnType = new TypeToken<Payment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayments
     * @param orderId Unique identifier of the order whose payment transactions you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPayments(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentsCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Payments
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * @param orderId Unique identifier of the order whose payment transactions you want to get. (required)
     * @return PaymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PaymentCollection getPayments(String orderId) throws ApiException {
        ApiResponse<PaymentCollection> localVarResp = getPaymentsWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Payments
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * @param orderId Unique identifier of the order whose payment transactions you want to get. (required)
     * @return ApiResponse&lt;PaymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentCollection> getPaymentsWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<PaymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payments (asynchronously)
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * @param orderId Unique identifier of the order whose payment transactions you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsAsync(String orderId, final ApiCallback<PaymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<PaymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPickup
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickupCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/pickups/{pickupId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "pickupId" + "\\}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPickupValidateBeforeCall(String orderId, String pickupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPickup(Async)");
        }
        
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling getPickup(Async)");
        }
        

        okhttp3.Call localVarCall = getPickupCall(orderId, pickupId, _callback);
        return localVarCall;

    }

    /**
     * Get Pickup
     * Gets a specified pickup on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @return Pickup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Pickup getPickup(String orderId, String pickupId) throws ApiException {
        ApiResponse<Pickup> localVarResp = getPickupWithHttpInfo(orderId, pickupId);
        return localVarResp.getData();
    }

    /**
     * Get Pickup
     * Gets a specified pickup on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @return ApiResponse&lt;Pickup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pickup> getPickupWithHttpInfo(String orderId, String pickupId) throws ApiException {
        okhttp3.Call localVarCall = getPickupValidateBeforeCall(orderId, pickupId, null);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Pickup (asynchronously)
     * Gets a specified pickup on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to remove from the order (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPickupAsync(String orderId, String pickupId, final ApiCallback<Pickup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPickupValidateBeforeCall(orderId, pickupId, _callback);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReasons
     * @param category  (optional, default to SHOPPER)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsCall(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/cancel/reasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReasonsValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getReasonsCall(category, _callback);
        return localVarCall;

    }

    /**
     * Get Order Cancel Reasons
     * Gets order cancellation reasons based on a category.
     * @param category  (optional, default to SHOPPER)
     * @return CancelReasonCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CancelReasonCollection getReasons(String category) throws ApiException {
        ApiResponse<CancelReasonCollection> localVarResp = getReasonsWithHttpInfo(category);
        return localVarResp.getData();
    }

    /**
     * Get Order Cancel Reasons
     * Gets order cancellation reasons based on a category.
     * @param category  (optional, default to SHOPPER)
     * @return ApiResponse&lt;CancelReasonCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelReasonCollection> getReasonsWithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(category, null);
        Type localVarReturnType = new TypeToken<CancelReasonCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order Cancel Reasons (asynchronously)
     * Gets order cancellation reasons based on a category.
     * @param category  (optional, default to SHOPPER)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsAsync(String category, final ApiCallback<CancelReasonCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReasonsValidateBeforeCall(category, _callback);
        Type localVarReturnType = new TypeToken<CancelReasonCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefundReasons
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundReasonsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/refunds/refundreasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundReasonsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRefundReasonsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Refund Reasons
     * Gets all the refund reasons.
     * @return RefundReasonCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RefundReasonCollection getRefundReasons() throws ApiException {
        ApiResponse<RefundReasonCollection> localVarResp = getRefundReasonsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Refund Reasons
     * Gets all the refund reasons.
     * @return ApiResponse&lt;RefundReasonCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundReasonCollection> getRefundReasonsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRefundReasonsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RefundReasonCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Refund Reasons (asynchronously)
     * Gets all the refund reasons.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundReasonsAsync(final ApiCallback<RefundReasonCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundReasonsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RefundReasonCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getShipment
     * @param orderId ID of the order (required)
     * @param shipmentId Shipment ID of the order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentCall(String orderId, String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "shipmentId" + "\\}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShipmentValidateBeforeCall(String orderId, String shipmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getShipment(Async)");
        }
        
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getShipment(Async)");
        }
        

        okhttp3.Call localVarCall = getShipmentCall(orderId, shipmentId, _callback);
        return localVarCall;

    }

    /**
     * Get Shipment
     * Allows a shipment to be retrieved for the order.
     * @param orderId ID of the order (required)
     * @param shipmentId Shipment ID of the order. (required)
     * @return CommerceRuntimeShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeShipment getShipment(String orderId, String shipmentId) throws ApiException {
        ApiResponse<CommerceRuntimeShipment> localVarResp = getShipmentWithHttpInfo(orderId, shipmentId);
        return localVarResp.getData();
    }

    /**
     * Get Shipment
     * Allows a shipment to be retrieved for the order.
     * @param orderId ID of the order (required)
     * @param shipmentId Shipment ID of the order. (required)
     * @return ApiResponse&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeShipment> getShipmentWithHttpInfo(String orderId, String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = getShipmentValidateBeforeCall(orderId, shipmentId, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Shipment (asynchronously)
     * Allows a shipment to be retrieved for the order.
     * @param orderId ID of the order (required)
     * @param shipmentId Shipment ID of the order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getShipmentAsync(String orderId, String shipmentId, final ApiCallback<CommerceRuntimeShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShipmentValidateBeforeCall(orderId, shipmentId, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaxableOrders
     * @param orderId Unique identifier of the order whose taxable orders you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxableOrdersCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/taxableorders"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxableOrdersValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getTaxableOrders(Async)");
        }
        

        okhttp3.Call localVarCall = getTaxableOrdersCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Taxable Orders
     * Gets an order divided up into \&quot;TaxableOrders\&quot; based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * @param orderId Unique identifier of the order whose taxable orders you want to get. (required)
     * @return List&lt;PricingTaxableOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<PricingTaxableOrder> getTaxableOrders(String orderId) throws ApiException {
        ApiResponse<List<PricingTaxableOrder>> localVarResp = getTaxableOrdersWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Taxable Orders
     * Gets an order divided up into \&quot;TaxableOrders\&quot; based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * @param orderId Unique identifier of the order whose taxable orders you want to get. (required)
     * @return ApiResponse&lt;List&lt;PricingTaxableOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PricingTaxableOrder>> getTaxableOrdersWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getTaxableOrdersValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<List<PricingTaxableOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Taxable Orders (asynchronously)
     * Gets an order divided up into \&quot;TaxableOrders\&quot; based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * @param orderId Unique identifier of the order whose taxable orders you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaxableOrdersAsync(String orderId, final ApiCallback<List<PricingTaxableOrder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxableOrdersValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<List<PricingTaxableOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValidationResults
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValidationResultsCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/validationresults"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationResultsValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getValidationResults(Async)");
        }
        

        okhttp3.Call localVarCall = getValidationResultsCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Validation Results
     * Gets list of validation results on an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @return List&lt;OrderValidationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderValidationResult> getValidationResults(String orderId) throws ApiException {
        ApiResponse<List<OrderValidationResult>> localVarResp = getValidationResultsWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get Validation Results
     * Gets list of validation results on an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @return ApiResponse&lt;List&lt;OrderValidationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderValidationResult>> getValidationResultsWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getValidationResultsValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<List<OrderValidationResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Validation Results (asynchronously)
     * Gets list of validation results on an order.
     * @param orderId Unique identifier of the order to which you want to add a note. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValidationResultsAsync(String orderId, final ApiCallback<List<OrderValidationResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationResultsValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<List<OrderValidationResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performFulfillmentAction
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param fulfillmentAction Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performFulfillmentActionCall(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/fulfillment/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performFulfillmentActionValidateBeforeCall(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling performFulfillmentAction(Async)");
        }
        

        okhttp3.Call localVarCall = performFulfillmentActionCall(orderId, fulfillmentAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Fulfillment Action
     * Sets the fulfillment action to &#39;Ship&#39;. To ship an order, the order must have a customer name, the &#39;Open&#39; or &#39;OpenAdProcessing&#39; status, full shipping address, and shipping method.
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param fulfillmentAction Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order performFulfillmentAction(String orderId, FulfillmentAction fulfillmentAction) throws ApiException {
        ApiResponse<Order> localVarResp = performFulfillmentActionWithHttpInfo(orderId, fulfillmentAction);
        return localVarResp.getData();
    }

    /**
     * Perform Fulfillment Action
     * Sets the fulfillment action to &#39;Ship&#39;. To ship an order, the order must have a customer name, the &#39;Open&#39; or &#39;OpenAdProcessing&#39; status, full shipping address, and shipping method.
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param fulfillmentAction Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> performFulfillmentActionWithHttpInfo(String orderId, FulfillmentAction fulfillmentAction) throws ApiException {
        okhttp3.Call localVarCall = performFulfillmentActionValidateBeforeCall(orderId, fulfillmentAction, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Fulfillment Action (asynchronously)
     * Sets the fulfillment action to &#39;Ship&#39;. To ship an order, the order must have a customer name, the &#39;Open&#39; or &#39;OpenAdProcessing&#39; status, full shipping address, and shipping method.
     * @param orderId Unique identifier of the order which is ready to be shipped. (required)
     * @param fulfillmentAction Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performFulfillmentActionAsync(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = performFulfillmentActionValidateBeforeCall(orderId, fulfillmentAction, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performOrderAction
     * @param orderId Unique identifier of the order. (required)
     * @param orderAction Action to perform, which can be \&quot;SubmitOrder\&quot;, \&quot;ValidateOrder\&quot;, \&quot;AcceptOrder\&quot;, \&quot;CancelOrder\&quot;, \&quot;CompleteOrder\&quot;, \&quot;AbandonOrder\&quot;, \&quot;ReopenOrder\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performOrderActionCall(String orderId, OrderAction orderAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performOrderActionValidateBeforeCall(String orderId, OrderAction orderAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling performOrderAction(Async)");
        }
        

        okhttp3.Call localVarCall = performOrderActionCall(orderId, orderAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Order Action
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * @param orderId Unique identifier of the order. (required)
     * @param orderAction Action to perform, which can be \&quot;SubmitOrder\&quot;, \&quot;ValidateOrder\&quot;, \&quot;AcceptOrder\&quot;, \&quot;CancelOrder\&quot;, \&quot;CompleteOrder\&quot;, \&quot;AbandonOrder\&quot;, \&quot;ReopenOrder\&quot;. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order performOrderAction(String orderId, OrderAction orderAction) throws ApiException {
        ApiResponse<Order> localVarResp = performOrderActionWithHttpInfo(orderId, orderAction);
        return localVarResp.getData();
    }

    /**
     * Perform Order Action
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * @param orderId Unique identifier of the order. (required)
     * @param orderAction Action to perform, which can be \&quot;SubmitOrder\&quot;, \&quot;ValidateOrder\&quot;, \&quot;AcceptOrder\&quot;, \&quot;CancelOrder\&quot;, \&quot;CompleteOrder\&quot;, \&quot;AbandonOrder\&quot;, \&quot;ReopenOrder\&quot;. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> performOrderActionWithHttpInfo(String orderId, OrderAction orderAction) throws ApiException {
        okhttp3.Call localVarCall = performOrderActionValidateBeforeCall(orderId, orderAction, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Order Action (asynchronously)
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * @param orderId Unique identifier of the order. (required)
     * @param orderAction Action to perform, which can be \&quot;SubmitOrder\&quot;, \&quot;ValidateOrder\&quot;, \&quot;AcceptOrder\&quot;, \&quot;CancelOrder\&quot;, \&quot;CompleteOrder\&quot;, \&quot;AbandonOrder\&quot;, \&quot;ReopenOrder\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performOrderActionAsync(String orderId, OrderAction orderAction, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = performOrderActionValidateBeforeCall(orderId, orderAction, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performPaymentAction
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionCall(String orderId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/payments/{paymentId}/actions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performPaymentActionValidateBeforeCall(String orderId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling performPaymentAction(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling performPaymentAction(Async)");
        }
        

        okhttp3.Call localVarCall = performPaymentActionCall(orderId, paymentId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Payment Action
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order performPaymentAction(String orderId, String paymentId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<Order> localVarResp = performPaymentActionWithHttpInfo(orderId, paymentId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Perform Payment Action
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> performPaymentActionWithHttpInfo(String orderId, String paymentId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = performPaymentActionValidateBeforeCall(orderId, paymentId, paymentAction, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Payment Action (asynchronously)
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * @param orderId Unique identifier of the order whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionAsync(String orderId, String paymentId, PaymentAction paymentAction, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = performPaymentActionValidateBeforeCall(orderId, paymentId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceOrder
     * @param refreshShipping  (optional)
     * @param order  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceOrderCall(Boolean refreshShipping, Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/commerce/orders/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (refreshShipping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refreshShipping", refreshShipping));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceOrderValidateBeforeCall(Boolean refreshShipping, Order order, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = priceOrderCall(refreshShipping, order, _callback);
        return localVarCall;

    }

    /**
     * Price Order
     * 
     * @param refreshShipping  (optional)
     * @param order  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order priceOrder(Boolean refreshShipping, Order order) throws ApiException {
        ApiResponse<Order> localVarResp = priceOrderWithHttpInfo(refreshShipping, order);
        return localVarResp.getData();
    }

    /**
     * Price Order
     * 
     * @param refreshShipping  (optional)
     * @param order  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> priceOrderWithHttpInfo(Boolean refreshShipping, Order order) throws ApiException {
        okhttp3.Call localVarCall = priceOrderValidateBeforeCall(refreshShipping, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price Order (asynchronously)
     * 
     * @param refreshShipping  (optional)
     * @param order  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call priceOrderAsync(Boolean refreshShipping, Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceOrderValidateBeforeCall(refreshShipping, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processDigitalWallet
     * @param orderId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processDigitalWalletCall(String orderId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = digitalWallet;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "digitalWalletType" + "\\}", localVarApiClient.escapeString(digitalWalletType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processDigitalWalletValidateBeforeCall(String orderId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling processDigitalWallet(Async)");
        }
        
        // verify the required parameter 'digitalWalletType' is set
        if (digitalWalletType == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletType' when calling processDigitalWallet(Async)");
        }
        

        okhttp3.Call localVarCall = processDigitalWalletCall(orderId, digitalWalletType, digitalWallet, _callback);
        return localVarCall;

    }

    /**
     * Process Digital Wallet
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * @param orderId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order processDigitalWallet(String orderId, String digitalWalletType, DigitalWallet digitalWallet) throws ApiException {
        ApiResponse<Order> localVarResp = processDigitalWalletWithHttpInfo(orderId, digitalWalletType, digitalWallet);
        return localVarResp.getData();
    }

    /**
     * Process Digital Wallet
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * @param orderId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> processDigitalWalletWithHttpInfo(String orderId, String digitalWalletType, DigitalWallet digitalWallet) throws ApiException {
        okhttp3.Call localVarCall = processDigitalWalletValidateBeforeCall(orderId, digitalWalletType, digitalWallet, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process Digital Wallet (asynchronously)
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * @param orderId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processDigitalWalletAsync(String orderId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = processDigitalWalletValidateBeforeCall(orderId, digitalWalletType, digitalWallet, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAdjustment
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAdjustmentCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = removeAdjustmentCall(orderId, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Remove Adjustment
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeAdjustment(String orderId, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = removeAdjustmentWithHttpInfo(orderId, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Remove Adjustment
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeAdjustmentWithHttpInfo(String orderId, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = removeAdjustmentValidateBeforeCall(orderId, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Adjustment (asynchronously)
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAdjustmentAsync(String orderId, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAdjustmentValidateBeforeCall(orderId, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAlternateContact
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlternateContactCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/removealternatecontact"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAlternateContactValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeAlternateContact(Async)");
        }
        

        okhttp3.Call localVarCall = removeAlternateContactCall(orderId, _callback);
        return localVarCall;

    }

    /**
     * Endpoint to remove alternate conatact from order and shipments.
     * 
     * @param orderId  (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeAlternateContact(String orderId) throws ApiException {
        ApiResponse<Order> localVarResp = removeAlternateContactWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Endpoint to remove alternate conatact from order and shipments.
     * 
     * @param orderId  (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeAlternateContactWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = removeAlternateContactValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint to remove alternate conatact from order and shipments. (asynchronously)
     * 
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlternateContactAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAlternateContactValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupon
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponCall(String orderId, String couponCode, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/coupons/{couponCode}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponValidateBeforeCall(String orderId, String couponCode, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling removeCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponCall(orderId, couponCode, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeCoupon(String orderId, String couponCode, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = removeCouponWithHttpInfo(orderId, couponCode, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeCouponWithHttpInfo(String orderId, String couponCode, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(orderId, couponCode, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupon (asynchronously)
     * Removes a coupon that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponAsync(String orderId, String couponCode, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(orderId, couponCode, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupons
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/coupons"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponsValidateBeforeCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponsCall(orderId, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeCoupons(String orderId, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = removeCouponsWithHttpInfo(orderId, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeCouponsWithHttpInfo(String orderId, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(orderId, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupons (asynchronously)
     * Removes all coupons that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsAsync(String orderId, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(orderId, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeHandlingAdjustment
     * @param orderId  (required)
     * @param updateMode  (optional)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeHandlingAdjustmentCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment/handling"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeHandlingAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeHandlingAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = removeHandlingAdjustmentCall(orderId, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Remove Handling Adjustment
     * Removes a coupon that had been previously applied to the order.
     * @param orderId  (required)
     * @param updateMode  (optional)
     * @param version  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeHandlingAdjustment(String orderId, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = removeHandlingAdjustmentWithHttpInfo(orderId, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Remove Handling Adjustment
     * Removes a coupon that had been previously applied to the order.
     * @param orderId  (required)
     * @param updateMode  (optional)
     * @param version  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeHandlingAdjustmentWithHttpInfo(String orderId, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = removeHandlingAdjustmentValidateBeforeCall(orderId, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Handling Adjustment (asynchronously)
     * Removes a coupon that had been previously applied to the order.
     * @param orderId  (required)
     * @param updateMode  (optional)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeHandlingAdjustmentAsync(String orderId, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeHandlingAdjustmentValidateBeforeCall(orderId, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeShippingAdjustment
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeShippingAdjustmentCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/adjustment/shipping"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeShippingAdjustmentValidateBeforeCall(String orderId, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling removeShippingAdjustment(Async)");
        }
        

        okhttp3.Call localVarCall = removeShippingAdjustmentCall(orderId, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Remove Shipping Adjustment
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order removeShippingAdjustment(String orderId, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = removeShippingAdjustmentWithHttpInfo(orderId, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Remove Shipping Adjustment
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> removeShippingAdjustmentWithHttpInfo(String orderId, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = removeShippingAdjustmentValidateBeforeCall(orderId, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Shipping Adjustment (asynchronously)
     * Removes an adjustment that had been previously applied to the order.
     * @param orderId Unique identifier of the order with the coupon you want to remove. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeShippingAdjustmentAsync(String orderId, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeShippingAdjustmentValidateBeforeCall(orderId, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repriceShipment
     * @param shipmentNumber  (required)
     * @param orderId  (required)
     * @param repriceShipmentObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repriceShipmentCall(Integer shipmentNumber, String orderId, RepriceShipmentObject repriceShipmentObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repriceShipmentObject;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice"
            .replaceAll("\\{" + "shipmentNumber" + "\\}", localVarApiClient.escapeString(shipmentNumber.toString()))
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repriceShipmentValidateBeforeCall(Integer shipmentNumber, String orderId, RepriceShipmentObject repriceShipmentObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling repriceShipment(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling repriceShipment(Async)");
        }
        

        okhttp3.Call localVarCall = repriceShipmentCall(shipmentNumber, orderId, repriceShipmentObject, _callback);
        return localVarCall;

    }

    /**
     * Reprice Shipment
     * Allows a shipment to be repriced.
     * @param shipmentNumber  (required)
     * @param orderId  (required)
     * @param repriceShipmentObject  (optional)
     * @return CommerceRuntimeShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeShipment repriceShipment(Integer shipmentNumber, String orderId, RepriceShipmentObject repriceShipmentObject) throws ApiException {
        ApiResponse<CommerceRuntimeShipment> localVarResp = repriceShipmentWithHttpInfo(shipmentNumber, orderId, repriceShipmentObject);
        return localVarResp.getData();
    }

    /**
     * Reprice Shipment
     * Allows a shipment to be repriced.
     * @param shipmentNumber  (required)
     * @param orderId  (required)
     * @param repriceShipmentObject  (optional)
     * @return ApiResponse&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeShipment> repriceShipmentWithHttpInfo(Integer shipmentNumber, String orderId, RepriceShipmentObject repriceShipmentObject) throws ApiException {
        okhttp3.Call localVarCall = repriceShipmentValidateBeforeCall(shipmentNumber, orderId, repriceShipmentObject, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reprice Shipment (asynchronously)
     * Allows a shipment to be repriced.
     * @param shipmentNumber  (required)
     * @param orderId  (required)
     * @param repriceShipmentObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repriceShipmentAsync(Integer shipmentNumber, String orderId, RepriceShipmentObject repriceShipmentObject, final ApiCallback<CommerceRuntimeShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = repriceShipmentValidateBeforeCall(shipmentNumber, orderId, repriceShipmentObject, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendGatewayGiftCardEmail
     * @param orderId  (required)
     * @param giftcardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendGatewayGiftCardEmailCall(String orderId, String giftcardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/giftcard/{giftcardId}/resend"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "giftcardId" + "\\}", localVarApiClient.escapeString(giftcardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendGatewayGiftCardEmailValidateBeforeCall(String orderId, String giftcardId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling resendGatewayGiftCardEmail(Async)");
        }
        
        // verify the required parameter 'giftcardId' is set
        if (giftcardId == null) {
            throw new ApiException("Missing the required parameter 'giftcardId' when calling resendGatewayGiftCardEmail(Async)");
        }
        

        okhttp3.Call localVarCall = resendGatewayGiftCardEmailCall(orderId, giftcardId, _callback);
        return localVarCall;

    }

    /**
     * Resend Gateway Gift Card Email
     * Resend gateway giftcard email.
     * @param orderId  (required)
     * @param giftcardId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resendGatewayGiftCardEmail(String orderId, String giftcardId) throws ApiException {
        resendGatewayGiftCardEmailWithHttpInfo(orderId, giftcardId);
    }

    /**
     * Resend Gateway Gift Card Email
     * Resend gateway giftcard email.
     * @param orderId  (required)
     * @param giftcardId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendGatewayGiftCardEmailWithHttpInfo(String orderId, String giftcardId) throws ApiException {
        okhttp3.Call localVarCall = resendGatewayGiftCardEmailValidateBeforeCall(orderId, giftcardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Gateway Gift Card Email (asynchronously)
     * Resend gateway giftcard email.
     * @param orderId  (required)
     * @param giftcardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendGatewayGiftCardEmailAsync(String orderId, String giftcardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendGatewayGiftCardEmailValidateBeforeCall(orderId, giftcardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendOrderConfirmationEmail
     * @param orderId  (required)
     * @param orderAction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendOrderConfirmationEmailCall(String orderId, OrderAction orderAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/email/resend"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendOrderConfirmationEmailValidateBeforeCall(String orderId, OrderAction orderAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling resendOrderConfirmationEmail(Async)");
        }
        

        okhttp3.Call localVarCall = resendOrderConfirmationEmailCall(orderId, orderAction, _callback);
        return localVarCall;

    }

    /**
     * Resend Order Confirmation Email
     * Resend order confirmation email specified by the order Id.
     * @param orderId  (required)
     * @param orderAction  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resendOrderConfirmationEmail(String orderId, OrderAction orderAction) throws ApiException {
        resendOrderConfirmationEmailWithHttpInfo(orderId, orderAction);
    }

    /**
     * Resend Order Confirmation Email
     * Resend order confirmation email specified by the order Id.
     * @param orderId  (required)
     * @param orderAction  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendOrderConfirmationEmailWithHttpInfo(String orderId, OrderAction orderAction) throws ApiException {
        okhttp3.Call localVarCall = resendOrderConfirmationEmailValidateBeforeCall(orderId, orderAction, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Order Confirmation Email (asynchronously)
     * Resend order confirmation email specified by the order Id.
     * @param orderId  (required)
     * @param orderAction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendOrderConfirmationEmailAsync(String orderId, OrderAction orderAction, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendOrderConfirmationEmailValidateBeforeCall(orderId, orderAction, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendPackageFulfillmentEmail
     * @param orderId  (required)
     * @param fulfillmentAction  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendPackageFulfillmentEmailCall(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentAction;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/fulfillment/email/resend"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendPackageFulfillmentEmailValidateBeforeCall(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling resendPackageFulfillmentEmail(Async)");
        }
        

        okhttp3.Call localVarCall = resendPackageFulfillmentEmailCall(orderId, fulfillmentAction, _callback);
        return localVarCall;

    }

    /**
     * Resend Package Fulfillment Email
     * Resends the package fulfillment email.
     * @param orderId  (required)
     * @param fulfillmentAction  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order resendPackageFulfillmentEmail(String orderId, FulfillmentAction fulfillmentAction) throws ApiException {
        ApiResponse<Order> localVarResp = resendPackageFulfillmentEmailWithHttpInfo(orderId, fulfillmentAction);
        return localVarResp.getData();
    }

    /**
     * Resend Package Fulfillment Email
     * Resends the package fulfillment email.
     * @param orderId  (required)
     * @param fulfillmentAction  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> resendPackageFulfillmentEmailWithHttpInfo(String orderId, FulfillmentAction fulfillmentAction) throws ApiException {
        okhttp3.Call localVarCall = resendPackageFulfillmentEmailValidateBeforeCall(orderId, fulfillmentAction, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend Package Fulfillment Email (asynchronously)
     * Resends the package fulfillment email.
     * @param orderId  (required)
     * @param fulfillmentAction  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendPackageFulfillmentEmailAsync(String orderId, FulfillmentAction fulfillmentAction, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendPackageFulfillmentEmailValidateBeforeCall(orderId, fulfillmentAction, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendRefundEmail
     * @param orderId  (required)
     * @param refundId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendRefundEmailCall(String orderId, String refundId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/refunds/{refundId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "refundId" + "\\}", localVarApiClient.escapeString(refundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendRefundEmailValidateBeforeCall(String orderId, String refundId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling resendRefundEmail(Async)");
        }
        
        // verify the required parameter 'refundId' is set
        if (refundId == null) {
            throw new ApiException("Missing the required parameter 'refundId' when calling resendRefundEmail(Async)");
        }
        

        okhttp3.Call localVarCall = resendRefundEmailCall(orderId, refundId, _callback);
        return localVarCall;

    }

    /**
     * Resend Refund Email
     * Resend refund email.
     * @param orderId  (required)
     * @param refundId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resendRefundEmail(String orderId, String refundId) throws ApiException {
        resendRefundEmailWithHttpInfo(orderId, refundId);
    }

    /**
     * Resend Refund Email
     * Resend refund email.
     * @param orderId  (required)
     * @param refundId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendRefundEmailWithHttpInfo(String orderId, String refundId) throws ApiException {
        okhttp3.Call localVarCall = resendRefundEmailValidateBeforeCall(orderId, refundId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Refund Email (asynchronously)
     * Resend refund email.
     * @param orderId  (required)
     * @param refundId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendRefundEmailAsync(String orderId, String refundId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendRefundEmailValidateBeforeCall(orderId, refundId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setBillingInfo
     * @param orderId Unique identifier of the order whose payment source you want to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param billingInfo All the properties that you want the payment source object to contain. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBillingInfoCall(String orderId, String updateMode, String version, BillingInfo billingInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = billingInfo;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/billinginfo"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setBillingInfoValidateBeforeCall(String orderId, String updateMode, String version, BillingInfo billingInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling setBillingInfo(Async)");
        }
        

        okhttp3.Call localVarCall = setBillingInfoCall(orderId, updateMode, version, billingInfo, _callback);
        return localVarCall;

    }

    /**
     * Set Billing Info
     * Adds a payment source to the order.
     * @param orderId Unique identifier of the order whose payment source you want to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param billingInfo All the properties that you want the payment source object to contain. (optional)
     * @return BillingInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BillingInfo setBillingInfo(String orderId, String updateMode, String version, BillingInfo billingInfo) throws ApiException {
        ApiResponse<BillingInfo> localVarResp = setBillingInfoWithHttpInfo(orderId, updateMode, version, billingInfo);
        return localVarResp.getData();
    }

    /**
     * Set Billing Info
     * Adds a payment source to the order.
     * @param orderId Unique identifier of the order whose payment source you want to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param billingInfo All the properties that you want the payment source object to contain. (optional)
     * @return ApiResponse&lt;BillingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingInfo> setBillingInfoWithHttpInfo(String orderId, String updateMode, String version, BillingInfo billingInfo) throws ApiException {
        okhttp3.Call localVarCall = setBillingInfoValidateBeforeCall(orderId, updateMode, version, billingInfo, null);
        Type localVarReturnType = new TypeToken<BillingInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Billing Info (asynchronously)
     * Adds a payment source to the order.
     * @param orderId Unique identifier of the order whose payment source you want to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param billingInfo All the properties that you want the payment source object to contain. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setBillingInfoAsync(String orderId, String updateMode, String version, BillingInfo billingInfo, final ApiCallback<BillingInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = setBillingInfoValidateBeforeCall(orderId, updateMode, version, billingInfo, _callback);
        Type localVarReturnType = new TypeToken<BillingInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setFulFillmentInfo
     * @param orderId Unique identifier of the order whose fulfillment information you want to change. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param fulfillmentInfo All properties that you want the updated fulfillment information to have. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setFulFillmentInfoCall(String orderId, String updateMode, String version, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentInfo;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/fulfillmentinfo"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFulFillmentInfoValidateBeforeCall(String orderId, String updateMode, String version, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling setFulFillmentInfo(Async)");
        }
        

        okhttp3.Call localVarCall = setFulFillmentInfoCall(orderId, updateMode, version, fulfillmentInfo, _callback);
        return localVarCall;

    }

    /**
     * Set Fulfillment Info
     * Modifies an order&#39;s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant&#39;s fulfillment cost.
     * @param orderId Unique identifier of the order whose fulfillment information you want to change. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param fulfillmentInfo All properties that you want the updated fulfillment information to have. (optional)
     * @return FulfillmentInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FulfillmentInfo setFulFillmentInfo(String orderId, String updateMode, String version, FulfillmentInfo fulfillmentInfo) throws ApiException {
        ApiResponse<FulfillmentInfo> localVarResp = setFulFillmentInfoWithHttpInfo(orderId, updateMode, version, fulfillmentInfo);
        return localVarResp.getData();
    }

    /**
     * Set Fulfillment Info
     * Modifies an order&#39;s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant&#39;s fulfillment cost.
     * @param orderId Unique identifier of the order whose fulfillment information you want to change. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param fulfillmentInfo All properties that you want the updated fulfillment information to have. (optional)
     * @return ApiResponse&lt;FulfillmentInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FulfillmentInfo> setFulFillmentInfoWithHttpInfo(String orderId, String updateMode, String version, FulfillmentInfo fulfillmentInfo) throws ApiException {
        okhttp3.Call localVarCall = setFulFillmentInfoValidateBeforeCall(orderId, updateMode, version, fulfillmentInfo, null);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Fulfillment Info (asynchronously)
     * Modifies an order&#39;s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant&#39;s fulfillment cost.
     * @param orderId Unique identifier of the order whose fulfillment information you want to change. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param fulfillmentInfo All properties that you want the updated fulfillment information to have. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setFulFillmentInfoAsync(String orderId, String updateMode, String version, FulfillmentInfo fulfillmentInfo, final ApiCallback<FulfillmentInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = setFulFillmentInfoValidateBeforeCall(orderId, updateMode, version, fulfillmentInfo, _callback);
        Type localVarReturnType = new TypeToken<FulfillmentInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smsOptOut
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsOptOutCall(String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/sms/optout/{siteId}"
            .replaceAll("\\{" + "siteId" + "\\}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smsOptOutValidateBeforeCall(String siteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling smsOptOut(Async)");
        }
        

        okhttp3.Call localVarCall = smsOptOutCall(siteId, _callback);
        return localVarCall;

    }

    /**
     * Sms Opt Out
     * Opting out from the sms notifications.
     * @param siteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void smsOptOut(String siteId) throws ApiException {
        smsOptOutWithHttpInfo(siteId);
    }

    /**
     * Sms Opt Out
     * Opting out from the sms notifications.
     * @param siteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> smsOptOutWithHttpInfo(String siteId) throws ApiException {
        okhttp3.Call localVarCall = smsOptOutValidateBeforeCall(siteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sms Opt Out (asynchronously)
     * Opting out from the sms notifications.
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsOptOutAsync(String siteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = smsOptOutValidateBeforeCall(siteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitShipments
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param splitShipmentsObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitShipmentsCall(String orderId, String shipmentNumber, SplitShipmentsObject splitShipmentsObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = splitShipmentsObject;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentNumber}/split"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "shipmentNumber" + "\\}", localVarApiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitShipmentsValidateBeforeCall(String orderId, String shipmentNumber, SplitShipmentsObject splitShipmentsObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling splitShipments(Async)");
        }
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling splitShipments(Async)");
        }
        

        okhttp3.Call localVarCall = splitShipmentsCall(orderId, shipmentNumber, splitShipmentsObject, _callback);
        return localVarCall;

    }

    /**
     * Split Shipments
     * Allows spliting an existing shipment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param splitShipmentsObject  (optional)
     * @return List&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeShipment> splitShipments(String orderId, String shipmentNumber, SplitShipmentsObject splitShipmentsObject) throws ApiException {
        ApiResponse<List<CommerceRuntimeShipment>> localVarResp = splitShipmentsWithHttpInfo(orderId, shipmentNumber, splitShipmentsObject);
        return localVarResp.getData();
    }

    /**
     * Split Shipments
     * Allows spliting an existing shipment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param splitShipmentsObject  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeShipment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeShipment>> splitShipmentsWithHttpInfo(String orderId, String shipmentNumber, SplitShipmentsObject splitShipmentsObject) throws ApiException {
        okhttp3.Call localVarCall = splitShipmentsValidateBeforeCall(orderId, shipmentNumber, splitShipmentsObject, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShipment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Split Shipments (asynchronously)
     * Allows spliting an existing shipment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param splitShipmentsObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitShipmentsAsync(String orderId, String shipmentNumber, SplitShipmentsObject splitShipmentsObject, final ApiCallback<List<CommerceRuntimeShipment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitShipmentsValidateBeforeCall(orderId, shipmentNumber, splitShipmentsObject, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShipment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDigitalPackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Package to update on the order (required)
     * @param digitalPackage Package content to update on the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDigitalPackageCall(String orderId, String digitalPackageId, DigitalPackage digitalPackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = digitalPackage;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "digitalPackageId" + "\\}", localVarApiClient.escapeString(digitalPackageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDigitalPackageValidateBeforeCall(String orderId, String digitalPackageId, DigitalPackage digitalPackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateDigitalPackage(Async)");
        }
        
        // verify the required parameter 'digitalPackageId' is set
        if (digitalPackageId == null) {
            throw new ApiException("Missing the required parameter 'digitalPackageId' when calling updateDigitalPackage(Async)");
        }
        

        okhttp3.Call localVarCall = updateDigitalPackageCall(orderId, digitalPackageId, digitalPackage, _callback);
        return localVarCall;

    }

    /**
     * Update Digital Package
     * Updates a digital package on the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Package to update on the order (required)
     * @param digitalPackage Package content to update on the order (optional)
     * @return DigitalPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DigitalPackage updateDigitalPackage(String orderId, String digitalPackageId, DigitalPackage digitalPackage) throws ApiException {
        ApiResponse<DigitalPackage> localVarResp = updateDigitalPackageWithHttpInfo(orderId, digitalPackageId, digitalPackage);
        return localVarResp.getData();
    }

    /**
     * Update Digital Package
     * Updates a digital package on the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Package to update on the order (required)
     * @param digitalPackage Package content to update on the order (optional)
     * @return ApiResponse&lt;DigitalPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DigitalPackage> updateDigitalPackageWithHttpInfo(String orderId, String digitalPackageId, DigitalPackage digitalPackage) throws ApiException {
        okhttp3.Call localVarCall = updateDigitalPackageValidateBeforeCall(orderId, digitalPackageId, digitalPackage, null);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Digital Package (asynchronously)
     * Updates a digital package on the order.
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param digitalPackageId Package to update on the order (required)
     * @param digitalPackage Package content to update on the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDigitalPackageAsync(String orderId, String digitalPackageId, DigitalPackage digitalPackage, final ApiCallback<DigitalPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDigitalPackageValidateBeforeCall(orderId, digitalPackageId, digitalPackage, _callback);
        Type localVarReturnType = new TypeToken<DigitalPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtendedProperties
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended properties (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtendedPropertiesCall(String orderId, String updateMode, String version, Boolean upsert, List<ExtendedProperty> extendedProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extendedProperty;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (upsert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upsert", upsert));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtendedPropertiesValidateBeforeCall(String orderId, String updateMode, String version, Boolean upsert, List<ExtendedProperty> extendedProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateExtendedProperties(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtendedPropertiesCall(orderId, updateMode, version, upsert, extendedProperty, _callback);
        return localVarCall;

    }

    /**
     * Updated extended properties
     * Update extended properties.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended properties (optional)
     * @return List&lt;ExtendedProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ExtendedProperty> updateExtendedProperties(String orderId, String updateMode, String version, Boolean upsert, List<ExtendedProperty> extendedProperty) throws ApiException {
        ApiResponse<List<ExtendedProperty>> localVarResp = updateExtendedPropertiesWithHttpInfo(orderId, updateMode, version, upsert, extendedProperty);
        return localVarResp.getData();
    }

    /**
     * Updated extended properties
     * Update extended properties.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended properties (optional)
     * @return ApiResponse&lt;List&lt;ExtendedProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExtendedProperty>> updateExtendedPropertiesWithHttpInfo(String orderId, String updateMode, String version, Boolean upsert, List<ExtendedProperty> extendedProperty) throws ApiException {
        okhttp3.Call localVarCall = updateExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, upsert, extendedProperty, null);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updated extended properties (asynchronously)
     * Update extended properties.
     * @param orderId Unique identifier of the order item (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended properties (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtendedPropertiesAsync(String orderId, String updateMode, String version, Boolean upsert, List<ExtendedProperty> extendedProperty, final ApiCallback<List<ExtendedProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtendedPropertiesValidateBeforeCall(orderId, updateMode, version, upsert, extendedProperty, _callback);
        Type localVarReturnType = new TypeToken<List<ExtendedProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtendedProperty
     * @param orderId Unique identifier of the order item (required)
     * @param key Key (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended property (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtendedPropertyCall(String orderId, String key, String updateMode, String version, Boolean upsert, ExtendedProperty extendedProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extendedProperty;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/extendedproperties/{key}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (upsert != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upsert", upsert));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtendedPropertyValidateBeforeCall(String orderId, String key, String updateMode, String version, Boolean upsert, ExtendedProperty extendedProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateExtendedProperty(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateExtendedProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtendedPropertyCall(orderId, key, updateMode, version, upsert, extendedProperty, _callback);
        return localVarCall;

    }

    /**
     * Update Extended Property
     * Updated specific extended property
     * @param orderId Unique identifier of the order item (required)
     * @param key Key (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended property (optional)
     * @return ExtendedProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedProperty updateExtendedProperty(String orderId, String key, String updateMode, String version, Boolean upsert, ExtendedProperty extendedProperty) throws ApiException {
        ApiResponse<ExtendedProperty> localVarResp = updateExtendedPropertyWithHttpInfo(orderId, key, updateMode, version, upsert, extendedProperty);
        return localVarResp.getData();
    }

    /**
     * Update Extended Property
     * Updated specific extended property
     * @param orderId Unique identifier of the order item (required)
     * @param key Key (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended property (optional)
     * @return ApiResponse&lt;ExtendedProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedProperty> updateExtendedPropertyWithHttpInfo(String orderId, String key, String updateMode, String version, Boolean upsert, ExtendedProperty extendedProperty) throws ApiException {
        okhttp3.Call localVarCall = updateExtendedPropertyValidateBeforeCall(orderId, key, updateMode, version, upsert, extendedProperty, null);
        Type localVarReturnType = new TypeToken<ExtendedProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Extended Property (asynchronously)
     * Updated specific extended property
     * @param orderId Unique identifier of the order item (required)
     * @param key Key (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param upsert Allow insert or update (optional, default to false)
     * @param extendedProperty Extended property (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtendedPropertyAsync(String orderId, String key, String updateMode, String version, Boolean upsert, ExtendedProperty extendedProperty, final ApiCallback<ExtendedProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtendedPropertyValidateBeforeCall(orderId, key, updateMode, version, upsert, extendedProperty, _callback);
        Type localVarReturnType = new TypeToken<ExtendedProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemDeliveryDate
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDeliveryDateCall(String orderId, String orderItemId, String updateMode, String version, OffsetDateTime body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/deliverydate"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemDeliveryDateValidateBeforeCall(String orderId, String orderItemId, String updateMode, String version, OffsetDateTime body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateItemDeliveryDate(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateItemDeliveryDate(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemDeliveryDateCall(orderId, orderItemId, updateMode, version, body, _callback);
        return localVarCall;

    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateItemDeliveryDate(String orderId, String orderItemId, String updateMode, String version, OffsetDateTime body) throws ApiException {
        ApiResponse<Order> localVarResp = updateItemDeliveryDateWithHttpInfo(orderId, orderItemId, updateMode, version, body);
        return localVarResp.getData();
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateItemDeliveryDateWithHttpInfo(String orderId, String orderItemId, String updateMode, String version, OffsetDateTime body) throws ApiException {
        okhttp3.Call localVarCall = updateItemDeliveryDateValidateBeforeCall(orderId, orderItemId, updateMode, version, body, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Delivery Date of a particular Order Item (asynchronously)
     * Updates the Delivery Date of a particular Order Item
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDeliveryDateAsync(String orderId, String orderItemId, String updateMode, String version, OffsetDateTime body, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemDeliveryDateValidateBeforeCall(orderId, orderItemId, updateMode, version, body, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemDuty
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param dutyAmount Duty amount to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDutyCall(String orderId, String orderItemId, Double dutyAmount, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()))
            .replaceAll("\\{" + "dutyAmount" + "\\}", localVarApiClient.escapeString(dutyAmount.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemDutyValidateBeforeCall(String orderId, String orderItemId, Double dutyAmount, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateItemDuty(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateItemDuty(Async)");
        }
        
        // verify the required parameter 'dutyAmount' is set
        if (dutyAmount == null) {
            throw new ApiException("Missing the required parameter 'dutyAmount' when calling updateItemDuty(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemDutyCall(orderId, orderItemId, dutyAmount, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Update Item Duty
     * Updates the duty amount of an order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param dutyAmount Duty amount to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateItemDuty(String orderId, String orderItemId, Double dutyAmount, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = updateItemDutyWithHttpInfo(orderId, orderItemId, dutyAmount, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Update Item Duty
     * Updates the duty amount of an order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param dutyAmount Duty amount to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateItemDutyWithHttpInfo(String orderId, String orderItemId, Double dutyAmount, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = updateItemDutyValidateBeforeCall(orderId, orderItemId, dutyAmount, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Duty (asynchronously)
     * Updates the duty amount of an order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param dutyAmount Duty amount to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDutyAsync(String orderId, String orderItemId, Double dutyAmount, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemDutyValidateBeforeCall(orderId, orderItemId, dutyAmount, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemFulfillment
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param zipCode Zip Code used for inventory reservation if order having STH items (optional)
     * @param commerceRuntimeOrderItem The order item containing fulfilment information to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemFulfillmentCall(String orderId, String orderItemId, String updateMode, String version, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderItem;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/fulfillment"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemFulfillmentValidateBeforeCall(String orderId, String orderItemId, String updateMode, String version, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateItemFulfillment(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateItemFulfillment(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemFulfillmentCall(orderId, orderItemId, updateMode, version, zipCode, commerceRuntimeOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Update Item Fulfillment
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param zipCode Zip Code used for inventory reservation if order having STH items (optional)
     * @param commerceRuntimeOrderItem The order item containing fulfilment information to update. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateItemFulfillment(String orderId, String orderItemId, String updateMode, String version, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        ApiResponse<Order> localVarResp = updateItemFulfillmentWithHttpInfo(orderId, orderItemId, updateMode, version, zipCode, commerceRuntimeOrderItem);
        return localVarResp.getData();
    }

    /**
     * Update Item Fulfillment
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param zipCode Zip Code used for inventory reservation if order having STH items (optional)
     * @param commerceRuntimeOrderItem The order item containing fulfilment information to update. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateItemFulfillmentWithHttpInfo(String orderId, String orderItemId, String updateMode, String version, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        okhttp3.Call localVarCall = updateItemFulfillmentValidateBeforeCall(orderId, orderItemId, updateMode, version, zipCode, commerceRuntimeOrderItem, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Fulfillment (asynchronously)
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param zipCode Zip Code used for inventory reservation if order having STH items (optional)
     * @param commerceRuntimeOrderItem The order item containing fulfilment information to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemFulfillmentAsync(String orderId, String orderItemId, String updateMode, String version, String zipCode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemFulfillmentValidateBeforeCall(orderId, orderItemId, updateMode, version, zipCode, commerceRuntimeOrderItem, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemProductPrice
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param price Price to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemProductPriceCall(String orderId, String orderItemId, Double price, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/price/{price}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()))
            .replaceAll("\\{" + "price" + "\\}", localVarApiClient.escapeString(price.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemProductPriceValidateBeforeCall(String orderId, String orderItemId, Double price, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateItemProductPrice(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateItemProductPrice(Async)");
        }
        
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling updateItemProductPrice(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemProductPriceCall(orderId, orderItemId, price, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Update Item Product Price
     * Updates the price of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param price Price to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateItemProductPrice(String orderId, String orderItemId, Double price, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = updateItemProductPriceWithHttpInfo(orderId, orderItemId, price, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Update Item Product Price
     * Updates the price of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param price Price to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateItemProductPriceWithHttpInfo(String orderId, String orderItemId, Double price, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = updateItemProductPriceValidateBeforeCall(orderId, orderItemId, price, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Product Price (asynchronously)
     * Updates the price of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param price Price to update the item product to. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemProductPriceAsync(String orderId, String orderItemId, Double price, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemProductPriceValidateBeforeCall(orderId, orderItemId, price, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemQuantity
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param quantity New quantity for the specified order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityCall(String orderId, String orderItemId, Integer quantity, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()))
            .replaceAll("\\{" + "quantity" + "\\}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemQuantityValidateBeforeCall(String orderId, String orderItemId, Integer quantity, String updateMode, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling updateItemQuantity(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemQuantityCall(orderId, orderItemId, quantity, updateMode, version, _callback);
        return localVarCall;

    }

    /**
     * Update Item Quantity
     * Updates the quantity of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param quantity New quantity for the specified order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateItemQuantity(String orderId, String orderItemId, Integer quantity, String updateMode, String version) throws ApiException {
        ApiResponse<Order> localVarResp = updateItemQuantityWithHttpInfo(orderId, orderItemId, quantity, updateMode, version);
        return localVarResp.getData();
    }

    /**
     * Update Item Quantity
     * Updates the quantity of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param quantity New quantity for the specified order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateItemQuantityWithHttpInfo(String orderId, String orderItemId, Integer quantity, String updateMode, String version) throws ApiException {
        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(orderId, orderItemId, quantity, updateMode, version, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Quantity (asynchronously)
     * Updates the quantity of an individual order item in the order.
     * @param orderId Unique identifier of the order item. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param quantity New quantity for the specified order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityAsync(String orderId, String orderItemId, Integer quantity, String updateMode, String version, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(orderId, orderItemId, quantity, updateMode, version, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrder
     * @param orderId The order ID to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param order All properties of the order to place. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderCall(String orderId, String updateMode, String version, Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(String orderId, String updateMode, String version, Order order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrder(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderCall(orderId, updateMode, version, order, _callback);
        return localVarCall;

    }

    /**
     * Update Order
     * Updates the billing and/or shipping information of an existing order.
     * @param orderId The order ID to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param order All properties of the order to place. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrder(String orderId, String updateMode, String version, Order order) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderWithHttpInfo(orderId, updateMode, version, order);
        return localVarResp.getData();
    }

    /**
     * Update Order
     * Updates the billing and/or shipping information of an existing order.
     * @param orderId The order ID to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param order All properties of the order to place. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderWithHttpInfo(String orderId, String updateMode, String version, Order order) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(orderId, updateMode, version, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order (asynchronously)
     * Updates the billing and/or shipping information of an existing order.
     * @param orderId The order ID to update. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param order All properties of the order to place. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAsync(String orderId, String updateMode, String version, Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(orderId, updateMode, version, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderAttributes
     * @param orderId Unique identifier of the order whose attributeSet you want to update. (required)
     * @param removeMissing Indicates that items missing from the collection should be removed. (optional, default to false)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAttributesCall(String orderId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderAttribute;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/attributes"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeMissing", removeMissing));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderAttributesValidateBeforeCall(String orderId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderAttributesCall(orderId, removeMissing, commerceRuntimeOrderAttribute, _callback);
        return localVarCall;

    }

    /**
     * Update Order Attributes
     * Updates a specific order attribute set of an order.
     * @param orderId Unique identifier of the order whose attributeSet you want to update. (required)
     * @param removeMissing Indicates that items missing from the collection should be removed. (optional, default to false)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> updateOrderAttributes(String orderId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = updateOrderAttributesWithHttpInfo(orderId, removeMissing, commerceRuntimeOrderAttribute);
        return localVarResp.getData();
    }

    /**
     * Update Order Attributes
     * Updates a specific order attribute set of an order.
     * @param orderId Unique identifier of the order whose attributeSet you want to update. (required)
     * @param removeMissing Indicates that items missing from the collection should be removed. (optional, default to false)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> updateOrderAttributesWithHttpInfo(String orderId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateOrderAttributesValidateBeforeCall(orderId, removeMissing, commerceRuntimeOrderAttribute, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Attributes (asynchronously)
     * Updates a specific order attribute set of an order.
     * @param orderId Unique identifier of the order whose attributeSet you want to update. (required)
     * @param removeMissing Indicates that items missing from the collection should be removed. (optional, default to false)
     * @param commerceRuntimeOrderAttribute Attributes to upsert. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAttributesAsync(String orderId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderAttributesValidateBeforeCall(orderId, removeMissing, commerceRuntimeOrderAttribute, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderDiscount
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderDiscountCall(String orderId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeAppliedDiscount;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/discounts/{discountId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderDiscountValidateBeforeCall(String orderId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderDiscount(Async)");
        }
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling updateOrderDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderDiscountCall(orderId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, _callback);
        return localVarCall;

    }

    /**
     * Update Order Discount
     * Update existing discount on the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrderDiscount(String orderId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderDiscountWithHttpInfo(orderId, discountId, updateMode, version, commerceRuntimeAppliedDiscount);
        return localVarResp.getData();
    }

    /**
     * Update Order Discount
     * Update existing discount on the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderDiscountWithHttpInfo(String orderId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount) throws ApiException {
        okhttp3.Call localVarCall = updateOrderDiscountValidateBeforeCall(orderId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Discount (asynchronously)
     * Update existing discount on the order.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderDiscountAsync(String orderId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderDiscountValidateBeforeCall(orderId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderItemDiscount
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderItemDiscountCall(String orderId, String orderItemId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeAppliedDiscount;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()))
            .replaceAll("\\{" + "discountId" + "\\}", localVarApiClient.escapeString(discountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderItemDiscountValidateBeforeCall(String orderId, String orderItemId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderItemDiscount(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateOrderItemDiscount(Async)");
        }
        
        // verify the required parameter 'discountId' is set
        if (discountId == null) {
            throw new ApiException("Missing the required parameter 'discountId' when calling updateOrderItemDiscount(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderItemDiscountCall(orderId, orderItemId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, _callback);
        return localVarCall;

    }

    /**
     * Update Order Item Discount
     * Update a discount on the order item to ignore or unignore it.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrderItemDiscount(String orderId, String orderItemId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderItemDiscountWithHttpInfo(orderId, orderItemId, discountId, updateMode, version, commerceRuntimeAppliedDiscount);
        return localVarResp.getData();
    }

    /**
     * Update Order Item Discount
     * Update a discount on the order item to ignore or unignore it.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderItemDiscountWithHttpInfo(String orderId, String orderItemId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount) throws ApiException {
        okhttp3.Call localVarCall = updateOrderItemDiscountValidateBeforeCall(orderId, orderItemId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Item Discount (asynchronously)
     * Update a discount on the order item to ignore or unignore it.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param discountId Identifies the discount to be updated. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft). (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param commerceRuntimeAppliedDiscount Discount information to use as the update source. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderItemDiscountAsync(String orderId, String orderItemId, Integer discountId, String updateMode, String version, CommerceRuntimeAppliedDiscount commerceRuntimeAppliedDiscount, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderItemDiscountValidateBeforeCall(orderId, orderItemId, discountId, updateMode, version, commerceRuntimeAppliedDiscount, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderNote
     * @param orderId Unique identifier of the order whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderNoteCall(String orderId, String noteId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderNote;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/notes/{noteId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "noteId" + "\\}", localVarApiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderNoteValidateBeforeCall(String orderId, String noteId, OrderNote orderNote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderNote(Async)");
        }
        
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateOrderNote(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderNoteCall(orderId, noteId, orderNote, _callback);
        return localVarCall;

    }

    /**
     * Update Order Note
     * Updates a specific order note for an order.
     * @param orderId Unique identifier of the order whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @return OrderNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderNote updateOrderNote(String orderId, String noteId, OrderNote orderNote) throws ApiException {
        ApiResponse<OrderNote> localVarResp = updateOrderNoteWithHttpInfo(orderId, noteId, orderNote);
        return localVarResp.getData();
    }

    /**
     * Update Order Note
     * Updates a specific order note for an order.
     * @param orderId Unique identifier of the order whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @return ApiResponse&lt;OrderNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderNote> updateOrderNoteWithHttpInfo(String orderId, String noteId, OrderNote orderNote) throws ApiException {
        okhttp3.Call localVarCall = updateOrderNoteValidateBeforeCall(orderId, noteId, orderNote, null);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Note (asynchronously)
     * Updates a specific order note for an order.
     * @param orderId Unique identifier of the order whose note you want to update. (required)
     * @param noteId Unique identifier of the note whose text you want to update. (required)
     * @param orderNote Text of the note. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderNoteAsync(String orderId, String noteId, OrderNote orderNote, final ApiCallback<OrderNote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderNoteValidateBeforeCall(orderId, noteId, orderNote, _callback);
        Type localVarReturnType = new TypeToken<OrderNote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderRestrictions
     * @param orderId  (required)
     * @param restrictEdit  (optional)
     * @param restrictCancellation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderRestrictionsCall(String orderId, Boolean restrictEdit, Boolean restrictCancellation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/updateorderrestrictions"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (restrictEdit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrictEdit", restrictEdit));
        }

        if (restrictCancellation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrictCancellation", restrictCancellation));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderRestrictionsValidateBeforeCall(String orderId, Boolean restrictEdit, Boolean restrictCancellation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderRestrictions(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderRestrictionsCall(orderId, restrictEdit, restrictCancellation, _callback);
        return localVarCall;

    }

    /**
     * Update Order Restrictions
     * Update Order Restrictions
     * @param orderId  (required)
     * @param restrictEdit  (optional)
     * @param restrictCancellation  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrderRestrictions(String orderId, Boolean restrictEdit, Boolean restrictCancellation) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderRestrictionsWithHttpInfo(orderId, restrictEdit, restrictCancellation);
        return localVarResp.getData();
    }

    /**
     * Update Order Restrictions
     * Update Order Restrictions
     * @param orderId  (required)
     * @param restrictEdit  (optional)
     * @param restrictCancellation  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderRestrictionsWithHttpInfo(String orderId, Boolean restrictEdit, Boolean restrictCancellation) throws ApiException {
        okhttp3.Call localVarCall = updateOrderRestrictionsValidateBeforeCall(orderId, restrictEdit, restrictCancellation, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Restrictions (asynchronously)
     * Update Order Restrictions
     * @param orderId  (required)
     * @param restrictEdit  (optional)
     * @param restrictCancellation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderRestrictionsAsync(String orderId, Boolean restrictEdit, Boolean restrictCancellation, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderRestrictionsValidateBeforeCall(orderId, restrictEdit, restrictCancellation, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePackage
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to update on the order (required)
     * @param commerceRuntimePackage Package content to update on the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageCall(String orderId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimePackage;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/packages/{packageId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "packageId" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePackageValidateBeforeCall(String orderId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updatePackage(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling updatePackage(Async)");
        }
        

        okhttp3.Call localVarCall = updatePackageCall(orderId, packageId, commerceRuntimePackage, _callback);
        return localVarCall;

    }

    /**
     * Delete an order package
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to update on the order (required)
     * @param commerceRuntimePackage Package content to update on the order (optional)
     * @return CommerceRuntimePackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimePackage updatePackage(String orderId, String packageId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        ApiResponse<CommerceRuntimePackage> localVarResp = updatePackageWithHttpInfo(orderId, packageId, commerceRuntimePackage);
        return localVarResp.getData();
    }

    /**
     * Delete an order package
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to update on the order (required)
     * @param commerceRuntimePackage Package content to update on the order (optional)
     * @return ApiResponse&lt;CommerceRuntimePackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimePackage> updatePackageWithHttpInfo(String orderId, String packageId, CommerceRuntimePackage commerceRuntimePackage) throws ApiException {
        okhttp3.Call localVarCall = updatePackageValidateBeforeCall(orderId, packageId, commerceRuntimePackage, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an order package (asynchronously)
     * 
     * @param orderId Unique identifier of the order with which to associate the package. (required)
     * @param packageId Package to update on the order (required)
     * @param commerceRuntimePackage Package content to update on the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageAsync(String orderId, String packageId, CommerceRuntimePackage commerceRuntimePackage, final ApiCallback<CommerceRuntimePackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePackageValidateBeforeCall(orderId, packageId, commerceRuntimePackage, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimePackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePickup
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to update on the order (required)
     * @param pickup Pickup content to update on the order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePickupCall(String orderId, String pickupId, Pickup pickup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pickup;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/pickups/{pickupId}"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "pickupId" + "\\}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePickupValidateBeforeCall(String orderId, String pickupId, Pickup pickup, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updatePickup(Async)");
        }
        
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling updatePickup(Async)");
        }
        

        okhttp3.Call localVarCall = updatePickupCall(orderId, pickupId, pickup, _callback);
        return localVarCall;

    }

    /**
     * Update Pickup
     * Updates pickup details on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to update on the order (required)
     * @param pickup Pickup content to update on the order (optional)
     * @return Pickup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Pickup updatePickup(String orderId, String pickupId, Pickup pickup) throws ApiException {
        ApiResponse<Pickup> localVarResp = updatePickupWithHttpInfo(orderId, pickupId, pickup);
        return localVarResp.getData();
    }

    /**
     * Update Pickup
     * Updates pickup details on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to update on the order (required)
     * @param pickup Pickup content to update on the order (optional)
     * @return ApiResponse&lt;Pickup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pickup> updatePickupWithHttpInfo(String orderId, String pickupId, Pickup pickup) throws ApiException {
        okhttp3.Call localVarCall = updatePickupValidateBeforeCall(orderId, pickupId, pickup, null);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Pickup (asynchronously)
     * Updates pickup details on the order.
     * @param orderId Unique identifier of the order with which to associate the pickup. (required)
     * @param pickupId Pickup to update on the order (required)
     * @param pickup Pickup content to update on the order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePickupAsync(String orderId, String pickupId, Pickup pickup, final ApiCallback<Pickup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePickupValidateBeforeCall(orderId, pickupId, pickup, _callback);
        Type localVarReturnType = new TypeToken<Pickup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShipmentAdjustments
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param shipmentAdjustment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentAdjustmentsCall(String orderId, Integer shipmentNumber, ShipmentAdjustment shipmentAdjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shipmentAdjustment;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "shipmentNumber" + "\\}", localVarApiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShipmentAdjustmentsValidateBeforeCall(String orderId, Integer shipmentNumber, ShipmentAdjustment shipmentAdjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateShipmentAdjustments(Async)");
        }
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling updateShipmentAdjustments(Async)");
        }
        

        okhttp3.Call localVarCall = updateShipmentAdjustmentsCall(orderId, shipmentNumber, shipmentAdjustment, _callback);
        return localVarCall;

    }

    /**
     * Update Shipment Adjustments
     * Updates adjustments on shipments.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param shipmentAdjustment  (optional)
     * @return CommerceRuntimeShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeShipment updateShipmentAdjustments(String orderId, Integer shipmentNumber, ShipmentAdjustment shipmentAdjustment) throws ApiException {
        ApiResponse<CommerceRuntimeShipment> localVarResp = updateShipmentAdjustmentsWithHttpInfo(orderId, shipmentNumber, shipmentAdjustment);
        return localVarResp.getData();
    }

    /**
     * Update Shipment Adjustments
     * Updates adjustments on shipments.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param shipmentAdjustment  (optional)
     * @return ApiResponse&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeShipment> updateShipmentAdjustmentsWithHttpInfo(String orderId, Integer shipmentNumber, ShipmentAdjustment shipmentAdjustment) throws ApiException {
        okhttp3.Call localVarCall = updateShipmentAdjustmentsValidateBeforeCall(orderId, shipmentNumber, shipmentAdjustment, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Shipment Adjustments (asynchronously)
     * Updates adjustments on shipments.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param shipmentAdjustment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentAdjustmentsAsync(String orderId, Integer shipmentNumber, ShipmentAdjustment shipmentAdjustment, final ApiCallback<CommerceRuntimeShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShipmentAdjustmentsValidateBeforeCall(orderId, shipmentNumber, shipmentAdjustment, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateShipmentItem
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param itemId  (required)
     * @param shipmentItemAdjustment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentItemCall(String orderId, Integer shipmentNumber, Integer itemId, ShipmentItemAdjustment shipmentItemAdjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shipmentItemAdjustment;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "shipmentNumber" + "\\}", localVarApiClient.escapeString(shipmentNumber.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShipmentItemValidateBeforeCall(String orderId, Integer shipmentNumber, Integer itemId, ShipmentItemAdjustment shipmentItemAdjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateShipmentItem(Async)");
        }
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling updateShipmentItem(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateShipmentItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateShipmentItemCall(orderId, shipmentNumber, itemId, shipmentItemAdjustment, _callback);
        return localVarCall;

    }

    /**
     * Update Shipment Item
     * Updates shipment item with new shipment adjustment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param itemId  (required)
     * @param shipmentItemAdjustment  (optional)
     * @return CommerceRuntimeShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeShipment updateShipmentItem(String orderId, Integer shipmentNumber, Integer itemId, ShipmentItemAdjustment shipmentItemAdjustment) throws ApiException {
        ApiResponse<CommerceRuntimeShipment> localVarResp = updateShipmentItemWithHttpInfo(orderId, shipmentNumber, itemId, shipmentItemAdjustment);
        return localVarResp.getData();
    }

    /**
     * Update Shipment Item
     * Updates shipment item with new shipment adjustment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param itemId  (required)
     * @param shipmentItemAdjustment  (optional)
     * @return ApiResponse&lt;CommerceRuntimeShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeShipment> updateShipmentItemWithHttpInfo(String orderId, Integer shipmentNumber, Integer itemId, ShipmentItemAdjustment shipmentItemAdjustment) throws ApiException {
        okhttp3.Call localVarCall = updateShipmentItemValidateBeforeCall(orderId, shipmentNumber, itemId, shipmentItemAdjustment, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Shipment Item (asynchronously)
     * Updates shipment item with new shipment adjustment.
     * @param orderId  (required)
     * @param shipmentNumber  (required)
     * @param itemId  (required)
     * @param shipmentItemAdjustment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateShipmentItemAsync(String orderId, Integer shipmentNumber, Integer itemId, ShipmentItemAdjustment shipmentItemAdjustment, final ApiCallback<CommerceRuntimeShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShipmentItemValidateBeforeCall(orderId, shipmentNumber, itemId, shipmentItemAdjustment, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionInfo
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param subscriptionInfo Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionInfoCall(String orderId, String orderItemId, SubscriptionInfo subscriptionInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionInfo;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/subscriptionInfo"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionInfoValidateBeforeCall(String orderId, String orderItemId, SubscriptionInfo subscriptionInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateSubscriptionInfo(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling updateSubscriptionInfo(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionInfoCall(orderId, orderItemId, subscriptionInfo, _callback);
        return localVarCall;

    }

    /**
     * Update Order Item Subscription Info, applies only to Draft Order
     * Update a subscription info on the order item.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param subscriptionInfo Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order updateSubscriptionInfo(String orderId, String orderItemId, SubscriptionInfo subscriptionInfo) throws ApiException {
        ApiResponse<Order> localVarResp = updateSubscriptionInfoWithHttpInfo(orderId, orderItemId, subscriptionInfo);
        return localVarResp.getData();
    }

    /**
     * Update Order Item Subscription Info, applies only to Draft Order
     * Update a subscription info on the order item.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param subscriptionInfo Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateSubscriptionInfoWithHttpInfo(String orderId, String orderItemId, SubscriptionInfo subscriptionInfo) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionInfoValidateBeforeCall(orderId, orderItemId, subscriptionInfo, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order Item Subscription Info, applies only to Draft Order (asynchronously)
     * Update a subscription info on the order item.
     * @param orderId Unique identifier of the order with which to associate the coupon. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param subscriptionInfo Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionInfoAsync(String orderId, String orderItemId, SubscriptionInfo subscriptionInfo, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionInfoValidateBeforeCall(orderId, orderItemId, subscriptionInfo, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertAlternateContact
     * @param orderId  (required)
     * @param alternateContact  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertAlternateContactCall(String orderId, AlternateContact alternateContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alternateContact;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/upsertalternatecontact"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertAlternateContactValidateBeforeCall(String orderId, AlternateContact alternateContact, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling upsertAlternateContact(Async)");
        }
        

        okhttp3.Call localVarCall = upsertAlternateContactCall(orderId, alternateContact, _callback);
        return localVarCall;

    }

    /**
     * Endpoint to add/update alternate contact
     * 
     * @param orderId  (required)
     * @param alternateContact  (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order upsertAlternateContact(String orderId, AlternateContact alternateContact) throws ApiException {
        ApiResponse<Order> localVarResp = upsertAlternateContactWithHttpInfo(orderId, alternateContact);
        return localVarResp.getData();
    }

    /**
     * Endpoint to add/update alternate contact
     * 
     * @param orderId  (required)
     * @param alternateContact  (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> upsertAlternateContactWithHttpInfo(String orderId, AlternateContact alternateContact) throws ApiException {
        okhttp3.Call localVarCall = upsertAlternateContactValidateBeforeCall(orderId, alternateContact, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint to add/update alternate contact (asynchronously)
     * 
     * @param orderId  (required)
     * @param alternateContact  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertAlternateContactAsync(String orderId, AlternateContact alternateContact, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertAlternateContactValidateBeforeCall(orderId, alternateContact, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertInventoryTags
     * @param orderId Unique identifier of the order. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param inventoryTags Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsCall(String orderId, String orderItemId, String updateMode, String version, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryTags;

        // create path and map variables
        String localVarPath = "/commerce/orders/{orderId}/items/{orderItemId}/upsertInventoryTags"
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderItemId" + "\\}", localVarApiClient.escapeString(orderItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertInventoryTagsValidateBeforeCall(String orderId, String orderItemId, String updateMode, String version, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling upsertInventoryTags(Async)");
        }
        
        // verify the required parameter 'orderItemId' is set
        if (orderItemId == null) {
            throw new ApiException("Missing the required parameter 'orderItemId' when calling upsertInventoryTags(Async)");
        }
        

        okhttp3.Call localVarCall = upsertInventoryTagsCall(orderId, orderItemId, updateMode, version, inventoryTags, _callback);
        return localVarCall;

    }

    /**
     * Upsert Inventory Tags on OrderItem
     * You need to pass in all tags everytime
     * @param orderId Unique identifier of the order. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param inventoryTags Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source (optional)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Order upsertInventoryTags(String orderId, String orderItemId, String updateMode, String version, List<InventoryTags> inventoryTags) throws ApiException {
        ApiResponse<Order> localVarResp = upsertInventoryTagsWithHttpInfo(orderId, orderItemId, updateMode, version, inventoryTags);
        return localVarResp.getData();
    }

    /**
     * Upsert Inventory Tags on OrderItem
     * You need to pass in all tags everytime
     * @param orderId Unique identifier of the order. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param inventoryTags Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source (optional)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> upsertInventoryTagsWithHttpInfo(String orderId, String orderItemId, String updateMode, String version, List<InventoryTags> inventoryTags) throws ApiException {
        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(orderId, orderItemId, updateMode, version, inventoryTags, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Inventory Tags on OrderItem (asynchronously)
     * You need to pass in all tags everytime
     * @param orderId Unique identifier of the order. (required)
     * @param orderItemId Unique identifier of the order item. (required)
     * @param updateMode Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft) (optional)
     * @param version Determines whether or not to check versioning of items for concurrency purposes. (optional)
     * @param inventoryTags Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsAsync(String orderId, String orderItemId, String updateMode, String version, List<InventoryTags> inventoryTags, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(orderId, orderItemId, updateMode, version, inventoryTags, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public OrderApi build() {
            return new OrderApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
