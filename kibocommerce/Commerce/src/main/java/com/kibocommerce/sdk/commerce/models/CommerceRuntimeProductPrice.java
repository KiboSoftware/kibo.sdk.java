/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Price of the product with any sale and discounts applied.
 */
@ApiModel(description = "Price of the product with any sale and discounts applied.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CommerceRuntimeProductPrice implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_SALE_PRICE = "salePrice";
  @SerializedName(SERIALIZED_NAME_SALE_PRICE)
  private Double salePrice;

  public static final String SERIALIZED_NAME_TENANT_OVERRIDE_PRICE = "tenantOverridePrice";
  @SerializedName(SERIALIZED_NAME_TENANT_OVERRIDE_PRICE)
  private Double tenantOverridePrice;

  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private Double msrp;

  public static final String SERIALIZED_NAME_CREDIT_VALUE = "creditValue";
  @SerializedName(SERIALIZED_NAME_CREDIT_VALUE)
  private Double creditValue;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_ENTRY_MODE = "priceListEntryMode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ENTRY_MODE)
  private String priceListEntryMode;

  public CommerceRuntimeProductPrice() {
  }

  public CommerceRuntimeProductPrice price(Double price) {
    
    this.price = price;
    return this;
  }

   /**
   * Price of the product. This is the price that the merchant intends to sell the product if no sale price is present.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Price of the product. This is the price that the merchant intends to sell the product if no sale price is present.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    this.price = price;
  }


  public CommerceRuntimeProductPrice salePrice(Double salePrice) {
    
    this.salePrice = salePrice;
    return this;
  }

   /**
   * Current sale price of the product, which is a specific numerical amount (not a percentage off).
   * @return salePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current sale price of the product, which is a specific numerical amount (not a percentage off).")

  public Double getSalePrice() {
    return salePrice;
  }


  public void setSalePrice(Double salePrice) {
    this.salePrice = salePrice;
  }


  public CommerceRuntimeProductPrice tenantOverridePrice(Double tenantOverridePrice) {
    
    this.tenantOverridePrice = tenantOverridePrice;
    return this;
  }

   /**
   * An override price applied on the product by the tenant.
   * @return tenantOverridePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An override price applied on the product by the tenant.")

  public Double getTenantOverridePrice() {
    return tenantOverridePrice;
  }


  public void setTenantOverridePrice(Double tenantOverridePrice) {
    this.tenantOverridePrice = tenantOverridePrice;
  }


  public CommerceRuntimeProductPrice msrp(Double msrp) {
    
    this.msrp = msrp;
    return this;
  }

   /**
   * MSRP of product.
   * @return msrp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MSRP of product.")

  public Double getMsrp() {
    return msrp;
  }


  public void setMsrp(Double msrp) {
    this.msrp = msrp;
  }


  public CommerceRuntimeProductPrice creditValue(Double creditValue) {
    
    this.creditValue = creditValue;
    return this;
  }

   /**
   * Credit Value when the product happens to be a gift card or similar product
   * @return creditValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Value when the product happens to be a gift card or similar product")

  public Double getCreditValue() {
    return creditValue;
  }


  public void setCreditValue(Double creditValue) {
    this.creditValue = creditValue;
  }


  public CommerceRuntimeProductPrice priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * Pricelist code for the product
   * @return priceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricelist code for the product")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public CommerceRuntimeProductPrice priceListEntryMode(String priceListEntryMode) {
    
    this.priceListEntryMode = priceListEntryMode;
    return this;
  }

   /**
   * Pricelist entry mode of the product.  Note: possible values are below  1. null : Product doesn&#39;t participate in pricelist  2. Bulk : Bulk volume price available(unit price vary based on quantity)  3. Simple:
   * @return priceListEntryMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricelist entry mode of the product.  Note: possible values are below  1. null : Product doesn't participate in pricelist  2. Bulk : Bulk volume price available(unit price vary based on quantity)  3. Simple:")

  public String getPriceListEntryMode() {
    return priceListEntryMode;
  }


  public void setPriceListEntryMode(String priceListEntryMode) {
    this.priceListEntryMode = priceListEntryMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommerceRuntimeProductPrice commerceRuntimeProductPrice = (CommerceRuntimeProductPrice) o;
    return Objects.equals(this.price, commerceRuntimeProductPrice.price) &&
        Objects.equals(this.salePrice, commerceRuntimeProductPrice.salePrice) &&
        Objects.equals(this.tenantOverridePrice, commerceRuntimeProductPrice.tenantOverridePrice) &&
        Objects.equals(this.msrp, commerceRuntimeProductPrice.msrp) &&
        Objects.equals(this.creditValue, commerceRuntimeProductPrice.creditValue) &&
        Objects.equals(this.priceListCode, commerceRuntimeProductPrice.priceListCode) &&
        Objects.equals(this.priceListEntryMode, commerceRuntimeProductPrice.priceListEntryMode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(price, salePrice, tenantOverridePrice, msrp, creditValue, priceListCode, priceListEntryMode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommerceRuntimeProductPrice {\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
    sb.append("    tenantOverridePrice: ").append(toIndentedString(tenantOverridePrice)).append("\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    creditValue: ").append(toIndentedString(creditValue)).append("\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    priceListEntryMode: ").append(toIndentedString(priceListEntryMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("price");
    openapiFields.add("salePrice");
    openapiFields.add("tenantOverridePrice");
    openapiFields.add("msrp");
    openapiFields.add("creditValue");
    openapiFields.add("priceListCode");
    openapiFields.add("priceListEntryMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CommerceRuntimeProductPrice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CommerceRuntimeProductPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommerceRuntimeProductPrice is not found in the empty JSON string", CommerceRuntimeProductPrice.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CommerceRuntimeProductPrice.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommerceRuntimeProductPrice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("priceListCode") != null && !jsonObj.get("priceListCode").isJsonNull()) && !jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      if ((jsonObj.get("priceListEntryMode") != null && !jsonObj.get("priceListEntryMode").isJsonNull()) && !jsonObj.get("priceListEntryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListEntryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListEntryMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommerceRuntimeProductPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommerceRuntimeProductPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommerceRuntimeProductPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommerceRuntimeProductPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<CommerceRuntimeProductPrice>() {
           @Override
           public void write(JsonWriter out, CommerceRuntimeProductPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommerceRuntimeProductPrice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommerceRuntimeProductPrice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommerceRuntimeProductPrice
  * @throws IOException if the JSON string is invalid with respect to CommerceRuntimeProductPrice
  */
  public static CommerceRuntimeProductPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommerceRuntimeProductPrice.class);
  }

 /**
  * Convert an instance of CommerceRuntimeProductPrice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

