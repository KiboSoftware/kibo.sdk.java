/*
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;

import com.kibocommerce.sdk.fulfillment.ApiCallback;
import com.kibocommerce.sdk.fulfillment.ApiClient;
import com.kibocommerce.sdk.fulfillment.ApiException;
import com.kibocommerce.sdk.fulfillment.ApiResponse;
import com.kibocommerce.sdk.fulfillment.Configuration;
import com.kibocommerce.sdk.fulfillment.Pair;
import com.kibocommerce.sdk.fulfillment.ProgressRequestBody;
import com.kibocommerce.sdk.fulfillment.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.fulfillment.model.CollectionModelOfManifest;
import com.kibocommerce.sdk.fulfillment.model.CollectionModelOfShipment;
import com.kibocommerce.sdk.fulfillment.model.EntityModelOfManifest;
import com.kibocommerce.sdk.fulfillment.model.ManifestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManifestControllerApi {
    private ApiClient apiClient;

    public ManifestControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManifestControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createManifestUsingPOST
     * @param xVolTenant  (required)
     * @param manifestRequest manifestRequestDto (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createManifestUsingPOSTCall(Integer xVolTenant, ManifestRequest manifestRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = manifestRequest;

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/shipping/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createManifestUsingPOSTValidateBeforeCall(Integer xVolTenant, ManifestRequest manifestRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createManifestUsingPOST(Async)");
        }
        
        // verify the required parameter 'manifestRequest' is set
        if (manifestRequest == null) {
            throw new ApiException("Missing the required parameter 'manifestRequest' when calling createManifestUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createManifestUsingPOSTCall(xVolTenant, manifestRequest, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * createManifest
     * 
     * @param xVolTenant  (required)
     * @param manifestRequest manifestRequestDto (required)
     * @param xVolSite  (optional)
     * @return EntityModelOfManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityModelOfManifest createManifestUsingPOST(Integer xVolTenant, ManifestRequest manifestRequest, Integer xVolSite) throws ApiException {
        ApiResponse<EntityModelOfManifest> resp = createManifestUsingPOSTWithHttpInfo(xVolTenant, manifestRequest, xVolSite);
        return resp.getData();
    }

    /**
     * createManifest
     * 
     * @param xVolTenant  (required)
     * @param manifestRequest manifestRequestDto (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;EntityModelOfManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityModelOfManifest> createManifestUsingPOSTWithHttpInfo(Integer xVolTenant, ManifestRequest manifestRequest, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = createManifestUsingPOSTValidateBeforeCall(xVolTenant, manifestRequest, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<EntityModelOfManifest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * createManifest (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param manifestRequest manifestRequestDto (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createManifestUsingPOSTAsync(Integer xVolTenant, ManifestRequest manifestRequest, Integer xVolSite, final ApiCallback<EntityModelOfManifest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createManifestUsingPOSTValidateBeforeCall(xVolTenant, manifestRequest, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityModelOfManifest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEligibleShipmentsUsingGET
     * @param carrier carrier (required)
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEligibleShipmentsUsingGETCall(String carrier, String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/shipping/manifests/eligibleShipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (carrier != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("carrier", carrier));
        }

        if (fromDays != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fromDays", fromDays));
        }

        if (fulfillmentLocationCode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fulfillmentLocationCode", fulfillmentLocationCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEligibleShipmentsUsingGETValidateBeforeCall(String carrier, String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'carrier' is set
        if (carrier == null) {
            throw new ApiException("Missing the required parameter 'carrier' when calling getEligibleShipmentsUsingGET(Async)");
        }
        
        // verify the required parameter 'fulfillmentLocationCode' is set
        if (fulfillmentLocationCode == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLocationCode' when calling getEligibleShipmentsUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getEligibleShipmentsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getEligibleShipmentsUsingGETCall(carrier, fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getEligibleShipments
     * 
     * @param carrier carrier (required)
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @return CollectionModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionModelOfShipment getEligibleShipmentsUsingGET(String carrier, String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite) throws ApiException {
        ApiResponse<CollectionModelOfShipment> resp = getEligibleShipmentsUsingGETWithHttpInfo(carrier, fulfillmentLocationCode, xVolTenant, fromDays, xVolSite);
        return resp.getData();
    }

    /**
     * getEligibleShipments
     * 
     * @param carrier carrier (required)
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;CollectionModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionModelOfShipment> getEligibleShipmentsUsingGETWithHttpInfo(String carrier, String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getEligibleShipmentsUsingGETValidateBeforeCall(carrier, fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<CollectionModelOfShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getEligibleShipments (asynchronously)
     * 
     * @param carrier carrier (required)
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEligibleShipmentsUsingGETAsync(String carrier, String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ApiCallback<CollectionModelOfShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEligibleShipmentsUsingGETValidateBeforeCall(carrier, fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionModelOfShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getManifestUsingGET
     * @param manifestId manifestId (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManifestUsingGETCall(String manifestId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/shipping/manifests/{manifestId}"
            .replaceAll("\\{" + "manifestId" + "\\}", apiClient.escapeString(manifestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManifestUsingGETValidateBeforeCall(String manifestId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'manifestId' is set
        if (manifestId == null) {
            throw new ApiException("Missing the required parameter 'manifestId' when calling getManifestUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getManifestUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getManifestUsingGETCall(manifestId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getManifest
     * 
     * @param manifestId manifestId (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return EntityModelOfManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityModelOfManifest getManifestUsingGET(String manifestId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        ApiResponse<EntityModelOfManifest> resp = getManifestUsingGETWithHttpInfo(manifestId, xVolTenant, xVolSite);
        return resp.getData();
    }

    /**
     * getManifest
     * 
     * @param manifestId manifestId (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;EntityModelOfManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityModelOfManifest> getManifestUsingGETWithHttpInfo(String manifestId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getManifestUsingGETValidateBeforeCall(manifestId, xVolTenant, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<EntityModelOfManifest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getManifest (asynchronously)
     * 
     * @param manifestId manifestId (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManifestUsingGETAsync(String manifestId, Integer xVolTenant, Integer xVolSite, final ApiCallback<EntityModelOfManifest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManifestUsingGETValidateBeforeCall(manifestId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityModelOfManifest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getManifestsUsingGET
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getManifestsUsingGETCall(String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/commerce/fulfillment/shipping/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromDays != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fromDays", fromDays));
        }

        if (fulfillmentLocationCode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fulfillmentLocationCode", fulfillmentLocationCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getManifestsUsingGETValidateBeforeCall(String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fulfillmentLocationCode' is set
        if (fulfillmentLocationCode == null) {
            throw new ApiException("Missing the required parameter 'fulfillmentLocationCode' when calling getManifestsUsingGET(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getManifestsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getManifestsUsingGETCall(fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getManifests
     * 
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @return CollectionModelOfManifest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionModelOfManifest getManifestsUsingGET(String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite) throws ApiException {
        ApiResponse<CollectionModelOfManifest> resp = getManifestsUsingGETWithHttpInfo(fulfillmentLocationCode, xVolTenant, fromDays, xVolSite);
        return resp.getData();
    }

    /**
     * getManifests
     * 
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;CollectionModelOfManifest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionModelOfManifest> getManifestsUsingGETWithHttpInfo(String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getManifestsUsingGETValidateBeforeCall(fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<CollectionModelOfManifest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getManifests (asynchronously)
     * 
     * @param fulfillmentLocationCode fulfillmentLocationCode (required)
     * @param xVolTenant  (required)
     * @param fromDays fromDays (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getManifestsUsingGETAsync(String fulfillmentLocationCode, Integer xVolTenant, Integer fromDays, Integer xVolSite, final ApiCallback<CollectionModelOfManifest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getManifestsUsingGETValidateBeforeCall(fulfillmentLocationCode, xVolTenant, fromDays, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionModelOfManifest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
