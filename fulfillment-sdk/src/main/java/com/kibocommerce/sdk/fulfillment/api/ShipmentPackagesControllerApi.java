/*
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;

import com.kibocommerce.sdk.fulfillment.ApiCallback;
import com.kibocommerce.sdk.fulfillment.ApiClient;
import com.kibocommerce.sdk.fulfillment.ApiException;
import com.kibocommerce.sdk.fulfillment.ApiResponse;
import com.kibocommerce.sdk.fulfillment.Configuration;
import com.kibocommerce.sdk.fulfillment.Pair;
import com.kibocommerce.sdk.fulfillment.ProgressRequestBody;
import com.kibocommerce.sdk.fulfillment.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.fulfillment.model.EntityModelOfShipment;
import com.kibocommerce.sdk.fulfillment.model.ModelPackage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShipmentPackagesControllerApi {
    private ApiClient apiClient;

    public ShipmentPackagesControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShipmentPackagesControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteShipmentPackageUsingDELETE
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShipmentPackageUsingDELETECall(String packageId, Integer shipmentNumber, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/commerce/shipments/{shipmentNumber}/packages/{packageId}"
            .replaceAll("\\{" + "packageId" + "\\}", apiClient.escapeString(packageId.toString()))
            .replaceAll("\\{" + "shipmentNumber" + "\\}", apiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteShipmentPackageUsingDELETEValidateBeforeCall(String packageId, Integer shipmentNumber, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling deleteShipmentPackageUsingDELETE(Async)");
        }
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling deleteShipmentPackageUsingDELETE(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteShipmentPackageUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteShipmentPackageUsingDELETECall(packageId, shipmentNumber, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * deleteShipmentPackage
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteShipmentPackageUsingDELETE(String packageId, Integer shipmentNumber, Integer xVolTenant, Integer xVolSite) throws ApiException {
        deleteShipmentPackageUsingDELETEWithHttpInfo(packageId, shipmentNumber, xVolTenant, xVolSite);
    }

    /**
     * deleteShipmentPackage
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteShipmentPackageUsingDELETEWithHttpInfo(String packageId, Integer shipmentNumber, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = deleteShipmentPackageUsingDELETEValidateBeforeCall(packageId, shipmentNumber, xVolTenant, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteShipmentPackage (asynchronously)
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShipmentPackageUsingDELETEAsync(String packageId, Integer shipmentNumber, Integer xVolTenant, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShipmentPackageUsingDELETEValidateBeforeCall(packageId, shipmentNumber, xVolTenant, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for newPackageUsingPOST
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call newPackageUsingPOSTCall(Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelPackage;

        // create path and map variables
        String localVarPath = "/commerce/shipments/{shipmentNumber}/packages"
            .replaceAll("\\{" + "shipmentNumber" + "\\}", apiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call newPackageUsingPOSTValidateBeforeCall(Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling newPackageUsingPOST(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling newPackageUsingPOST(Async)");
        }
        
        // verify the required parameter 'modelPackage' is set
        if (modelPackage == null) {
            throw new ApiException("Missing the required parameter 'modelPackage' when calling newPackageUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = newPackageUsingPOSTCall(shipmentNumber, xVolTenant, modelPackage, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * newPackage
     * 
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @return EntityModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityModelOfShipment newPackageUsingPOST(Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite) throws ApiException {
        ApiResponse<EntityModelOfShipment> resp = newPackageUsingPOSTWithHttpInfo(shipmentNumber, xVolTenant, modelPackage, xVolSite);
        return resp.getData();
    }

    /**
     * newPackage
     * 
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;EntityModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityModelOfShipment> newPackageUsingPOSTWithHttpInfo(Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = newPackageUsingPOSTValidateBeforeCall(shipmentNumber, xVolTenant, modelPackage, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * newPackage (asynchronously)
     * 
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call newPackageUsingPOSTAsync(Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ApiCallback<EntityModelOfShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = newPackageUsingPOSTValidateBeforeCall(shipmentNumber, xVolTenant, modelPackage, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePackageUsingPUT
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePackageUsingPUTCall(String packageId, Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = modelPackage;

        // create path and map variables
        String localVarPath = "/commerce/shipments/{shipmentNumber}/packages/{packageId}"
            .replaceAll("\\{" + "packageId" + "\\}", apiClient.escapeString(packageId.toString()))
            .replaceAll("\\{" + "shipmentNumber" + "\\}", apiClient.escapeString(shipmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "application/hal+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePackageUsingPUTValidateBeforeCall(String packageId, Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling updatePackageUsingPUT(Async)");
        }
        
        // verify the required parameter 'shipmentNumber' is set
        if (shipmentNumber == null) {
            throw new ApiException("Missing the required parameter 'shipmentNumber' when calling updatePackageUsingPUT(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updatePackageUsingPUT(Async)");
        }
        
        // verify the required parameter 'modelPackage' is set
        if (modelPackage == null) {
            throw new ApiException("Missing the required parameter 'modelPackage' when calling updatePackageUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePackageUsingPUTCall(packageId, shipmentNumber, xVolTenant, modelPackage, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updatePackage
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @return EntityModelOfShipment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityModelOfShipment updatePackageUsingPUT(String packageId, Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite) throws ApiException {
        ApiResponse<EntityModelOfShipment> resp = updatePackageUsingPUTWithHttpInfo(packageId, shipmentNumber, xVolTenant, modelPackage, xVolSite);
        return resp.getData();
    }

    /**
     * updatePackage
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;EntityModelOfShipment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityModelOfShipment> updatePackageUsingPUTWithHttpInfo(String packageId, Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = updatePackageUsingPUTValidateBeforeCall(packageId, shipmentNumber, xVolTenant, modelPackage, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updatePackage (asynchronously)
     * 
     * @param packageId packageId (required)
     * @param shipmentNumber shipmentNumber (required)
     * @param xVolTenant  (required)
     * @param modelPackage packageDto (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePackageUsingPUTAsync(String packageId, Integer shipmentNumber, Integer xVolTenant, ModelPackage modelPackage, Integer xVolSite, final ApiCallback<EntityModelOfShipment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePackageUsingPUTValidateBeforeCall(packageId, shipmentNumber, xVolTenant, modelPackage, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntityModelOfShipment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
