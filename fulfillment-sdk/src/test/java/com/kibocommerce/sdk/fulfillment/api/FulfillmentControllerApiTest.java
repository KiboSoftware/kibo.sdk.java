/*
 * Kibo Fulfillment API
 * REST API backing the Kibo Fulfiller User Interface
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;

import com.kibocommerce.sdk.fulfillment.ApiException;
import com.kibocommerce.sdk.fulfillment.model.Principal;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FulfillmentControllerApi
 */
@Ignore
public class FulfillmentControllerApiTest {

    private final FulfillmentControllerApi api = new FulfillmentControllerApi();

    
    /**
     * fulfillment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fulfillmentUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        String response = api.fulfillmentUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * getAuthorizedUserName
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizedUserNameUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        String response = api.getAuthorizedUserNameUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * getAuthorizedUserRoles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthorizedUserRolesUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        List<String> response = api.getAuthorizedUserRolesUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * getPrincipal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrincipalUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        String name = null;
        Integer xVolSite = null;
        Principal response = api.getPrincipalUsingGET(xVolTenant, name, xVolSite);

        // TODO: test validations
    }
    
    /**
     * home
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void homeUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        String response = api.homeUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * storeAssociate
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeAssociateUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        String response = api.storeAssociateUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * storeManager
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storeManagerUsingGETTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        String response = api.storeManagerUsingGET(xVolTenant, xVolSite);

        // TODO: test validations
    }
    
}
