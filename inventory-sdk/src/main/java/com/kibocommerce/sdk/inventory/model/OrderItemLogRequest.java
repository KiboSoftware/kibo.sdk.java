/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.model.BaseRequest;
import com.kibocommerce.sdk.inventory.model.OrderItemLogIdentifier;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * OrderItemLogRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-24T16:31:33.449-05:00[America/Chicago]")
public class OrderItemLogRequest extends BaseRequest {
  public static final String SERIALIZED_NAME_IDENTIFIERS = "identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<OrderItemLogIdentifier> identifiers = null;

  /**
   * Order Identifier
   */
  @JsonAdapter(OrderByEnum.Adapter.class)
  public enum OrderByEnum {
    ORDER_ID("ORDER_ID"),
    
    ORDER_ITEM_ID("ORDER_ITEM_ID"),
    
    INVENTORY_ID("INVENTORY_ID"),
    
    TENANT_ID("TENANT_ID"),
    
    LOCATION_ID("LOCATION_ID"),
    
    USER_ID("USER_ID"),
    
    QUANTITY("QUANTITY"),
    
    TYPE("TYPE"),
    
    RESOLVED("RESOLVED"),
    
    FIXED("FIXED"),
    
    DATE("DATE"),
    
    SHIPMENT_ID("SHIPMENT_ID");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderByEnum fromValue(String text) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<OrderByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderByEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderByEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private OrderByEnum orderBy;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  /**
   * The type of logs to retrieve
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALLOCATE("ALLOCATE"),
    
    DEALLOCATE("DEALLOCATE"),
    
    FULFILL("FULFILL"),
    
    PICK("PICK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SORT_ASCENDING = "sortAscending";
  @SerializedName(SERIALIZED_NAME_SORT_ASCENDING)
  private Boolean sortAscending;

  public OrderItemLogRequest identifiers(List<OrderItemLogIdentifier> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public OrderItemLogRequest addIdentifiersItem(OrderItemLogIdentifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<OrderItemLogIdentifier>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

   /**
   * A list of order item log identifiers to search for
   * @return identifiers
  **/
  @ApiModelProperty(value = "A list of order item log identifiers to search for")
  public List<OrderItemLogIdentifier> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<OrderItemLogIdentifier> identifiers) {
    this.identifiers = identifiers;
  }

  public OrderItemLogRequest orderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Order Identifier
   * @return orderBy
  **/
  @ApiModelProperty(value = "Order Identifier")
  public OrderByEnum getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(OrderByEnum orderBy) {
    this.orderBy = orderBy;
  }

  public OrderItemLogRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum number of results to return
   * @return limit
  **/
  @ApiModelProperty(value = "The maximum number of results to return")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public OrderItemLogRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of logs to retrieve
   * @return type
  **/
  @ApiModelProperty(value = "The type of logs to retrieve")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public OrderItemLogRequest sortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
    return this;
  }

   /**
   * Whether to sort results ascending, based on orderBy
   * @return sortAscending
  **/
  @ApiModelProperty(value = "Whether to sort results ascending, based on orderBy")
  public Boolean getSortAscending() {
    return sortAscending;
  }

  public void setSortAscending(Boolean sortAscending) {
    this.sortAscending = sortAscending;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItemLogRequest orderItemLogRequest = (OrderItemLogRequest) o;
    return Objects.equals(this.identifiers, orderItemLogRequest.identifiers) &&
        Objects.equals(this.orderBy, orderItemLogRequest.orderBy) &&
        Objects.equals(this.limit, orderItemLogRequest.limit) &&
        Objects.equals(this.type, orderItemLogRequest.type) &&
        Objects.equals(this.sortAscending, orderItemLogRequest.sortAscending) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifiers, orderBy, limit, type, sortAscending, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemLogRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sortAscending: ").append(toIndentedString(sortAscending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

