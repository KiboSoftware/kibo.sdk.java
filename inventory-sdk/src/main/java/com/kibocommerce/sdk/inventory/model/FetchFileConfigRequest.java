/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.model.BaseRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FetchFileConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-25T11:56:03.255426-05:00[America/Chicago]")
public class FetchFileConfigRequest extends BaseRequest {
  public static final String SERIALIZED_NAME_FETCH_FILE_CONFIG_I_D = "fetchFileConfigID";
  @SerializedName(SERIALIZED_NAME_FETCH_FILE_CONFIG_I_D)
  private Integer fetchFileConfigID;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EMAIL_LIST = "emailList";
  @SerializedName(SERIALIZED_NAME_EMAIL_LIST)
  private String emailList;

  public static final String SERIALIZED_NAME_REFRESH_ENABLED = "refreshEnabled";
  @SerializedName(SERIALIZED_NAME_REFRESH_ENABLED)
  private Boolean refreshEnabled;

  public static final String SERIALIZED_NAME_REFRESH_FILE_DESCRIPTION = "refreshFileDescription";
  @SerializedName(SERIALIZED_NAME_REFRESH_FILE_DESCRIPTION)
  private String refreshFileDescription;

  public static final String SERIALIZED_NAME_UPDATE_ENABLED = "updateEnabled";
  @SerializedName(SERIALIZED_NAME_UPDATE_ENABLED)
  private Boolean updateEnabled;

  public static final String SERIALIZED_NAME_UPDATE_FILE_DESCRIPTION = "updateFileDescription";
  @SerializedName(SERIALIZED_NAME_UPDATE_FILE_DESCRIPTION)
  private String updateFileDescription;

  public static final String SERIALIZED_NAME_FTP_SERVER = "ftpServer";
  @SerializedName(SERIALIZED_NAME_FTP_SERVER)
  private String ftpServer;

  public static final String SERIALIZED_NAME_FTP_USERNAME = "ftpUsername";
  @SerializedName(SERIALIZED_NAME_FTP_USERNAME)
  private String ftpUsername;

  public static final String SERIALIZED_NAME_FTP_PASSWORD = "ftpPassword";
  @SerializedName(SERIALIZED_NAME_FTP_PASSWORD)
  private String ftpPassword;

  public static final String SERIALIZED_NAME_FTP_PORT = "ftpPort";
  @SerializedName(SERIALIZED_NAME_FTP_PORT)
  private Integer ftpPort;

  public static final String SERIALIZED_NAME_FTP_REMOTE_PATH = "ftpRemotePath";
  @SerializedName(SERIALIZED_NAME_FTP_REMOTE_PATH)
  private String ftpRemotePath;

  public static final String SERIALIZED_NAME_FTP_REMOTE_PATH_ARCHIVE = "ftpRemotePathArchive";
  @SerializedName(SERIALIZED_NAME_FTP_REMOTE_PATH_ARCHIVE)
  private String ftpRemotePathArchive;

  public static final String SERIALIZED_NAME_LOCK_NAME = "lockName";
  @SerializedName(SERIALIZED_NAME_LOCK_NAME)
  private String lockName;

  public static final String SERIALIZED_NAME_POST_PROCESS_ACTION = "postProcessAction";
  @SerializedName(SERIALIZED_NAME_POST_PROCESS_ACTION)
  private Integer postProcessAction;

  public static final String SERIALIZED_NAME_USE_CONTROL_FILE = "useControlFile";
  @SerializedName(SERIALIZED_NAME_USE_CONTROL_FILE)
  private Boolean useControlFile;

  public static final String SERIALIZED_NAME_MULTIPLE_FILES = "multipleFiles";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_FILES)
  private Boolean multipleFiles;

  public static final String SERIALIZED_NAME_ZERO_OUT_NEGATIVES = "zeroOutNegatives";
  @SerializedName(SERIALIZED_NAME_ZERO_OUT_NEGATIVES)
  private Boolean zeroOutNegatives;

  public static final String SERIALIZED_NAME_TEST_F_T_P_CONFIGS = "testFTPConfigs";
  @SerializedName(SERIALIZED_NAME_TEST_F_T_P_CONFIGS)
  private Boolean testFTPConfigs;

  public static final String SERIALIZED_NAME_FIELD_NAME_MAP = "fieldNameMap";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME_MAP)
  private List<String> fieldNameMap = null;

  public static final String SERIALIZED_NAME_IGNORE_EXTRA_FIELDS = "ignoreExtraFields";
  @SerializedName(SERIALIZED_NAME_IGNORE_EXTRA_FIELDS)
  private Boolean ignoreExtraFields;

  public static final String SERIALIZED_NAME_BLANK_QUANTITY_IS_ZERO = "blankQuantityIsZero";
  @SerializedName(SERIALIZED_NAME_BLANK_QUANTITY_IS_ZERO)
  private Boolean blankQuantityIsZero;

  public static final String SERIALIZED_NAME_CSV_DELIMITER = "csvDelimiter";
  @SerializedName(SERIALIZED_NAME_CSV_DELIMITER)
  private String csvDelimiter;

  public FetchFileConfigRequest fetchFileConfigID(Integer fetchFileConfigID) {
    this.fetchFileConfigID = fetchFileConfigID;
    return this;
  }

   /**
   * Fetch File Config ID
   * @return fetchFileConfigID
  **/
  @ApiModelProperty(value = "Fetch File Config ID")
  public Integer getFetchFileConfigID() {
    return fetchFileConfigID;
  }

  public void setFetchFileConfigID(Integer fetchFileConfigID) {
    this.fetchFileConfigID = fetchFileConfigID;
  }

  public FetchFileConfigRequest active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Flag for active state
   * @return active
  **/
  @ApiModelProperty(required = true, value = "Flag for active state")
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public FetchFileConfigRequest emailList(String emailList) {
    this.emailList = emailList;
    return this;
  }

   /**
   * Email List
   * @return emailList
  **/
  @ApiModelProperty(value = "Email List")
  public String getEmailList() {
    return emailList;
  }

  public void setEmailList(String emailList) {
    this.emailList = emailList;
  }

  public FetchFileConfigRequest refreshEnabled(Boolean refreshEnabled) {
    this.refreshEnabled = refreshEnabled;
    return this;
  }

   /**
   * Flag for Refresh Enabled
   * @return refreshEnabled
  **/
  @ApiModelProperty(value = "Flag for Refresh Enabled")
  public Boolean getRefreshEnabled() {
    return refreshEnabled;
  }

  public void setRefreshEnabled(Boolean refreshEnabled) {
    this.refreshEnabled = refreshEnabled;
  }

  public FetchFileConfigRequest refreshFileDescription(String refreshFileDescription) {
    this.refreshFileDescription = refreshFileDescription;
    return this;
  }

   /**
   * Description for the refresh file
   * @return refreshFileDescription
  **/
  @ApiModelProperty(value = "Description for the refresh file")
  public String getRefreshFileDescription() {
    return refreshFileDescription;
  }

  public void setRefreshFileDescription(String refreshFileDescription) {
    this.refreshFileDescription = refreshFileDescription;
  }

  public FetchFileConfigRequest updateEnabled(Boolean updateEnabled) {
    this.updateEnabled = updateEnabled;
    return this;
  }

   /**
   * Flag for Update Enabled
   * @return updateEnabled
  **/
  @ApiModelProperty(value = "Flag for Update Enabled")
  public Boolean getUpdateEnabled() {
    return updateEnabled;
  }

  public void setUpdateEnabled(Boolean updateEnabled) {
    this.updateEnabled = updateEnabled;
  }

  public FetchFileConfigRequest updateFileDescription(String updateFileDescription) {
    this.updateFileDescription = updateFileDescription;
    return this;
  }

   /**
   * Description for the update file
   * @return updateFileDescription
  **/
  @ApiModelProperty(value = "Description for the update file")
  public String getUpdateFileDescription() {
    return updateFileDescription;
  }

  public void setUpdateFileDescription(String updateFileDescription) {
    this.updateFileDescription = updateFileDescription;
  }

  public FetchFileConfigRequest ftpServer(String ftpServer) {
    this.ftpServer = ftpServer;
    return this;
  }

   /**
   * FTP server address
   * @return ftpServer
  **/
  @ApiModelProperty(required = true, value = "FTP server address")
  public String getFtpServer() {
    return ftpServer;
  }

  public void setFtpServer(String ftpServer) {
    this.ftpServer = ftpServer;
  }

  public FetchFileConfigRequest ftpUsername(String ftpUsername) {
    this.ftpUsername = ftpUsername;
    return this;
  }

   /**
   * FTP server username
   * @return ftpUsername
  **/
  @ApiModelProperty(required = true, value = "FTP server username")
  public String getFtpUsername() {
    return ftpUsername;
  }

  public void setFtpUsername(String ftpUsername) {
    this.ftpUsername = ftpUsername;
  }

  public FetchFileConfigRequest ftpPassword(String ftpPassword) {
    this.ftpPassword = ftpPassword;
    return this;
  }

   /**
   * FTP server password
   * @return ftpPassword
  **/
  @ApiModelProperty(required = true, value = "FTP server password")
  public String getFtpPassword() {
    return ftpPassword;
  }

  public void setFtpPassword(String ftpPassword) {
    this.ftpPassword = ftpPassword;
  }

  public FetchFileConfigRequest ftpPort(Integer ftpPort) {
    this.ftpPort = ftpPort;
    return this;
  }

   /**
   * FTP server port
   * @return ftpPort
  **/
  @ApiModelProperty(value = "FTP server port")
  public Integer getFtpPort() {
    return ftpPort;
  }

  public void setFtpPort(Integer ftpPort) {
    this.ftpPort = ftpPort;
  }

  public FetchFileConfigRequest ftpRemotePath(String ftpRemotePath) {
    this.ftpRemotePath = ftpRemotePath;
    return this;
  }

   /**
   * FTP server remote path
   * @return ftpRemotePath
  **/
  @ApiModelProperty(required = true, value = "FTP server remote path")
  public String getFtpRemotePath() {
    return ftpRemotePath;
  }

  public void setFtpRemotePath(String ftpRemotePath) {
    this.ftpRemotePath = ftpRemotePath;
  }

  public FetchFileConfigRequest ftpRemotePathArchive(String ftpRemotePathArchive) {
    this.ftpRemotePathArchive = ftpRemotePathArchive;
    return this;
  }

   /**
   * FTP server remote path archive
   * @return ftpRemotePathArchive
  **/
  @ApiModelProperty(value = "FTP server remote path archive")
  public String getFtpRemotePathArchive() {
    return ftpRemotePathArchive;
  }

  public void setFtpRemotePathArchive(String ftpRemotePathArchive) {
    this.ftpRemotePathArchive = ftpRemotePathArchive;
  }

  public FetchFileConfigRequest lockName(String lockName) {
    this.lockName = lockName;
    return this;
  }

   /**
   * Lock name
   * @return lockName
  **/
  @ApiModelProperty(required = true, value = "Lock name")
  public String getLockName() {
    return lockName;
  }

  public void setLockName(String lockName) {
    this.lockName = lockName;
  }

  public FetchFileConfigRequest postProcessAction(Integer postProcessAction) {
    this.postProcessAction = postProcessAction;
    return this;
  }

   /**
   * Enum denoting action post processing
   * @return postProcessAction
  **/
  @ApiModelProperty(required = true, value = "Enum denoting action post processing")
  public Integer getPostProcessAction() {
    return postProcessAction;
  }

  public void setPostProcessAction(Integer postProcessAction) {
    this.postProcessAction = postProcessAction;
  }

  public FetchFileConfigRequest useControlFile(Boolean useControlFile) {
    this.useControlFile = useControlFile;
    return this;
  }

   /**
   * Flag for using control file
   * @return useControlFile
  **/
  @ApiModelProperty(value = "Flag for using control file")
  public Boolean getUseControlFile() {
    return useControlFile;
  }

  public void setUseControlFile(Boolean useControlFile) {
    this.useControlFile = useControlFile;
  }

  public FetchFileConfigRequest multipleFiles(Boolean multipleFiles) {
    this.multipleFiles = multipleFiles;
    return this;
  }

   /**
   * Flag for using multiple files
   * @return multipleFiles
  **/
  @ApiModelProperty(value = "Flag for using multiple files")
  public Boolean getMultipleFiles() {
    return multipleFiles;
  }

  public void setMultipleFiles(Boolean multipleFiles) {
    this.multipleFiles = multipleFiles;
  }

  public FetchFileConfigRequest zeroOutNegatives(Boolean zeroOutNegatives) {
    this.zeroOutNegatives = zeroOutNegatives;
    return this;
  }

   /**
   * Flag for converting negatives to zero
   * @return zeroOutNegatives
  **/
  @ApiModelProperty(value = "Flag for converting negatives to zero")
  public Boolean getZeroOutNegatives() {
    return zeroOutNegatives;
  }

  public void setZeroOutNegatives(Boolean zeroOutNegatives) {
    this.zeroOutNegatives = zeroOutNegatives;
  }

  public FetchFileConfigRequest testFTPConfigs(Boolean testFTPConfigs) {
    this.testFTPConfigs = testFTPConfigs;
    return this;
  }

   /**
   * Flag for if its a test ftp config
   * @return testFTPConfigs
  **/
  @ApiModelProperty(value = "Flag for if its a test ftp config")
  public Boolean getTestFTPConfigs() {
    return testFTPConfigs;
  }

  public void setTestFTPConfigs(Boolean testFTPConfigs) {
    this.testFTPConfigs = testFTPConfigs;
  }

  public FetchFileConfigRequest fieldNameMap(List<String> fieldNameMap) {
    this.fieldNameMap = fieldNameMap;
    return this;
  }

  public FetchFileConfigRequest addFieldNameMapItem(String fieldNameMapItem) {
    if (this.fieldNameMap == null) {
      this.fieldNameMap = new ArrayList<String>();
    }
    this.fieldNameMap.add(fieldNameMapItem);
    return this;
  }

   /**
   * List of field names
   * @return fieldNameMap
  **/
  @ApiModelProperty(value = "List of field names")
  public List<String> getFieldNameMap() {
    return fieldNameMap;
  }

  public void setFieldNameMap(List<String> fieldNameMap) {
    this.fieldNameMap = fieldNameMap;
  }

  public FetchFileConfigRequest ignoreExtraFields(Boolean ignoreExtraFields) {
    this.ignoreExtraFields = ignoreExtraFields;
    return this;
  }

   /**
   * Flag for ignoring extra fields
   * @return ignoreExtraFields
  **/
  @ApiModelProperty(value = "Flag for ignoring extra fields")
  public Boolean getIgnoreExtraFields() {
    return ignoreExtraFields;
  }

  public void setIgnoreExtraFields(Boolean ignoreExtraFields) {
    this.ignoreExtraFields = ignoreExtraFields;
  }

  public FetchFileConfigRequest blankQuantityIsZero(Boolean blankQuantityIsZero) {
    this.blankQuantityIsZero = blankQuantityIsZero;
    return this;
  }

   /**
   * Flag to convert null quantities to zero
   * @return blankQuantityIsZero
  **/
  @ApiModelProperty(value = "Flag to convert null quantities to zero")
  public Boolean getBlankQuantityIsZero() {
    return blankQuantityIsZero;
  }

  public void setBlankQuantityIsZero(Boolean blankQuantityIsZero) {
    this.blankQuantityIsZero = blankQuantityIsZero;
  }

  public FetchFileConfigRequest csvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
    return this;
  }

   /**
   * Delimiter
   * @return csvDelimiter
  **/
  @ApiModelProperty(value = "Delimiter")
  public String getCsvDelimiter() {
    return csvDelimiter;
  }

  public void setCsvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchFileConfigRequest fetchFileConfigRequest = (FetchFileConfigRequest) o;
    return Objects.equals(this.fetchFileConfigID, fetchFileConfigRequest.fetchFileConfigID) &&
        Objects.equals(this.active, fetchFileConfigRequest.active) &&
        Objects.equals(this.emailList, fetchFileConfigRequest.emailList) &&
        Objects.equals(this.refreshEnabled, fetchFileConfigRequest.refreshEnabled) &&
        Objects.equals(this.refreshFileDescription, fetchFileConfigRequest.refreshFileDescription) &&
        Objects.equals(this.updateEnabled, fetchFileConfigRequest.updateEnabled) &&
        Objects.equals(this.updateFileDescription, fetchFileConfigRequest.updateFileDescription) &&
        Objects.equals(this.ftpServer, fetchFileConfigRequest.ftpServer) &&
        Objects.equals(this.ftpUsername, fetchFileConfigRequest.ftpUsername) &&
        Objects.equals(this.ftpPassword, fetchFileConfigRequest.ftpPassword) &&
        Objects.equals(this.ftpPort, fetchFileConfigRequest.ftpPort) &&
        Objects.equals(this.ftpRemotePath, fetchFileConfigRequest.ftpRemotePath) &&
        Objects.equals(this.ftpRemotePathArchive, fetchFileConfigRequest.ftpRemotePathArchive) &&
        Objects.equals(this.lockName, fetchFileConfigRequest.lockName) &&
        Objects.equals(this.postProcessAction, fetchFileConfigRequest.postProcessAction) &&
        Objects.equals(this.useControlFile, fetchFileConfigRequest.useControlFile) &&
        Objects.equals(this.multipleFiles, fetchFileConfigRequest.multipleFiles) &&
        Objects.equals(this.zeroOutNegatives, fetchFileConfigRequest.zeroOutNegatives) &&
        Objects.equals(this.testFTPConfigs, fetchFileConfigRequest.testFTPConfigs) &&
        Objects.equals(this.fieldNameMap, fetchFileConfigRequest.fieldNameMap) &&
        Objects.equals(this.ignoreExtraFields, fetchFileConfigRequest.ignoreExtraFields) &&
        Objects.equals(this.blankQuantityIsZero, fetchFileConfigRequest.blankQuantityIsZero) &&
        Objects.equals(this.csvDelimiter, fetchFileConfigRequest.csvDelimiter) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fetchFileConfigID, active, emailList, refreshEnabled, refreshFileDescription, updateEnabled, updateFileDescription, ftpServer, ftpUsername, ftpPassword, ftpPort, ftpRemotePath, ftpRemotePathArchive, lockName, postProcessAction, useControlFile, multipleFiles, zeroOutNegatives, testFTPConfigs, fieldNameMap, ignoreExtraFields, blankQuantityIsZero, csvDelimiter, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchFileConfigRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    fetchFileConfigID: ").append(toIndentedString(fetchFileConfigID)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    emailList: ").append(toIndentedString(emailList)).append("\n");
    sb.append("    refreshEnabled: ").append(toIndentedString(refreshEnabled)).append("\n");
    sb.append("    refreshFileDescription: ").append(toIndentedString(refreshFileDescription)).append("\n");
    sb.append("    updateEnabled: ").append(toIndentedString(updateEnabled)).append("\n");
    sb.append("    updateFileDescription: ").append(toIndentedString(updateFileDescription)).append("\n");
    sb.append("    ftpServer: ").append(toIndentedString(ftpServer)).append("\n");
    sb.append("    ftpUsername: ").append(toIndentedString(ftpUsername)).append("\n");
    sb.append("    ftpPassword: ").append(toIndentedString(ftpPassword)).append("\n");
    sb.append("    ftpPort: ").append(toIndentedString(ftpPort)).append("\n");
    sb.append("    ftpRemotePath: ").append(toIndentedString(ftpRemotePath)).append("\n");
    sb.append("    ftpRemotePathArchive: ").append(toIndentedString(ftpRemotePathArchive)).append("\n");
    sb.append("    lockName: ").append(toIndentedString(lockName)).append("\n");
    sb.append("    postProcessAction: ").append(toIndentedString(postProcessAction)).append("\n");
    sb.append("    useControlFile: ").append(toIndentedString(useControlFile)).append("\n");
    sb.append("    multipleFiles: ").append(toIndentedString(multipleFiles)).append("\n");
    sb.append("    zeroOutNegatives: ").append(toIndentedString(zeroOutNegatives)).append("\n");
    sb.append("    testFTPConfigs: ").append(toIndentedString(testFTPConfigs)).append("\n");
    sb.append("    fieldNameMap: ").append(toIndentedString(fieldNameMap)).append("\n");
    sb.append("    ignoreExtraFields: ").append(toIndentedString(ignoreExtraFields)).append("\n");
    sb.append("    blankQuantityIsZero: ").append(toIndentedString(blankQuantityIsZero)).append("\n");
    sb.append("    csvDelimiter: ").append(toIndentedString(csvDelimiter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

