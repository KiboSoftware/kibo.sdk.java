/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.api;

import com.kibocommerce.sdk.inventory.ApiCallback;
import com.kibocommerce.sdk.inventory.ApiClient;
import com.kibocommerce.sdk.inventory.ApiException;
import com.kibocommerce.sdk.inventory.ApiResponse;
import com.kibocommerce.sdk.inventory.Configuration;
import com.kibocommerce.sdk.inventory.Pair;
import com.kibocommerce.sdk.inventory.ProgressRequestBody;
import com.kibocommerce.sdk.inventory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.inventory.model.BaseResponse;
import com.kibocommerce.sdk.inventory.model.DeletedCountResponse;
import com.kibocommerce.sdk.inventory.model.TagCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagCategoryControllerApi {
    private ApiClient apiClient;

    public TagCategoryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagCategoryControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTagCategory
     * @param xVolTenant Tenant ID (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTagCategoryCall(Integer xVolTenant, TagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tagCategory;

        // create path and map variables
        String localVarPath = "/v1/tagCategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTagCategoryValidateBeforeCall(Integer xVolTenant, TagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createTagCategory(Async)");
        }
        
        // verify the required parameter 'tagCategory' is set
        if (tagCategory == null) {
            throw new ApiException("Missing the required parameter 'tagCategory' when calling createTagCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = createTagCategoryCall(xVolTenant, tagCategory, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @return TagCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagCategory createTagCategory(Integer xVolTenant, TagCategory tagCategory) throws ApiException {
        ApiResponse<TagCategory> resp = createTagCategoryWithHttpInfo(xVolTenant, tagCategory);
        return resp.getData();
    }

    /**
     * 
     * Create a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @return ApiResponse&lt;TagCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagCategory> createTagCategoryWithHttpInfo(Integer xVolTenant, TagCategory tagCategory) throws ApiException {
        com.squareup.okhttp.Call call = createTagCategoryValidateBeforeCall(xVolTenant, tagCategory, null, null);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTagCategoryAsync(Integer xVolTenant, TagCategory tagCategory, final ApiCallback<TagCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTagCategoryValidateBeforeCall(xVolTenant, tagCategory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTagCategory
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTagCategoryCall(Integer xVolTenant, String tagCategoryName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/tagCategory/{tag_category_name}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tagCategoryName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tagCategoryName", tagCategoryName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTagCategoryValidateBeforeCall(Integer xVolTenant, String tagCategoryName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteTagCategory(Async)");
        }
        
        // verify the required parameter 'tagCategoryName' is set
        if (tagCategoryName == null) {
            throw new ApiException("Missing the required parameter 'tagCategoryName' when calling deleteTagCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTagCategoryCall(xVolTenant, tagCategoryName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a Tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @return DeletedCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedCountResponse deleteTagCategory(Integer xVolTenant, String tagCategoryName) throws ApiException {
        ApiResponse<DeletedCountResponse> resp = deleteTagCategoryWithHttpInfo(xVolTenant, tagCategoryName);
        return resp.getData();
    }

    /**
     * 
     * Delete a Tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @return ApiResponse&lt;DeletedCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedCountResponse> deleteTagCategoryWithHttpInfo(Integer xVolTenant, String tagCategoryName) throws ApiException {
        com.squareup.okhttp.Call call = deleteTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, null, null);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTagCategoryAsync(Integer xVolTenant, String tagCategoryName, final ApiCallback<DeletedCountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedCountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagCategory
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagCategoryCall(Integer xVolTenant, String tagCategoryName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/tagCategory/{tag_category_name}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tagCategoryName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tagCategoryName", tagCategoryName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagCategoryValidateBeforeCall(Integer xVolTenant, String tagCategoryName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getTagCategory(Async)");
        }
        
        // verify the required parameter 'tagCategoryName' is set
        if (tagCategoryName == null) {
            throw new ApiException("Missing the required parameter 'tagCategoryName' when calling getTagCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = getTagCategoryCall(xVolTenant, tagCategoryName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @return TagCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagCategory getTagCategory(Integer xVolTenant, String tagCategoryName) throws ApiException {
        ApiResponse<TagCategory> resp = getTagCategoryWithHttpInfo(xVolTenant, tagCategoryName);
        return resp.getData();
    }

    /**
     * 
     * Get a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @return ApiResponse&lt;TagCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagCategory> getTagCategoryWithHttpInfo(Integer xVolTenant, String tagCategoryName) throws ApiException {
        com.squareup.okhttp.Call call = getTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, null, null);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagCategoryAsync(Integer xVolTenant, String tagCategoryName, final ApiCallback<TagCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTagCategoryAll
     * @param xVolTenant Tenant ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTagCategoryAllCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/tagCategory/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagCategoryAllValidateBeforeCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getTagCategoryAll(Async)");
        }
        

        com.squareup.okhttp.Call call = getTagCategoryAllCall(xVolTenant, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all tag categories for a tenant
     * @param xVolTenant Tenant ID (required)
     * @return List&lt;TagCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TagCategory> getTagCategoryAll(Integer xVolTenant) throws ApiException {
        ApiResponse<List<TagCategory>> resp = getTagCategoryAllWithHttpInfo(xVolTenant);
        return resp.getData();
    }

    /**
     * 
     * Get all tag categories for a tenant
     * @param xVolTenant Tenant ID (required)
     * @return ApiResponse&lt;List&lt;TagCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TagCategory>> getTagCategoryAllWithHttpInfo(Integer xVolTenant) throws ApiException {
        com.squareup.okhttp.Call call = getTagCategoryAllValidateBeforeCall(xVolTenant, null, null);
        Type localVarReturnType = new TypeToken<List<TagCategory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all tag categories for a tenant
     * @param xVolTenant Tenant ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagCategoryAllAsync(Integer xVolTenant, final ApiCallback<List<TagCategory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagCategoryAllValidateBeforeCall(xVolTenant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TagCategory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTagCategory
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTagCategoryCall(Integer xVolTenant, String tagCategoryName, TagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tagCategory;

        // create path and map variables
        String localVarPath = "/v1/tagCategory/{tag_category_name}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tagCategoryName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tagCategoryName", tagCategoryName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTagCategoryValidateBeforeCall(Integer xVolTenant, String tagCategoryName, TagCategory tagCategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateTagCategory(Async)");
        }
        
        // verify the required parameter 'tagCategoryName' is set
        if (tagCategoryName == null) {
            throw new ApiException("Missing the required parameter 'tagCategoryName' when calling updateTagCategory(Async)");
        }
        
        // verify the required parameter 'tagCategory' is set
        if (tagCategory == null) {
            throw new ApiException("Missing the required parameter 'tagCategory' when calling updateTagCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTagCategoryCall(xVolTenant, tagCategoryName, tagCategory, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update the designated tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @return TagCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TagCategory updateTagCategory(Integer xVolTenant, String tagCategoryName, TagCategory tagCategory) throws ApiException {
        ApiResponse<TagCategory> resp = updateTagCategoryWithHttpInfo(xVolTenant, tagCategoryName, tagCategory);
        return resp.getData();
    }

    /**
     * 
     * Update the designated tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @return ApiResponse&lt;TagCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TagCategory> updateTagCategoryWithHttpInfo(Integer xVolTenant, String tagCategoryName, TagCategory tagCategory) throws ApiException {
        com.squareup.okhttp.Call call = updateTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, tagCategory, null, null);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the designated tag category
     * @param xVolTenant Tenant ID (required)
     * @param tagCategoryName Tag Category Name (required)
     * @param tagCategory Request create or modify Tag Categories (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTagCategoryAsync(Integer xVolTenant, String tagCategoryName, TagCategory tagCategory, final ApiCallback<TagCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTagCategoryValidateBeforeCall(xVolTenant, tagCategoryName, tagCategory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TagCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
