/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.model.FutureInventory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Response object for a tag quantity
 */
@ApiModel(description = "Response object for a tag quantity")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-07T16:32:28.052447-06:00[America/Chicago]")
public class TagQuantity {
  public static final String SERIALIZED_NAME_ON_HAND = "onHand";
  @SerializedName(SERIALIZED_NAME_ON_HAND)
  private Integer onHand;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Integer available;

  public static final String SERIALIZED_NAME_ALLOCATED = "allocated";
  @SerializedName(SERIALIZED_NAME_ALLOCATED)
  private Integer allocated;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = null;

  public static final String SERIALIZED_NAME_FUTURE_INVENTORY = "futureInventory";
  @SerializedName(SERIALIZED_NAME_FUTURE_INVENTORY)
  private List<FutureInventory> futureInventory = null;

  public TagQuantity onHand(Integer onHand) {
    this.onHand = onHand;
    return this;
  }

   /**
   * The quantity the the location has in its possession for this tag
   * @return onHand
  **/
  @ApiModelProperty(value = "The quantity the the location has in its possession for this tag")
  public Integer getOnHand() {
    return onHand;
  }

  public void setOnHand(Integer onHand) {
    this.onHand = onHand;
  }

  public TagQuantity available(Integer available) {
    this.available = available;
    return this;
  }

   /**
   * The quantity the location has that are available for purchase for this tag
   * @return available
  **/
  @ApiModelProperty(value = "The quantity the location has that are available for purchase for this tag")
  public Integer getAvailable() {
    return available;
  }

  public void setAvailable(Integer available) {
    this.available = available;
  }

  public TagQuantity allocated(Integer allocated) {
    this.allocated = allocated;
    return this;
  }

   /**
   * The quantity the location has that are already allocated for this tag
   * @return allocated
  **/
  @ApiModelProperty(value = "The quantity the location has that are already allocated for this tag")
  public Integer getAllocated() {
    return allocated;
  }

  public void setAllocated(Integer allocated) {
    this.allocated = allocated;
  }

  public TagQuantity pending(Integer pending) {
    this.pending = pending;
    return this;
  }

   /**
   * The quantity the location has that are pending for this tag
   * @return pending
  **/
  @ApiModelProperty(value = "The quantity the location has that are pending for this tag")
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }

  public TagQuantity tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public TagQuantity putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Associative Map of &lt;String, String&gt; for tagCategoryName &#x3D;&gt; tagName
   * @return tags
  **/
  @ApiModelProperty(value = "Associative Map of <String, String> for tagCategoryName => tagName")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }

  public TagQuantity futureInventory(List<FutureInventory> futureInventory) {
    this.futureInventory = futureInventory;
    return this;
  }

  public TagQuantity addFutureInventoryItem(FutureInventory futureInventoryItem) {
    if (this.futureInventory == null) {
      this.futureInventory = new ArrayList<FutureInventory>();
    }
    this.futureInventory.add(futureInventoryItem);
    return this;
  }

   /**
   * Get futureInventory
   * @return futureInventory
  **/
  @ApiModelProperty(value = "")
  public List<FutureInventory> getFutureInventory() {
    return futureInventory;
  }

  public void setFutureInventory(List<FutureInventory> futureInventory) {
    this.futureInventory = futureInventory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagQuantity tagQuantity = (TagQuantity) o;
    return Objects.equals(this.onHand, tagQuantity.onHand) &&
        Objects.equals(this.available, tagQuantity.available) &&
        Objects.equals(this.allocated, tagQuantity.allocated) &&
        Objects.equals(this.pending, tagQuantity.pending) &&
        Objects.equals(this.tags, tagQuantity.tags) &&
        Objects.equals(this.futureInventory, tagQuantity.futureInventory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onHand, available, allocated, pending, tags, futureInventory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagQuantity {\n");
    
    sb.append("    onHand: ").append(toIndentedString(onHand)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    allocated: ").append(toIndentedString(allocated)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    futureInventory: ").append(toIndentedString(futureInventory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

