/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.inventory.model.BaseRequest;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ProductMappingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-25T11:56:03.255426-05:00[America/Chicago]")
public class ProductMappingRequest extends BaseRequest {
  /**
   * Enum for direction of the mapping
   */
  @JsonAdapter(DirectionEnum.Adapter.class)
  public enum DirectionEnum {
    INBOUND("INBOUND"),
    
    OUTBOUND("OUTBOUND"),
    
    SKIP("SKIP");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<DirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DirectionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private DirectionEnum direction;

  /**
   * Enum for mapping rule
   */
  @JsonAdapter(MappingEnum.Adapter.class)
  public enum MappingEnum {
    DEFAULT_MAPPING("DEFAULT_MAPPING"),
    
    CUSTOM_MAPPING_PART_TO_ALL("CUSTOM_MAPPING_PART_TO_ALL"),
    
    CUSTOM_MAPPING_PART_TO_SKU("CUSTOM_MAPPING_PART_TO_SKU"),
    
    CUSTOM_MAPPING_ONLY_UPC("CUSTOM_MAPPING_ONLY_UPC"),
    
    CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY("CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY"),
    
    CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU("CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU"),
    
    CUSTOM_MAPPING_SKU_TO_PART("CUSTOM_MAPPING_SKU_TO_PART");

    private String value;

    MappingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MappingEnum fromValue(String text) {
      for (MappingEnum b : MappingEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<MappingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MappingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MappingEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MappingEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_MAPPING = "mapping";
  @SerializedName(SERIALIZED_NAME_MAPPING)
  private MappingEnum mapping;

  public ProductMappingRequest direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Enum for direction of the mapping
   * @return direction
  **/
  @ApiModelProperty(value = "Enum for direction of the mapping")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public ProductMappingRequest mapping(MappingEnum mapping) {
    this.mapping = mapping;
    return this;
  }

   /**
   * Enum for mapping rule
   * @return mapping
  **/
  @ApiModelProperty(value = "Enum for mapping rule")
  public MappingEnum getMapping() {
    return mapping;
  }

  public void setMapping(MappingEnum mapping) {
    this.mapping = mapping;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductMappingRequest productMappingRequest = (ProductMappingRequest) o;
    return Objects.equals(this.direction, productMappingRequest.direction) &&
        Objects.equals(this.mapping, productMappingRequest.mapping) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, mapping, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductMappingRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    mapping: ").append(toIndentedString(mapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

