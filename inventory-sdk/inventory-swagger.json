{
  "openapi": "3.0.0",
  "info": {
    "title": "Inventory",
    "description": "Swagger JSON for inventory apis",
    "version": "5.0"
  },
  "servers": [
    {
      "url": "https://localhost/",
      "description": "Local Server"
    },
    {
      "url": "https://fakedevserver/coex/",
      "description": "Development Server"
    },
    {
      "url": "https://fakeqaserver/coex/",
      "description": "QA Server"
    },
    {
      "url": "https://fakestagingserver/coex/",
      "description": "Staging Server"
    },
    {
      "url": "https://fakeprodserver/coex/",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/adjustFutureDate/{futureInventoryID}/": {
      "put": {
        "tags": [
          "FutureDate Controller"
        ],
        "description": "Adjust future_date of future inventory",
        "operationId": "adjustFutureDate",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "futureInventoryID",
            "in": "path",
            "description": "id of the future_inventory row in db",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Future Inventory ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inventory/allocate/": {
      "post": {
        "tags": [
          "Allocation Controller"
        ],
        "description": "Allocates inventory based on the given request",
        "operationId": "allocateInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inventory/deallocate/": {
      "post": {
        "tags": [
          "Allocation Controller"
        ],
        "description": "Deallocates inventory based on the given request",
        "operationId": "deallocateInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inventory/fulfill/": {
      "post": {
        "tags": [
          "Allocation Controller"
        ],
        "description": "Fulfills inventory based on the given request",
        "operationId": "fulfillInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AllocateInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bin/": {
      "get": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Get a list of bins",
        "operationId": "getBins",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "locationID",
            "in": "query",
            "description": "Id of location",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Term to match in bins",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Results per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page to show",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinResponseModel"
                }
              }
            }
          },
          "404": {
            "description": "Bins Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Create a bin",
        "operationId": "createBin",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateBinRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/{bin_id}": {
      "get": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Get a bin",
        "operationId": "getBin",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "bin_id",
            "in": "path",
            "description": "Id of bin to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bin"
                }
              }
            }
          },
          "404": {
            "description": "Bin Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Delete a bin",
        "operationId": "deleteBin",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "bin_id",
            "in": "path",
            "description": "Id of bin to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/binName"
          },
          {
            "$ref": "#/components/parameters/locationCode"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Bin Not Found"
          }
        }
      }
    },
    "/v1/bin/searchInventory/": {
      "post": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Search bins for a inventory by bin name or any product identifier",
        "operationId": "searchBins",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BinSearchRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/loadInventory/": {
      "post": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Loads bin inventory for designated bins",
        "operationId": "loadInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LoadBinInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadBinInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/binTypes/": {
      "get": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Get list of bin types",
        "operationId": "getBinTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BinTypeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/binStatuses/": {
      "get": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Get list of bin statuses",
        "operationId": "getBinStatuses",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BinStatusModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/updateBins/": {
      "post": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Update the designated bins",
        "operationId": "updateBins",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateBinsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/bin/{bin_id}/": {
      "post": {
        "tags": [
          "Bin Controller"
        ],
        "description": "Update the designated bin",
        "operationId": "updateBin",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "bin_id",
            "in": "path",
            "description": "Id of bin to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateBinRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bin"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inventory/blockAssignment/": {
      "post": {
        "tags": [
          "BlockAssignment Controller"
        ],
        "description": "Setting the blockAssignment flag to true for the product based on the given request",
        "operationId": "blockAssignment",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/BlockAssignmentRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/BaseResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/export/": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Run Export Settings Job",
        "operationId": "runExport",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ExportInventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportInventoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/create": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Create an Export Settings",
        "operationId": "createExportSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export": {
      "get": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Get an export settings",
        "operationId": "getExportSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/exportSettingsName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetExportSettingsResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Export Setting Not Found"
          }
        }
      }
    },
    "/v1/export/update": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Update an Export Settings",
        "operationId": "updateExportSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/{exportSettingsName}": {
      "delete": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Deletes an Export Settings",
        "operationId": "deleteExportSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/exportSettingsName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/export/ftp/create": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Create an Export Settings FTP",
        "operationId": "createExportSettingsFTP",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/ftp/update": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Update an Export Settings FTP",
        "operationId": "updateExportSettingsFTP",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsFTPRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsFTPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}": {
      "delete": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.",
        "operationId": "deleteExportSettingsFTP",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/exportSettingsName"
          },
          {
            "$ref": "#/components/parameters/exportSettingsFTPName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/export/s3/create": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Create an Export Settings S3",
        "operationId": "createExportSettingsS3",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/s3/update": {
      "post": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Update an Export Settings S3",
        "operationId": "updateExportSettingsS3",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateExportSettingsS3Request"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateExportSettingsS3Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "No Settings Found"
          },
          "500": {
            "description": "Internal Service Error"
          }
        }
      }
    },
    "/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}": {
      "delete": {
        "tags": [
          "Export Inventory Controller"
        ],
        "description": "Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.",
        "operationId": "deleteExportSettingsS3",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/exportSettingsName"
          },
          {
            "$ref": "#/components/parameters/exportSettingsS3Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/config/fetchfile/": {
      "get": {
        "tags": [
          "Fetch File Config Controller"
        ],
        "description": "Get the Fetch File Configs for the current tenant",
        "operationId": "getFetchConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/M_FetchFileConfig"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Fetch File Config Controller"
        ],
        "description": "Save a new Fetch File Config",
        "operationId": "saveFetchConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FetchFileConfigRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/config/fetchfile/{fetchFileConfigID}": {
      "delete": {
        "tags": [
          "Fetch File Config Controller"
        ],
        "description": "Deletes a fetch file config",
        "operationId": "deleteFetchConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v1/config/fetchfile/testConnection/{fetchFileConfigID}": {
      "get": {
        "tags": [
          "Fetch File Config Controller"
        ],
        "description": "Attempts to connect to a fetch file endpoint and lists current files if successful",
        "operationId": "testConnection",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "fetchFileConfigID",
            "in": "path",
            "description": "Id of fetch file config",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FetchFileConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v5/inventory/": {
      "get": {
        "tags": [
          "Inventory Controller"
        ],
        "description": "Get inventory from specified location",
        "operationId": "getInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/items"
          },
          {
            "$ref": "#/components/parameters/requestLocation"
          },
          {
            "$ref": "#/components/parameters/locationWhitelist"
          },
          {
            "$ref": "#/components/parameters/locationBlacklist"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/ignoreSafetyStock"
          },
          {
            "$ref": "#/components/parameters/includeNegativeInventory"
          },
          {
            "$ref": "#/components/parameters/shippingLocation"
          },
          {
            "$ref": "#/components/parameters/transferEnabled"
          },
          {
            "$ref": "#/components/parameters/pickup"
          },
          {
            "$ref": "#/components/parameters/includeInAggregate"
          },
          {
            "$ref": "#/components/parameters/includeAttributes"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bins Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Controller"
        ],
        "description": "Queries for specified inventory at given location",
        "operationId": "postQueryInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/InventoryRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InventoryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/aggregate/": {
      "post": {
        "tags": [
          "Inventory Controller"
        ],
        "description": "Aggregates Inventory",
        "operationId": "aggregate",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AggregateRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/deleteOldInventory/{months}": {
      "delete": {
        "tags": [
          "InventoryJobController"
        ],
        "description": "Deletes older records from inventory table",
        "operationId": "deleteOldInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "months",
            "in": "path",
            "description": "The x months before which we want the records to get deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/deleteOldInventory/allSilo/{months}": {
      "delete": {
        "tags": [
          "InventoryJobController"
        ],
        "description": "Deletes older records from inventory table of all silos",
        "operationId": "deleteAllOldInventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "months",
            "in": "path",
            "description": "The x months before which we want the records to get deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobIDResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/queue/{jobID}/": {
      "get": {
        "tags": [
          "Job Controller"
        ],
        "description": "Get the specified job",
        "operationId": "getJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "jobID",
            "in": "path",
            "description": "Id of bin to get",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/queue/": {
      "get": {
        "tags": [
          "Job Controller"
        ],
        "description": "Get the requested jobs",
        "operationId": "getJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "locationCode",
            "in": "query",
            "description": "Tenant specified unique Identifier of the owning location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "User that owns the job",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Type of the Job Queue Request",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS"
                ]
              }
            }
          },
          {
            "name": "originalFilename",
            "in": "query",
            "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobQueueResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Job Not Found"
          }
        }
      }
    },
    "/v1/location/": {
      "get": {
        "tags": [
          "Location Controller"
        ],
        "description": "Get Locations",
        "operationId": "getLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Location Controller"
        ],
        "description": "Save Location",
        "operationId": "saveLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LocationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/location/{locationCode}": {
      "get": {
        "tags": [
          "Location Controller"
        ],
        "description": "Get Locations",
        "operationId": "getLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "locationCode",
            "in": "path",
            "description": "Location Code of the location to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Location Not Found"
          }
        }
      }
    },
    "/v1/locationGroup/": {
      "get": {
        "tags": [
          "LocationGroup Controller"
        ],
        "description": "Get LocationGroups",
        "operationId": "getLocationGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/location/{locationGroupCode}": {
      "get": {
        "tags": [
          "Location Controller"
        ],
        "description": "Get LocationGroups",
        "operationId": "getLocationGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "locationGroupCode",
            "in": "path",
            "description": "Location Group Code of the location to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationGroupResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Location Not Found"
          }
        }
      }
    },
    "/v5/inventory/refresh/": {
      "post": {
        "tags": [
          "Modify Inventory Controller"
        ],
        "description": "Refresh Inventory",
        "operationId": "refresh",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RefreshRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/adjust/": {
      "post": {
        "tags": [
          "Modify Inventory Controller"
        ],
        "description": "Adjust Inventory",
        "operationId": "adjust",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AdjustRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobIDResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inventory/delete/": {
      "post": {
        "tags": [
          "Modify Inventory Controller"
        ],
        "description": "Delete Inventory",
        "operationId": "delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteItemRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/deleteFutureInventory/": {
      "post": {
        "tags": [
          "Modify Inventory Controller"
        ],
        "description": "Delete Future Inventory",
        "operationId": "delete-future-inventory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteFutureItemRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFutureItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/deleteItems/": {
      "post": {
        "tags": [
          "Modify Inventory Controller"
        ],
        "description": "Delete Multiple Inventory",
        "operationId": "delete-items",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/x-vol-site"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteItemsRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/getOrderItemInformation/": {
      "post": {
        "tags": [
          "Order Item Controller"
        ],
        "description": "Get Order Item Information",
        "operationId": "getOrderItemInformation",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrderItemInformationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderItemInformation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/getOrderItemLog/": {
      "post": {
        "tags": [
          "Order Item Controller"
        ],
        "description": "Get Order Item Log",
        "operationId": "getOrderItemLog",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrderItemLogRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderItemLogResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/pendingItem/": {
      "get": {
        "tags": [
          "Pending Items Controller"
        ],
        "description": "Get Pending Items",
        "operationId": "getPendingItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/locationName"
          },
          {
            "$ref": "#/components/parameters/locationID"
          },
          {
            "$ref": "#/components/parameters/currentPage"
          },
          {
            "$ref": "#/components/parameters/numberPerPage"
          },
          {
            "$ref": "#/components/parameters/sortBy"
          },
          {
            "$ref": "#/components/parameters/shipmentID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/pendingItem/{pendingItemID}": {
      "delete": {
        "tags": [
          "Pending Items Controller"
        ],
        "description": "Delete Pending Items",
        "operationId": "deletePendingItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "pendingItemID",
            "in": "path",
            "description": "Pending Item ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/pendingItem/release/": {
      "post": {
        "tags": [
          "Pending Items Controller"
        ],
        "description": "Release All Pending Items",
        "operationId": "releaseAllPendingItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/pendingItem/release/{tenantID}": {
      "post": {
        "tags": [
          "Pending Items Controller"
        ],
        "description": "Release Pending Items",
        "operationId": "releasePendingItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "tenantID",
            "in": "path",
            "description": "Tenant ID to release",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/productMapping": {
      "get": {
        "tags": [
          "Product Mapping Controller"
        ],
        "description": "Gets a list Product Mappings for the specified tenant",
        "operationId": "getProductMapping",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMappingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Product Mapping Controller"
        ],
        "description": "Creates a Product Mapping",
        "operationId": "createProductMapping",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductMappingRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductMapping"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/productMapping/{direction}": {
      "delete": {
        "tags": [
          "Product Mapping Controller"
        ],
        "description": "Delete a Product Mapping",
        "operationId": "deleteProductMapping",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "name": "direction",
            "in": "path",
            "description": "Direction",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProductMappingRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v5/inventory/shipmentInventoryAllocations": {
      "post": {
        "tags": [
          "ShipmentInventoryAllocation Controller"
        ],
        "description": "Get future Inventory Allocations by shipment Ids",
        "operationId": "getShipmentInventoryAllocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ShipmentInventoryAllocationRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentInventoryAllocationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "$ref": "#/components/schemas/ShipmentInventoryAllocationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tagCategory/{tag_category_name}/tag": {
      "post": {
        "tags": [
          "Tag Controller"
        ],
        "description": "Create a tag",
        "operationId": "createTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/tagCategory/{tag_category_name}/tag/{tag_value}": {
      "get": {
        "tags": [
          "Tag Controller"
        ],
        "description": "Get a tag",
        "operationId": "getTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Tag Controller"
        ],
        "description": "Update the designated tag",
        "operationId": "updateTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Tag"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag Controller"
        ],
        "description": "Delete a Tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          },
          {
            "$ref": "#/components/parameters/tagValue"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      }
    },
    "/v1/tagCategory": {
      "post": {
        "tags": [
          "Tag Category Controller"
        ],
        "description": "Create a tag category",
        "operationId": "createTagCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagCategory"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/tagCategory/": {
      "get": {
        "tags": [
          "Tag Category Controller"
        ],
        "description": "Get all tag categories for a tenant",
        "operationId": "getTagCategoryAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagCategory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag Categories Not Found"
          }
        }
      }
    },
    "/v1/tagCategory/{tag_category_name}": {
      "get": {
        "tags": [
          "Tag Category Controller"
        ],
        "description": "Get a tag category",
        "operationId": "getTagCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "404": {
            "description": "Tag Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Tag category Controller"
        ],
        "description": "Update the designated tag category",
        "operationId": "updateTagCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/TagCategory"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tag category Controller"
        ],
        "description": "Delete a Tag category",
        "operationId": "deleteTagCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-vol-tenant"
          },
          {
            "$ref": "#/components/parameters/tagCategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedCountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Tag category Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseRequest": {
        "title": "Base Request",
        "description": "Base Request Model",
        "properties": {
          "locationCode": {
            "title": "location code",
            "description": "Location Code",
            "type": "string"
          },
          "userID": {
            "description": "user id",
            "type": "integer"
          },
          "pageSize": {
            "description": "how many results to show per page",
            "type": "integer"
          },
          "pageNum": {
            "description": "which page to show",
            "type": "integer"
          },
          "sortBy": {
            "description": "index to sort results by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BaseResponse": {
        "title": "Base Response",
        "description": "Base Response Model",
        "properties": {
          "success": {
            "description": "Flag for success",
            "type": "boolean"
          },
          "messages": {
            "description": "List of messages",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "numResults": {
            "description": "Number of results",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DateRange": {
        "title": "Date Range",
        "description": "Range of dates",
        "properties": {
          "startDate": {
            "description": "Start Date",
            "type": "string"
          },
          "endDate": {
            "description": "End Date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeletedCountResponse": {
        "title": "Deleted Count Response",
        "description": "Deleted Count Response Model",
        "properties": {
          "deleted": {
            "description": "Count of deleted entries",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeletedResponse": {
        "title": "Deleted Response",
        "description": "Deleted Response Model",
        "properties": {
          "deleted": {
            "description": "Whether the delete was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FetchFileConfigRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Fetch File Config Request",
            "description": "Request for Fetch File Configs",
            "required": [
              "active",
              "lockName",
              "ftpServer",
              "ftpUsername",
              "ftpPassword",
              "ftpRemotePath",
              "postProcessAction"
            ],
            "properties": {
              "fetchFileConfigID": {
                "description": "Fetch File Config ID",
                "type": "integer"
              },
              "active": {
                "description": "Flag for active state",
                "type": "boolean"
              },
              "emailList": {
                "description": "Email List",
                "type": "string"
              },
              "refreshEnabled": {
                "description": "Flag for Refresh Enabled",
                "type": "boolean"
              },
              "refreshFileDescription": {
                "description": "Description for the refresh file",
                "type": "string"
              },
              "updateEnabled": {
                "description": "Flag for Update Enabled",
                "type": "boolean"
              },
              "updateFileDescription": {
                "description": "Description for the update file",
                "type": "string"
              },
              "ftpServer": {
                "description": "FTP server address",
                "type": "string"
              },
              "ftpUsername": {
                "description": "FTP server username",
                "type": "string"
              },
              "ftpPassword": {
                "description": "FTP server password",
                "type": "string"
              },
              "ftpPort": {
                "description": "FTP server port",
                "type": "integer"
              },
              "ftpRemotePath": {
                "description": "FTP server remote path",
                "type": "string"
              },
              "ftpRemotePathArchive": {
                "description": "FTP server remote path archive",
                "type": "string"
              },
              "region": {
                "description": "S3 Region",
                "type": "string"
              },
              "s3Key": {
                "description": "S3 Key",
                "type": "string"
              },
              "secret": {
                "description": "S3 Secret",
                "type": "string"
              },
              "bucket": {
                "description": "S3 Bucket",
                "type": "string"
              },
              "s3Path": {
                "description": "S3 Bucket Path (directory)",
                "type": "string"
              },
              "archiveBucket": {
                "description": "S3 Archive Bucket",
                "type": "string"
              },
              "s3ArchivePath": {
                "description": "S3 Archive Bucket Path (directory)",
                "type": "string"
              },
              "lockName": {
                "description": "Lock name",
                "type": "string"
              },
              "postProcessAction": {
                "description": "Enum denoting action post processing",
                "type": "integer"
              },
              "useControlFile": {
                "description": "Flag for using control file",
                "type": "boolean"
              },
              "multipleFiles": {
                "description": "Flag for using multiple files",
                "type": "boolean"
              },
              "zeroOutNegatives": {
                "description": "Flag for converting negatives to zero",
                "type": "boolean"
              },
              "testFTPConfigs": {
                "description": "Flag for if its a test ftp config",
                "type": "boolean"
              },
              "fieldNameMap": {
                "description": "List of field names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreExtraFields": {
                "description": "Flag for ignoring extra fields",
                "type": "boolean"
              },
              "blankQuantityIsZero": {
                "description": "Flag to convert null quantities to zero",
                "type": "boolean"
              },
              "csvDelimiter": {
                "description": "Delimiter",
                "type": "string"
              },
              "productMapping": {
                "title": "productMapping",
                "description": "Enum for fetch file productMapping",
                "type": "string",
                "enum": [
                  "SWAP_PART_NUMBER_WITH_UPC",
                  "SWAP_SKU_WITH_UPC"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "FetchFileConnectionResponse": {
        "title": "FetchFileConnectionResponse",
        "description": "FetchFileConnectionResponse",
        "properties": {
          "ftpFiles": {
            "description": "List of files found on the specified sftp directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ftpArchiveFiles": {
            "description": "List of files found on the specified sftp archive directory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3Files": {
            "description": "List of files found on the specified s3 bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "s3ArchiveFiles": {
            "description": "List of files found on the specified s3 archive bucket/path",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "CreateExportSettingsFTPRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings FTP Request",
            "description": "Request needed for creating Export Settings FTP",
            "required": [
              "exportSettingsFTP",
              "exportSettingsName"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "description": "Export Settings FTP to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            },
            "type": "object"
          }
        ]
      },
      "CreateExportSettingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings Request",
            "description": "Request needed for creating Export Settings",
            "required": [
              "exportSettings"
            ],
            "properties": {
              "exportSettings": {
                "description": "Export Settings to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettings"
              }
            },
            "type": "object"
          }
        ]
      },
      "CreateExportSettingsS3Request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Export Settings S3 Request",
            "description": "Request needed for creating Export Settings S3",
            "required": [
              "exportSettingsS3",
              "exportSettingsName"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "description": "Export Settings S3 to create",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExportInventoryJobResponse": {
        "title": "Export Inventory Job Response",
        "description": "Response for each export job creation",
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "jobID": {
            "description": "ID of newly created job",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ExportInventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Export Inventory Request",
            "description": "Export Inventory Request",
            "properties": {
              "exportSettingsName": {
                "description": "Name of the Export Settings to use",
                "type": "string"
              },
              "exportSettingsFTPName": {
                "description": "Name of the FTP Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "exportSettingsS3Name": {
                "description": "Name of the S3 Settings to use. Will only check for this if exportID is already set",
                "type": "string"
              },
              "development": {
                "description": "Flag for sending the exports to the development droppoint",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "ExportInventoryResponse": {
        "title": "Export Inventory Response",
        "description": "Response for Export Inventory api",
        "properties": {
          "exportInventoryJobResponses": {
            "description": "List of Export Inventory Job Responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportInventoryJobResponse"
            }
          }
        },
        "type": "object"
      },
      "ExportSettings": {
        "title": "Export Settings",
        "description": "Export Settings",
        "required": [
          "name",
          "fileFormat",
          "exportType",
          "ftpInformation"
        ],
        "properties": {
          "name": {
            "description": "Export Settings Name",
            "type": "string"
          },
          "fileFormat": {
            "description": "Format for the export file",
            "type": "string",
            "enum": [
              "XML",
              "CSV"
            ]
          },
          "exportType": {
            "description": "Type of exportGG for the settings",
            "type": "string",
            "enum": [
              "AGGREGATE",
              "LOCATION"
            ]
          },
          "onlySendAvailable": {
            "description": "Flag for only sending available",
            "type": "boolean"
          },
          "onlySendActiveLocations": {
            "description": "Flag for only sending from active locations",
            "type": "boolean"
          },
          "ftpInformation": {
            "description": "List of export FTP settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsFTP"
            }
          },
          "s3Information": {
            "description": "List of export S3 settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportSettingsS3"
            }
          },
          "exportSingleFile": {
            "description": "Flag for exporting as a single file",
            "type": "boolean"
          },
          "safetyStock": {
            "description": "Safety Stock",
            "type": "string",
            "enum": [
              "SAFETY_STOCK_MAX",
              "SAFETY_STOCK_MIN",
              "SAFETY_STOCK_AVG",
              "SAFETY_STOCK_SUM"
            ]
          },
          "floor": {
            "description": "Floor",
            "type": "string",
            "enum": [
              "FLOOR_MAX",
              "FLOOR_MIN",
              "FLOOR_AVG",
              "FLOOR_SUM"
            ]
          },
          "ltd": {
            "description": "LTD",
            "type": "string",
            "enum": [
              "LTD_MAX",
              "LTD_MIN",
              "LTD_AVG",
              "LTD_SUM"
            ]
          },
          "fileName": {
            "description": "Name for the export file",
            "type": "string"
          },
          "shortenFilename": {
            "description": "Flag for using shortened filenames",
            "type": "boolean"
          },
          "includeAttributes": {
            "description": "Flag for including attributes",
            "type": "boolean"
          },
          "zipFiles": {
            "description": "Flag for zipping the files",
            "type": "boolean"
          },
          "zipFileName": {
            "description": "Name for the zipped file",
            "type": "string"
          },
          "untransformedFileName": {
            "description": "Untransformed File Name",
            "type": "string"
          },
          "untransformedZipFileName": {
            "description": "Untransformed Zip File Name",
            "type": "string"
          },
          "locationGroupIDs": {
            "description": "Location Group Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "siteIDs": {
            "description": "Site Ids associated with the settings",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "directShip": {
            "description": "Flag for only using locations with Direct Ship enabled",
            "type": "boolean"
          },
          "pickup": {
            "description": "Flag for only using locations with In Store Pickup enabled",
            "type": "boolean"
          },
          "transfer": {
            "description": "Flag for only using locations with Transfer enabled",
            "type": "boolean"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for export productMapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          },
          "isClassic": {
            "description": "Flag for marking the setting as a classic export",
            "type": "boolean"
          },
          "ignoreNegativeInventoryLocations": {
            "description": "Flag for excluding negative inventory locations",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "ExportSettingsFTP": {
        "title": "Export Settings FTP",
        "description": "Export Settings FTP",
        "required": [
          "name",
          "ftpServer",
          "ftpPort",
          "ftpDirectory"
        ],
        "properties": {
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "exportSettingsFTPID": {
            "description": "Export Settings FTP ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings FTP Name",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP Server Address",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP Server Port",
            "type": "integer"
          },
          "ftpDirectory": {
            "description": "FTP Server Directory",
            "type": "string"
          },
          "ftpDirectoryControlFile": {
            "description": "FTP Server Control File Directory",
            "type": "string"
          },
          "ftpUser": {
            "description": "FTP Username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP Password",
            "type": "string"
          },
          "deliveryClass": {
            "description": "FTP Delivery Class. Defaults to ExportDeliveryDefault",
            "type": "string"
          },
          "controlFile": {
            "description": "Control File",
            "type": "string"
          },
          "controlFileEmail": {
            "description": "Control File Email",
            "type": "string"
          },
          "remoteFileName": {
            "description": "Remote File Name",
            "type": "string"
          },
          "controlFileName": {
            "description": "Control File Name",
            "type": "string"
          },
          "endpoint": {
            "description": "Endpoint",
            "type": "string"
          },
          "environment": {
            "description": "Environment",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "exportSettingsName": {
            "description": "Created Export Settings Name",
            "type": "string"
          },
          "exportSettingsFTPName": {
            "description": "Created Export Settings FTP Name",
            "type": "string"
          },
          "exportSettingsS3Name": {
            "description": "Created Export Settings S3 Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportSettingsS3": {
        "title": "Export Settings S3",
        "description": "Export Settings S3",
        "required": [
          "name",
          "region",
          "key",
          "secret",
          "bucket"
        ],
        "properties": {
          "exportSettingsID": {
            "description": "Export Settings ID",
            "type": "integer"
          },
          "exportSettingsS3ID": {
            "description": "Export Settings S3 ID",
            "type": "integer"
          },
          "name": {
            "description": "Export Settings S3 Name",
            "type": "string"
          },
          "active": {
            "description": "Flag for Active State",
            "type": "boolean"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "s3Key": {
            "description": "S3 Key",
            "type": "string"
          },
          "secret": {
            "description": "S3 Secret",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket (directory)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetExportSettingsResponse": {
        "title": "Get Export Settings Response",
        "description": "Response for get Export Settings",
        "properties": {
          "exportSettings": {
            "description": "Export Settings Response",
            "type": "object",
            "$ref": "#/components/schemas/ExportSettings"
          }
        },
        "type": "object"
      },
      "UpdateExportSettingsFTPRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings FTP Request",
            "description": "Request needed updating existing Export Settings FTP",
            "required": [
              "exportSettingsName",
              "exportSettingsFTP"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsFTP": {
                "description": "Export Settings FTP to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsFTP"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsFTPResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings FTP Response",
            "description": "Update Export Settings FTP Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsFTPName": {
                "description": "Export Settings FTP Name",
                "type": "string"
              },
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings Request",
            "description": "Request needed updating existing Export Settings",
            "required": [
              "exportSettingsID",
              "exportSettings"
            ],
            "properties": {
              "exportSettings": {
                "description": "Export Settings to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettings"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings Response",
            "description": "Update Export Settings Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "name": {
                "description": "Name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsS3Request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Export Settings S3 Request",
            "description": "Request needed updating existing Export Settings S3",
            "required": [
              "exportSettingsName",
              "exportSettingsS3"
            ],
            "properties": {
              "exportSettingsName": {
                "description": "Export Settings Name to associate the ftp settings with",
                "type": "string"
              },
              "exportSettingsS3": {
                "description": "Export Settings S3 to update",
                "type": "object",
                "$ref": "#/components/schemas/ExportSettingsS3"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateExportSettingsS3Response": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Export Settings S3 Response",
            "description": "Update Export Settings S3 Response",
            "properties": {
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "exportSettingsS3ID": {
                "description": "Export Settings S3 ID",
                "type": "integer"
              },
              "exportSettingsID": {
                "description": "Export Settings ID to associate the s3 settings with",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "AdjustFutureDateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Adjust Future Date Request",
            "description": "Request for adjusting the future date",
            "properties": {
              "futureDate": {
                "description": "Future Date at which the inventory should be allocated against. Expected format '2020-09-28T12:00:00-0500'",
                "type": "DateTime"
              }
            },
            "type": "object"
          }
        ]
      },
      "AdjustItem": {
        "title": "Adjust Item",
        "description": "Adjust Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "DateTime"
          }
        },
        "type": "object"
      },
      "AdjustRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Adjust Request",
            "description": "Request needed for adjusting inventory",
            "properties": {
              "items": {
                "description": "List of items to adjust",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustItem"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "AggregateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Aggregate Request",
            "description": "Request for aggregating inventory",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Item"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that apply tax (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by pickup enabled (true) or not (false)",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              },
              "includeFutureInventory": {
                "description": "Include future inventory or not",
                "type": "string",
                "enum": [
                  "FUTURE_ONLY",
                  "FUTURE_AND_CURRENT"
                ]
              },
              "includeNegativeFutureInventory": {
                "description": "Whether to allow items with negative future inventory in the results",
                "type": "boolean"
              },
              "futureStartDate": {
                "description": "Future start Date at which the inventory should be allocated against.",
                "type": "DateTime"
              },
              "futureEndDate": {
                "description": "Future end Date at which the inventory should be allocated against.",
                "type": "DateTime"
              }
            },
            "type": "object"
          }
        ]
      },
      "AggregateResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Aggregate Response",
            "description": "Response for aggregating Inventory",
            "properties": {
              "tenantID": {
                "description": "Manufacturer Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "AllocateInventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Allocate Inventory Request",
            "description": "Request needed for allocating inventory",
            "required": [
              "tenantID",
              "items"
            ],
            "properties": {
              "items": {
                "description": "list of AllocateItems",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllocateItem"
                }
              },
              "orderDate": {
                "description": "order date",
                "type": "string"
              },
              "orderWeight": {
                "description": "order weight",
                "type": "integer"
              },
              "decrementOnHandOnDeallocate": {
                "description": "flag to determine deallocation on decrements",
                "type": "boolean"
              },
              "autoAssign": {
                "description": "flag to determine whether the allocation was due to auto assignment",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "AllocateItem": {
        "title": "AllocateItem",
        "description": "Item for Allocation",
        "required": [
          "quantity",
          "orderItemID",
          "orderID",
          "shipmentID",
          "locationID"
        ],
        "properties": {
          "partNumber": {
            "title": "part number",
            "description": "part number",
            "type": "string"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "sku": {
            "title": "sku",
            "description": "sku",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "orderID": {
            "title": "order ID",
            "description": "order ID",
            "type": "integer"
          },
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "cartID": {
            "title": "Cart ID",
            "description": "Cart ID (GUID)",
            "type": "string"
          },
          "reservationID": {
            "title": "Reservation ID",
            "description": "Reservation ID",
            "type": "string"
          },
          "cartItemID": {
            "title": "Cart Item ID",
            "description": "Cart Item ID (GUID)",
            "type": "string"
          },
          "shipmentID": {
            "title": "shipment ID",
            "description": "shipment ID",
            "type": "integer"
          },
          "locationCode": {
            "title": "location Code",
            "description": "location Code",
            "type": "string"
          },
          "previousOrderItemID": {
            "title": "previous order item ID",
            "description": "previous order item ID",
            "type": "integer"
          },
          "binID": {
            "title": "bin ID",
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "blockAssignment": {
            "title": "Block Item Assignment",
            "description": "Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "futureDate": {
            "description": "Future Date at which the inventory should be allocated against. Expected format '2020-09-28T12:00:00-0500'",
            "type": "DateTime"
          }
        },
        "type": "object"
      },
      "BlockAssignmentItem": {
        "title": "BlockAssignmentItem",
        "description": "Items for enabling blockAssignment",
        "required": [
          "blockAssignment",
          "itemIdentifiers"
        ],
        "properties": {
          "partNumber": {
            "title": "part number",
            "description": "part number",
            "type": "string"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "sku": {
            "title": "sku",
            "description": "sku",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "blockAssignment": {
            "title": "Block Item Assignment",
            "description": "Block assignment of item at product/location level. ONLY allowed on deallocate.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BlockAssignmentRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Block Assignment Request",
            "description": "Request to block assignment on the product",
            "required": [
              "tenantID",
              "items"
            ],
            "properties": {
              "items": {
                "description": "list of items for blocking Assignment",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BlockAssignmentItem"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "DeleteItemRequest": {
        "title": "Delete Item Request",
        "description": "Request needed for deleting inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "partNumber": {
            "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "upc": {
            "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "sku": {
            "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "DeleteItemResponse": {
        "title": "Delete Item Response",
        "description": "Delete Item Response",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "itemsDeleted": {
            "description": "Items deleted due to the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/M_DeleteItem"
            }
          },
          "totalAuditsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalInventoryEntriesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalLocationsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalPickWavesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalProductsDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "jobIDs": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteItemsRequest": {
        "title": "Delete Item Request",
        "description": "Request needed for deleting inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "items": {
            "description": "List of items to delete. Supports basic regex operators: .*+?^$[]",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "FutureInventory": {
        "title": "Future Inventory",
        "description": "Future Inventory Model",
        "properties": {
          "futureInventoryID": {
            "description": "Future Inventory unique identifier.",
            "type": "integer"
          },
          "onhand": {
            "description": "Expected change in the actual onhand inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "available": {
            "description": "Expected change in the actual available inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "allocated": {
            "description": "Expected change in the actual allocated inventory value when this future inventory record is released.",
            "type": "integer"
          },
          "pending": {
            "description": "Number of new expected pending items that would be created by releasing this future inventory record assuming no actual inventory is available",
            "type": "integer"
          },
          "type": {
            "description": "Type of future inventory update: REFRESH or ADJUST.",
            "type": "string"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "DateTime"
          },
          "createDate": {
            "description": "Date the inventory was created.",
            "type": "DateTime"
          }
        },
        "type": "object"
      },
      "InventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Inventory Request",
            "description": "Request for getting Inventory",
            "required": [
              "type",
              "items"
            ],
            "properties": {
              "type": {
                "description": "Inventory Request Type Enum",
                "type": "string",
                "enum": [
                  "ALL",
                  "PARTIAL",
                  "ANY",
                  "ALL_STORES"
                ]
              },
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ItemQuantity"
                }
              },
              "requestLocation": {
                "description": "Location for Request",
                "type": "object",
                "$ref": "#/components/schemas/RequestLocation"
              },
              "limit": {
                "description": "The maximum number of results to return, defaults to 100 for most",
                "type": "integer"
              },
              "locationWhitelist": {
                "description": "List of location codes that are allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationPriorityList": {
                "description": "List of location codes that should be returned before all others, preventing them from being excluded by limit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "locationBlacklist": {
                "description": "List of location codes that are NOT allowed to be included in results",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ignoreSafetyStock": {
                "description": "Whether to ignore the safety stock buffer put in place",
                "type": "boolean"
              },
              "includeNegativeInventory": {
                "description": "Whether to allow items with negative inventory in the results",
                "type": "boolean"
              },
              "directShip": {
                "description": "Whether to limit results to locations that are shipping enabled",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
                "type": "boolean"
              },
              "pickup": {
                "description": "Filter results by locations that have finderbot enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInAggregateExport": {
                "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
                "type": "boolean"
              },
              "includeInLocationExport": {
                "description": "Filter results by locations that have physical storefronts (true) or don't (false)",
                "type": "boolean"
              },
              "excludeBlockedAssignment": {
                "description": "Filter out results that are blocked from assignment (at the product/location level) ",
                "type": "boolean"
              },
              "includeAttributes": {
                "description": "Flag to include attributes or not",
                "type": "boolean"
              },
              "includeFutureInventory": {
                "description": "If set to true, include future inventory in response (records that were set with a deliveryDate).",
                "type": "boolean"
              },
              "includeNegativeFutureInventory": {
                "description": "Whether to allow items with negative future inventory in the results",
                "type": "boolean"
              },
              "deliveryDateBefore": {
                "description": "DateTime to filter for only future inventory with a delivery date before or equal to the given date",
                "type": "DateTime"
              },
              "deliveryDateAfter": {
                "description": "DateTime to filter for only future inventory with a delivery date after or equal to the given date",
                "type": "DateTime"
              },
              "sortByEnum": {
                "description": "What to sort the inventory results by. Only used for GetInventoryByLocation calls (locationCode must be set)",
                "type": "string",
                "enum": [
                  "ON_HAND",
                  "AVAILABLE",
                  "ALLOCATED",
                  "PART_NUMBER",
                  "PRODUCT_ID"
                ]
              },
              "sortDescending": {
                "description": "Whether to sort by descending order or not. Must be used in conjunction with the sortByEnum value"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            },
            "type": "object"
          }
        ]
      },
      "InventoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Inventory Response",
            "description": "Inventory Response",
            "properties": {
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "tenantID": {
                "description": "Tenant Identifier",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "allocated": {
                "description": "The quantity the location has that are already allocated.",
                "type": "integer"
              },
              "pending": {
                "description": "The quantity the location has that are pending.",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "blockAssignment": {
                "description": "Whether or not the product is blocked for assignment",
                "type": "boolean"
              },
              "ltd": {
                "description": "Custom field used for store prioritization",
                "type": "number"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "safetyStock": {
                "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
                "type": "integer"
              },
              "distance": {
                "description": "The distance in miles from this location to the item's destination",
                "type": "number"
              },
              "directShip": {
                "description": "Whether this location can ship to a consumer",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Whether the location can ship to another location (store), thus restocking that location.",
                "type": "boolean"
              },
              "pickup": {
                "description": "Whether a consumer can pick up product at this location (store)",
                "type": "boolean"
              },
              "countryCode": {
                "description": "The country code of this location",
                "type": "string"
              },
              "currencyID": {
                "description": "The currency identifier for the retailPrice",
                "type": "integer"
              },
              "retailPrice": {
                "description": "The price of the product at this location",
                "type": "number"
              },
              "inventoryLocatorName": {
                "description": "The inventory locator name of the individual item",
                "type": "string"
              },
              "attributes": {
                "description": "List of Inventory Attributes",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "taggedInventory": {
                "$ref": "#/components/schemas/taggedInventoryMap"
              },
              "futureInventory": {
                "$ref": "#/components/schemas/futureInventoryArray"
              }
            },
            "type": "object"
          }
        ]
      },
      "Item": {
        "title": "Item",
        "description": "Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemQuantity": {
        "title": "Item Quantity",
        "description": "Item Quantity Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JobIDResponse": {
        "title": "Job ID Response",
        "description": "Job ID Response",
        "properties": {
          "jobID": {
            "description": "Job ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OrderItemInformation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Order Item Information",
            "description": "Order Item Information",
            "properties": {
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "orderItemID": {
                "description": "Order Item Identifier",
                "type": "integer"
              },
              "locationID": {
                "description": "Location Identifier",
                "type": "integer"
              },
              "locationActive": {
                "description": "Flag for whether the location is active",
                "type": "boolean"
              },
              "locationCode": {
                "description": "External Store Identifier",
                "type": "integer"
              },
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "binID": {
                "description": "Bin Identifier",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "ltd": {
                "description": "Custom field used for store prioritization",
                "type": "string"
              },
              "floor": {
                "description": "Absolute minimum quantity of this item that should be in stock at any time",
                "type": "integer"
              },
              "safetyStock": {
                "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
                "type": "integer"
              },
              "onHand": {
                "description": "The quantity the location has in its possession",
                "type": "integer"
              },
              "available": {
                "description": "The quantity the location has that are available for purchase",
                "type": "integer"
              },
              "allocated": {
                "description": "The quantity the location has that are allocated",
                "type": "integer"
              },
              "allocates": {
                "description": "Total number of allocations",
                "type": "integer"
              },
              "deallocates": {
                "description": "Total number of deallocations",
                "type": "integer"
              },
              "fulfills": {
                "description": "Total number of fulfillments. Should never be greater than 1.",
                "type": "integer"
              },
              "picks": {
                "description": "Total number of picks (WMS only)",
                "type": "integer"
              },
              "pendingQuantity": {
                "description": "Pending quantity (WMS only)",
                "type": "integer"
              },
              "events": {
                "description": "Order Identifier",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItemInformationEvent"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "OrderItemInformationEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Order Item Information Event",
            "description": "Order Item Information Event",
            "properties": {
              "date": {
                "description": "Date of the event",
                "type": "string"
              },
              "eventType": {
                "description": "Type of event",
                "type": "string",
                "enum": [
                  "ALLOCATED",
                  "DEALLOCATED",
                  "FULFILLED",
                  "PICKED",
                  "DEALLOCATE_FULFILL"
                ]
              },
              "quantity": {
                "description": "Quantity",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrderItemInformationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Order Item Information Request",
            "description": "Request for getting order item information",
            "properties": {
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "items": {
                "description": "List of Items to search on",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "OrderItemLogIdentifier": {
        "title": "Order Item Log Identifier",
        "description": "OrderItem Log Identifier",
        "properties": {
          "orderID": {
            "description": "Order Identifier",
            "type": "integer"
          },
          "orderItemID": {
            "description": "Order Item Identifier",
            "type": "integer"
          },
          "shipmentID": {
            "description": "Shipment Identifier",
            "type": "integer"
          },
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrderItemLogRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Order Item Log Request",
            "description": "OrderItem Log Request",
            "properties": {
              "identifiers": {
                "description": "A list of order item log identifiers to search for",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItemLogIdentifier"
                }
              },
              "orderBy": {
                "description": "Order Identifier",
                "type": "string",
                "enum": [
                  "ORDER_ID",
                  "ORDER_ITEM_ID",
                  "INVENTORY_ID",
                  "TENANT_ID",
                  "LOCATION_ID",
                  "USER_ID",
                  "QUANTITY",
                  "TYPE",
                  "RESOLVED",
                  "FIXED",
                  "DATE",
                  "SHIPMENT_ID"
                ]
              },
              "limit": {
                "description": "The maximum number of results to return",
                "type": "integer"
              },
              "type": {
                "description": "The type of logs to retrieve",
                "type": "string",
                "enum": [
                  "ALLOCATE",
                  "DEALLOCATE",
                  "FULFILL",
                  "PICK"
                ]
              },
              "sortAscending": {
                "description": "Whether to sort results ascending, based on orderBy",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "OrderItemLogResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Order Item Log Response",
            "description": "OrderItem Log Response",
            "properties": {
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "orderItemID": {
                "description": "Order Item Identifier",
                "type": "integer"
              },
              "shipmentID": {
                "description": "Shipment Identifier",
                "type": "integer"
              },
              "inventoryID": {
                "description": "Inventory Identifier",
                "type": "integer"
              },
              "tenantID": {
                "description": "Tenant Identifier",
                "type": "integer"
              },
              "locationCode": {
                "description": "Location Code Identifier",
                "type": "string"
              },
              "userID": {
                "description": "User Identifier",
                "type": "integer"
              },
              "quantity": {
                "description": "The number of items affected for this log entry",
                "type": "integer"
              },
              "type": {
                "description": "The type of logs to retrieve",
                "type": "string",
                "enum": [
                  "ALLOCATE",
                  "DEALLOCATE",
                  "FULFILL",
                  "PICK"
                ]
              },
              "resolved": {
                "description": "Whether this event is resolved",
                "type": "boolean"
              },
              "fixed": {
                "description": "Whether this event has been fixed",
                "type": "boolean"
              },
              "date": {
                "description": "The date of this log entry",
                "type": "string"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "RefreshItem": {
        "title": "Refresh Item",
        "description": "Refresh Item",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          },
          "binID": {
            "description": "Bin Location Identifier",
            "type": "integer"
          },
          "LTD": {
            "description": "Custom field used for store prioritization",
            "type": "float"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetyStock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "quantity": {
            "description": "Current Quantity of Item",
            "type": "integer"
          },
          "retailPrice": {
            "description": "Stock Keeping Unit",
            "type": "number"
          },
          "currencyID": {
            "description": "The price of the item",
            "type": "integer"
          },
          "inventoryLocatorName": {
            "description": "The inventory locator name of the item",
            "type": "string"
          },
          "attributes": {
            "description": "List of Item Attributes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "deliveryDate": {
            "description": "Date at which this inventory will become available. Expected format '2020-09-28T12:00:00-0500'",
            "type": "DateTime"
          }
        },
        "type": "object"
      },
      "RefreshRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Refresh Request",
            "description": "Request needed for refreshing inventory",
            "required": [
              "locationCode"
            ],
            "properties": {
              "items": {
                "description": "List of items to refresh",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RefreshItem"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "RequestLocation": {
        "title": "Request Location",
        "description": "Request Location",
        "properties": {
          "unit": {
            "description": "Unit of distance used for radius",
            "type": "string",
            "default": "MILES",
            "enum": [
              "MILES",
              "KM"
            ]
          },
          "radius": {
            "description": "Distance from location",
            "type": "number"
          },
          "postalCode": {
            "description": "Postal Code of this location",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude coordinate of this location",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude coordinate of this location",
            "type": "number"
          },
          "countryCode": {
            "description": "Country Code for this location",
            "type": "string"
          },
          "locationCode": {
            "description": "Location Code for this location. This being set will trigger GetInventoryByLocation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMapping": {
        "title": "Product Mapping",
        "description": "Product Mapping",
        "properties": {
          "tenantID": {
            "title": "tenantID",
            "description": "Tenant Identifier",
            "type": "integer"
          },
          "direction": {
            "title": "direction",
            "description": "Enum for direction of the mapping",
            "type": "string",
            "enum": [
              "INBOUND",
              "OUTBOUND",
              "SKIP"
            ]
          },
          "mapping": {
            "title": "mapping",
            "description": "Enum for mapping rule",
            "type": "string",
            "enum": [
              "DEFAULT_MAPPING",
              "CUSTOM_MAPPING_PART_TO_ALL",
              "CUSTOM_MAPPING_PART_TO_SKU",
              "CUSTOM_MAPPING_ONLY_UPC",
              "CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY",
              "CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU",
              "CUSTOM_MAPPING_SKU_TO_PART",
              "CUSTOM_MAPPING_SKU_TO_UPC_IF_EMPTY"
            ]
          }
        },
        "type": "object"
      },
      "ProductMappingRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Product Mapping Request",
            "description": "Request needed to interact with Product Mappings",
            "properties": {
              "direction": {
                "title": "direction",
                "description": "Enum for direction of the mapping",
                "type": "string",
                "enum": [
                  "INBOUND",
                  "OUTBOUND",
                  "SKIP"
                ]
              },
              "mapping": {
                "title": "mapping",
                "description": "Enum for mapping rule",
                "type": "string",
                "enum": [
                  "DEFAULT_MAPPING",
                  "CUSTOM_MAPPING_PART_TO_ALL",
                  "CUSTOM_MAPPING_PART_TO_SKU",
                  "CUSTOM_MAPPING_ONLY_UPC",
                  "CUSTOM_MAPPING_PART_TO_UPC_IF_EMPTY",
                  "CUSTOM_MAPPING_SKU_TO_PART_UPC_SKU",
                  "CUSTOM_MAPPING_SKU_TO_PART"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "ProductMappingResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Product Mapping Response",
            "description": "Product Mapping Response",
            "properties": {
              "productMappings": {
                "description": "Product Mapping",
                "type": "object",
                "$ref": "#/components/schemas/ProductMapping"
              }
            },
            "type": "object"
          }
        ]
      },
      "JobQueueResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Job Queue Response",
            "description": "Response for getting a job",
            "properties": {
              "jobID": {
                "description": "Internal identifier that uniquely identifies a single job",
                "type": "integer"
              },
              "tenantID": {
                "description": "Unique internal identifier of the tenant that owns the job",
                "type": "integer"
              },
              "locationCode": {
                "description": "Unique internal Identifier of the owning location",
                "type": "string"
              },
              "type": {
                "description": "Purpose of the job",
                "type": "string",
                "enum": [
                  "REFRESH",
                  "ADJUST",
                  "RELEASE_SHIPMENTS",
                  "CREATE_PICK_WAVE",
                  "CLOSE_PICK_WAVE",
                  "PUT_AWAY_FILE",
                  "SHORT_PICK_ERROR",
                  "BIN_AUDIT_START",
                  "BIN_AUDIT_COMPLETION",
                  "CREATE_BIN_AUDIT",
                  "RELEASE_PENDING_ITEMS",
                  "ALLOCATE",
                  "DEALLOCATE",
                  "FULFILL",
                  "DELETE"
                ]
              },
              "added": {
                "description": "Time and date the job was added to the queue in ISO8601 format in UTC",
                "type": "string"
              },
              "started": {
                "description": "Time and date the job was started in ISO8601 format in UTC",
                "type": "string"
              },
              "finished": {
                "description": "Time and date the job was finished in ISO8601 format in UTC",
                "type": "string"
              },
              "originalFilename": {
                "description": "The full name of the file that was picked up at the secure droppoint server before being split up by location. Applies only to refresh and adjust jobs created via file fetch process",
                "type": "string"
              },
              "hasData": {
                "description": "True if the job was not created from a fetched file",
                "type": "boolean"
              },
              "itemCount": {
                "description": "The number of items processed, only for job types REFRESH and ADJUST",
                "type": "integer"
              },
              "status": {
                "description": "Current status of job completion",
                "type": "string",
                "enum": [
                  "PENDING",
                  "WORKING",
                  "SUCCESS",
                  "FAILED"
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "Tag": {
        "title": "Tag Response",
        "description": "Request/Response object for a tag",
        "properties": {
          "tagID": {
            "description": "Tag ID",
            "type": "integer"
          },
          "tagValue": {
            "description": "Tag Value",
            "type": "string"
          },
          "isDefault": {
            "description": "Whether or not this tag is the default tag for its category.",
            "type": "boolean"
          },
          "percent": {
            "description": "Percentage of available inventory this tag will get when the percentage update is performed. Must be between 0 and 100 (inclusive).",
            "type": "integer"
          },
          "created": {
            "description": "Date this tag was created",
            "type": "string"
          },
          "updated": {
            "description": "Date this tag was last updated",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagCategory": {
        "title": "Tag Category Response",
        "description": "Request and response object for a tag category",
        "properties": {
          "tagCategoryID": {
            "description": "Tag Category ID",
            "type": "integer"
          },
          "name": {
            "description": "Tag Category Name",
            "type": "string"
          },
          "created": {
            "description": "Date tag category was created.",
            "type": "string"
          },
          "deletion_job_ids": {
            "description": "List of deletion job ID's",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "tags": {
            "description": "Tags within this category",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "type": "object"
      },
      "TagQuantity": {
        "title": "Tag quantity response",
        "description": "Response object for a tag quantity",
        "properties": {
          "onHand": {
            "description": "The quantity the the location has in its possession for this tag",
            "type": "integer"
          },
          "available": {
            "description": "The quantity the location has that are available for purchase for this tag",
            "type": "integer"
          },
          "allocated": {
            "description": "The quantity the location has that are already allocated for this tag",
            "type": "integer"
          },
          "pending": {
            "description": "The quantity the location has that are pending for this tag",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          },
          "futureInventory": {
            "$ref": "#/components/schemas/futureInventoryArray"
          }
        },
        "type": "object"
      },
      "Product": {
        "title": "Product",
        "description": "Product within a bin",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductMatch": {
        "title": "Product Match",
        "description": "Product Match",
        "properties": {
          "matchType": {
            "description": "How the product matches with the identifier",
            "type": "string"
          },
          "identifier": {
            "description": "Identifier",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductQuantity": {
        "title": "Product Quantities",
        "description": "A product and its associated quantity",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of product",
            "type": "integer"
          },
          "binID": {
            "description": "ID of associated bin",
            "type": "integer"
          },
          "locationID": {
            "description": "Location Identifier of the owning location",
            "type": "integer"
          },
          "binTypeID": {
            "description": "Bin Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "Bin Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "inventoryID": {
            "description": "Inventory ID",
            "type": "integer"
          },
          "tenantLocProductID": {
            "description": "Tenant Location Product ID",
            "type": "integer"
          },
          "auditProductID": {
            "description": "Audit Product ID",
            "type": "integer"
          },
          "auditID": {
            "description": "Audit ID",
            "type": "integer"
          },
          "onHand": {
            "description": "Amount of product on hand",
            "type": "integer"
          },
          "available": {
            "description": "Amount of product available",
            "type": "integer"
          },
          "allocated": {
            "description": "Amount of product allocated",
            "type": "integer"
          },
          "pending": {
            "description": "Amount of product pending",
            "type": "integer"
          },
          "ltd": {
            "description": "Custom field used for store prioritization",
            "type": "integer"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetystock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "ProductQuantityResponse": {
        "title": "Product Quantities Response",
        "description": "A response object for a product and its associated quantity",
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "upc": {
            "description": "UPC",
            "type": "string"
          },
          "sku": {
            "description": "SKU",
            "type": "string"
          },
          "quantity": {
            "description": "Quantity of product",
            "type": "integer"
          },
          "binID": {
            "description": "ID of associated bin",
            "type": "integer"
          },
          "locationCode": {
            "description": "Location Code of the owning location",
            "type": "string"
          },
          "binTypeID": {
            "description": "Bin Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "Bin Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Name of the product",
            "type": "string"
          },
          "inventoryID": {
            "description": "Inventory ID",
            "type": "integer"
          },
          "tenantLocProductID": {
            "description": "Tenant Location Product ID",
            "type": "integer"
          },
          "auditProductID": {
            "description": "Audit Product ID",
            "type": "integer"
          },
          "auditID": {
            "description": "Audit ID",
            "type": "integer"
          },
          "onHand": {
            "description": "Amount of product on hand",
            "type": "integer"
          },
          "available": {
            "description": "Amount of product available",
            "type": "integer"
          },
          "allocated": {
            "description": "Amount of product allocated",
            "type": "integer"
          },
          "pending": {
            "description": "Amount of product pending",
            "type": "integer"
          },
          "ltd": {
            "description": "Custom field used for store prioritization",
            "type": "integer"
          },
          "floor": {
            "description": "Absolute minimum quantity of this item that should be in stock at any time",
            "type": "integer"
          },
          "safetystock": {
            "description": "Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/taggedInventoryMap"
          }
        },
        "type": "object"
      },
      "Bin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Bin Inventory Response",
            "description": "Response object for a bin",
            "properties": {
              "name": {
                "description": "Bin Name",
                "type": "string"
              },
              "binID": {
                "description": "Bin ID",
                "type": "integer"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "binTypeID": {
                "description": "Bin Type ID",
                "type": "integer"
              },
              "binStatusID": {
                "description": "Bin Status ID",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "BinIDResponse": {
        "title": "Bin ID Response",
        "description": "Bin ID Response",
        "properties": {
          "binID": {
            "description": "Bin ID",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BinProductQuantities": {
        "title": "Bin Product Quantities",
        "description": "A bin and its associated products and quantities",
        "properties": {
          "binName": {
            "description": "Name of the bin",
            "type": "string"
          },
          "products": {
            "description": "List of ProductQuantities - Products with their associated quantity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductQuantity"
            }
          }
        },
        "type": "object"
      },
      "BinProductResponseQuantities": {
        "title": "Bin Product Response Quantities",
        "description": "A response object for a bin and its associated products and quantities",
        "properties": {
          "binName": {
            "description": "Name of the bin",
            "type": "string"
          },
          "products": {
            "description": "List of ProductQuantities - Products with their associated quantity",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductQuantityResponse"
            }
          }
        },
        "type": "object"
      },
      "BinSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Bin Search Request",
            "description": "Request needed for searching for bins",
            "properties": {
              "binName": {
                "description": "Partial match of bin name",
                "type": "string"
              },
              "product": {
                "description": "Product to match bins against",
                "type": "object",
                "$ref": "#/components/schemas/Product"
              },
              "sortAscending": {
                "description": "Flag for sorting ascending",
                "type": "boolean"
              },
              "showNegativeInventory": {
                "description": "Flag for showing negative inventory",
                "type": "boolean"
              },
              "tags": {
                "$ref": "#/components/schemas/tags"
              }
            },
            "type": "object"
          }
        ]
      },
      "BinSearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Bin Search Response",
            "description": "Bin Search Response Object",
            "properties": {
              "binQuantities": {
                "description": "List of BinProductQuantities - bins with associated products and quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductResponseQuantities"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "CreateBinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Create Bin Request",
            "description": "Request needed for creating a new bin",
            "properties": {
              "binTypeID": {
                "title": "bin type id",
                "description": "Bin Type Identifier",
                "type": "integer"
              },
              "binStatusID": {
                "title": "bin status id",
                "description": "Bin Status Identifier",
                "type": "integer"
              },
              "name": {
                "title": "name",
                "description": "Name",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "GetBinsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Get Bins Request",
            "description": "Request needed for getting a list of bins",
            "properties": {
              "searchTerm": {
                "description": "term to search for",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "LoadBinInventoryRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Load Bin Inventory Request",
            "description": "Request needed for loading bin inventory",
            "properties": {
              "bins": {
                "description": "List of bins and their associated product quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductQuantities"
                }
              },
              "dryRun": {
                "description": "Flag for dry runs",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "LoadBinInventoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Load Bin Inventory Response",
            "description": "Response object for loading bin inventory",
            "properties": {
              "unitsAdded": {
                "description": "Number of units added",
                "type": "integer"
              },
              "unitsRemoved": {
                "description": "Number of removed units",
                "type": "integer"
              },
              "binsCreated": {
                "description": "Names of created bins",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "productsCreated": {
                "description": "List of products created",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "binQuantities": {
                "description": "List of new bin product quantities",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BinProductQuantities"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateBinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Bin Request",
            "description": "Request needed for updating a bin",
            "required": [
              "binID",
              "locationCode"
            ],
            "properties": {
              "binID": {
                "description": "Bin identifier",
                "type": "integer"
              },
              "binTypeID": {
                "description": "New Bin's Type ID",
                "type": "integer"
              },
              "binStatusID": {
                "description": "New Bin's Status ID",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateBinsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseRequest"
          },
          {
            "title": "Update Bins Request",
            "description": "Request needed for updating bins",
            "properties": {
              "bins": {
                "description": "List of Update Bin Requests",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateBinRequest"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateBinsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Update Bins Response",
            "description": "Response for updating bins",
            "properties": {
              "numberAffected": {
                "description": "Number of affected bins",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "GetPendingItemsResponse": {
        "title": "Get Pending Items Response",
        "description": "Get Pending Items Response",
        "properties": {
          "totalCount": {
            "description": "Total Count of pending items",
            "type": "integer"
          },
          "page": {
            "description": "Page number",
            "type": "integer"
          },
          "perPage": {
            "description": "Number per page",
            "type": "integer"
          },
          "prevPage": {
            "description": "Previous page",
            "type": "integer"
          },
          "sortBy": {
            "description": "Field to sort by",
            "type": "string",
            "enum": [
              "QUANTITY",
              "FROM",
              "TO",
              "TYPE",
              "ORDER_ID",
              "WEIGHT"
            ]
          },
          "sortAscending": {
            "description": "Flag to sort by ascending",
            "type": "boolean"
          },
          "pendingItems": {
            "description": "List of pending items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingItem"
            }
          }
        },
        "type": "object"
      },
      "PendingItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "Pending Item",
            "description": "Pending Item",
            "properties": {
              "pendingItemID": {
                "description": "Pending Item Identifier",
                "type": "integer"
              },
              "orderID": {
                "description": "Order Identifier",
                "type": "integer"
              },
              "shipmentID": {
                "description": "Shipment Identifier",
                "type": "integer"
              },
              "type": {
                "description": "Pending Item type",
                "type": "string",
                "enum": [
                  "TYPE_BIN",
                  "TYPE_DC",
                  "TYPE_AUDIT",
                  "TYPE_RESTOCK"
                ]
              },
              "quantity": {
                "description": "The number of items affected for this log entry",
                "type": "integer"
              },
              "partNumber": {
                "description": "Part/Product Number",
                "type": "string"
              },
              "upc": {
                "description": "Universal Product Code",
                "type": "string"
              },
              "sku": {
                "description": "Stock Keeping Unit",
                "type": "string"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "toBin": {
                "description": "To Bin ID",
                "type": "string"
              },
              "toBinID": {
                "description": "To Bin ID",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "BinRange": {
        "title": "Bin Range",
        "description": "Range of bins",
        "properties": {
          "startBinName": {
            "description": "Start Bin Name",
            "type": "string"
          },
          "endBinName": {
            "description": "End Bin Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BinModel": {
        "title": "BinModel",
        "description": "Bin Model",
        "properties": {
          "binID": {
            "description": "Unique Bin Identifier assigned by the system",
            "type": "integer"
          },
          "locationID": {
            "description": "Location Identifier of the owning location",
            "type": "integer"
          },
          "binTypeID": {
            "description": "New Bin's Type ID",
            "type": "integer"
          },
          "binStatusID": {
            "description": "New Bin's Status ID",
            "type": "integer"
          },
          "name": {
            "description": "Client specified static bin name",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BinResponseModel": {
        "title": "BinResponseModel",
        "description": "Bin Response Object",
        "properties": {
          "bins": {
            "description": "list of resultant bins",
            "type": "object",
            "$ref": "#/components/schemas/BinModel"
          },
          "resultCount": {
            "description": "number of results",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BinStatusModel": {
        "title": "BinStatusModel",
        "description": "Status of Bin",
        "properties": {
          "binStatusID": {
            "description": "Bin Status Identifier",
            "type": "integer"
          },
          "description": {
            "description": "Bin Status Description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BinTypeModel": {
        "title": "BinTypeModel",
        "description": "Type of Bin",
        "properties": {
          "binTypeID": {
            "description": "Bin Type Identifier",
            "type": "integer"
          },
          "description": {
            "description": "Bin Type Description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteFutureItemRequest": {
        "title": "Delete Future Item Request",
        "description": "Request needed for deleting future inventory",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "explicit": {
            "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item.",
            "type": "boolean"
          },
          "locationCodes": {
            "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\n    All locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allLocations": {
            "description": "Flag used to request deletion of future inventory across all locations (overrides locationCodes).",
            "type": "boolean"
          },
          "partNumber": {
            "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "upc": {
            "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "sku": {
            "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
            "type": "string"
          },
          "futureStartDate": {
            "description": "Start of future date range to search on. Required field example '2023-01-26T19:59:00+0000'",
            "type": "string",
            "format": "date-time"
          },
          "futureEndDate": {
            "description": "End of future date range to search on. Required Field example '2023-01-26T19:59:00+0000'",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "DeleteFutureItemResponse": {
        "title": "Delete Future Item Response",
        "description": "Delete Future Item Response",
        "properties": {
          "dryRun": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "itemsDeleted": {
            "description": "Items deleted due to the request",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/M_DeleteItem"
            }
          },
          "totalInventoryEntriesDeleted": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "totalLocationsAffected": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          },
          "jobIDs": {
            "description": "Flag used to differentiate between a test and a non-test run.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InventoryAllocationResponse": {
        "title": "InventoryAllocationResponse",
        "description": "InventoryAllocationResponse Object",
        "properties": {
          "orderItemID": {
            "title": "order item ID",
            "description": "order item ID",
            "type": "integer"
          },
          "upc": {
            "title": "upc",
            "description": "upc",
            "type": "string"
          },
          "state": {
            "title": "state",
            "description": "state",
            "type": "string"
          },
          "quantity": {
            "title": "quantity",
            "description": "quantity",
            "type": "integer"
          },
          "futureDate": {
            "description": "Future Date at which the inventory should be allocated against. Expected format '2020-09-28T12:00:00-0500'",
            "type": "DateTime"
          },
          "tags": {
            "$ref": "#/components/schemas/tags"
          }
        },
        "type": "object"
      },
      "LocationGroupResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "LocationGroupResponse",
            "description": "LocationGroup Response Object",
            "properties": {
              "locationGroupID": {
                "description": "Location Group ID",
                "type": "integer"
              },
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "locationGroupCode": {
                "description": "Location Group Code",
                "type": "string"
              },
              "created": {
                "description": "Created",
                "type": "string"
              },
              "adminLocationGroupID": {
                "description": "Admin Location Group ID",
                "type": "integer"
              },
              "sites": {
                "description": "Site IDs",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "locationCodes": {
                "description": "Location IDs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "LocationRequest": {
        "title": "LocationRequest",
        "description": "Location Request Object",
        "required": [
          "locationCode",
          "directShip",
          "pickup",
          "tenantID",
          "active",
          "locationName"
        ],
        "properties": {
          "tenantID": {
            "description": "Tenant ID",
            "type": "integer"
          },
          "locationCode": {
            "description": "Location Code",
            "type": "string"
          },
          "express": {
            "description": "Flag for whether the location is express enabled or not",
            "type": "boolean"
          },
          "includeInLocationExport": {
            "description": "Flag for whether the location is to be included in location exports",
            "type": "boolean"
          },
          "includeInAggregate": {
            "description": "Flag for whether the location is to be included in aggregate exports",
            "type": "boolean"
          },
          "active": {
            "description": "Flag for whether the location is active",
            "type": "boolean"
          },
          "directShip": {
            "description": "Flag for whether the location allows Direct Ship (STH) orders",
            "type": "boolean"
          },
          "pickup": {
            "description": "Flag for whether the location allows Pickup (BOPIS) orders",
            "type": "boolean"
          },
          "transferEnabled": {
            "description": "Flag for whether the location allows Transfer orders",
            "type": "boolean"
          },
          "postalCode": {
            "description": "Postal Code",
            "type": "string"
          },
          "countryCode": {
            "description": "Country Code",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude",
            "type": "float"
          },
          "longitude": {
            "description": "Longitude",
            "type": "float"
          },
          "locationName": {
            "description": "Location Name",
            "type": "string"
          },
          "wmsEnabled": {
            "description": "Flag for whether the location is WMS Enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LocationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "title": "LocationResponse",
            "description": "Location Response Object",
            "properties": {
              "locationID": {
                "description": "Internal Location ID",
                "type": "integer"
              },
              "tenantID": {
                "description": "Tenant ID",
                "type": "integer"
              },
              "locationCode": {
                "description": "Location Code",
                "type": "string"
              },
              "express": {
                "description": "Flag for whether the location is express enabled or not",
                "type": "boolean"
              },
              "includeInLocationExport": {
                "description": "Flag for whether the location is to be included in location exports",
                "type": "boolean"
              },
              "includeInAggregate": {
                "description": "Flag for whether the location is to be included in aggregate exports",
                "type": "boolean"
              },
              "active": {
                "description": "Flag for whether the location is active",
                "type": "boolean"
              },
              "directShip": {
                "description": "Flag for whether the location allows Direct Ship (STH) orders",
                "type": "boolean"
              },
              "pickup": {
                "description": "Flag for whether the location allows Pickup (BOPIS) orders",
                "type": "boolean"
              },
              "transferEnabled": {
                "description": "Flag for whether the location allows Transfer orders",
                "type": "boolean"
              },
              "postalCode": {
                "description": "Postal Code",
                "type": "string"
              },
              "countryCode": {
                "description": "Country Code",
                "type": "string"
              },
              "latitude": {
                "description": "Latitude",
                "type": "float"
              },
              "longitude": {
                "description": "Longitude",
                "type": "float"
              },
              "locationName": {
                "description": "Location Name",
                "type": "string"
              },
              "wmsEnabled": {
                "description": "Flag for whether the location is WMS Enabled",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "M_DeleteFutureItem": {
        "title": "M_DeleteFutureItem",
        "description": "Delete Item Model",
        "properties": {
          "productID": {
            "description": "Product Identifier",
            "type": "integer"
          },
          "inventoryIDs": {
            "description": "List of inventory identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationIDs": {
            "description": "List of location identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationCodes": {
            "description": "List of location codes associated with the deleted item",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "itemIdentifier": {
            "description": "Details about the item that was deleted",
            "$ref": "#/components/schemas/ProductIdentifier"
          }
        },
        "type": "object"
      },
      "M_DeleteItem": {
        "title": "M_DeleteItem",
        "description": "Delete Item Model",
        "properties": {
          "productID": {
            "description": "Product Identifier",
            "type": "integer"
          },
          "inventoryIDs": {
            "description": "List of inventory identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationIDs": {
            "description": "List of location identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "locationCodes": {
            "description": "List of location codes associated with the deleted item",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auditIDs": {
            "description": "List of audit identifiers associated with the deleted item",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "itemIdentifier": {
            "description": "Details about the item that was deleted",
            "$ref": "#/components/schemas/ProductIdentifier"
          }
        },
        "type": "object"
      },
      "M_FetchFileConfig": {
        "title": "M_FetchFileConfig",
        "description": "Fetch File Config Model",
        "properties": {
          "fetchFileConfigID": {
            "description": "Fetch File Config ID",
            "type": "integer"
          },
          "tenantID": {
            "description": "Tenant ID",
            "type": "integer"
          },
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "lastModified": {
            "description": "Time config was last modified",
            "type": "string"
          },
          "emailList": {
            "description": "Email List",
            "type": "string"
          },
          "refreshEnabled": {
            "description": "Flag for Refresh Enabled",
            "type": "boolean"
          },
          "refreshFileDescription": {
            "description": "Description for the refresh file",
            "type": "string"
          },
          "updateEnabled": {
            "description": "Flag for Update Enabled",
            "type": "boolean"
          },
          "updateFileDescription": {
            "description": "Description for the update file",
            "type": "string"
          },
          "ftpServer": {
            "description": "FTP server address",
            "type": "string"
          },
          "ftpUsername": {
            "description": "FTP server username",
            "type": "string"
          },
          "ftpPassword": {
            "description": "FTP server password",
            "type": "string"
          },
          "ftpPort": {
            "description": "FTP server port",
            "type": "integer"
          },
          "ftpRemotePath": {
            "description": "FTP server remote path",
            "type": "string"
          },
          "ftpRemotePathArchive": {
            "description": "FTP server remote path archive",
            "type": "string"
          },
          "region": {
            "description": "S3 Region",
            "type": "string"
          },
          "s3Key": {
            "description": "S3 Key",
            "type": "string"
          },
          "secret": {
            "description": "S3 Secret",
            "type": "string"
          },
          "bucket": {
            "description": "S3 Bucket",
            "type": "string"
          },
          "s3Path": {
            "description": "S3 Bucket Path (directory)",
            "type": "string"
          },
          "archiveBucket": {
            "description": "S3 Archive Bucket",
            "type": "string"
          },
          "s3ArchivePath": {
            "description": "S3 Archive Bucket Path (directory)",
            "type": "string"
          },
          "lockName": {
            "description": "Lock name",
            "type": "string"
          },
          "postProcessAction": {
            "description": "Enum denoting action post processing",
            "type": "integer"
          },
          "useControlFile": {
            "description": "Flag for using control file",
            "type": "boolean"
          },
          "multipleFiles": {
            "description": "Flag for using multiple files",
            "type": "boolean"
          },
          "zeroOutNegatives": {
            "description": "Flag for converting negatives to zero",
            "type": "boolean"
          },
          "fieldNameMap": {
            "description": "List of field names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignoreExtraFields": {
            "description": "Flag for ignoring extra fields",
            "type": "boolean"
          },
          "blankQuantityIsZero": {
            "description": "Flag to convert null quantities to zero",
            "type": "boolean"
          },
          "csvDelimiter": {
            "description": "CSV Delimiter",
            "type": "string"
          },
          "exportAfterRefresh": {
            "description": "Flag for exporting after refresh",
            "type": "boolean"
          },
          "postImportExportId": {
            "description": "Export id post import",
            "type": "integer"
          },
          "postImportFtpId": {
            "description": "FTP id post import",
            "type": "integer"
          },
          "productMapping": {
            "title": "productMapping",
            "description": "Enum for fetch file mapping",
            "type": "string",
            "enum": [
              "SWAP_PART_NUMBER_WITH_UPC",
              "SWAP_SKU_WITH_UPC"
            ]
          }
        },
        "type": "object"
      },
      "ProductIdentifier": {
        "title": "ProductIdentifier",
        "description": "Product Identifier Model",
        "properties": {
          "partNumber": {
            "description": "Part/Product Number",
            "type": "string"
          },
          "upc": {
            "description": "Universal Product Code",
            "type": "string"
          },
          "sku": {
            "description": "Stock Keeping Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShipmentAllocationsResponse": {
        "title": "ShipmentAllocationsResponse",
        "description": "ShipmentAllocationsResponse Object",
        "properties": {
          "currentAllocations": {
            "$ref": "#/components/schemas/allocationList"
          },
          "futureAllocations": {
            "$ref": "#/components/schemas/allocationList"
          }
        },
        "type": "object"
      },
      "ShipmentInventoryAllocationRequest": {
        "title": "ShipmentInventoryAllocation Request",
        "description": "ShipmentInventoryAllocation Request Object",
        "required": [
          "shipmentIDs"
        ],
        "properties": {
          "shipmentIDs": {
            "description": "Shipment Ids"
          }
        },
        "type": "object"
      },
      "ShipmentInventoryAllocationResponse": {
        "title": "ShipmentInventoryAllocation Response",
        "description": "ShipmentInventoryAllocation Response Object",
        "properties": {
          "shipments": {
            "$ref": "#/components/schemas/shipments"
          }
        },
        "type": "object"
      },
      "tags": {
        "description": "Associative Map of <String, String> for tagCategoryName => tagName",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "taggedInventoryMap": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TagQuantity"
        }
      },
      "futureInventoryArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FutureInventory"
        }
      },
      "allocationList": {
        "description": "List of InventoryAllocationResponse objects",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InventoryAllocationResponse"
        }
      },
      "shipments": {
        "description": "Associative Map of Map<shipmentId, ShipmentAllocationsResponse>",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ShipmentAllocationsResponse"
        }
      }
    },
    "parameters": {
      "x-vol-tenant": {
        "name": "x-vol-tenant",
        "in": "header",
        "description": "Tenant ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "x-vol-site": {
        "name": "x-vol-site",
        "in": "header",
        "description": "Site ID",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "Type of request enum",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ALL",
            "PARTIAL",
            "ANY",
            "ALL_STORES"
          ]
        }
      },
      "items": {
        "name": "items",
        "in": "query",
        "description": "List of Items to search on",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ItemQuantity"
          }
        }
      },
      "requestLocation": {
        "name": "requestLocation",
        "in": "query",
        "description": "Location for Request",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/RequestLocation"
        }
      },
      "locationWhitelist": {
        "name": "locationWhitelist",
        "in": "query",
        "description": "List of location codes that are allowed to be included in results",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "locationBlacklist": {
        "name": "locationBlacklist",
        "in": "query",
        "description": "List of location codes that are NOT allowed to be included in results",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The maximum number of results to return, defaults to 100 for most",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "ignoreSafetyStock": {
        "name": "ignoreSafetyStock",
        "in": "query",
        "description": "Whether to ignore the safety stock buffer put in place",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeNegativeInventory": {
        "name": "includeNegativeInventory",
        "in": "query",
        "description": "Whether to allow items with negative inventory in the results",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "shippingLocation": {
        "name": "shippingLocation",
        "in": "query",
        "description": "Whether to limit results to locations that are shipping enabled",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "pickup": {
        "name": "pickup",
        "in": "query",
        "description": "Filter results by locations that are pickup-enabled (true) or not (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "transferEnabled": {
        "name": "transferEnabled",
        "in": "query",
        "description": "Filter results by locations that have transfer enabled (true) or don't (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeInAggregate": {
        "name": "includeInAggregate",
        "in": "query",
        "description": "Filter results by locations that have aggregate export enabled (true) or don't (false)",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "includeAttributes": {
        "name": "includeAttributes",
        "in": "query",
        "description": "Flag to include attributes or not",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "dryRun": {
        "name": "dryRun",
        "in": "query",
        "description": "Flag used to differentiate between a test and a non-test run",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "explicit": {
        "name": "explicit",
        "in": "query",
        "description": "Flag used to request explicit inventory, location, pick wave, and audit information for each request item",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "locationCodes": {
        "name": "locationCodes",
        "in": "query",
        "description": "An array of locationCodes to be considered for item-deletion purposes. Optional.\nAll locationCodes associated with the requesting tenant will be considered if no locationCodes are provided.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "partNumber": {
        "name": "partNumber",
        "in": "query",
        "description": "The part number of the item to be deleted. Supports basic regex operators: .*+?^$[]",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "upc": {
        "name": "upc",
        "in": "query",
        "description": "The upc of the item to be deleted. Supports basic regex operators: .*+?^$[]",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "sku": {
        "name": "sku",
        "in": "query",
        "description": "The sku of the item to be deleted. Supports basic regex operators: .*+?^$[]",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "locationName": {
        "name": "locationName",
        "in": "query",
        "description": "Location Name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "locationID": {
        "name": "locationID",
        "in": "query",
        "description": "Location Identifier",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "currentPage": {
        "name": "currentPage",
        "in": "query",
        "description": "Current display page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "numberPerPage": {
        "name": "numberPerPage",
        "in": "query",
        "description": "Number of items shown per page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "sortBy": {
        "name": "sortBy",
        "in": "query",
        "description": "Field to sort by (enum = {'QUANTITY', 'FROM', 'TO', 'TYPE', 'ORDER_ID', 'WEIGHT'})",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "shipmentID": {
        "name": "shipmentID",
        "in": "query",
        "description": "Shipment ID",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "schemaName": {
        "name": "schemaName",
        "in": "path",
        "description": "Name of the schema to query for",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "directory": {
        "name": "directory",
        "in": "path",
        "description": "Name of the directory to look in",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Last-Modified": {
        "name": "Last-Modified",
        "in": "header",
        "description": "Header value to determine last modified",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "If-Modified-Since": {
        "name": "If-Modified-Since",
        "in": "header",
        "description": "Header value to determine if modified since a certain time",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "wave_id": {
        "name": "wave_id",
        "in": "path",
        "description": "Wave Identifier",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "exportSettingsName": {
        "name": "exportSettingsName",
        "in": "query",
        "description": "Export Settings Name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "exportSettingsFTPName": {
        "name": "exportSettingsFTPName",
        "in": "path",
        "description": "Export Settings FTP Name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "exportSettingsS3Name": {
        "name": "exportSettingsS3Name",
        "in": "path",
        "description": "Export Settings S3 Name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "binName": {
        "name": "binName",
        "in": "query",
        "description": "Bin Name",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "locationCode": {
        "name": "locationCode",
        "in": "query",
        "description": "Location Code",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tagCategoryName": {
        "name": "tagCategoryName",
        "in": "query",
        "description": "Tag Category Name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tagValue": {
        "name": "tagValue",
        "in": "query",
        "description": "Tag Value",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "AllocateInventoryRequest": {
        "description": "Request to allocate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AllocateInventoryRequest"
            }
          }
        }
      },
      "CreateBinRequest": {
        "description": "Request to create a new bin",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateBinRequest"
            }
          }
        }
      },
      "BinSearchRequest": {
        "description": "Request to allocate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BinSearchRequest"
            }
          }
        }
      },
      "LoadBinInventoryRequest": {
        "description": "Request to load bin inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoadBinInventoryRequest"
            }
          }
        }
      },
      "UpdateBinsRequest": {
        "description": "Request to update multiple bins",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBinsRequest"
            }
          }
        }
      },
      "UpdateBinRequest": {
        "description": "Request to update a bin",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBinRequest"
            }
          }
        }
      },
      "FetchFileConfigRequest": {
        "description": "Request to fetch file configs",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FetchFileConfigRequest"
            }
          }
        }
      },
      "InventoryRequest": {
        "description": "Request to get inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InventoryRequest"
            }
          }
        }
      },
      "AggregateRequest": {
        "description": "Request to aggregate inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AggregateRequest"
            }
          }
        }
      },
      "RefreshRequest": {
        "description": "Request to refresh inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RefreshRequest"
            }
          }
        }
      },
      "AdjustRequest": {
        "description": "Request to adjust inventory",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AdjustRequest"
            }
          }
        }
      },
      "DeleteItemRequest": {
        "description": "Request to delete item(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteItemRequest"
            }
          }
        }
      },
      "DeleteFutureItemRequest": {
        "description": "Request to delete future item(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteFutureItemRequest"
            }
          }
        }
      },
      "OrderItemInformationRequest": {
        "description": "Request to retrieve order item information",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrderItemInformationRequest"
            }
          }
        }
      },
      "OrderItemLogRequest": {
        "description": "Request to retrieve order item log(s)",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrderItemLogRequest"
            }
          }
        }
      },
      "WaveCompletion": {
        "description": "Request to complete a wave",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaveCompletion"
            }
          }
        }
      },
      "CreateExportSettingsRequest": {
        "description": "Request to create a new Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsRequest"
            }
          }
        }
      },
      "UpdateExportSettingsRequest": {
        "description": "Request to update an existing Export Settings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsRequest"
            }
          }
        }
      },
      "CreateExportSettingsFTPRequest": {
        "description": "Request to create a new Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsFTPRequest"
            }
          }
        }
      },
      "UpdateExportSettingsFTPRequest": {
        "description": "Request to update an existing Export Settings FTP",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsFTPRequest"
            }
          }
        }
      },
      "CreateExportSettingsS3Request": {
        "description": "Request to create a new Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateExportSettingsS3Request"
            }
          }
        }
      },
      "UpdateExportSettingsS3Request": {
        "description": "Request to update an existing Export Settings S3",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateExportSettingsS3Request"
            }
          }
        }
      },
      "LocationRequest": {
        "description": "Location Request Object",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LocationRequest"
            }
          }
        }
      },
      "ExportInventoryRequest": {
        "description": "Request to run an inventory export",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ExportInventoryRequest"
            }
          }
        }
      },
      "WaveSuggestionRequest": {
        "description": "Request to query for a pick wave suggestion",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WaveSuggestionRequest"
            }
          }
        }
      },
      "ProductMappingRequest": {
        "description": "Request to work with Product Mappings",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProductMappingRequest"
            }
          }
        }
      },
      "TagCategory": {
        "description": "Request create or modify Tag Categories",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TagCategory"
            }
          }
        }
      },
      "Tag": {
        "description": "Request create or modify Tag",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "DeleteItemsRequest": {
        "description": "Request to batch delete items",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteItemsRequest"
            }
          }
        }
      },
      "BlockAssignmentRequest": {
        "description": "Request to block assignment on the product",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BlockAssignmentRequest"
            }
          }
        }
      },
      "ShipmentInventoryAllocationRequest": {
        "description": "Request to future and current inventory allocations of item",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShipmentInventoryAllocationRequest"
            }
          }
        }
      }
    }
  }
}