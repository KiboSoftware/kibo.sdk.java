/*
 * Kibo Admin User Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.java.auth;

import com.kibocommerce.kibo.sdk.java.auth.ApiException;
import com.kibocommerce.kibo.sdk.java.auth.model.ChangeUserPasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.ConfirmationInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.MultiScopeAdminUserAuthTicket;
import com.kibocommerce.kibo.sdk.java.auth.model.PasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.ResetPasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.User;
import com.kibocommerce.kibo.sdk.java.auth.model.UserCollection;
import com.kibocommerce.kibo.sdk.java.auth.model.UserRoleCollection;
import com.kibocommerce.kibo.sdk.java.auth.model.UserScopeCollectionPaged;
import com.kibocommerce.kibo.sdk.java.auth.model.UserScopeWithAdditionalFieldsCollection;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MultiScopeAdminUserApi
 */
@Ignore
public class MultiScopeAdminUserApiTest {

    private final MultiScopeAdminUserApi api = new MultiScopeAdminUserApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserRoleTest() throws ApiException {
        String userId = null;
        Integer roleId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        api.addUserRole(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        PasswordInfo passwordInfo = null;
        api.changePassword(userId, xVolTenant, xVolSite, passwordInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        ChangeUserPasswordInfo changeUserPasswordInfo = null;
        api.changeUserPassword(userId, xVolTenant, xVolSite, changeUserPasswordInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        User user = null;
        User response = api.createUser(xVolTenant, xVolSite, user);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserAndAuthenticateTest() throws ApiException {
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        User user = null;
        MultiScopeAdminUserAuthTicket response = api.createUserAndAuthenticate(xVolTenant, scopeType, scopeId, xVolSite, user);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsersTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        UserCollection userCollection = null;
        UserCollection response = api.createUsers(xVolTenant, xVolSite, userCollection);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        api.deleteUser(userId, xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        User response = api.disableUser(userId, xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        User response = api.enableUser(userId, xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        String responseGroups = null;
        Integer xVolSite = null;
        User response = api.getUser(userId, xVolTenant, scopeType, scopeId, responseGroups, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserBehaviorsTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        List<Integer> response = api.getUserBehaviors(userId, xVolTenant, scopeType, scopeId, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        UserRoleCollection response = api.getUserRoles(userId, xVolTenant, scopeType, scopeId, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserScopeDevAccountsTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String filter = null;
        String sort = null;
        Integer xVolSite = null;
        UserScopeCollectionPaged response = api.getUserScopeDevAccounts(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserScopeTenantsTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer pageSize = null;
        Integer startIndex = null;
        String filter = null;
        String sort = null;
        Integer xVolSite = null;
        UserScopeCollectionPaged response = api.getUserScopeTenants(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserScopesTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        String filter = null;
        Integer xVolSite = null;
        UserScopeWithAdditionalFieldsCollection response = api.getUserScopes(userId, xVolTenant, scopeType, scopeId, filter, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTenantsByUserAndBehaviorTest() throws ApiException {
        String userId = null;
        Integer behaviorId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        List<Integer> response = api.getUserTenantsByUserAndBehavior(userId, behaviorId, xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer xVolTenant = null;
        String emailAddress = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer startIndex = null;
        Integer pageSize = null;
        String sortBy = null;
        String filter = null;
        String responseGroups = null;
        Integer xVolSite = null;
        api.getUsers(xVolTenant, emailAddress, scopeType, scopeId, startIndex, pageSize, sortBy, filter, responseGroups, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserRoleTest() throws ApiException {
        String userId = null;
        Integer roleId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        api.removeUserRole(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        ResetPasswordInfo resetPasswordInfo = null;
        api.resetPassword(xVolTenant, xVolSite, resetPasswordInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlockUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        Integer xVolSite = null;
        api.unlockUser(userId, xVolTenant, xVolSite);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateForgottenPasswordTest() throws ApiException {
        Integer xVolTenant = null;
        Integer xVolSite = null;
        ConfirmationInfo confirmationInfo = null;
        api.updateForgottenPassword(xVolTenant, xVolSite, confirmationInfo);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        Integer xVolTenant = null;
        String scopeType = null;
        Integer scopeId = null;
        Integer xVolSite = null;
        User user = null;
        User response = api.updateUser(userId, xVolTenant, scopeType, scopeId, xVolSite, user);

        // TODO: test validations
    }
    
}
