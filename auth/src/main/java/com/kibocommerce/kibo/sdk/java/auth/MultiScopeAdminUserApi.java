/*
 * Kibo Admin User Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.java.auth;

import com.kibocommerce.kibo.sdk.java.auth.ApiCallback;
import com.kibocommerce.kibo.sdk.java.auth.ApiClient;
import com.kibocommerce.kibo.sdk.java.auth.ApiException;
import com.kibocommerce.kibo.sdk.java.auth.ApiResponse;
import com.kibocommerce.kibo.sdk.java.auth.Configuration;
import com.kibocommerce.kibo.sdk.java.auth.Pair;
import com.kibocommerce.kibo.sdk.java.auth.ProgressRequestBody;
import com.kibocommerce.kibo.sdk.java.auth.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.kibo.sdk.java.auth.model.ChangeUserPasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.ConfirmationInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.MultiScopeAdminUserAuthTicket;
import com.kibocommerce.kibo.sdk.java.auth.model.PasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.ResetPasswordInfo;
import com.kibocommerce.kibo.sdk.java.auth.model.User;
import com.kibocommerce.kibo.sdk.java.auth.model.UserCollection;
import com.kibocommerce.kibo.sdk.java.auth.model.UserRoleCollection;
import com.kibocommerce.kibo.sdk.java.auth.model.UserScopeCollectionPaged;
import com.kibocommerce.kibo.sdk.java.auth.model.UserScopeWithAdditionalFieldsCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MultiScopeAdminUserApi {
    private ApiClient apiClient;

    public MultiScopeAdminUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MultiScopeAdminUserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addUserRole
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addUserRoleCall(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/roles/{roleId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "roleId" + "\\}", apiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserRoleValidateBeforeCall(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addUserRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addUserRole(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling addUserRole(Async)");
        }
        

        com.squareup.okhttp.Call call = addUserRoleCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addUserRole(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        addUserRoleWithHttpInfo(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addUserRoleWithHttpInfo(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = addUserRoleValidateBeforeCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserRoleAsync(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserRoleValidateBeforeCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changePassword
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param passwordInfo  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changePasswordCall(String userId, Integer xVolTenant, Integer xVolSite, PasswordInfo passwordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = passwordInfo;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/Change-Password"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePasswordValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, PasswordInfo passwordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling changePassword(Async)");
        }
        

        com.squareup.okhttp.Call call = changePasswordCall(userId, xVolTenant, xVolSite, passwordInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param passwordInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changePassword(String userId, Integer xVolTenant, Integer xVolSite, PasswordInfo passwordInfo) throws ApiException {
        changePasswordWithHttpInfo(userId, xVolTenant, xVolSite, passwordInfo);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param passwordInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changePasswordWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite, PasswordInfo passwordInfo) throws ApiException {
        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(userId, xVolTenant, xVolSite, passwordInfo, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param passwordInfo  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePasswordAsync(String userId, Integer xVolTenant, Integer xVolSite, PasswordInfo passwordInfo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(userId, xVolTenant, xVolSite, passwordInfo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for changeUserPassword
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param changeUserPasswordInfo  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordCall(String userId, Integer xVolTenant, Integer xVolSite, ChangeUserPasswordInfo changeUserPasswordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = changeUserPasswordInfo;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/Change-User-Password"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changeUserPasswordValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, ChangeUserPasswordInfo changeUserPasswordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling changeUserPassword(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling changeUserPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = changeUserPasswordCall(userId, xVolTenant, xVolSite, changeUserPasswordInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param changeUserPasswordInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changeUserPassword(String userId, Integer xVolTenant, Integer xVolSite, ChangeUserPasswordInfo changeUserPasswordInfo) throws ApiException {
        changeUserPasswordWithHttpInfo(userId, xVolTenant, xVolSite, changeUserPasswordInfo);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param changeUserPasswordInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changeUserPasswordWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite, ChangeUserPasswordInfo changeUserPasswordInfo) throws ApiException {
        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userId, xVolTenant, xVolSite, changeUserPasswordInfo, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param changeUserPasswordInfo  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeUserPasswordAsync(String userId, Integer xVolTenant, Integer xVolSite, ChangeUserPasswordInfo changeUserPasswordInfo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeUserPasswordValidateBeforeCall(userId, xVolTenant, xVolSite, changeUserPasswordInfo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createUser
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(Integer xVolTenant, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(Integer xVolTenant, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(xVolTenant, xVolSite, user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User createUser(Integer xVolTenant, Integer xVolSite, User user) throws ApiException {
        ApiResponse<User> resp = createUserWithHttpInfo(xVolTenant, xVolSite, user);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> createUserWithHttpInfo(Integer xVolTenant, Integer xVolSite, User user) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(xVolTenant, xVolSite, user, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(Integer xVolTenant, Integer xVolSite, User user, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(xVolTenant, xVolSite, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUserAndAuthenticate
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserAndAuthenticateCall(Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/Create-And-Authenticate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserAndAuthenticateValidateBeforeCall(Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createUserAndAuthenticate(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserAndAuthenticateCall(xVolTenant, scopeType, scopeId, xVolSite, user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return MultiScopeAdminUserAuthTicket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiScopeAdminUserAuthTicket createUserAndAuthenticate(Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user) throws ApiException {
        ApiResponse<MultiScopeAdminUserAuthTicket> resp = createUserAndAuthenticateWithHttpInfo(xVolTenant, scopeType, scopeId, xVolSite, user);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;MultiScopeAdminUserAuthTicket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiScopeAdminUserAuthTicket> createUserAndAuthenticateWithHttpInfo(Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user) throws ApiException {
        com.squareup.okhttp.Call call = createUserAndAuthenticateValidateBeforeCall(xVolTenant, scopeType, scopeId, xVolSite, user, null, null);
        Type localVarReturnType = new TypeToken<MultiScopeAdminUserAuthTicket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAndAuthenticateAsync(Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ApiCallback<MultiScopeAdminUserAuthTicket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserAndAuthenticateValidateBeforeCall(xVolTenant, scopeType, scopeId, xVolSite, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiScopeAdminUserAuthTicket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUsers
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param userCollection  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsersCall(Integer xVolTenant, Integer xVolSite, UserCollection userCollection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userCollection;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/Create-Many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsersValidateBeforeCall(Integer xVolTenant, Integer xVolSite, UserCollection userCollection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = createUsersCall(xVolTenant, xVolSite, userCollection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param userCollection  (optional)
     * @return UserCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserCollection createUsers(Integer xVolTenant, Integer xVolSite, UserCollection userCollection) throws ApiException {
        ApiResponse<UserCollection> resp = createUsersWithHttpInfo(xVolTenant, xVolSite, userCollection);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param userCollection  (optional)
     * @return ApiResponse&lt;UserCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserCollection> createUsersWithHttpInfo(Integer xVolTenant, Integer xVolSite, UserCollection userCollection) throws ApiException {
        com.squareup.okhttp.Call call = createUsersValidateBeforeCall(xVolTenant, xVolSite, userCollection, null, null);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param userCollection  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsersAsync(Integer xVolTenant, Integer xVolSite, UserCollection userCollection, final ApiCallback<UserCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUsersValidateBeforeCall(xVolTenant, xVolSite, userCollection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUserCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        deleteUserWithHttpInfo(userId, xVolTenant, xVolSite);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, xVolTenant, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String userId, Integer xVolTenant, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableUserCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/disable"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableUserValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling disableUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling disableUser(Async)");
        }
        

        com.squareup.okhttp.Call call = disableUserCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User disableUser(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        ApiResponse<User> resp = disableUserWithHttpInfo(userId, xVolTenant, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> disableUserWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = disableUserValidateBeforeCall(userId, xVolTenant, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableUserAsync(String userId, Integer xVolTenant, Integer xVolSite, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableUserValidateBeforeCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enableUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableUserCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/enable"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableUserValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enableUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling enableUser(Async)");
        }
        

        com.squareup.okhttp.Call call = enableUserCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User enableUser(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        ApiResponse<User> resp = enableUserWithHttpInfo(userId, xVolTenant, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> enableUserWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = enableUserValidateBeforeCall(userId, xVolTenant, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableUserAsync(String userId, Integer xVolTenant, Integer xVolSite, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableUserValidateBeforeCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String responseGroups, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("responseGroups", responseGroups));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserValidateBeforeCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String responseGroups, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserCall(userId, xVolTenant, scopeType, scopeId, responseGroups, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User getUser(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String responseGroups, Integer xVolSite) throws ApiException {
        ApiResponse<User> resp = getUserWithHttpInfo(userId, xVolTenant, scopeType, scopeId, responseGroups, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> getUserWithHttpInfo(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String responseGroups, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, responseGroups, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String responseGroups, Integer xVolSite, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, responseGroups, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserBehaviors
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserBehaviorsCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/behaviors"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserBehaviorsValidateBeforeCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserBehaviors(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserBehaviors(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserBehaviorsCall(userId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> getUserBehaviors(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        ApiResponse<List<Integer>> resp = getUserBehaviorsWithHttpInfo(userId, xVolTenant, scopeType, scopeId, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> getUserBehaviorsWithHttpInfo(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserBehaviorsValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserBehaviorsAsync(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserBehaviorsValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserRoles
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserRolesCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/roles"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserRolesValidateBeforeCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserRoles(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserRolesCall(userId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return UserRoleCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserRoleCollection getUserRoles(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        ApiResponse<UserRoleCollection> resp = getUserRolesWithHttpInfo(userId, xVolTenant, scopeType, scopeId, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;UserRoleCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserRoleCollection> getUserRolesWithHttpInfo(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserRolesValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<UserRoleCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserRolesAsync(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ApiCallback<UserRoleCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserRolesValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserRoleCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserScopeDevAccounts
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserScopeDevAccountsCall(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/devAccountScopes"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserScopeDevAccountsValidateBeforeCall(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserScopeDevAccounts(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserScopeDevAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserScopeDevAccountsCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @return UserScopeCollectionPaged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserScopeCollectionPaged getUserScopeDevAccounts(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite) throws ApiException {
        ApiResponse<UserScopeCollectionPaged> resp = getUserScopeDevAccountsWithHttpInfo(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;UserScopeCollectionPaged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserScopeCollectionPaged> getUserScopeDevAccountsWithHttpInfo(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserScopeDevAccountsValidateBeforeCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<UserScopeCollectionPaged>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserScopeDevAccountsAsync(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ApiCallback<UserScopeCollectionPaged> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserScopeDevAccountsValidateBeforeCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserScopeCollectionPaged>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserScopeTenants
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserScopeTenantsCall(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/tenantScopes"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserScopeTenantsValidateBeforeCall(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserScopeTenants(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserScopeTenants(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserScopeTenantsCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @return UserScopeCollectionPaged
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserScopeCollectionPaged getUserScopeTenants(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite) throws ApiException {
        ApiResponse<UserScopeCollectionPaged> resp = getUserScopeTenantsWithHttpInfo(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;UserScopeCollectionPaged&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserScopeCollectionPaged> getUserScopeTenantsWithHttpInfo(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserScopeTenantsValidateBeforeCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<UserScopeCollectionPaged>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param pageSize  (optional)
     * @param startIndex  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserScopeTenantsAsync(String userId, Integer xVolTenant, Integer pageSize, Integer startIndex, String filter, String sort, Integer xVolSite, final ApiCallback<UserScopeCollectionPaged> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserScopeTenantsValidateBeforeCall(userId, xVolTenant, pageSize, startIndex, filter, sort, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserScopeCollectionPaged>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserScopes
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param filter  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserScopesCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String filter, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/scopes"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserScopesValidateBeforeCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String filter, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserScopes(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserScopes(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserScopesCall(userId, xVolTenant, scopeType, scopeId, filter, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param filter  (optional)
     * @param xVolSite  (optional)
     * @return UserScopeWithAdditionalFieldsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserScopeWithAdditionalFieldsCollection getUserScopes(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String filter, Integer xVolSite) throws ApiException {
        ApiResponse<UserScopeWithAdditionalFieldsCollection> resp = getUserScopesWithHttpInfo(userId, xVolTenant, scopeType, scopeId, filter, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param filter  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;UserScopeWithAdditionalFieldsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserScopeWithAdditionalFieldsCollection> getUserScopesWithHttpInfo(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String filter, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserScopesValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, filter, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<UserScopeWithAdditionalFieldsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param filter  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserScopesAsync(String userId, Integer xVolTenant, String scopeType, Integer scopeId, String filter, Integer xVolSite, final ApiCallback<UserScopeWithAdditionalFieldsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserScopesValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, filter, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserScopeWithAdditionalFieldsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserTenantsByUserAndBehavior
     * @param userId  (required)
     * @param behaviorId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserTenantsByUserAndBehaviorCall(String userId, Integer behaviorId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/behaviors/{behaviorId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "behaviorId" + "\\}", apiClient.escapeString(behaviorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserTenantsByUserAndBehaviorValidateBeforeCall(String userId, Integer behaviorId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTenantsByUserAndBehavior(Async)");
        }
        
        // verify the required parameter 'behaviorId' is set
        if (behaviorId == null) {
            throw new ApiException("Missing the required parameter 'behaviorId' when calling getUserTenantsByUserAndBehavior(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUserTenantsByUserAndBehavior(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserTenantsByUserAndBehaviorCall(userId, behaviorId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param behaviorId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> getUserTenantsByUserAndBehavior(String userId, Integer behaviorId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        ApiResponse<List<Integer>> resp = getUserTenantsByUserAndBehaviorWithHttpInfo(userId, behaviorId, xVolTenant, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param behaviorId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> getUserTenantsByUserAndBehaviorWithHttpInfo(String userId, Integer behaviorId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUserTenantsByUserAndBehaviorValidateBeforeCall(userId, behaviorId, xVolTenant, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param behaviorId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserTenantsByUserAndBehaviorAsync(String userId, Integer behaviorId, Integer xVolTenant, Integer xVolSite, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserTenantsByUserAndBehaviorValidateBeforeCall(userId, behaviorId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsers
     * @param xVolTenant  (required)
     * @param emailAddress  (optional)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersCall(Integer xVolTenant, String emailAddress, String scopeType, Integer scopeId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (emailAddress != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("responseGroups", responseGroups));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(Integer xVolTenant, String emailAddress, String scopeType, Integer scopeId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsersCall(xVolTenant, emailAddress, scopeType, scopeId, startIndex, pageSize, sortBy, filter, responseGroups, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param emailAddress  (optional)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getUsers(Integer xVolTenant, String emailAddress, String scopeType, Integer scopeId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, Integer xVolSite) throws ApiException {
        getUsersWithHttpInfo(xVolTenant, emailAddress, scopeType, scopeId, startIndex, pageSize, sortBy, filter, responseGroups, xVolSite);
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param emailAddress  (optional)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getUsersWithHttpInfo(Integer xVolTenant, String emailAddress, String scopeType, Integer scopeId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(xVolTenant, emailAddress, scopeType, scopeId, startIndex, pageSize, sortBy, filter, responseGroups, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param emailAddress  (optional)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param responseGroups  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(Integer xVolTenant, String emailAddress, String scopeType, Integer scopeId, Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(xVolTenant, emailAddress, scopeType, scopeId, startIndex, pageSize, sortBy, filter, responseGroups, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeUserRole
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeUserRoleCall(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/roles/{roleId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "roleId" + "\\}", apiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeUserRoleValidateBeforeCall(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeUserRole(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling removeUserRole(Async)");
        }
        

        com.squareup.okhttp.Call call = removeUserRoleCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeUserRole(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        removeUserRoleWithHttpInfo(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeUserRoleWithHttpInfo(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = removeUserRoleValidateBeforeCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param roleId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUserRoleAsync(String userId, Integer roleId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUserRoleValidateBeforeCall(userId, roleId, xVolTenant, scopeType, scopeId, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resetPassword
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param resetPasswordInfo  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetPasswordCall(Integer xVolTenant, Integer xVolSite, ResetPasswordInfo resetPasswordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resetPasswordInfo;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/Reset-Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetPasswordValidateBeforeCall(Integer xVolTenant, Integer xVolSite, ResetPasswordInfo resetPasswordInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling resetPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = resetPasswordCall(xVolTenant, xVolSite, resetPasswordInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param resetPasswordInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetPassword(Integer xVolTenant, Integer xVolSite, ResetPasswordInfo resetPasswordInfo) throws ApiException {
        resetPasswordWithHttpInfo(xVolTenant, xVolSite, resetPasswordInfo);
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param resetPasswordInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetPasswordWithHttpInfo(Integer xVolTenant, Integer xVolSite, ResetPasswordInfo resetPasswordInfo) throws ApiException {
        com.squareup.okhttp.Call call = resetPasswordValidateBeforeCall(xVolTenant, xVolSite, resetPasswordInfo, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param resetPasswordInfo  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetPasswordAsync(Integer xVolTenant, Integer xVolSite, ResetPasswordInfo resetPasswordInfo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetPasswordValidateBeforeCall(xVolTenant, xVolSite, resetPasswordInfo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for unlockUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlockUserCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}/unlock"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlockUserValidateBeforeCall(String userId, Integer xVolTenant, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unlockUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling unlockUser(Async)");
        }
        

        com.squareup.okhttp.Call call = unlockUserCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unlockUser(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        unlockUserWithHttpInfo(userId, xVolTenant, xVolSite);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unlockUserWithHttpInfo(String userId, Integer xVolTenant, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = unlockUserValidateBeforeCall(userId, xVolTenant, xVolSite, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlockUserAsync(String userId, Integer xVolTenant, Integer xVolSite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlockUserValidateBeforeCall(userId, xVolTenant, xVolSite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateForgottenPassword
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param confirmationInfo  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateForgottenPasswordCall(Integer xVolTenant, Integer xVolSite, ConfirmationInfo confirmationInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = confirmationInfo;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/Update-Forgotten-Password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateForgottenPasswordValidateBeforeCall(Integer xVolTenant, Integer xVolSite, ConfirmationInfo confirmationInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateForgottenPassword(Async)");
        }
        

        com.squareup.okhttp.Call call = updateForgottenPasswordCall(xVolTenant, xVolSite, confirmationInfo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param confirmationInfo  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateForgottenPassword(Integer xVolTenant, Integer xVolSite, ConfirmationInfo confirmationInfo) throws ApiException {
        updateForgottenPasswordWithHttpInfo(xVolTenant, xVolSite, confirmationInfo);
    }

    /**
     * 
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param confirmationInfo  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateForgottenPasswordWithHttpInfo(Integer xVolTenant, Integer xVolSite, ConfirmationInfo confirmationInfo) throws ApiException {
        com.squareup.okhttp.Call call = updateForgottenPasswordValidateBeforeCall(xVolTenant, xVolSite, confirmationInfo, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param xVolTenant  (required)
     * @param xVolSite  (optional)
     * @param confirmationInfo  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateForgottenPasswordAsync(Integer xVolTenant, Integer xVolSite, ConfirmationInfo confirmationInfo, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateForgottenPasswordValidateBeforeCall(xVolTenant, xVolSite, confirmationInfo, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/platform/adminuser/multi-scope/accounts/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scopeType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeType", scopeType));
        }

        if (scopeId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("scopeId", scopeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-vol-app-claims", "x-vol-user-claims" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserCall(userId, xVolTenant, scopeType, scopeId, xVolSite, user, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User updateUser(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user) throws ApiException {
        ApiResponse<User> resp = updateUserWithHttpInfo(userId, xVolTenant, scopeType, scopeId, xVolSite, user);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> updateUserWithHttpInfo(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, user, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param xVolTenant  (required)
     * @param scopeType  (optional)
     * @param scopeId  (optional)
     * @param xVolSite  (optional)
     * @param user  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String userId, Integer xVolTenant, String scopeType, Integer scopeId, Integer xVolSite, User user, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, xVolTenant, scopeType, scopeId, xVolSite, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
