/*
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.entities.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.entities.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.entities.models.EntityContainer;
import com.kibocommerce.sdk.entities.models.EntityContainerCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EntityContainersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public EntityContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntityContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public EntityContainersApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public EntityContainersApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public EntityContainersApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEntityContainer
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param id The unique id of the Entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityContainerCall(String entityListFullName, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/entitylists/{entityListFullName}/entityContainers/{id}"
            .replaceAll("\\{" + "entityListFullName" + "\\}", localVarApiClient.escapeString(entityListFullName.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityContainerValidateBeforeCall(String entityListFullName, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityListFullName' is set
        if (entityListFullName == null) {
            throw new ApiException("Missing the required parameter 'entityListFullName' when calling getEntityContainer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEntityContainer(Async)");
        }
        

        okhttp3.Call localVarCall = getEntityContainerCall(entityListFullName, id, _callback);
        return localVarCall;

    }

    /**
     * Get Entity Container
     * Get a specific Entity Container from an  EntityList instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param id The unique id of the Entity (required)
     * @return EntityContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityContainer getEntityContainer(String entityListFullName, String id) throws ApiException {
        ApiResponse<EntityContainer> localVarResp = getEntityContainerWithHttpInfo(entityListFullName, id);
        return localVarResp.getData();
    }

    /**
     * Get Entity Container
     * Get a specific Entity Container from an  EntityList instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param id The unique id of the Entity (required)
     * @return ApiResponse&lt;EntityContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityContainer> getEntityContainerWithHttpInfo(String entityListFullName, String id) throws ApiException {
        okhttp3.Call localVarCall = getEntityContainerValidateBeforeCall(entityListFullName, id, null);
        Type localVarReturnType = new TypeToken<EntityContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Entity Container (asynchronously)
     * Get a specific Entity Container from an  EntityList instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param id The unique id of the Entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityContainerAsync(String entityListFullName, String id, final ApiCallback<EntityContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityContainerValidateBeforeCall(entityListFullName, id, _callback);
        Type localVarReturnType = new TypeToken<EntityContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntityContainers
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param sortBy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityContainersCall(String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/entitylists/{entityListFullName}/entityContainers"
            .replaceAll("\\{" + "entityListFullName" + "\\}", localVarApiClient.escapeString(entityListFullName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityContainersValidateBeforeCall(String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityListFullName' is set
        if (entityListFullName == null) {
            throw new ApiException("Missing the required parameter 'entityListFullName' when calling getEntityContainers(Async)");
        }
        

        okhttp3.Call localVarCall = getEntityContainersCall(entityListFullName, pageSize, startIndex, filter, sortBy, _callback);
        return localVarCall;

    }

    /**
     * Get Entity Containers
     * Get a filtered collection of Entity Containers from an Entity List instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param sortBy  (optional)
     * @return EntityContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityContainerCollection getEntityContainers(String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy) throws ApiException {
        ApiResponse<EntityContainerCollection> localVarResp = getEntityContainersWithHttpInfo(entityListFullName, pageSize, startIndex, filter, sortBy);
        return localVarResp.getData();
    }

    /**
     * Get Entity Containers
     * Get a filtered collection of Entity Containers from an Entity List instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param sortBy  (optional)
     * @return ApiResponse&lt;EntityContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityContainerCollection> getEntityContainersWithHttpInfo(String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = getEntityContainersValidateBeforeCall(entityListFullName, pageSize, startIndex, filter, sortBy, null);
        Type localVarReturnType = new TypeToken<EntityContainerCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Entity Containers (asynchronously)
     * Get a filtered collection of Entity Containers from an Entity List instance
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param sortBy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntityContainersAsync(String entityListFullName, Integer pageSize, Integer startIndex, String filter, String sortBy, final ApiCallback<EntityContainerCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityContainersValidateBeforeCall(entityListFullName, pageSize, startIndex, filter, sortBy, _callback);
        Type localVarReturnType = new TypeToken<EntityContainerCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViewEntityContainer
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param entityId The unique Entity id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewEntityContainerCall(String entityListFullName, String viewName, String entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers/{entityId}"
            .replaceAll("\\{" + "entityListFullName" + "\\}", localVarApiClient.escapeString(entityListFullName.toString()))
            .replaceAll("\\{" + "viewName" + "\\}", localVarApiClient.escapeString(viewName.toString()))
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewEntityContainerValidateBeforeCall(String entityListFullName, String viewName, String entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityListFullName' is set
        if (entityListFullName == null) {
            throw new ApiException("Missing the required parameter 'entityListFullName' when calling getViewEntityContainer(Async)");
        }
        
        // verify the required parameter 'viewName' is set
        if (viewName == null) {
            throw new ApiException("Missing the required parameter 'viewName' when calling getViewEntityContainer(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getViewEntityContainer(Async)");
        }
        

        okhttp3.Call localVarCall = getViewEntityContainerCall(entityListFullName, viewName, entityId, _callback);
        return localVarCall;

    }

    /**
     * Get  Entity View Container
     * Get an Entity Container for a specific Entity in a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param entityId The unique Entity id (required)
     * @return EntityContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityContainer getViewEntityContainer(String entityListFullName, String viewName, String entityId) throws ApiException {
        ApiResponse<EntityContainer> localVarResp = getViewEntityContainerWithHttpInfo(entityListFullName, viewName, entityId);
        return localVarResp.getData();
    }

    /**
     * Get  Entity View Container
     * Get an Entity Container for a specific Entity in a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param entityId The unique Entity id (required)
     * @return ApiResponse&lt;EntityContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityContainer> getViewEntityContainerWithHttpInfo(String entityListFullName, String viewName, String entityId) throws ApiException {
        okhttp3.Call localVarCall = getViewEntityContainerValidateBeforeCall(entityListFullName, viewName, entityId, null);
        Type localVarReturnType = new TypeToken<EntityContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get  Entity View Container (asynchronously)
     * Get an Entity Container for a specific Entity in a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param entityId The unique Entity id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewEntityContainerAsync(String entityListFullName, String viewName, String entityId, final ApiCallback<EntityContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewEntityContainerValidateBeforeCall(entityListFullName, viewName, entityId, _callback);
        Type localVarReturnType = new TypeToken<EntityContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViewEntityContainers
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewEntityContainersCall(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/entitylists/{entityListFullName}/views/{viewName}/entityContainers"
            .replaceAll("\\{" + "entityListFullName" + "\\}", localVarApiClient.escapeString(entityListFullName.toString()))
            .replaceAll("\\{" + "viewName" + "\\}", localVarApiClient.escapeString(viewName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewEntityContainersValidateBeforeCall(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityListFullName' is set
        if (entityListFullName == null) {
            throw new ApiException("Missing the required parameter 'entityListFullName' when calling getViewEntityContainers(Async)");
        }
        
        // verify the required parameter 'viewName' is set
        if (viewName == null) {
            throw new ApiException("Missing the required parameter 'viewName' when calling getViewEntityContainers(Async)");
        }
        

        okhttp3.Call localVarCall = getViewEntityContainersCall(entityListFullName, viewName, pageSize, startIndex, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Entity View Containers
     * Get a filtered collection of Entity Containers for a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @return EntityContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EntityContainerCollection getViewEntityContainers(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter) throws ApiException {
        ApiResponse<EntityContainerCollection> localVarResp = getViewEntityContainersWithHttpInfo(entityListFullName, viewName, pageSize, startIndex, filter);
        return localVarResp.getData();
    }

    /**
     * Get Entity View Containers
     * Get a filtered collection of Entity Containers for a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @return ApiResponse&lt;EntityContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityContainerCollection> getViewEntityContainersWithHttpInfo(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter) throws ApiException {
        okhttp3.Call localVarCall = getViewEntityContainersValidateBeforeCall(entityListFullName, viewName, pageSize, startIndex, filter, null);
        Type localVarReturnType = new TypeToken<EntityContainerCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Entity View Containers (asynchronously)
     * Get a filtered collection of Entity Containers for a ListView on an EntityList
     * @param entityListFullName The full name of the EntityList including namespace in name@nameSpace format (required)
     * @param viewName The name of the ListView (required)
     * @param pageSize  (optional, default to 10)
     * @param startIndex  (optional, default to 0)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewEntityContainersAsync(String entityListFullName, String viewName, Integer pageSize, Integer startIndex, String filter, final ApiCallback<EntityContainerCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewEntityContainersValidateBeforeCall(entityListFullName, viewName, pageSize, startIndex, filter, _callback);
        Type localVarReturnType = new TypeToken<EntityContainerCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public EntityContainersApi build() {
            return new EntityContainersApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
