/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.commerce.models.CartItem;
import com.kibocommerce.sdk.commerce.models.CartMessage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeChangeMessage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeThresholdMessage;
import com.kibocommerce.sdk.commerce.models.ExtendedProperty;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.InvalidCoupon;
import com.kibocommerce.sdk.commerce.models.SuggestedDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Details of the current cart, including shopper&#39;s user ID, items listed in the cart, and any system messages.   For each item, contains the list of available discounts and the actual discount applied to the cart item.
 */
@ApiModel(description = "Details of the current cart, including shopper's user ID, items listed in the cart, and any system messages.   For each item, contains the list of available discounts and the actual discount applied to the cart item.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Cart implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CartItem> items = null;

  public static final String SERIALIZED_NAME_COUPON_CODES = "couponCodes";
  @SerializedName(SERIALIZED_NAME_COUPON_CODES)
  private List<String> couponCodes = null;

  public static final String SERIALIZED_NAME_INVALID_COUPONS = "invalidCoupons";
  @SerializedName(SERIALIZED_NAME_INVALID_COUPONS)
  private List<InvalidCoupon> invalidCoupons = null;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_CART_MESSAGE = "cartMessage";
  @SerializedName(SERIALIZED_NAME_CART_MESSAGE)
  private CartMessage cartMessage;

  public static final String SERIALIZED_NAME_CART_MESSAGES = "cartMessages";
  @SerializedName(SERIALIZED_NAME_CART_MESSAGES)
  private List<CartMessage> cartMessages = null;

  public static final String SERIALIZED_NAME_HANDLING_AMOUNT = "handlingAmount";
  @SerializedName(SERIALIZED_NAME_HANDLING_AMOUNT)
  private Double handlingAmount;

  public static final String SERIALIZED_NAME_HANDLING_SUB_TOTAL = "handlingSubTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_SUB_TOTAL)
  private Double handlingSubTotal;

  public static final String SERIALIZED_NAME_HANDLING_TOTAL = "handlingTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TOTAL)
  private Double handlingTotal;

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservationId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public static final String SERIALIZED_NAME_WEB_SESSION_ID = "webSessionId";
  @SerializedName(SERIALIZED_NAME_WEB_SESSION_ID)
  private String webSessionId;

  public static final String SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE = "customerInteractionType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE)
  private String customerInteractionType;

  public static final String SERIALIZED_NAME_FULFILLMENT_INFO = "fulfillmentInfo";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_INFO)
  private FulfillmentInfo fulfillmentInfo;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNTS = "orderDiscounts";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> orderDiscounts = null;

  public static final String SERIALIZED_NAME_SUGGESTED_DISCOUNTS = "suggestedDiscounts";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DISCOUNTS)
  private List<SuggestedDiscount> suggestedDiscounts = null;

  public static final String SERIALIZED_NAME_REJECTED_DISCOUNTS = "rejectedDiscounts";
  @SerializedName(SERIALIZED_NAME_REJECTED_DISCOUNTS)
  private List<SuggestedDiscount> rejectedDiscounts = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_SUBTOTAL = "discountedSubtotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_SUBTOTAL)
  private Double discountedSubtotal;

  public static final String SERIALIZED_NAME_DISCOUNT_TOTAL = "discountTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TOTAL)
  private Double discountTotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_TOTAL = "discountedTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_TOTAL)
  private Double discountedTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Double shippingTotal;

  public static final String SERIALIZED_NAME_SHIPPING_SUB_TOTAL = "shippingSubTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SUB_TOTAL)
  private Double shippingSubTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_TOTAL = "shippingTaxTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_TOTAL)
  private Double shippingTaxTotal;

  public static final String SERIALIZED_NAME_HANDLING_TAX_TOTAL = "handlingTaxTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX_TOTAL)
  private Double handlingTaxTotal;

  public static final String SERIALIZED_NAME_ITEM_TAX_TOTAL = "itemTaxTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_TAX_TOTAL)
  private Double itemTaxTotal;

  public static final String SERIALIZED_NAME_TAX_TOTAL = "taxTotal";
  @SerializedName(SERIALIZED_NAME_TAX_TOTAL)
  private Double taxTotal;

  public static final String SERIALIZED_NAME_FEE_TOTAL = "feeTotal";
  @SerializedName(SERIALIZED_NAME_FEE_TOTAL)
  private Double feeTotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS = "lineItemSubtotalWithOrderAdjustments";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS)
  private Double lineItemSubtotalWithOrderAdjustments;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS = "shippingAmountBeforeDiscountsAndAdjustments";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS)
  private Double shippingAmountBeforeDiscountsAndAdjustments;

  public static final String SERIALIZED_NAME_LAST_VALIDATION_DATE = "lastValidationDate";
  @SerializedName(SERIALIZED_NAME_LAST_VALIDATION_DATE)
  private OffsetDateTime lastValidationDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_CHANGE_MESSAGES = "changeMessages";
  @SerializedName(SERIALIZED_NAME_CHANGE_MESSAGES)
  private List<CommerceRuntimeChangeMessage> changeMessages = null;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<ExtendedProperty> extendedProperties = null;

  public static final String SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES = "discountThresholdMessages";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES)
  private List<CommerceRuntimeThresholdMessage> discountThresholdMessages = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public Cart() {
  }

  public Cart items(List<CartItem> items) {
    
    this.items = items;
    return this;
  }

  public Cart addItemsItem(CartItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of items in the cart.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of items in the cart.")

  public List<CartItem> getItems() {
    return items;
  }


  public void setItems(List<CartItem> items) {
    this.items = items;
  }


  public Cart couponCodes(List<String> couponCodes) {
    
    this.couponCodes = couponCodes;
    return this;
  }

  public Cart addCouponCodesItem(String couponCodesItem) {
    if (this.couponCodes == null) {
      this.couponCodes = new ArrayList<>();
    }
    this.couponCodes.add(couponCodesItem);
    return this;
  }

   /**
   * Coupon codes associated with this order.  Only set on order import.
   * @return couponCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupon codes associated with this order.  Only set on order import.")

  public List<String> getCouponCodes() {
    return couponCodes;
  }


  public void setCouponCodes(List<String> couponCodes) {
    this.couponCodes = couponCodes;
  }


  public Cart invalidCoupons(List<InvalidCoupon> invalidCoupons) {
    
    this.invalidCoupons = invalidCoupons;
    return this;
  }

  public Cart addInvalidCouponsItem(InvalidCoupon invalidCouponsItem) {
    if (this.invalidCoupons == null) {
      this.invalidCoupons = new ArrayList<>();
    }
    this.invalidCoupons.add(invalidCouponsItem);
    return this;
  }

   /**
   * A list of invalid coupons that were attempted on the cart
   * @return invalidCoupons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of invalid coupons that were attempted on the cart")

  public List<InvalidCoupon> getInvalidCoupons() {
    return invalidCoupons;
  }


  public void setInvalidCoupons(List<InvalidCoupon> invalidCoupons) {
    this.invalidCoupons = invalidCoupons;
  }


  public Cart priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * Pricelist code
   * @return priceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricelist code")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public Cart cartMessage(CartMessage cartMessage) {
    
    this.cartMessage = cartMessage;
    return this;
  }

   /**
   * Get cartMessage
   * @return cartMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartMessage getCartMessage() {
    return cartMessage;
  }


  public void setCartMessage(CartMessage cartMessage) {
    this.cartMessage = cartMessage;
  }


  public Cart cartMessages(List<CartMessage> cartMessages) {
    
    this.cartMessages = cartMessages;
    return this;
  }

  public Cart addCartMessagesItem(CartMessage cartMessagesItem) {
    if (this.cartMessages == null) {
      this.cartMessages = new ArrayList<>();
    }
    this.cartMessages.add(cartMessagesItem);
    return this;
  }

   /**
   * Get cartMessages
   * @return cartMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CartMessage> getCartMessages() {
    return cartMessages;
  }


  public void setCartMessages(List<CartMessage> cartMessages) {
    this.cartMessages = cartMessages;
  }


  public Cart handlingAmount(Double handlingAmount) {
    
    this.handlingAmount = handlingAmount;
    return this;
  }

   /**
   * Order level handling fees excluding any discounts.
   * @return handlingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order level handling fees excluding any discounts.")

  public Double getHandlingAmount() {
    return handlingAmount;
  }


  public void setHandlingAmount(Double handlingAmount) {
    this.handlingAmount = handlingAmount;
  }


  public Cart handlingSubTotal(Double handlingSubTotal) {
    
    this.handlingSubTotal = handlingSubTotal;
    return this;
  }

   /**
   * Handling fees for the Order as well as CartItems (e.g. if the Cart has a $5 handling fee and an CartItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)
   * @return handlingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Handling fees for the Order as well as CartItems (e.g. if the Cart has a $5 handling fee and an CartItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)")

  public Double getHandlingSubTotal() {
    return handlingSubTotal;
  }


  public void setHandlingSubTotal(Double handlingSubTotal) {
    this.handlingSubTotal = handlingSubTotal;
  }


  public Cart handlingTotal(Double handlingTotal) {
    
    this.handlingTotal = handlingTotal;
    return this;
  }

   /**
   * Handling fees including any discounts.
   * @return handlingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Handling fees including any discounts.")

  public Double getHandlingTotal() {
    return handlingTotal;
  }


  public void setHandlingTotal(Double handlingTotal) {
    this.handlingTotal = handlingTotal;
  }


  public Cart reservationId(String reservationId) {
    
    this.reservationId = reservationId;
    return this;
  }

   /**
   * Inventory Reservation id for a cart.
   * @return reservationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inventory Reservation id for a cart.")

  public String getReservationId() {
    return reservationId;
  }


  public void setReservationId(String reservationId) {
    this.reservationId = reservationId;
  }


  public Cart zipCode(String zipCode) {
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Get zipCode
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public Cart userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Unique identifier of the shopper who created the cart.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the shopper who created the cart.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Cart id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Cart tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Unique identifier of the Tenant.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Tenant.")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public Cart siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Unique identifier of the Site.
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Site.")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public Cart channelCode(String channelCode) {
    
    this.channelCode = channelCode;
    return this;
  }

   /**
   * Unique identifier of the channel for this item.
   * @return channelCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the channel for this item.")

  public String getChannelCode() {
    return channelCode;
  }


  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public Cart currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO Currency Code. Currently, only USD is supported.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Currency Code. Currently, only USD is supported.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Cart visitId(String visitId) {
    
    this.visitId = visitId;
    return this;
  }

   /**
   * Identifies the Visit ID that was current when the order was placed or when the cart was last updated.
   * @return visitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.")

  public String getVisitId() {
    return visitId;
  }


  public void setVisitId(String visitId) {
    this.visitId = visitId;
  }


  public Cart webSessionId(String webSessionId) {
    
    this.webSessionId = webSessionId;
    return this;
  }

   /**
   * Identifies the web session used to place the order or last update the cart.
   * @return webSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the web session used to place the order or last update the cart.")

  public String getWebSessionId() {
    return webSessionId;
  }


  public void setWebSessionId(String webSessionId) {
    this.webSessionId = webSessionId;
  }


  public Cart customerInteractionType(String customerInteractionType) {
    
    this.customerInteractionType = customerInteractionType;
    return this;
  }

   /**
   * Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown
   * @return customerInteractionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown")

  public String getCustomerInteractionType() {
    return customerInteractionType;
  }


  public void setCustomerInteractionType(String customerInteractionType) {
    this.customerInteractionType = customerInteractionType;
  }


  public Cart fulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    
    this.fulfillmentInfo = fulfillmentInfo;
    return this;
  }

   /**
   * Get fulfillmentInfo
   * @return fulfillmentInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentInfo getFulfillmentInfo() {
    return fulfillmentInfo;
  }


  public void setFulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    this.fulfillmentInfo = fulfillmentInfo;
  }


  public Cart orderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    
    this.orderDiscounts = orderDiscounts;
    return this;
  }

  public Cart addOrderDiscountsItem(CommerceRuntimeAppliedDiscount orderDiscountsItem) {
    if (this.orderDiscounts == null) {
      this.orderDiscounts = new ArrayList<>();
    }
    this.orderDiscounts.add(orderDiscountsItem);
    return this;
  }

   /**
   * The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.
   * @return orderDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.")

  public List<CommerceRuntimeAppliedDiscount> getOrderDiscounts() {
    return orderDiscounts;
  }


  public void setOrderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }


  public Cart suggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    
    this.suggestedDiscounts = suggestedDiscounts;
    return this;
  }

  public Cart addSuggestedDiscountsItem(SuggestedDiscount suggestedDiscountsItem) {
    if (this.suggestedDiscounts == null) {
      this.suggestedDiscounts = new ArrayList<>();
    }
    this.suggestedDiscounts.add(suggestedDiscountsItem);
    return this;
  }

   /**
   * Get suggestedDiscounts
   * @return suggestedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getSuggestedDiscounts() {
    return suggestedDiscounts;
  }


  public void setSuggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    this.suggestedDiscounts = suggestedDiscounts;
  }


  public Cart rejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    
    this.rejectedDiscounts = rejectedDiscounts;
    return this;
  }

  public Cart addRejectedDiscountsItem(SuggestedDiscount rejectedDiscountsItem) {
    if (this.rejectedDiscounts == null) {
      this.rejectedDiscounts = new ArrayList<>();
    }
    this.rejectedDiscounts.add(rejectedDiscountsItem);
    return this;
  }

   /**
   * Get rejectedDiscounts
   * @return rejectedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getRejectedDiscounts() {
    return rejectedDiscounts;
  }


  public void setRejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    this.rejectedDiscounts = rejectedDiscounts;
  }


  public Cart data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Custom data for a given vendor set within the commerce process.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom data for a given vendor set within the commerce process.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public Cart taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Storage for any additional/custom tax data.
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage for any additional/custom tax data.")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }


  public Cart subtotal(Double subtotal) {
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options but excluding any discounts.
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options but excluding any discounts.")

  public Double getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Cart discountedSubtotal(Double discountedSubtotal) {
    
    this.discountedSubtotal = discountedSubtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options as well as any discounts.
   * @return discountedSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options as well as any discounts.")

  public Double getDiscountedSubtotal() {
    return discountedSubtotal;
  }


  public void setDiscountedSubtotal(Double discountedSubtotal) {
    this.discountedSubtotal = discountedSubtotal;
  }


  public Cart discountTotal(Double discountTotal) {
    
    this.discountTotal = discountTotal;
    return this;
  }

   /**
   * Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.
   * @return discountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.")

  public Double getDiscountTotal() {
    return discountTotal;
  }


  public void setDiscountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
  }


  public Cart discountedTotal(Double discountedTotal) {
    
    this.discountedTotal = discountedTotal;
    return this;
  }

   /**
   * Subtotal minus the discounted total
   * @return discountedTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subtotal minus the discounted total")

  public Double getDiscountedTotal() {
    return discountedTotal;
  }


  public void setDiscountedTotal(Double discountedTotal) {
    this.discountedTotal = discountedTotal;
  }


  public Cart shippingTotal(Double shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * Shipping does not appear on cart.
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping does not appear on cart.")

  public Double getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Double shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public Cart shippingSubTotal(Double shippingSubTotal) {
    
    this.shippingSubTotal = shippingSubTotal;
    return this;
  }

   /**
   * Shipping total without discounts applied.
   * @return shippingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping total without discounts applied.")

  public Double getShippingSubTotal() {
    return shippingSubTotal;
  }


  public void setShippingSubTotal(Double shippingSubTotal) {
    this.shippingSubTotal = shippingSubTotal;
  }


  public Cart shippingTaxTotal(Double shippingTaxTotal) {
    
    this.shippingTaxTotal = shippingTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return shippingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getShippingTaxTotal() {
    return shippingTaxTotal;
  }


  public void setShippingTaxTotal(Double shippingTaxTotal) {
    this.shippingTaxTotal = shippingTaxTotal;
  }


  public Cart handlingTaxTotal(Double handlingTaxTotal) {
    
    this.handlingTaxTotal = handlingTaxTotal;
    return this;
  }

   /**
   * Total tax on handling
   * @return handlingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on handling")

  public Double getHandlingTaxTotal() {
    return handlingTaxTotal;
  }


  public void setHandlingTaxTotal(Double handlingTaxTotal) {
    this.handlingTaxTotal = handlingTaxTotal;
  }


  public Cart itemTaxTotal(Double itemTaxTotal) {
    
    this.itemTaxTotal = itemTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return itemTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getItemTaxTotal() {
    return itemTaxTotal;
  }


  public void setItemTaxTotal(Double itemTaxTotal) {
    this.itemTaxTotal = itemTaxTotal;
  }


  public Cart taxTotal(Double taxTotal) {
    
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * Tax does not appear on cart.
   * @return taxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax does not appear on cart.")

  public Double getTaxTotal() {
    return taxTotal;
  }


  public void setTaxTotal(Double taxTotal) {
    this.taxTotal = taxTotal;
  }


  public Cart feeTotal(Double feeTotal) {
    
    this.feeTotal = feeTotal;
    return this;
  }

   /**
   * Not implemented. Total cost of fees for all items in the cart.
   * @return feeTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Total cost of fees for all items in the cart.")

  public Double getFeeTotal() {
    return feeTotal;
  }


  public void setFeeTotal(Double feeTotal) {
    this.feeTotal = feeTotal;
  }


  public Cart total(Double total) {
    
    this.total = total;
    return this;
  }

   /**
   * Final total amount of the order including all discounts, shipping, and tax.
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Final total amount of the order including all discounts, shipping, and tax.")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    this.total = total;
  }


  public Cart lineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
    return this;
  }

   /**
   * Line Item Subtotals with Order Adjustments
   * @return lineItemSubtotalWithOrderAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Line Item Subtotals with Order Adjustments")

  public Double getLineItemSubtotalWithOrderAdjustments() {
    return lineItemSubtotalWithOrderAdjustments;
  }


  public void setLineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
  }


  public Cart shippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
    return this;
  }

   /**
   * Shipping Amount before discount and adjustments
   * @return shippingAmountBeforeDiscountsAndAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping Amount before discount and adjustments")

  public Double getShippingAmountBeforeDiscountsAndAdjustments() {
    return shippingAmountBeforeDiscountsAndAdjustments;
  }


  public void setShippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
  }


  public Cart lastValidationDate(OffsetDateTime lastValidationDate) {
    
    this.lastValidationDate = lastValidationDate;
    return this;
  }

   /**
   * Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.
   * @return lastValidationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.")

  public OffsetDateTime getLastValidationDate() {
    return lastValidationDate;
  }


  public void setLastValidationDate(OffsetDateTime lastValidationDate) {
    this.lastValidationDate = lastValidationDate;
  }


  public Cart expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.")

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Cart changeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    
    this.changeMessages = changeMessages;
    return this;
  }

  public Cart addChangeMessagesItem(CommerceRuntimeChangeMessage changeMessagesItem) {
    if (this.changeMessages == null) {
      this.changeMessages = new ArrayList<>();
    }
    this.changeMessages.add(changeMessagesItem);
    return this;
  }

   /**
   * List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.
   * @return changeMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.")

  public List<CommerceRuntimeChangeMessage> getChangeMessages() {
    return changeMessages;
  }


  public void setChangeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    this.changeMessages = changeMessages;
  }


  public Cart extendedProperties(List<ExtendedProperty> extendedProperties) {
    
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Cart addExtendedPropertiesItem(ExtendedProperty extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.")

  public List<ExtendedProperty> getExtendedProperties() {
    return extendedProperties;
  }


  public void setExtendedProperties(List<ExtendedProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Cart discountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    
    this.discountThresholdMessages = discountThresholdMessages;
    return this;
  }

  public Cart addDiscountThresholdMessagesItem(CommerceRuntimeThresholdMessage discountThresholdMessagesItem) {
    if (this.discountThresholdMessages == null) {
      this.discountThresholdMessages = new ArrayList<>();
    }
    this.discountThresholdMessages.add(discountThresholdMessagesItem);
    return this;
  }

   /**
   * List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.
   * @return discountThresholdMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.")

  public List<CommerceRuntimeThresholdMessage> getDiscountThresholdMessages() {
    return discountThresholdMessages;
  }


  public void setDiscountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    this.discountThresholdMessages = discountThresholdMessages;
  }


  public Cart auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.items, cart.items) &&
        Objects.equals(this.couponCodes, cart.couponCodes) &&
        Objects.equals(this.invalidCoupons, cart.invalidCoupons) &&
        Objects.equals(this.priceListCode, cart.priceListCode) &&
        Objects.equals(this.cartMessage, cart.cartMessage) &&
        Objects.equals(this.cartMessages, cart.cartMessages) &&
        Objects.equals(this.handlingAmount, cart.handlingAmount) &&
        Objects.equals(this.handlingSubTotal, cart.handlingSubTotal) &&
        Objects.equals(this.handlingTotal, cart.handlingTotal) &&
        Objects.equals(this.reservationId, cart.reservationId) &&
        Objects.equals(this.zipCode, cart.zipCode) &&
        Objects.equals(this.userId, cart.userId) &&
        Objects.equals(this.id, cart.id) &&
        Objects.equals(this.tenantId, cart.tenantId) &&
        Objects.equals(this.siteId, cart.siteId) &&
        Objects.equals(this.channelCode, cart.channelCode) &&
        Objects.equals(this.currencyCode, cart.currencyCode) &&
        Objects.equals(this.visitId, cart.visitId) &&
        Objects.equals(this.webSessionId, cart.webSessionId) &&
        Objects.equals(this.customerInteractionType, cart.customerInteractionType) &&
        Objects.equals(this.fulfillmentInfo, cart.fulfillmentInfo) &&
        Objects.equals(this.orderDiscounts, cart.orderDiscounts) &&
        Objects.equals(this.suggestedDiscounts, cart.suggestedDiscounts) &&
        Objects.equals(this.rejectedDiscounts, cart.rejectedDiscounts) &&
        Objects.equals(this.data, cart.data) &&
        Objects.equals(this.taxData, cart.taxData) &&
        Objects.equals(this.subtotal, cart.subtotal) &&
        Objects.equals(this.discountedSubtotal, cart.discountedSubtotal) &&
        Objects.equals(this.discountTotal, cart.discountTotal) &&
        Objects.equals(this.discountedTotal, cart.discountedTotal) &&
        Objects.equals(this.shippingTotal, cart.shippingTotal) &&
        Objects.equals(this.shippingSubTotal, cart.shippingSubTotal) &&
        Objects.equals(this.shippingTaxTotal, cart.shippingTaxTotal) &&
        Objects.equals(this.handlingTaxTotal, cart.handlingTaxTotal) &&
        Objects.equals(this.itemTaxTotal, cart.itemTaxTotal) &&
        Objects.equals(this.taxTotal, cart.taxTotal) &&
        Objects.equals(this.feeTotal, cart.feeTotal) &&
        Objects.equals(this.total, cart.total) &&
        Objects.equals(this.lineItemSubtotalWithOrderAdjustments, cart.lineItemSubtotalWithOrderAdjustments) &&
        Objects.equals(this.shippingAmountBeforeDiscountsAndAdjustments, cart.shippingAmountBeforeDiscountsAndAdjustments) &&
        Objects.equals(this.lastValidationDate, cart.lastValidationDate) &&
        Objects.equals(this.expirationDate, cart.expirationDate) &&
        Objects.equals(this.changeMessages, cart.changeMessages) &&
        Objects.equals(this.extendedProperties, cart.extendedProperties) &&
        Objects.equals(this.discountThresholdMessages, cart.discountThresholdMessages) &&
        Objects.equals(this.auditInfo, cart.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, couponCodes, invalidCoupons, priceListCode, cartMessage, cartMessages, handlingAmount, handlingSubTotal, handlingTotal, reservationId, zipCode, userId, id, tenantId, siteId, channelCode, currencyCode, visitId, webSessionId, customerInteractionType, fulfillmentInfo, orderDiscounts, suggestedDiscounts, rejectedDiscounts, data, taxData, subtotal, discountedSubtotal, discountTotal, discountedTotal, shippingTotal, shippingSubTotal, shippingTaxTotal, handlingTaxTotal, itemTaxTotal, taxTotal, feeTotal, total, lineItemSubtotalWithOrderAdjustments, shippingAmountBeforeDiscountsAndAdjustments, lastValidationDate, expirationDate, changeMessages, extendedProperties, discountThresholdMessages, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    couponCodes: ").append(toIndentedString(couponCodes)).append("\n");
    sb.append("    invalidCoupons: ").append(toIndentedString(invalidCoupons)).append("\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    cartMessage: ").append(toIndentedString(cartMessage)).append("\n");
    sb.append("    cartMessages: ").append(toIndentedString(cartMessages)).append("\n");
    sb.append("    handlingAmount: ").append(toIndentedString(handlingAmount)).append("\n");
    sb.append("    handlingSubTotal: ").append(toIndentedString(handlingSubTotal)).append("\n");
    sb.append("    handlingTotal: ").append(toIndentedString(handlingTotal)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    webSessionId: ").append(toIndentedString(webSessionId)).append("\n");
    sb.append("    customerInteractionType: ").append(toIndentedString(customerInteractionType)).append("\n");
    sb.append("    fulfillmentInfo: ").append(toIndentedString(fulfillmentInfo)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    suggestedDiscounts: ").append(toIndentedString(suggestedDiscounts)).append("\n");
    sb.append("    rejectedDiscounts: ").append(toIndentedString(rejectedDiscounts)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    discountedSubtotal: ").append(toIndentedString(discountedSubtotal)).append("\n");
    sb.append("    discountTotal: ").append(toIndentedString(discountTotal)).append("\n");
    sb.append("    discountedTotal: ").append(toIndentedString(discountedTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    shippingSubTotal: ").append(toIndentedString(shippingSubTotal)).append("\n");
    sb.append("    shippingTaxTotal: ").append(toIndentedString(shippingTaxTotal)).append("\n");
    sb.append("    handlingTaxTotal: ").append(toIndentedString(handlingTaxTotal)).append("\n");
    sb.append("    itemTaxTotal: ").append(toIndentedString(itemTaxTotal)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    feeTotal: ").append(toIndentedString(feeTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    lineItemSubtotalWithOrderAdjustments: ").append(toIndentedString(lineItemSubtotalWithOrderAdjustments)).append("\n");
    sb.append("    shippingAmountBeforeDiscountsAndAdjustments: ").append(toIndentedString(shippingAmountBeforeDiscountsAndAdjustments)).append("\n");
    sb.append("    lastValidationDate: ").append(toIndentedString(lastValidationDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    changeMessages: ").append(toIndentedString(changeMessages)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    discountThresholdMessages: ").append(toIndentedString(discountThresholdMessages)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("id");
    openapiFields.add("tenantId");
    openapiFields.add("siteId");
    openapiFields.add("channelCode");
    openapiFields.add("currencyCode");
    openapiFields.add("visitId");
    openapiFields.add("webSessionId");
    openapiFields.add("customerInteractionType");
    openapiFields.add("fulfillmentInfo");
    openapiFields.add("orderDiscounts");
    openapiFields.add("suggestedDiscounts");
    openapiFields.add("rejectedDiscounts");
    openapiFields.add("data");
    openapiFields.add("taxData");
    openapiFields.add("subtotal");
    openapiFields.add("discountedSubtotal");
    openapiFields.add("discountTotal");
    openapiFields.add("discountedTotal");
    openapiFields.add("shippingTotal");
    openapiFields.add("shippingSubTotal");
    openapiFields.add("shippingTaxTotal");
    openapiFields.add("handlingTaxTotal");
    openapiFields.add("itemTaxTotal");
    openapiFields.add("taxTotal");
    openapiFields.add("feeTotal");
    openapiFields.add("total");
    openapiFields.add("lineItemSubtotalWithOrderAdjustments");
    openapiFields.add("shippingAmountBeforeDiscountsAndAdjustments");
    openapiFields.add("lastValidationDate");
    openapiFields.add("expirationDate");
    openapiFields.add("changeMessages");
    openapiFields.add("extendedProperties");
    openapiFields.add("discountThresholdMessages");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Cart
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Cart.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cart is not found in the empty JSON string", Cart.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Cart.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cart` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            CartItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("couponCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponCodes` to be an array in the JSON string but got `%s`", jsonObj.get("couponCodes").toString()));
      }
      if (jsonObj.get("invalidCoupons") != null && !jsonObj.get("invalidCoupons").isJsonNull()) {
        JsonArray jsonArrayinvalidCoupons = jsonObj.getAsJsonArray("invalidCoupons");
        if (jsonArrayinvalidCoupons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidCoupons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidCoupons` to be an array in the JSON string but got `%s`", jsonObj.get("invalidCoupons").toString()));
          }

          // validate the optional field `invalidCoupons` (array)
          for (int i = 0; i < jsonArrayinvalidCoupons.size(); i++) {
            InvalidCoupon.validateJsonObject(jsonArrayinvalidCoupons.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("priceListCode") != null && !jsonObj.get("priceListCode").isJsonNull()) && !jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      // validate the optional field `cartMessage`
      if (jsonObj.get("cartMessage") != null && !jsonObj.get("cartMessage").isJsonNull()) {
        CartMessage.validateJsonObject(jsonObj.getAsJsonObject("cartMessage"));
      }
      if (jsonObj.get("cartMessages") != null && !jsonObj.get("cartMessages").isJsonNull()) {
        JsonArray jsonArraycartMessages = jsonObj.getAsJsonArray("cartMessages");
        if (jsonArraycartMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cartMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cartMessages` to be an array in the JSON string but got `%s`", jsonObj.get("cartMessages").toString()));
          }

          // validate the optional field `cartMessages` (array)
          for (int i = 0; i < jsonArraycartMessages.size(); i++) {
            CartMessage.validateJsonObject(jsonArraycartMessages.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("reservationId") != null && !jsonObj.get("reservationId").isJsonNull()) && !jsonObj.get("reservationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationId").toString()));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("channelCode") != null && !jsonObj.get("channelCode").isJsonNull()) && !jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("visitId") != null && !jsonObj.get("visitId").isJsonNull()) && !jsonObj.get("visitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitId").toString()));
      }
      if ((jsonObj.get("webSessionId") != null && !jsonObj.get("webSessionId").isJsonNull()) && !jsonObj.get("webSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSessionId").toString()));
      }
      if ((jsonObj.get("customerInteractionType") != null && !jsonObj.get("customerInteractionType").isJsonNull()) && !jsonObj.get("customerInteractionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerInteractionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerInteractionType").toString()));
      }
      // validate the optional field `fulfillmentInfo`
      if (jsonObj.get("fulfillmentInfo") != null && !jsonObj.get("fulfillmentInfo").isJsonNull()) {
        FulfillmentInfo.validateJsonObject(jsonObj.getAsJsonObject("fulfillmentInfo"));
      }
      if (jsonObj.get("orderDiscounts") != null && !jsonObj.get("orderDiscounts").isJsonNull()) {
        JsonArray jsonArrayorderDiscounts = jsonObj.getAsJsonArray("orderDiscounts");
        if (jsonArrayorderDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("orderDiscounts").toString()));
          }

          // validate the optional field `orderDiscounts` (array)
          for (int i = 0; i < jsonArrayorderDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayorderDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("suggestedDiscounts") != null && !jsonObj.get("suggestedDiscounts").isJsonNull()) {
        JsonArray jsonArraysuggestedDiscounts = jsonObj.getAsJsonArray("suggestedDiscounts");
        if (jsonArraysuggestedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDiscounts").toString()));
          }

          // validate the optional field `suggestedDiscounts` (array)
          for (int i = 0; i < jsonArraysuggestedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArraysuggestedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("rejectedDiscounts") != null && !jsonObj.get("rejectedDiscounts").isJsonNull()) {
        JsonArray jsonArrayrejectedDiscounts = jsonObj.getAsJsonArray("rejectedDiscounts");
        if (jsonArrayrejectedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rejectedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rejectedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedDiscounts").toString()));
          }

          // validate the optional field `rejectedDiscounts` (array)
          for (int i = 0; i < jsonArrayrejectedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArrayrejectedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("changeMessages") != null && !jsonObj.get("changeMessages").isJsonNull()) {
        JsonArray jsonArraychangeMessages = jsonObj.getAsJsonArray("changeMessages");
        if (jsonArraychangeMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changeMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changeMessages` to be an array in the JSON string but got `%s`", jsonObj.get("changeMessages").toString()));
          }

          // validate the optional field `changeMessages` (array)
          for (int i = 0; i < jsonArraychangeMessages.size(); i++) {
            CommerceRuntimeChangeMessage.validateJsonObject(jsonArraychangeMessages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("extendedProperties") != null && !jsonObj.get("extendedProperties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extendedProperties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extendedProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extendedProperties` to be an array in the JSON string but got `%s`", jsonObj.get("extendedProperties").toString()));
          }

          // validate the optional field `extendedProperties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            ExtendedProperty.validateJsonObject(jsonArrayextendedProperties.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("discountThresholdMessages") != null && !jsonObj.get("discountThresholdMessages").isJsonNull()) {
        JsonArray jsonArraydiscountThresholdMessages = jsonObj.getAsJsonArray("discountThresholdMessages");
        if (jsonArraydiscountThresholdMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountThresholdMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountThresholdMessages` to be an array in the JSON string but got `%s`", jsonObj.get("discountThresholdMessages").toString()));
          }

          // validate the optional field `discountThresholdMessages` (array)
          for (int i = 0; i < jsonArraydiscountThresholdMessages.size(); i++) {
            CommerceRuntimeThresholdMessage.validateJsonObject(jsonArraydiscountThresholdMessages.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cart.class));

       return (TypeAdapter<T>) new TypeAdapter<Cart>() {
           @Override
           public void write(JsonWriter out, Cart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cart read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cart given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cart
  * @throws IOException if the JSON string is invalid with respect to Cart
  */
  public static Cart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cart.class);
  }

 /**
  * Convert an instance of Cart to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

