/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeChangeMessage;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeThresholdMessage;
import com.kibocommerce.sdk.commerce.models.ExtendedProperty;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.SuggestedDiscount;
import com.kibocommerce.sdk.commerce.models.WishlistItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Details of the wishlist, items listed in the wishlist, and any system messages.
 */
@ApiModel(description = "Details of the wishlist, items listed in the wishlist, and any system messages.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Wishlist implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID = "customerAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID)
  private Integer customerAccountId;

  public static final String SERIALIZED_NAME_TYPE_TAG = "typeTag";
  @SerializedName(SERIALIZED_NAME_TYPE_TAG)
  private String typeTag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<WishlistItem> items = null;

  public static final String SERIALIZED_NAME_PRIVACY_TYPE = "privacyType";
  @SerializedName(SERIALIZED_NAME_PRIVACY_TYPE)
  private String privacyType;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_IS_IMPORT = "isImport";
  @SerializedName(SERIALIZED_NAME_IS_IMPORT)
  private Boolean isImport;

  public static final String SERIALIZED_NAME_IMPORT_DATE = "importDate";
  @SerializedName(SERIALIZED_NAME_IMPORT_DATE)
  private OffsetDateTime importDate;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_CHANNEL_CODE = "channelCode";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CODE)
  private String channelCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public static final String SERIALIZED_NAME_WEB_SESSION_ID = "webSessionId";
  @SerializedName(SERIALIZED_NAME_WEB_SESSION_ID)
  private String webSessionId;

  public static final String SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE = "customerInteractionType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INTERACTION_TYPE)
  private String customerInteractionType;

  public static final String SERIALIZED_NAME_FULFILLMENT_INFO = "fulfillmentInfo";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_INFO)
  private FulfillmentInfo fulfillmentInfo;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNTS = "orderDiscounts";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNTS)
  private List<CommerceRuntimeAppliedDiscount> orderDiscounts = null;

  public static final String SERIALIZED_NAME_SUGGESTED_DISCOUNTS = "suggestedDiscounts";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_DISCOUNTS)
  private List<SuggestedDiscount> suggestedDiscounts = null;

  public static final String SERIALIZED_NAME_REJECTED_DISCOUNTS = "rejectedDiscounts";
  @SerializedName(SERIALIZED_NAME_REJECTED_DISCOUNTS)
  private List<SuggestedDiscount> rejectedDiscounts = null;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_TAX_DATA = "taxData";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private Object taxData;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_SUBTOTAL = "discountedSubtotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_SUBTOTAL)
  private Double discountedSubtotal;

  public static final String SERIALIZED_NAME_DISCOUNT_TOTAL = "discountTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TOTAL)
  private Double discountTotal;

  public static final String SERIALIZED_NAME_DISCOUNTED_TOTAL = "discountedTotal";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_TOTAL)
  private Double discountedTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shippingTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  private Double shippingTotal;

  public static final String SERIALIZED_NAME_SHIPPING_SUB_TOTAL = "shippingSubTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_SUB_TOTAL)
  private Double shippingSubTotal;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_TOTAL = "shippingTaxTotal";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_TOTAL)
  private Double shippingTaxTotal;

  public static final String SERIALIZED_NAME_HANDLING_TAX_TOTAL = "handlingTaxTotal";
  @SerializedName(SERIALIZED_NAME_HANDLING_TAX_TOTAL)
  private Double handlingTaxTotal;

  public static final String SERIALIZED_NAME_ITEM_TAX_TOTAL = "itemTaxTotal";
  @SerializedName(SERIALIZED_NAME_ITEM_TAX_TOTAL)
  private Double itemTaxTotal;

  public static final String SERIALIZED_NAME_TAX_TOTAL = "taxTotal";
  @SerializedName(SERIALIZED_NAME_TAX_TOTAL)
  private Double taxTotal;

  public static final String SERIALIZED_NAME_FEE_TOTAL = "feeTotal";
  @SerializedName(SERIALIZED_NAME_FEE_TOTAL)
  private Double feeTotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS = "lineItemSubtotalWithOrderAdjustments";
  @SerializedName(SERIALIZED_NAME_LINE_ITEM_SUBTOTAL_WITH_ORDER_ADJUSTMENTS)
  private Double lineItemSubtotalWithOrderAdjustments;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS = "shippingAmountBeforeDiscountsAndAdjustments";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT_BEFORE_DISCOUNTS_AND_ADJUSTMENTS)
  private Double shippingAmountBeforeDiscountsAndAdjustments;

  public static final String SERIALIZED_NAME_LAST_VALIDATION_DATE = "lastValidationDate";
  @SerializedName(SERIALIZED_NAME_LAST_VALIDATION_DATE)
  private OffsetDateTime lastValidationDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_CHANGE_MESSAGES = "changeMessages";
  @SerializedName(SERIALIZED_NAME_CHANGE_MESSAGES)
  private List<CommerceRuntimeChangeMessage> changeMessages = null;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<ExtendedProperty> extendedProperties = null;

  public static final String SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES = "discountThresholdMessages";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_THRESHOLD_MESSAGES)
  private List<CommerceRuntimeThresholdMessage> discountThresholdMessages = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public Wishlist() {
  }

  public Wishlist customerAccountId(Integer customerAccountId) {
    
    this.customerAccountId = customerAccountId;
    return this;
  }

   /**
   * Unique identifier of the customer account.
   * @return customerAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the customer account.")

  public Integer getCustomerAccountId() {
    return customerAccountId;
  }


  public void setCustomerAccountId(Integer customerAccountId) {
    this.customerAccountId = customerAccountId;
  }


  public Wishlist typeTag(String typeTag) {
    
    this.typeTag = typeTag;
    return this;
  }

   /**
   * Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist, wedding, baby.  If the merchant does not need this level of granularity this is always null.
   * @return typeTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Open-ended Wishlist type, e.g. giftlist, gift, wish, wishlist, wedding, baby.  If the merchant does not need this level of granularity this is always null.")

  public String getTypeTag() {
    return typeTag;
  }


  public void setTypeTag(String typeTag) {
    this.typeTag = typeTag;
  }


  public Wishlist name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the list that is display or potentially shared (e.g. friends and family may view this description if the list is public and the list owner may see this description when viewing the list)
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the list that is display or potentially shared (e.g. friends and family may view this description if the list is public and the list owner may see this description when viewing the list)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Wishlist items(List<WishlistItem> items) {
    
    this.items = items;
    return this;
  }

  public Wishlist addItemsItem(WishlistItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of items in the wishlist.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of items in the wishlist.")

  public List<WishlistItem> getItems() {
    return items;
  }


  public void setItems(List<WishlistItem> items) {
    this.items = items;
  }


  public Wishlist privacyType(String privacyType) {
    
    this.privacyType = privacyType;
    return this;
  }

   /**
   * Is the wishlist public, viewable only through a shared link, or private (only the owner of the list may view the wishlist)?
   * @return privacyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the wishlist public, viewable only through a shared link, or private (only the owner of the list may view the wishlist)?")

  public String getPrivacyType() {
    return privacyType;
  }


  public void setPrivacyType(String privacyType) {
    this.privacyType = privacyType;
  }


  public Wishlist sortOrder(Integer sortOrder) {
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * The wishlist sort order.  Useful for scenarios where there is a default wishlist and other wishlists or arbitrary ordering
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The wishlist sort order.  Useful for scenarios where there is a default wishlist and other wishlists or arbitrary ordering")

  public Integer getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public Wishlist version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version for concurrency purposes
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version for concurrency purposes")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public Wishlist isImport(Boolean isImport) {
    
    this.isImport = isImport;
    return this;
  }

   /**
   * Was this object imported from an external system?
   * @return isImport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Was this object imported from an external system?")

  public Boolean getIsImport() {
    return isImport;
  }


  public void setIsImport(Boolean isImport) {
    this.isImport = isImport;
  }


  public Wishlist importDate(OffsetDateTime importDate) {
    
    this.importDate = importDate;
    return this;
  }

   /**
   * Date this item was imported
   * @return importDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this item was imported")

  public OffsetDateTime getImportDate() {
    return importDate;
  }


  public void setImportDate(OffsetDateTime importDate) {
    this.importDate = importDate;
  }


  public Wishlist externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Id in an external system this item may have been imported from
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id in an external system this item may have been imported from")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Wishlist userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Unique identifier of the shopper who created the cart.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the shopper who created the cart.")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Wishlist id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Wishlist tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Unique identifier of the Tenant.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Tenant.")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public Wishlist siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Unique identifier of the Site.
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the Site.")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public Wishlist channelCode(String channelCode) {
    
    this.channelCode = channelCode;
    return this;
  }

   /**
   * Unique identifier of the channel for this item.
   * @return channelCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of the channel for this item.")

  public String getChannelCode() {
    return channelCode;
  }


  public void setChannelCode(String channelCode) {
    this.channelCode = channelCode;
  }


  public Wishlist currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO Currency Code. Currently, only USD is supported.
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Currency Code. Currently, only USD is supported.")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Wishlist visitId(String visitId) {
    
    this.visitId = visitId;
    return this;
  }

   /**
   * Identifies the Visit ID that was current when the order was placed or when the cart was last updated.
   * @return visitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the Visit ID that was current when the order was placed or when the cart was last updated.")

  public String getVisitId() {
    return visitId;
  }


  public void setVisitId(String visitId) {
    this.visitId = visitId;
  }


  public Wishlist webSessionId(String webSessionId) {
    
    this.webSessionId = webSessionId;
    return this;
  }

   /**
   * Identifies the web session used to place the order or last update the cart.
   * @return webSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the web session used to place the order or last update the cart.")

  public String getWebSessionId() {
    return webSessionId;
  }


  public void setWebSessionId(String webSessionId) {
    this.webSessionId = webSessionId;
  }


  public Wishlist customerInteractionType(String customerInteractionType) {
    
    this.customerInteractionType = customerInteractionType;
    return this;
  }

   /**
   * Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown
   * @return customerInteractionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the interaction type that a customer will use to create this object.  Valid values are: Website, Store, Call, Unknown")

  public String getCustomerInteractionType() {
    return customerInteractionType;
  }


  public void setCustomerInteractionType(String customerInteractionType) {
    this.customerInteractionType = customerInteractionType;
  }


  public Wishlist fulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    
    this.fulfillmentInfo = fulfillmentInfo;
    return this;
  }

   /**
   * Get fulfillmentInfo
   * @return fulfillmentInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentInfo getFulfillmentInfo() {
    return fulfillmentInfo;
  }


  public void setFulfillmentInfo(FulfillmentInfo fulfillmentInfo) {
    this.fulfillmentInfo = fulfillmentInfo;
  }


  public Wishlist orderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    
    this.orderDiscounts = orderDiscounts;
    return this;
  }

  public Wishlist addOrderDiscountsItem(CommerceRuntimeAppliedDiscount orderDiscountsItem) {
    if (this.orderDiscounts == null) {
      this.orderDiscounts = new ArrayList<>();
    }
    this.orderDiscounts.add(orderDiscountsItem);
    return this;
  }

   /**
   * The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.
   * @return orderDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.")

  public List<CommerceRuntimeAppliedDiscount> getOrderDiscounts() {
    return orderDiscounts;
  }


  public void setOrderDiscounts(List<CommerceRuntimeAppliedDiscount> orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }


  public Wishlist suggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    
    this.suggestedDiscounts = suggestedDiscounts;
    return this;
  }

  public Wishlist addSuggestedDiscountsItem(SuggestedDiscount suggestedDiscountsItem) {
    if (this.suggestedDiscounts == null) {
      this.suggestedDiscounts = new ArrayList<>();
    }
    this.suggestedDiscounts.add(suggestedDiscountsItem);
    return this;
  }

   /**
   * Get suggestedDiscounts
   * @return suggestedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getSuggestedDiscounts() {
    return suggestedDiscounts;
  }


  public void setSuggestedDiscounts(List<SuggestedDiscount> suggestedDiscounts) {
    this.suggestedDiscounts = suggestedDiscounts;
  }


  public Wishlist rejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    
    this.rejectedDiscounts = rejectedDiscounts;
    return this;
  }

  public Wishlist addRejectedDiscountsItem(SuggestedDiscount rejectedDiscountsItem) {
    if (this.rejectedDiscounts == null) {
      this.rejectedDiscounts = new ArrayList<>();
    }
    this.rejectedDiscounts.add(rejectedDiscountsItem);
    return this;
  }

   /**
   * Get rejectedDiscounts
   * @return rejectedDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SuggestedDiscount> getRejectedDiscounts() {
    return rejectedDiscounts;
  }


  public void setRejectedDiscounts(List<SuggestedDiscount> rejectedDiscounts) {
    this.rejectedDiscounts = rejectedDiscounts;
  }


  public Wishlist data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Custom data for a given vendor set within the commerce process.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom data for a given vendor set within the commerce process.")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public Wishlist taxData(Object taxData) {
    
    this.taxData = taxData;
    return this;
  }

   /**
   * Storage for any additional/custom tax data.
   * @return taxData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage for any additional/custom tax data.")

  public Object getTaxData() {
    return taxData;
  }


  public void setTaxData(Object taxData) {
    this.taxData = taxData;
  }


  public Wishlist subtotal(Double subtotal) {
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options but excluding any discounts.
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options but excluding any discounts.")

  public Double getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Wishlist discountedSubtotal(Double discountedSubtotal) {
    
    this.discountedSubtotal = discountedSubtotal;
    return this;
  }

   /**
   * Combined price for all cart items, including all selected options as well as any discounts.
   * @return discountedSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Combined price for all cart items, including all selected options as well as any discounts.")

  public Double getDiscountedSubtotal() {
    return discountedSubtotal;
  }


  public void setDiscountedSubtotal(Double discountedSubtotal) {
    this.discountedSubtotal = discountedSubtotal;
  }


  public Wishlist discountTotal(Double discountTotal) {
    
    this.discountTotal = discountTotal;
    return this;
  }

   /**
   * Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.
   * @return discountTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.")

  public Double getDiscountTotal() {
    return discountTotal;
  }


  public void setDiscountTotal(Double discountTotal) {
    this.discountTotal = discountTotal;
  }


  public Wishlist discountedTotal(Double discountedTotal) {
    
    this.discountedTotal = discountedTotal;
    return this;
  }

   /**
   * Subtotal minus the discounted total
   * @return discountedTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subtotal minus the discounted total")

  public Double getDiscountedTotal() {
    return discountedTotal;
  }


  public void setDiscountedTotal(Double discountedTotal) {
    this.discountedTotal = discountedTotal;
  }


  public Wishlist shippingTotal(Double shippingTotal) {
    
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * Shipping does not appear on cart.
   * @return shippingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping does not appear on cart.")

  public Double getShippingTotal() {
    return shippingTotal;
  }


  public void setShippingTotal(Double shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public Wishlist shippingSubTotal(Double shippingSubTotal) {
    
    this.shippingSubTotal = shippingSubTotal;
    return this;
  }

   /**
   * Shipping total without discounts applied.
   * @return shippingSubTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping total without discounts applied.")

  public Double getShippingSubTotal() {
    return shippingSubTotal;
  }


  public void setShippingSubTotal(Double shippingSubTotal) {
    this.shippingSubTotal = shippingSubTotal;
  }


  public Wishlist shippingTaxTotal(Double shippingTaxTotal) {
    
    this.shippingTaxTotal = shippingTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return shippingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getShippingTaxTotal() {
    return shippingTaxTotal;
  }


  public void setShippingTaxTotal(Double shippingTaxTotal) {
    this.shippingTaxTotal = shippingTaxTotal;
  }


  public Wishlist handlingTaxTotal(Double handlingTaxTotal) {
    
    this.handlingTaxTotal = handlingTaxTotal;
    return this;
  }

   /**
   * Total tax on handling
   * @return handlingTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total tax on handling")

  public Double getHandlingTaxTotal() {
    return handlingTaxTotal;
  }


  public void setHandlingTaxTotal(Double handlingTaxTotal) {
    this.handlingTaxTotal = handlingTaxTotal;
  }


  public Wishlist itemTaxTotal(Double itemTaxTotal) {
    
    this.itemTaxTotal = itemTaxTotal;
    return this;
  }

   /**
   * Not implemented. Tax does not appear on cart.
   * @return itemTaxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Tax does not appear on cart.")

  public Double getItemTaxTotal() {
    return itemTaxTotal;
  }


  public void setItemTaxTotal(Double itemTaxTotal) {
    this.itemTaxTotal = itemTaxTotal;
  }


  public Wishlist taxTotal(Double taxTotal) {
    
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * Tax does not appear on cart.
   * @return taxTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax does not appear on cart.")

  public Double getTaxTotal() {
    return taxTotal;
  }


  public void setTaxTotal(Double taxTotal) {
    this.taxTotal = taxTotal;
  }


  public Wishlist feeTotal(Double feeTotal) {
    
    this.feeTotal = feeTotal;
    return this;
  }

   /**
   * Not implemented. Total cost of fees for all items in the cart.
   * @return feeTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Not implemented. Total cost of fees for all items in the cart.")

  public Double getFeeTotal() {
    return feeTotal;
  }


  public void setFeeTotal(Double feeTotal) {
    this.feeTotal = feeTotal;
  }


  public Wishlist total(Double total) {
    
    this.total = total;
    return this;
  }

   /**
   * Final total amount of the order including all discounts, shipping, and tax.
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Final total amount of the order including all discounts, shipping, and tax.")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    this.total = total;
  }


  public Wishlist lineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
    return this;
  }

   /**
   * Line Item Subtotals with Order Adjustments
   * @return lineItemSubtotalWithOrderAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Line Item Subtotals with Order Adjustments")

  public Double getLineItemSubtotalWithOrderAdjustments() {
    return lineItemSubtotalWithOrderAdjustments;
  }


  public void setLineItemSubtotalWithOrderAdjustments(Double lineItemSubtotalWithOrderAdjustments) {
    this.lineItemSubtotalWithOrderAdjustments = lineItemSubtotalWithOrderAdjustments;
  }


  public Wishlist shippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
    return this;
  }

   /**
   * Shipping Amount before discount and adjustments
   * @return shippingAmountBeforeDiscountsAndAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping Amount before discount and adjustments")

  public Double getShippingAmountBeforeDiscountsAndAdjustments() {
    return shippingAmountBeforeDiscountsAndAdjustments;
  }


  public void setShippingAmountBeforeDiscountsAndAdjustments(Double shippingAmountBeforeDiscountsAndAdjustments) {
    this.shippingAmountBeforeDiscountsAndAdjustments = shippingAmountBeforeDiscountsAndAdjustments;
  }


  public Wishlist lastValidationDate(OffsetDateTime lastValidationDate) {
    
    this.lastValidationDate = lastValidationDate;
    return this;
  }

   /**
   * Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.
   * @return lastValidationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed.   If changed, it updates LastValidationDate.")

  public OffsetDateTime getLastValidationDate() {
    return lastValidationDate;
  }


  public void setLastValidationDate(OffsetDateTime lastValidationDate) {
    this.lastValidationDate = lastValidationDate;
  }


  public Wishlist expirationDate(OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the order will no longer be active. That is, the order is considered abandoned.   Orders of anonymous shoppers expire after 14 days of inactivity.   An order never expires for shoppers who are logged into their account.   Date in UTC Date/Time.")

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public Wishlist changeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    
    this.changeMessages = changeMessages;
    return this;
  }

  public Wishlist addChangeMessagesItem(CommerceRuntimeChangeMessage changeMessagesItem) {
    if (this.changeMessages == null) {
      this.changeMessages = new ArrayList<>();
    }
    this.changeMessages.add(changeMessagesItem);
    return this;
  }

   /**
   * List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.
   * @return changeMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.")

  public List<CommerceRuntimeChangeMessage> getChangeMessages() {
    return changeMessages;
  }


  public void setChangeMessages(List<CommerceRuntimeChangeMessage> changeMessages) {
    this.changeMessages = changeMessages;
  }


  public Wishlist extendedProperties(List<ExtendedProperty> extendedProperties) {
    
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Wishlist addExtendedPropertiesItem(ExtendedProperty extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.")

  public List<ExtendedProperty> getExtendedProperties() {
    return extendedProperties;
  }


  public void setExtendedProperties(List<ExtendedProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Wishlist discountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    
    this.discountThresholdMessages = discountThresholdMessages;
    return this;
  }

  public Wishlist addDiscountThresholdMessagesItem(CommerceRuntimeThresholdMessage discountThresholdMessagesItem) {
    if (this.discountThresholdMessages == null) {
      this.discountThresholdMessages = new ArrayList<>();
    }
    this.discountThresholdMessages.add(discountThresholdMessagesItem);
    return this;
  }

   /**
   * List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.
   * @return discountThresholdMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.")

  public List<CommerceRuntimeThresholdMessage> getDiscountThresholdMessages() {
    return discountThresholdMessages;
  }


  public void setDiscountThresholdMessages(List<CommerceRuntimeThresholdMessage> discountThresholdMessages) {
    this.discountThresholdMessages = discountThresholdMessages;
  }


  public Wishlist auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wishlist wishlist = (Wishlist) o;
    return Objects.equals(this.customerAccountId, wishlist.customerAccountId) &&
        Objects.equals(this.typeTag, wishlist.typeTag) &&
        Objects.equals(this.name, wishlist.name) &&
        Objects.equals(this.items, wishlist.items) &&
        Objects.equals(this.privacyType, wishlist.privacyType) &&
        Objects.equals(this.sortOrder, wishlist.sortOrder) &&
        Objects.equals(this.version, wishlist.version) &&
        Objects.equals(this.isImport, wishlist.isImport) &&
        Objects.equals(this.importDate, wishlist.importDate) &&
        Objects.equals(this.externalId, wishlist.externalId) &&
        Objects.equals(this.userId, wishlist.userId) &&
        Objects.equals(this.id, wishlist.id) &&
        Objects.equals(this.tenantId, wishlist.tenantId) &&
        Objects.equals(this.siteId, wishlist.siteId) &&
        Objects.equals(this.channelCode, wishlist.channelCode) &&
        Objects.equals(this.currencyCode, wishlist.currencyCode) &&
        Objects.equals(this.visitId, wishlist.visitId) &&
        Objects.equals(this.webSessionId, wishlist.webSessionId) &&
        Objects.equals(this.customerInteractionType, wishlist.customerInteractionType) &&
        Objects.equals(this.fulfillmentInfo, wishlist.fulfillmentInfo) &&
        Objects.equals(this.orderDiscounts, wishlist.orderDiscounts) &&
        Objects.equals(this.suggestedDiscounts, wishlist.suggestedDiscounts) &&
        Objects.equals(this.rejectedDiscounts, wishlist.rejectedDiscounts) &&
        Objects.equals(this.data, wishlist.data) &&
        Objects.equals(this.taxData, wishlist.taxData) &&
        Objects.equals(this.subtotal, wishlist.subtotal) &&
        Objects.equals(this.discountedSubtotal, wishlist.discountedSubtotal) &&
        Objects.equals(this.discountTotal, wishlist.discountTotal) &&
        Objects.equals(this.discountedTotal, wishlist.discountedTotal) &&
        Objects.equals(this.shippingTotal, wishlist.shippingTotal) &&
        Objects.equals(this.shippingSubTotal, wishlist.shippingSubTotal) &&
        Objects.equals(this.shippingTaxTotal, wishlist.shippingTaxTotal) &&
        Objects.equals(this.handlingTaxTotal, wishlist.handlingTaxTotal) &&
        Objects.equals(this.itemTaxTotal, wishlist.itemTaxTotal) &&
        Objects.equals(this.taxTotal, wishlist.taxTotal) &&
        Objects.equals(this.feeTotal, wishlist.feeTotal) &&
        Objects.equals(this.total, wishlist.total) &&
        Objects.equals(this.lineItemSubtotalWithOrderAdjustments, wishlist.lineItemSubtotalWithOrderAdjustments) &&
        Objects.equals(this.shippingAmountBeforeDiscountsAndAdjustments, wishlist.shippingAmountBeforeDiscountsAndAdjustments) &&
        Objects.equals(this.lastValidationDate, wishlist.lastValidationDate) &&
        Objects.equals(this.expirationDate, wishlist.expirationDate) &&
        Objects.equals(this.changeMessages, wishlist.changeMessages) &&
        Objects.equals(this.extendedProperties, wishlist.extendedProperties) &&
        Objects.equals(this.discountThresholdMessages, wishlist.discountThresholdMessages) &&
        Objects.equals(this.auditInfo, wishlist.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountId, typeTag, name, items, privacyType, sortOrder, version, isImport, importDate, externalId, userId, id, tenantId, siteId, channelCode, currencyCode, visitId, webSessionId, customerInteractionType, fulfillmentInfo, orderDiscounts, suggestedDiscounts, rejectedDiscounts, data, taxData, subtotal, discountedSubtotal, discountTotal, discountedTotal, shippingTotal, shippingSubTotal, shippingTaxTotal, handlingTaxTotal, itemTaxTotal, taxTotal, feeTotal, total, lineItemSubtotalWithOrderAdjustments, shippingAmountBeforeDiscountsAndAdjustments, lastValidationDate, expirationDate, changeMessages, extendedProperties, discountThresholdMessages, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wishlist {\n");
    sb.append("    customerAccountId: ").append(toIndentedString(customerAccountId)).append("\n");
    sb.append("    typeTag: ").append(toIndentedString(typeTag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    privacyType: ").append(toIndentedString(privacyType)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    isImport: ").append(toIndentedString(isImport)).append("\n");
    sb.append("    importDate: ").append(toIndentedString(importDate)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    channelCode: ").append(toIndentedString(channelCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    webSessionId: ").append(toIndentedString(webSessionId)).append("\n");
    sb.append("    customerInteractionType: ").append(toIndentedString(customerInteractionType)).append("\n");
    sb.append("    fulfillmentInfo: ").append(toIndentedString(fulfillmentInfo)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    suggestedDiscounts: ").append(toIndentedString(suggestedDiscounts)).append("\n");
    sb.append("    rejectedDiscounts: ").append(toIndentedString(rejectedDiscounts)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    discountedSubtotal: ").append(toIndentedString(discountedSubtotal)).append("\n");
    sb.append("    discountTotal: ").append(toIndentedString(discountTotal)).append("\n");
    sb.append("    discountedTotal: ").append(toIndentedString(discountedTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    shippingSubTotal: ").append(toIndentedString(shippingSubTotal)).append("\n");
    sb.append("    shippingTaxTotal: ").append(toIndentedString(shippingTaxTotal)).append("\n");
    sb.append("    handlingTaxTotal: ").append(toIndentedString(handlingTaxTotal)).append("\n");
    sb.append("    itemTaxTotal: ").append(toIndentedString(itemTaxTotal)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    feeTotal: ").append(toIndentedString(feeTotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    lineItemSubtotalWithOrderAdjustments: ").append(toIndentedString(lineItemSubtotalWithOrderAdjustments)).append("\n");
    sb.append("    shippingAmountBeforeDiscountsAndAdjustments: ").append(toIndentedString(shippingAmountBeforeDiscountsAndAdjustments)).append("\n");
    sb.append("    lastValidationDate: ").append(toIndentedString(lastValidationDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    changeMessages: ").append(toIndentedString(changeMessages)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    discountThresholdMessages: ").append(toIndentedString(discountThresholdMessages)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("id");
    openapiFields.add("tenantId");
    openapiFields.add("siteId");
    openapiFields.add("channelCode");
    openapiFields.add("currencyCode");
    openapiFields.add("visitId");
    openapiFields.add("webSessionId");
    openapiFields.add("customerInteractionType");
    openapiFields.add("fulfillmentInfo");
    openapiFields.add("orderDiscounts");
    openapiFields.add("suggestedDiscounts");
    openapiFields.add("rejectedDiscounts");
    openapiFields.add("data");
    openapiFields.add("taxData");
    openapiFields.add("subtotal");
    openapiFields.add("discountedSubtotal");
    openapiFields.add("discountTotal");
    openapiFields.add("discountedTotal");
    openapiFields.add("shippingTotal");
    openapiFields.add("shippingSubTotal");
    openapiFields.add("shippingTaxTotal");
    openapiFields.add("handlingTaxTotal");
    openapiFields.add("itemTaxTotal");
    openapiFields.add("taxTotal");
    openapiFields.add("feeTotal");
    openapiFields.add("total");
    openapiFields.add("lineItemSubtotalWithOrderAdjustments");
    openapiFields.add("shippingAmountBeforeDiscountsAndAdjustments");
    openapiFields.add("lastValidationDate");
    openapiFields.add("expirationDate");
    openapiFields.add("changeMessages");
    openapiFields.add("extendedProperties");
    openapiFields.add("discountThresholdMessages");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Wishlist
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Wishlist.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Wishlist is not found in the empty JSON string", Wishlist.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Wishlist.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Wishlist` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("typeTag") != null && !jsonObj.get("typeTag").isJsonNull()) && !jsonObj.get("typeTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeTag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            WishlistItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("privacyType") != null && !jsonObj.get("privacyType").isJsonNull()) && !jsonObj.get("privacyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyType").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("channelCode") != null && !jsonObj.get("channelCode").isJsonNull()) && !jsonObj.get("channelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelCode").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("visitId") != null && !jsonObj.get("visitId").isJsonNull()) && !jsonObj.get("visitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitId").toString()));
      }
      if ((jsonObj.get("webSessionId") != null && !jsonObj.get("webSessionId").isJsonNull()) && !jsonObj.get("webSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSessionId").toString()));
      }
      if ((jsonObj.get("customerInteractionType") != null && !jsonObj.get("customerInteractionType").isJsonNull()) && !jsonObj.get("customerInteractionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerInteractionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerInteractionType").toString()));
      }
      // validate the optional field `fulfillmentInfo`
      if (jsonObj.get("fulfillmentInfo") != null && !jsonObj.get("fulfillmentInfo").isJsonNull()) {
        FulfillmentInfo.validateJsonObject(jsonObj.getAsJsonObject("fulfillmentInfo"));
      }
      if (jsonObj.get("orderDiscounts") != null && !jsonObj.get("orderDiscounts").isJsonNull()) {
        JsonArray jsonArrayorderDiscounts = jsonObj.getAsJsonArray("orderDiscounts");
        if (jsonArrayorderDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("orderDiscounts").toString()));
          }

          // validate the optional field `orderDiscounts` (array)
          for (int i = 0; i < jsonArrayorderDiscounts.size(); i++) {
            CommerceRuntimeAppliedDiscount.validateJsonObject(jsonArrayorderDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("suggestedDiscounts") != null && !jsonObj.get("suggestedDiscounts").isJsonNull()) {
        JsonArray jsonArraysuggestedDiscounts = jsonObj.getAsJsonArray("suggestedDiscounts");
        if (jsonArraysuggestedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedDiscounts").toString()));
          }

          // validate the optional field `suggestedDiscounts` (array)
          for (int i = 0; i < jsonArraysuggestedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArraysuggestedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("rejectedDiscounts") != null && !jsonObj.get("rejectedDiscounts").isJsonNull()) {
        JsonArray jsonArrayrejectedDiscounts = jsonObj.getAsJsonArray("rejectedDiscounts");
        if (jsonArrayrejectedDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rejectedDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rejectedDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedDiscounts").toString()));
          }

          // validate the optional field `rejectedDiscounts` (array)
          for (int i = 0; i < jsonArrayrejectedDiscounts.size(); i++) {
            SuggestedDiscount.validateJsonObject(jsonArrayrejectedDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("changeMessages") != null && !jsonObj.get("changeMessages").isJsonNull()) {
        JsonArray jsonArraychangeMessages = jsonObj.getAsJsonArray("changeMessages");
        if (jsonArraychangeMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changeMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changeMessages` to be an array in the JSON string but got `%s`", jsonObj.get("changeMessages").toString()));
          }

          // validate the optional field `changeMessages` (array)
          for (int i = 0; i < jsonArraychangeMessages.size(); i++) {
            CommerceRuntimeChangeMessage.validateJsonObject(jsonArraychangeMessages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("extendedProperties") != null && !jsonObj.get("extendedProperties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extendedProperties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extendedProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extendedProperties` to be an array in the JSON string but got `%s`", jsonObj.get("extendedProperties").toString()));
          }

          // validate the optional field `extendedProperties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            ExtendedProperty.validateJsonObject(jsonArrayextendedProperties.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("discountThresholdMessages") != null && !jsonObj.get("discountThresholdMessages").isJsonNull()) {
        JsonArray jsonArraydiscountThresholdMessages = jsonObj.getAsJsonArray("discountThresholdMessages");
        if (jsonArraydiscountThresholdMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountThresholdMessages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountThresholdMessages` to be an array in the JSON string but got `%s`", jsonObj.get("discountThresholdMessages").toString()));
          }

          // validate the optional field `discountThresholdMessages` (array)
          for (int i = 0; i < jsonArraydiscountThresholdMessages.size(); i++) {
            CommerceRuntimeThresholdMessage.validateJsonObject(jsonArraydiscountThresholdMessages.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Wishlist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Wishlist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Wishlist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Wishlist.class));

       return (TypeAdapter<T>) new TypeAdapter<Wishlist>() {
           @Override
           public void write(JsonWriter out, Wishlist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Wishlist read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Wishlist given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Wishlist
  * @throws IOException if the JSON string is invalid with respect to Wishlist
  */
  public static Wishlist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Wishlist.class);
  }

 /**
  * Convert an instance of Wishlist to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

