/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.commerce.models.PricingAppliedDiscount;
import com.kibocommerce.sdk.commerce.models.PricingAppliedOrderShippingDiscount;
import com.kibocommerce.sdk.commerce.models.PricingTaxAttribute;
import com.kibocommerce.sdk.commerce.models.PricingTaxContext;
import com.kibocommerce.sdk.commerce.models.PricingTaxableLineItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * PricingTaxableOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PricingTaxableOrder implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ORDER_DATE = "orderDate";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private OffsetDateTime orderDate;

  public static final String SERIALIZED_NAME_TAX_CONTEXT = "taxContext";
  @SerializedName(SERIALIZED_NAME_TAX_CONTEXT)
  private PricingTaxContext taxContext;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<PricingTaxableLineItem> lineItems = null;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shippingAmount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private Double shippingAmount;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_HANDLING_FEE = "handlingFee";
  @SerializedName(SERIALIZED_NAME_HANDLING_FEE)
  private Double handlingFee;

  public static final String SERIALIZED_NAME_ORIGINAL_DOCUMENT_CODE = "originalDocumentCode";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DOCUMENT_CODE)
  private String originalDocumentCode;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private Integer orderNumber;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_DATE = "originalOrderDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_DATE)
  private OffsetDateTime originalOrderDate;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<PricingTaxAttribute> attributes = null;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNTS = "shippingDiscounts";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNTS)
  private List<PricingAppliedOrderShippingDiscount> shippingDiscounts = null;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNT = "shippingDiscount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNT)
  private PricingAppliedOrderShippingDiscount shippingDiscount;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNTS = "orderDiscounts";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNTS)
  private List<PricingAppliedDiscount> orderDiscounts = null;

  public static final String SERIALIZED_NAME_ORDER_DISCOUNT = "orderDiscount";
  @SerializedName(SERIALIZED_NAME_ORDER_DISCOUNT)
  private PricingAppliedDiscount orderDiscount;

  public static final String SERIALIZED_NAME_HANDLING_DISCOUNTS = "handlingDiscounts";
  @SerializedName(SERIALIZED_NAME_HANDLING_DISCOUNTS)
  private List<PricingAppliedDiscount> handlingDiscounts = null;

  public static final String SERIALIZED_NAME_HANDLING_DISCOUNT = "handlingDiscount";
  @SerializedName(SERIALIZED_NAME_HANDLING_DISCOUNT)
  private PricingAppliedDiscount handlingDiscount;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_CODE = "shippingMethodCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_CODE)
  private String shippingMethodCode;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_NAME = "shippingMethodName";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_NAME)
  private String shippingMethodName;

  public static final String SERIALIZED_NAME_TAX_REQUEST_TYPE = "taxRequestType";
  @SerializedName(SERIALIZED_NAME_TAX_REQUEST_TYPE)
  private String taxRequestType;

  public PricingTaxableOrder() {
  }

  public PricingTaxableOrder orderDate(OffsetDateTime orderDate) {
    
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Get orderDate
   * @return orderDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getOrderDate() {
    return orderDate;
  }


  public void setOrderDate(OffsetDateTime orderDate) {
    this.orderDate = orderDate;
  }


  public PricingTaxableOrder taxContext(PricingTaxContext taxContext) {
    
    this.taxContext = taxContext;
    return this;
  }

   /**
   * Get taxContext
   * @return taxContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingTaxContext getTaxContext() {
    return taxContext;
  }


  public void setTaxContext(PricingTaxContext taxContext) {
    this.taxContext = taxContext;
  }


  public PricingTaxableOrder lineItems(List<PricingTaxableLineItem> lineItems) {
    
    this.lineItems = lineItems;
    return this;
  }

  public PricingTaxableOrder addLineItemsItem(PricingTaxableLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Get lineItems
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PricingTaxableLineItem> getLineItems() {
    return lineItems;
  }


  public void setLineItems(List<PricingTaxableLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public PricingTaxableOrder shippingAmount(Double shippingAmount) {
    
    this.shippingAmount = shippingAmount;
    return this;
  }

   /**
   * Get shippingAmount
   * @return shippingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getShippingAmount() {
    return shippingAmount;
  }


  public void setShippingAmount(Double shippingAmount) {
    this.shippingAmount = shippingAmount;
  }


  public PricingTaxableOrder currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public PricingTaxableOrder handlingFee(Double handlingFee) {
    
    this.handlingFee = handlingFee;
    return this;
  }

   /**
   * Get handlingFee
   * @return handlingFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getHandlingFee() {
    return handlingFee;
  }


  public void setHandlingFee(Double handlingFee) {
    this.handlingFee = handlingFee;
  }


  public PricingTaxableOrder originalDocumentCode(String originalDocumentCode) {
    
    this.originalDocumentCode = originalDocumentCode;
    return this;
  }

   /**
   * Get originalDocumentCode
   * @return originalDocumentCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOriginalDocumentCode() {
    return originalDocumentCode;
  }


  public void setOriginalDocumentCode(String originalDocumentCode) {
    this.originalDocumentCode = originalDocumentCode;
  }


  public PricingTaxableOrder orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PricingTaxableOrder orderNumber(Integer orderNumber) {
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Get orderNumber
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(Integer orderNumber) {
    this.orderNumber = orderNumber;
  }


  public PricingTaxableOrder originalOrderDate(OffsetDateTime originalOrderDate) {
    
    this.originalOrderDate = originalOrderDate;
    return this;
  }

   /**
   * Get originalOrderDate
   * @return originalOrderDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getOriginalOrderDate() {
    return originalOrderDate;
  }


  public void setOriginalOrderDate(OffsetDateTime originalOrderDate) {
    this.originalOrderDate = originalOrderDate;
  }


  public PricingTaxableOrder data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public PricingTaxableOrder attributes(List<PricingTaxAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public PricingTaxableOrder addAttributesItem(PricingTaxAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PricingTaxAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<PricingTaxAttribute> attributes) {
    this.attributes = attributes;
  }


  public PricingTaxableOrder shippingDiscounts(List<PricingAppliedOrderShippingDiscount> shippingDiscounts) {
    
    this.shippingDiscounts = shippingDiscounts;
    return this;
  }

  public PricingTaxableOrder addShippingDiscountsItem(PricingAppliedOrderShippingDiscount shippingDiscountsItem) {
    if (this.shippingDiscounts == null) {
      this.shippingDiscounts = new ArrayList<>();
    }
    this.shippingDiscounts.add(shippingDiscountsItem);
    return this;
  }

   /**
   * Get shippingDiscounts
   * @return shippingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PricingAppliedOrderShippingDiscount> getShippingDiscounts() {
    return shippingDiscounts;
  }


  public void setShippingDiscounts(List<PricingAppliedOrderShippingDiscount> shippingDiscounts) {
    this.shippingDiscounts = shippingDiscounts;
  }


  public PricingTaxableOrder shippingDiscount(PricingAppliedOrderShippingDiscount shippingDiscount) {
    
    this.shippingDiscount = shippingDiscount;
    return this;
  }

   /**
   * Get shippingDiscount
   * @return shippingDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingAppliedOrderShippingDiscount getShippingDiscount() {
    return shippingDiscount;
  }


  public void setShippingDiscount(PricingAppliedOrderShippingDiscount shippingDiscount) {
    this.shippingDiscount = shippingDiscount;
  }


  public PricingTaxableOrder orderDiscounts(List<PricingAppliedDiscount> orderDiscounts) {
    
    this.orderDiscounts = orderDiscounts;
    return this;
  }

  public PricingTaxableOrder addOrderDiscountsItem(PricingAppliedDiscount orderDiscountsItem) {
    if (this.orderDiscounts == null) {
      this.orderDiscounts = new ArrayList<>();
    }
    this.orderDiscounts.add(orderDiscountsItem);
    return this;
  }

   /**
   * Get orderDiscounts
   * @return orderDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PricingAppliedDiscount> getOrderDiscounts() {
    return orderDiscounts;
  }


  public void setOrderDiscounts(List<PricingAppliedDiscount> orderDiscounts) {
    this.orderDiscounts = orderDiscounts;
  }


  public PricingTaxableOrder orderDiscount(PricingAppliedDiscount orderDiscount) {
    
    this.orderDiscount = orderDiscount;
    return this;
  }

   /**
   * Get orderDiscount
   * @return orderDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingAppliedDiscount getOrderDiscount() {
    return orderDiscount;
  }


  public void setOrderDiscount(PricingAppliedDiscount orderDiscount) {
    this.orderDiscount = orderDiscount;
  }


  public PricingTaxableOrder handlingDiscounts(List<PricingAppliedDiscount> handlingDiscounts) {
    
    this.handlingDiscounts = handlingDiscounts;
    return this;
  }

  public PricingTaxableOrder addHandlingDiscountsItem(PricingAppliedDiscount handlingDiscountsItem) {
    if (this.handlingDiscounts == null) {
      this.handlingDiscounts = new ArrayList<>();
    }
    this.handlingDiscounts.add(handlingDiscountsItem);
    return this;
  }

   /**
   * Get handlingDiscounts
   * @return handlingDiscounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PricingAppliedDiscount> getHandlingDiscounts() {
    return handlingDiscounts;
  }


  public void setHandlingDiscounts(List<PricingAppliedDiscount> handlingDiscounts) {
    this.handlingDiscounts = handlingDiscounts;
  }


  public PricingTaxableOrder handlingDiscount(PricingAppliedDiscount handlingDiscount) {
    
    this.handlingDiscount = handlingDiscount;
    return this;
  }

   /**
   * Get handlingDiscount
   * @return handlingDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PricingAppliedDiscount getHandlingDiscount() {
    return handlingDiscount;
  }


  public void setHandlingDiscount(PricingAppliedDiscount handlingDiscount) {
    this.handlingDiscount = handlingDiscount;
  }


  public PricingTaxableOrder shippingMethodCode(String shippingMethodCode) {
    
    this.shippingMethodCode = shippingMethodCode;
    return this;
  }

   /**
   * Get shippingMethodCode
   * @return shippingMethodCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShippingMethodCode() {
    return shippingMethodCode;
  }


  public void setShippingMethodCode(String shippingMethodCode) {
    this.shippingMethodCode = shippingMethodCode;
  }


  public PricingTaxableOrder shippingMethodName(String shippingMethodName) {
    
    this.shippingMethodName = shippingMethodName;
    return this;
  }

   /**
   * Get shippingMethodName
   * @return shippingMethodName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getShippingMethodName() {
    return shippingMethodName;
  }


  public void setShippingMethodName(String shippingMethodName) {
    this.shippingMethodName = shippingMethodName;
  }


  public PricingTaxableOrder taxRequestType(String taxRequestType) {
    
    this.taxRequestType = taxRequestType;
    return this;
  }

   /**
   * Get taxRequestType
   * @return taxRequestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxRequestType() {
    return taxRequestType;
  }


  public void setTaxRequestType(String taxRequestType) {
    this.taxRequestType = taxRequestType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingTaxableOrder pricingTaxableOrder = (PricingTaxableOrder) o;
    return Objects.equals(this.orderDate, pricingTaxableOrder.orderDate) &&
        Objects.equals(this.taxContext, pricingTaxableOrder.taxContext) &&
        Objects.equals(this.lineItems, pricingTaxableOrder.lineItems) &&
        Objects.equals(this.shippingAmount, pricingTaxableOrder.shippingAmount) &&
        Objects.equals(this.currencyCode, pricingTaxableOrder.currencyCode) &&
        Objects.equals(this.handlingFee, pricingTaxableOrder.handlingFee) &&
        Objects.equals(this.originalDocumentCode, pricingTaxableOrder.originalDocumentCode) &&
        Objects.equals(this.orderId, pricingTaxableOrder.orderId) &&
        Objects.equals(this.orderNumber, pricingTaxableOrder.orderNumber) &&
        Objects.equals(this.originalOrderDate, pricingTaxableOrder.originalOrderDate) &&
        Objects.equals(this.data, pricingTaxableOrder.data) &&
        Objects.equals(this.attributes, pricingTaxableOrder.attributes) &&
        Objects.equals(this.shippingDiscounts, pricingTaxableOrder.shippingDiscounts) &&
        Objects.equals(this.shippingDiscount, pricingTaxableOrder.shippingDiscount) &&
        Objects.equals(this.orderDiscounts, pricingTaxableOrder.orderDiscounts) &&
        Objects.equals(this.orderDiscount, pricingTaxableOrder.orderDiscount) &&
        Objects.equals(this.handlingDiscounts, pricingTaxableOrder.handlingDiscounts) &&
        Objects.equals(this.handlingDiscount, pricingTaxableOrder.handlingDiscount) &&
        Objects.equals(this.shippingMethodCode, pricingTaxableOrder.shippingMethodCode) &&
        Objects.equals(this.shippingMethodName, pricingTaxableOrder.shippingMethodName) &&
        Objects.equals(this.taxRequestType, pricingTaxableOrder.taxRequestType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderDate, taxContext, lineItems, shippingAmount, currencyCode, handlingFee, originalDocumentCode, orderId, orderNumber, originalOrderDate, data, attributes, shippingDiscounts, shippingDiscount, orderDiscounts, orderDiscount, handlingDiscounts, handlingDiscount, shippingMethodCode, shippingMethodName, taxRequestType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingTaxableOrder {\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    taxContext: ").append(toIndentedString(taxContext)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    handlingFee: ").append(toIndentedString(handlingFee)).append("\n");
    sb.append("    originalDocumentCode: ").append(toIndentedString(originalDocumentCode)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    originalOrderDate: ").append(toIndentedString(originalOrderDate)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    shippingDiscounts: ").append(toIndentedString(shippingDiscounts)).append("\n");
    sb.append("    shippingDiscount: ").append(toIndentedString(shippingDiscount)).append("\n");
    sb.append("    orderDiscounts: ").append(toIndentedString(orderDiscounts)).append("\n");
    sb.append("    orderDiscount: ").append(toIndentedString(orderDiscount)).append("\n");
    sb.append("    handlingDiscounts: ").append(toIndentedString(handlingDiscounts)).append("\n");
    sb.append("    handlingDiscount: ").append(toIndentedString(handlingDiscount)).append("\n");
    sb.append("    shippingMethodCode: ").append(toIndentedString(shippingMethodCode)).append("\n");
    sb.append("    shippingMethodName: ").append(toIndentedString(shippingMethodName)).append("\n");
    sb.append("    taxRequestType: ").append(toIndentedString(taxRequestType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderDate");
    openapiFields.add("taxContext");
    openapiFields.add("lineItems");
    openapiFields.add("shippingAmount");
    openapiFields.add("currencyCode");
    openapiFields.add("handlingFee");
    openapiFields.add("originalDocumentCode");
    openapiFields.add("orderId");
    openapiFields.add("orderNumber");
    openapiFields.add("originalOrderDate");
    openapiFields.add("data");
    openapiFields.add("attributes");
    openapiFields.add("shippingDiscounts");
    openapiFields.add("shippingDiscount");
    openapiFields.add("orderDiscounts");
    openapiFields.add("orderDiscount");
    openapiFields.add("handlingDiscounts");
    openapiFields.add("handlingDiscount");
    openapiFields.add("shippingMethodCode");
    openapiFields.add("shippingMethodName");
    openapiFields.add("taxRequestType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PricingTaxableOrder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PricingTaxableOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingTaxableOrder is not found in the empty JSON string", PricingTaxableOrder.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PricingTaxableOrder.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingTaxableOrder` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `taxContext`
      if (jsonObj.get("taxContext") != null && !jsonObj.get("taxContext").isJsonNull()) {
        PricingTaxContext.validateJsonObject(jsonObj.getAsJsonObject("taxContext"));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            PricingTaxableLineItem.validateJsonObject(jsonArraylineItems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("originalDocumentCode") != null && !jsonObj.get("originalDocumentCode").isJsonNull()) && !jsonObj.get("originalDocumentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalDocumentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalDocumentCode").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            PricingTaxAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("shippingDiscounts") != null && !jsonObj.get("shippingDiscounts").isJsonNull()) {
        JsonArray jsonArrayshippingDiscounts = jsonObj.getAsJsonArray("shippingDiscounts");
        if (jsonArrayshippingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shippingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shippingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("shippingDiscounts").toString()));
          }

          // validate the optional field `shippingDiscounts` (array)
          for (int i = 0; i < jsonArrayshippingDiscounts.size(); i++) {
            PricingAppliedOrderShippingDiscount.validateJsonObject(jsonArrayshippingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `shippingDiscount`
      if (jsonObj.get("shippingDiscount") != null && !jsonObj.get("shippingDiscount").isJsonNull()) {
        PricingAppliedOrderShippingDiscount.validateJsonObject(jsonObj.getAsJsonObject("shippingDiscount"));
      }
      if (jsonObj.get("orderDiscounts") != null && !jsonObj.get("orderDiscounts").isJsonNull()) {
        JsonArray jsonArrayorderDiscounts = jsonObj.getAsJsonArray("orderDiscounts");
        if (jsonArrayorderDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("orderDiscounts").toString()));
          }

          // validate the optional field `orderDiscounts` (array)
          for (int i = 0; i < jsonArrayorderDiscounts.size(); i++) {
            PricingAppliedDiscount.validateJsonObject(jsonArrayorderDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `orderDiscount`
      if (jsonObj.get("orderDiscount") != null && !jsonObj.get("orderDiscount").isJsonNull()) {
        PricingAppliedDiscount.validateJsonObject(jsonObj.getAsJsonObject("orderDiscount"));
      }
      if (jsonObj.get("handlingDiscounts") != null && !jsonObj.get("handlingDiscounts").isJsonNull()) {
        JsonArray jsonArrayhandlingDiscounts = jsonObj.getAsJsonArray("handlingDiscounts");
        if (jsonArrayhandlingDiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("handlingDiscounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `handlingDiscounts` to be an array in the JSON string but got `%s`", jsonObj.get("handlingDiscounts").toString()));
          }

          // validate the optional field `handlingDiscounts` (array)
          for (int i = 0; i < jsonArrayhandlingDiscounts.size(); i++) {
            PricingAppliedDiscount.validateJsonObject(jsonArrayhandlingDiscounts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `handlingDiscount`
      if (jsonObj.get("handlingDiscount") != null && !jsonObj.get("handlingDiscount").isJsonNull()) {
        PricingAppliedDiscount.validateJsonObject(jsonObj.getAsJsonObject("handlingDiscount"));
      }
      if ((jsonObj.get("shippingMethodCode") != null && !jsonObj.get("shippingMethodCode").isJsonNull()) && !jsonObj.get("shippingMethodCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethodCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethodCode").toString()));
      }
      if ((jsonObj.get("shippingMethodName") != null && !jsonObj.get("shippingMethodName").isJsonNull()) && !jsonObj.get("shippingMethodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethodName").toString()));
      }
      if ((jsonObj.get("taxRequestType") != null && !jsonObj.get("taxRequestType").isJsonNull()) && !jsonObj.get("taxRequestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxRequestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxRequestType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingTaxableOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingTaxableOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingTaxableOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingTaxableOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingTaxableOrder>() {
           @Override
           public void write(JsonWriter out, PricingTaxableOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingTaxableOrder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PricingTaxableOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PricingTaxableOrder
  * @throws IOException if the JSON string is invalid with respect to PricingTaxableOrder
  */
  public static PricingTaxableOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingTaxableOrder.class);
  }

 /**
  * Convert an instance of PricingTaxableOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

