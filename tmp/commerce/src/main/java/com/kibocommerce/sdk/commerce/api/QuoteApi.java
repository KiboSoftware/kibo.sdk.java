/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.commerce.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeShippingRate;
import com.kibocommerce.sdk.commerce.models.FulfillmentInfo;
import com.kibocommerce.sdk.commerce.models.Quote;
import com.kibocommerce.sdk.commerce.models.QuoteAdjustment;
import com.kibocommerce.sdk.commerce.models.QuoteCollection;
import com.kibocommerce.sdk.commerce.models.QuoteComment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QuoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public QuoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public QuoteApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public QuoteApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public QuoteApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addItemToQuote
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemToQuoteCall(String quoteId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderItem;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemToQuoteValidateBeforeCall(String quoteId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling addItemToQuote(Async)");
        }
        

        okhttp3.Call localVarCall = addItemToQuoteCall(quoteId, updateMode, commerceRuntimeOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Add Item To Quote
     * Adds an item to the Quote of the current shopper.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote addItemToQuote(String quoteId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        ApiResponse<Quote> localVarResp = addItemToQuoteWithHttpInfo(quoteId, updateMode, commerceRuntimeOrderItem);
        return localVarResp.getData();
    }

    /**
     * Add Item To Quote
     * Adds an item to the Quote of the current shopper.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> addItemToQuoteWithHttpInfo(String quoteId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        okhttp3.Call localVarCall = addItemToQuoteValidateBeforeCall(quoteId, updateMode, commerceRuntimeOrderItem, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Item To Quote (asynchronously)
     * Adds an item to the Quote of the current shopper.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addItemToQuoteAsync(String quoteId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemToQuoteValidateBeforeCall(quoteId, updateMode, commerceRuntimeOrderItem, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCoupon
     * @param quoteId Unique identifier of the quote with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponCall(String quoteId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/coupons/{couponCode}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCouponValidateBeforeCall(String quoteId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling applyCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling applyCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = applyCouponCall(quoteId, couponCode, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Apply Coupon
     * Apply a coupon to the quote.
     * @param quoteId Unique identifier of the quote with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote applyCoupon(String quoteId, String couponCode, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = applyCouponWithHttpInfo(quoteId, couponCode, updateMode);
        return localVarResp.getData();
    }

    /**
     * Apply Coupon
     * Apply a coupon to the quote.
     * @param quoteId Unique identifier of the quote with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> applyCouponWithHttpInfo(String quoteId, String couponCode, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(quoteId, couponCode, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Coupon (asynchronously)
     * Apply a coupon to the quote.
     * @param quoteId Unique identifier of the quote with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponAsync(String quoteId, String couponCode, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(quoteId, couponCode, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyQuote
     * @param quoteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyQuoteCall(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/copy"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyQuoteValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling copyQuote(Async)");
        }
        

        okhttp3.Call localVarCall = copyQuoteCall(quoteId, _callback);
        return localVarCall;

    }

    /**
     * Copy quote
     * Copies a source quote and creates a new quote.
     * @param quoteId  (required)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote copyQuote(String quoteId) throws ApiException {
        ApiResponse<Quote> localVarResp = copyQuoteWithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Copy quote
     * Copies a source quote and creates a new quote.
     * @param quoteId  (required)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> copyQuoteWithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = copyQuoteValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy quote (asynchronously)
     * Copies a source quote and creates a new quote.
     * @param quoteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyQuoteAsync(String quoteId, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyQuoteValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for create
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param updateMode  (optional)
     * @param quoteComment Comment which wanted to add on a quote. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCall(String quoteId, String updateMode, QuoteComment quoteComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteComment;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/comments"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String quoteId, String updateMode, QuoteComment quoteComment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling create(Async)");
        }
        

        okhttp3.Call localVarCall = createCall(quoteId, updateMode, quoteComment, _callback);
        return localVarCall;

    }

    /**
     * Create Comment
     * Create a comment on a specific quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param updateMode  (optional)
     * @param quoteComment Comment which wanted to add on a quote. (optional)
     * @return QuoteComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteComment create(String quoteId, String updateMode, QuoteComment quoteComment) throws ApiException {
        ApiResponse<QuoteComment> localVarResp = createWithHttpInfo(quoteId, updateMode, quoteComment);
        return localVarResp.getData();
    }

    /**
     * Create Comment
     * Create a comment on a specific quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param updateMode  (optional)
     * @param quoteComment Comment which wanted to add on a quote. (optional)
     * @return ApiResponse&lt;QuoteComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteComment> createWithHttpInfo(String quoteId, String updateMode, QuoteComment quoteComment) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(quoteId, updateMode, quoteComment, null);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Comment (asynchronously)
     * Create a comment on a specific quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param updateMode  (optional)
     * @param quoteComment Comment which wanted to add on a quote. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAsync(String quoteId, String updateMode, QuoteComment quoteComment, final ApiCallback<QuoteComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(quoteId, updateMode, quoteComment, _callback);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQuote
     * @param quote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteCall(Quote quote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quote;

        // create path and map variables
        String localVarPath = "/commerce/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuoteValidateBeforeCall(Quote quote, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createQuoteCall(quote, _callback);
        return localVarCall;

    }

    /**
     * Create quote
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     * @param quote  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote createQuote(Quote quote) throws ApiException {
        ApiResponse<Quote> localVarResp = createQuoteWithHttpInfo(quote);
        return localVarResp.getData();
    }

    /**
     * Create quote
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     * @param quote  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> createQuoteWithHttpInfo(Quote quote) throws ApiException {
        okhttp3.Call localVarCall = createQuoteValidateBeforeCall(quote, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create quote (asynchronously)
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     * @param quote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteAsync(Quote quote, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuoteValidateBeforeCall(quote, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createQuoteFromCart
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteFromCartCall(String cartId, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/create/{cartId}"
            .replaceAll("\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQuoteFromCartValidateBeforeCall(String cartId, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling createQuoteFromCart(Async)");
        }
        

        okhttp3.Call localVarCall = createQuoteFromCartCall(cartId, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Create Quote From Cart
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote createQuoteFromCart(String cartId, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = createQuoteFromCartWithHttpInfo(cartId, updateMode);
        return localVarResp.getData();
    }

    /**
     * Create Quote From Cart
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> createQuoteFromCartWithHttpInfo(String cartId, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = createQuoteFromCartValidateBeforeCall(cartId, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Quote From Cart (asynchronously)
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQuoteFromCartAsync(String cartId, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQuoteFromCartValidateBeforeCall(cartId, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteQuote
     * @param quoteId  (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQuoteCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQuoteValidateBeforeCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deleteQuote(Async)");
        }
        

        okhttp3.Call localVarCall = deleteQuoteCall(quoteId, draft, _callback);
        return localVarCall;

    }

    /**
     * Delete Quote
     * Deletes the quote specified by quote Id.
     * @param quoteId  (required)
     * @param draft  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteQuote(String quoteId, Boolean draft) throws ApiException {
        deleteQuoteWithHttpInfo(quoteId, draft);
    }

    /**
     * Delete Quote
     * Deletes the quote specified by quote Id.
     * @param quoteId  (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteQuoteWithHttpInfo(String quoteId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = deleteQuoteValidateBeforeCall(quoteId, draft, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Quote (asynchronously)
     * Deletes the quote specified by quote Id.
     * @param quoteId  (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQuoteAsync(String quoteId, Boolean draft, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQuoteValidateBeforeCall(quoteId, draft, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteQuoteItem
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQuoteItemCall(String quoteId, String quoteItemId, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items/{quoteItemId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "quoteItemId" + "\\}", localVarApiClient.escapeString(quoteItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQuoteItemValidateBeforeCall(String quoteId, String quoteItemId, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling deleteQuoteItem(Async)");
        }
        
        // verify the required parameter 'quoteItemId' is set
        if (quoteItemId == null) {
            throw new ApiException("Missing the required parameter 'quoteItemId' when calling deleteQuoteItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteQuoteItemCall(quoteId, quoteItemId, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Delete Quote Item
     * Delete Quote Item
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param updateMode  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteQuoteItem(String quoteId, String quoteItemId, String updateMode) throws ApiException {
        deleteQuoteItemWithHttpInfo(quoteId, quoteItemId, updateMode);
    }

    /**
     * Delete Quote Item
     * Delete Quote Item
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteQuoteItemWithHttpInfo(String quoteId, String quoteItemId, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = deleteQuoteItemValidateBeforeCall(quoteId, quoteItemId, updateMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Quote Item (asynchronously)
     * Delete Quote Item
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteQuoteItemAsync(String quoteId, String quoteItemId, String updateMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQuoteItemValidateBeforeCall(quoteId, quoteItemId, updateMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param commentId Unique identifier of the comment whose text you want to get. (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String quoteId, String commentId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/comments/{commentId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String quoteId, String commentId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling get(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(quoteId, commentId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Quote Comment
     * Retrieves a specific quote comment from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param commentId Unique identifier of the comment whose text you want to get. (required)
     * @param draft  (optional)
     * @return QuoteComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteComment get(String quoteId, String commentId, Boolean draft) throws ApiException {
        ApiResponse<QuoteComment> localVarResp = getWithHttpInfo(quoteId, commentId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Quote Comment
     * Retrieves a specific quote comment from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param commentId Unique identifier of the comment whose text you want to get. (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;QuoteComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteComment> getWithHttpInfo(String quoteId, String commentId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(quoteId, commentId, draft, null);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Comment (asynchronously)
     * Retrieves a specific quote comment from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param commentId Unique identifier of the comment whose text you want to get. (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String quoteId, String commentId, Boolean draft, final ApiCallback<QuoteComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(quoteId, commentId, draft, _callback);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAll
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCall(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/comments"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getAll(Async)");
        }
        

        okhttp3.Call localVarCall = getAllCall(quoteId, _callback);
        return localVarCall;

    }

    /**
     * Get All Quote Comments
     * Retrieves all quote comments from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @return QuoteComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteComment getAll(String quoteId) throws ApiException {
        ApiResponse<QuoteComment> localVarResp = getAllWithHttpInfo(quoteId);
        return localVarResp.getData();
    }

    /**
     * Get All Quote Comments
     * Retrieves all quote comments from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @return ApiResponse&lt;QuoteComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteComment> getAllWithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(quoteId, null);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Quote Comments (asynchronously)
     * Retrieves all quote comments from an quote.
     * @param quoteId Unique identifier of the quote whose comments you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAsync(String quoteId, final ApiCallback<QuoteComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(quoteId, _callback);
        Type localVarReturnType = new TypeToken<QuoteComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableShippingMethods
     * @param quoteId Unique identifier of the quote whose shipping methods you want to get. (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShippingMethodsCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/shippingMethods"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableShippingMethodsValidateBeforeCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getAvailableShippingMethods(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableShippingMethodsCall(quoteId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Available Shipping Methods
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     * @param quoteId Unique identifier of the quote whose shipping methods you want to get. (required)
     * @param draft  (optional)
     * @return List&lt;CommerceRuntimeShippingRate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeShippingRate> getAvailableShippingMethods(String quoteId, Boolean draft) throws ApiException {
        ApiResponse<List<CommerceRuntimeShippingRate>> localVarResp = getAvailableShippingMethodsWithHttpInfo(quoteId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Available Shipping Methods
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     * @param quoteId Unique identifier of the quote whose shipping methods you want to get. (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeShippingRate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeShippingRate>> getAvailableShippingMethodsWithHttpInfo(String quoteId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getAvailableShippingMethodsValidateBeforeCall(quoteId, draft, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Shipping Methods (asynchronously)
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     * @param quoteId Unique identifier of the quote whose shipping methods you want to get. (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShippingMethodsAsync(String quoteId, Boolean draft, final ApiCallback<List<CommerceRuntimeShippingRate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableShippingMethodsValidateBeforeCall(quoteId, draft, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeShippingRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuote
     * @param quoteId Unique identifier of the quote whose details you want. (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteValidateBeforeCall(String quoteId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getQuote(Async)");
        }
        

        okhttp3.Call localVarCall = getQuoteCall(quoteId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Quote
     * Retrieves the details of a quote specified by the quote ID.
     * @param quoteId Unique identifier of the quote whose details you want. (required)
     * @param draft  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote getQuote(String quoteId, Boolean draft) throws ApiException {
        ApiResponse<Quote> localVarResp = getQuoteWithHttpInfo(quoteId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Quote
     * Retrieves the details of a quote specified by the quote ID.
     * @param quoteId Unique identifier of the quote whose details you want. (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> getQuoteWithHttpInfo(String quoteId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(quoteId, draft, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote (asynchronously)
     * Retrieves the details of a quote specified by the quote ID.
     * @param quoteId Unique identifier of the quote whose details you want. (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsync(String quoteId, Boolean draft, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(quoteId, draft, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteByName
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteByNameCall(Integer customerAccountId, String quoteName, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/customers/{customerAccountId}/{quoteName}"
            .replaceAll("\\{" + "customerAccountId" + "\\}", localVarApiClient.escapeString(customerAccountId.toString()))
            .replaceAll("\\{" + "quoteName" + "\\}", localVarApiClient.escapeString(quoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteByNameValidateBeforeCall(Integer customerAccountId, String quoteName, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerAccountId' is set
        if (customerAccountId == null) {
            throw new ApiException("Missing the required parameter 'customerAccountId' when calling getQuoteByName(Async)");
        }
        
        // verify the required parameter 'quoteName' is set
        if (quoteName == null) {
            throw new ApiException("Missing the required parameter 'quoteName' when calling getQuoteByName(Async)");
        }
        

        okhttp3.Call localVarCall = getQuoteByNameCall(customerAccountId, quoteName, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Quote By Name
     * Retrieves quote by its name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param draft  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote getQuoteByName(Integer customerAccountId, String quoteName, Boolean draft) throws ApiException {
        ApiResponse<Quote> localVarResp = getQuoteByNameWithHttpInfo(customerAccountId, quoteName, draft);
        return localVarResp.getData();
    }

    /**
     * Get Quote By Name
     * Retrieves quote by its name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> getQuoteByNameWithHttpInfo(Integer customerAccountId, String quoteName, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getQuoteByNameValidateBeforeCall(customerAccountId, quoteName, draft, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote By Name (asynchronously)
     * Retrieves quote by its name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteByNameAsync(Integer customerAccountId, String quoteName, Boolean draft, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteByNameValidateBeforeCall(customerAccountId, quoteName, draft, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteItem
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param draft  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemCall(String quoteId, String quoteItemId, Boolean draft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items/{quoteItemId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "quoteItemId" + "\\}", localVarApiClient.escapeString(quoteItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (draft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("draft", draft));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteItemValidateBeforeCall(String quoteId, String quoteItemId, Boolean draft, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getQuoteItem(Async)");
        }
        
        // verify the required parameter 'quoteItemId' is set
        if (quoteItemId == null) {
            throw new ApiException("Missing the required parameter 'quoteItemId' when calling getQuoteItem(Async)");
        }
        

        okhttp3.Call localVarCall = getQuoteItemCall(quoteId, quoteItemId, draft, _callback);
        return localVarCall;

    }

    /**
     * Get Quote Item
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param draft  (optional)
     * @return CommerceRuntimeOrderItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeOrderItem getQuoteItem(String quoteId, String quoteItemId, Boolean draft) throws ApiException {
        ApiResponse<CommerceRuntimeOrderItem> localVarResp = getQuoteItemWithHttpInfo(quoteId, quoteItemId, draft);
        return localVarResp.getData();
    }

    /**
     * Get Quote Item
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param draft  (optional)
     * @return ApiResponse&lt;CommerceRuntimeOrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeOrderItem> getQuoteItemWithHttpInfo(String quoteId, String quoteItemId, Boolean draft) throws ApiException {
        okhttp3.Call localVarCall = getQuoteItemValidateBeforeCall(quoteId, quoteItemId, draft, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Item (asynchronously)
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     * @param quoteId  (required)
     * @param quoteItemId  (required)
     * @param draft  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemAsync(String quoteId, String quoteItemId, Boolean draft, final ApiCallback<CommerceRuntimeOrderItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteItemValidateBeforeCall(quoteId, quoteItemId, draft, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeOrderItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteItems
     * @param quoteId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemsCall(String quoteId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteItemsValidateBeforeCall(String quoteId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getQuoteItems(Async)");
        }
        

        okhttp3.Call localVarCall = getQuoteItemsCall(quoteId, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Quote Items
     * Returns a listing of Quotes
     * @param quoteId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return List&lt;CommerceRuntimeOrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderItem> getQuoteItems(String quoteId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderItem>> localVarResp = getQuoteItemsWithHttpInfo(quoteId, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Quote Items
     * Returns a listing of Quotes
     * @param quoteId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderItem>> getQuoteItemsWithHttpInfo(String quoteId, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getQuoteItemsValidateBeforeCall(quoteId, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Items (asynchronously)
     * Returns a listing of Quotes
     * @param quoteId  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemsAsync(String quoteId, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<List<CommerceRuntimeOrderItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteItemsValidateBeforeCall(quoteId, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteItemsByQuoteName
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemsByQuoteNameCall(Integer customerAccountId, String quoteName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/customers/{customerAccountId}/{quoteName}/items"
            .replaceAll("\\{" + "customerAccountId" + "\\}", localVarApiClient.escapeString(customerAccountId.toString()))
            .replaceAll("\\{" + "quoteName" + "\\}", localVarApiClient.escapeString(quoteName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteItemsByQuoteNameValidateBeforeCall(Integer customerAccountId, String quoteName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerAccountId' is set
        if (customerAccountId == null) {
            throw new ApiException("Missing the required parameter 'customerAccountId' when calling getQuoteItemsByQuoteName(Async)");
        }
        
        // verify the required parameter 'quoteName' is set
        if (quoteName == null) {
            throw new ApiException("Missing the required parameter 'quoteName' when calling getQuoteItemsByQuoteName(Async)");
        }
        

        okhttp3.Call localVarCall = getQuoteItemsByQuoteNameCall(customerAccountId, quoteName, startIndex, pageSize, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get Quote Items By Quote Name
     * Gets the quote specified by the quote name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return List&lt;CommerceRuntimeOrderItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderItem> getQuoteItemsByQuoteName(Integer customerAccountId, String quoteName, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderItem>> localVarResp = getQuoteItemsByQuoteNameWithHttpInfo(customerAccountId, quoteName, startIndex, pageSize, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get Quote Items By Quote Name
     * Gets the quote specified by the quote name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderItem>> getQuoteItemsByQuoteNameWithHttpInfo(Integer customerAccountId, String quoteName, Integer startIndex, Integer pageSize, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = getQuoteItemsByQuoteNameValidateBeforeCall(customerAccountId, quoteName, startIndex, pageSize, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quote Items By Quote Name (asynchronously)
     * Gets the quote specified by the quote name.
     * @param customerAccountId  (required)
     * @param quoteName  (required)
     * @param startIndex  (optional)
     * @param pageSize  (optional)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteItemsByQuoteNameAsync(Integer customerAccountId, String quoteName, Integer startIndex, Integer pageSize, String sortBy, String filter, final ApiCallback<List<CommerceRuntimeOrderItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteItemsByQuoteNameValidateBeforeCall(customerAccountId, quoteName, startIndex, pageSize, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuotes
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotesCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuotesValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getQuotesCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        return localVarCall;

    }

    /**
     * Get Quotes
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return QuoteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public QuoteCollection getQuotes(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        ApiResponse<QuoteCollection> localVarResp = getQuotesWithHttpInfo(startIndex, pageSize, sortBy, filter, q, qLimit);
        return localVarResp.getData();
    }

    /**
     * Get Quotes
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return ApiResponse&lt;QuoteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteCollection> getQuotesWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        okhttp3.Call localVarCall = getQuotesValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, null);
        Type localVarReturnType = new TypeToken<QuoteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Quotes (asynchronously)
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuotesAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback<QuoteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuotesValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        Type localVarReturnType = new TypeToken<QuoteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupon
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponCall(String quoteId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/coupons/{couponCode}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponValidateBeforeCall(String quoteId, String couponCode, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling removeCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling removeCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponCall(quoteId, couponCode, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote removeCoupon(String quoteId, String couponCode, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = removeCouponWithHttpInfo(quoteId, couponCode, updateMode);
        return localVarResp.getData();
    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> removeCouponWithHttpInfo(String quoteId, String couponCode, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(quoteId, couponCode, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupon (asynchronously)
     * Removes a coupon that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponAsync(String quoteId, String couponCode, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(quoteId, couponCode, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupons
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsCall(String quoteId, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/coupons"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponsValidateBeforeCall(String quoteId, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling removeCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponsCall(quoteId, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote removeCoupons(String quoteId, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = removeCouponsWithHttpInfo(quoteId, updateMode);
        return localVarResp.getData();
    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> removeCouponsWithHttpInfo(String quoteId, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(quoteId, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupons (asynchronously)
     * Removes all coupons that had been previously applied to the Quote.
     * @param quoteId Unique identifier of the Quote with the coupon you want to remove. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsAsync(String quoteId, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(quoteId, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendQuoteEmail
     * @param quoteId Unique identifier of the quote. (required)
     * @param requestBody optional list of email addresses (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendQuoteEmailCall(String quoteId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/email"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendQuoteEmailValidateBeforeCall(String quoteId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling sendQuoteEmail(Async)");
        }
        

        okhttp3.Call localVarCall = sendQuoteEmailCall(quoteId, requestBody, _callback);
        return localVarCall;

    }

    /**
     * Send Quote Email
     * Send Quote email to provided email addresses or email mentioned on the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param requestBody optional list of email addresses (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void sendQuoteEmail(String quoteId, List<String> requestBody) throws ApiException {
        sendQuoteEmailWithHttpInfo(quoteId, requestBody);
    }

    /**
     * Send Quote Email
     * Send Quote email to provided email addresses or email mentioned on the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param requestBody optional list of email addresses (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendQuoteEmailWithHttpInfo(String quoteId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = sendQuoteEmailValidateBeforeCall(quoteId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send Quote Email (asynchronously)
     * Send Quote email to provided email addresses or email mentioned on the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param requestBody optional list of email addresses (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendQuoteEmailAsync(String quoteId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendQuoteEmailValidateBeforeCall(quoteId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFulfillmentInfo
     * @param quoteId Unique identifier of the quote you want to update. (required)
     * @param updateMode  (optional)
     * @param fulfillmentInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFulfillmentInfoCall(String quoteId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fulfillmentInfo;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/fulfillmentInfo"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFulfillmentInfoValidateBeforeCall(String quoteId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateFulfillmentInfo(Async)");
        }
        

        okhttp3.Call localVarCall = updateFulfillmentInfoCall(quoteId, updateMode, fulfillmentInfo, _callback);
        return localVarCall;

    }

    /**
     * Update Fulfillment Info
     * Updates the fulfillmentInfo of quote.
     * @param quoteId Unique identifier of the quote you want to update. (required)
     * @param updateMode  (optional)
     * @param fulfillmentInfo  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateFulfillmentInfo(String quoteId, String updateMode, FulfillmentInfo fulfillmentInfo) throws ApiException {
        ApiResponse<Quote> localVarResp = updateFulfillmentInfoWithHttpInfo(quoteId, updateMode, fulfillmentInfo);
        return localVarResp.getData();
    }

    /**
     * Update Fulfillment Info
     * Updates the fulfillmentInfo of quote.
     * @param quoteId Unique identifier of the quote you want to update. (required)
     * @param updateMode  (optional)
     * @param fulfillmentInfo  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateFulfillmentInfoWithHttpInfo(String quoteId, String updateMode, FulfillmentInfo fulfillmentInfo) throws ApiException {
        okhttp3.Call localVarCall = updateFulfillmentInfoValidateBeforeCall(quoteId, updateMode, fulfillmentInfo, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Fulfillment Info (asynchronously)
     * Updates the fulfillmentInfo of quote.
     * @param quoteId Unique identifier of the quote you want to update. (required)
     * @param updateMode  (optional)
     * @param fulfillmentInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFulfillmentInfoAsync(String quoteId, String updateMode, FulfillmentInfo fulfillmentInfo, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFulfillmentInfoValidateBeforeCall(quoteId, updateMode, fulfillmentInfo, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemFulfillment
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem The quote item containing fulfillment information to update. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemFulfillmentCall(String quoteId, String quoteItemId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderItem;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items/{quoteItemId}/fulfillment"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "quoteItemId" + "\\}", localVarApiClient.escapeString(quoteItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemFulfillmentValidateBeforeCall(String quoteId, String quoteItemId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateItemFulfillment(Async)");
        }
        
        // verify the required parameter 'quoteItemId' is set
        if (quoteItemId == null) {
            throw new ApiException("Missing the required parameter 'quoteItemId' when calling updateItemFulfillment(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemFulfillmentCall(quoteId, quoteItemId, updateMode, commerceRuntimeOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Update Item Fulfillment
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem The quote item containing fulfillment information to update. (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateItemFulfillment(String quoteId, String quoteItemId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        ApiResponse<Quote> localVarResp = updateItemFulfillmentWithHttpInfo(quoteId, quoteItemId, updateMode, commerceRuntimeOrderItem);
        return localVarResp.getData();
    }

    /**
     * Update Item Fulfillment
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem The quote item containing fulfillment information to update. (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateItemFulfillmentWithHttpInfo(String quoteId, String quoteItemId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        okhttp3.Call localVarCall = updateItemFulfillmentValidateBeforeCall(quoteId, quoteItemId, updateMode, commerceRuntimeOrderItem, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Fulfillment (asynchronously)
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param updateMode  (optional)
     * @param commerceRuntimeOrderItem The quote item containing fulfillment information to update. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemFulfillmentAsync(String quoteId, String quoteItemId, String updateMode, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemFulfillmentValidateBeforeCall(quoteId, quoteItemId, updateMode, commerceRuntimeOrderItem, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemProductPrice
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param price New Price for the specified quote item. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemProductPriceCall(String quoteId, String quoteItemId, Double price, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items/{quoteItemId}/price/{price}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "quoteItemId" + "\\}", localVarApiClient.escapeString(quoteItemId.toString()))
            .replaceAll("\\{" + "price" + "\\}", localVarApiClient.escapeString(price.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemProductPriceValidateBeforeCall(String quoteId, String quoteItemId, Double price, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateItemProductPrice(Async)");
        }
        
        // verify the required parameter 'quoteItemId' is set
        if (quoteItemId == null) {
            throw new ApiException("Missing the required parameter 'quoteItemId' when calling updateItemProductPrice(Async)");
        }
        
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling updateItemProductPrice(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemProductPriceCall(quoteId, quoteItemId, price, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Update Item Product Price
     * Overrides the price of an individual quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param price New Price for the specified quote item. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateItemProductPrice(String quoteId, String quoteItemId, Double price, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = updateItemProductPriceWithHttpInfo(quoteId, quoteItemId, price, updateMode);
        return localVarResp.getData();
    }

    /**
     * Update Item Product Price
     * Overrides the price of an individual quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param price New Price for the specified quote item. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateItemProductPriceWithHttpInfo(String quoteId, String quoteItemId, Double price, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = updateItemProductPriceValidateBeforeCall(quoteId, quoteItemId, price, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Product Price (asynchronously)
     * Overrides the price of an individual quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param price New Price for the specified quote item. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemProductPriceAsync(String quoteId, String quoteItemId, Double price, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemProductPriceValidateBeforeCall(quoteId, quoteItemId, price, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemQuantity
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param quantity New quantity for the specified quote item. (required)
     * @param updateMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityCall(String quoteId, String quoteItemId, Integer quantity, String updateMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/items/{quoteItemId}/quantity/{quantity}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()))
            .replaceAll("\\{" + "quoteItemId" + "\\}", localVarApiClient.escapeString(quoteItemId.toString()))
            .replaceAll("\\{" + "quantity" + "\\}", localVarApiClient.escapeString(quantity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemQuantityValidateBeforeCall(String quoteId, String quoteItemId, Integer quantity, String updateMode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'quoteItemId' is set
        if (quoteItemId == null) {
            throw new ApiException("Missing the required parameter 'quoteItemId' when calling updateItemQuantity(Async)");
        }
        
        // verify the required parameter 'quantity' is set
        if (quantity == null) {
            throw new ApiException("Missing the required parameter 'quantity' when calling updateItemQuantity(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemQuantityCall(quoteId, quoteItemId, quantity, updateMode, _callback);
        return localVarCall;

    }

    /**
     * Update Item Quantity
     * Updates the quantity of an individual Quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param quantity New quantity for the specified quote item. (required)
     * @param updateMode  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateItemQuantity(String quoteId, String quoteItemId, Integer quantity, String updateMode) throws ApiException {
        ApiResponse<Quote> localVarResp = updateItemQuantityWithHttpInfo(quoteId, quoteItemId, quantity, updateMode);
        return localVarResp.getData();
    }

    /**
     * Update Item Quantity
     * Updates the quantity of an individual Quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param quantity New quantity for the specified quote item. (required)
     * @param updateMode  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateItemQuantityWithHttpInfo(String quoteId, String quoteItemId, Integer quantity, String updateMode) throws ApiException {
        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(quoteId, quoteItemId, quantity, updateMode, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Quantity (asynchronously)
     * Updates the quantity of an individual Quote item.
     * @param quoteId Unique identifier of the quote. (required)
     * @param quoteItemId Unique identifier of the quote item. (required)
     * @param quantity New quantity for the specified quote item. (required)
     * @param updateMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemQuantityAsync(String quoteId, String quoteItemId, Integer quantity, String updateMode, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemQuantityValidateBeforeCall(quoteId, quoteItemId, quantity, updateMode, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuote
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param quote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteCall(String quoteId, String updateMode, Quote quote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quote;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteValidateBeforeCall(String quoteId, String updateMode, Quote quote, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateQuote(Async)");
        }
        

        okhttp3.Call localVarCall = updateQuoteCall(quoteId, updateMode, quote, _callback);
        return localVarCall;

    }

    /**
     * Update Quote
     * Updates a quote specified by quote Id.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param quote  (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateQuote(String quoteId, String updateMode, Quote quote) throws ApiException {
        ApiResponse<Quote> localVarResp = updateQuoteWithHttpInfo(quoteId, updateMode, quote);
        return localVarResp.getData();
    }

    /**
     * Update Quote
     * Updates a quote specified by quote Id.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param quote  (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateQuoteWithHttpInfo(String quoteId, String updateMode, Quote quote) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteValidateBeforeCall(quoteId, updateMode, quote, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Quote (asynchronously)
     * Updates a quote specified by quote Id.
     * @param quoteId  (required)
     * @param updateMode  (optional)
     * @param quote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAsync(String quoteId, String updateMode, Quote quote, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteValidateBeforeCall(quoteId, updateMode, quote, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateQuoteAdjustments
     * @param quoteId Unique identifier of the quote. (required)
     * @param updateMode  (optional)
     * @param quoteAdjustment Adjustments to be added to the quote. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAdjustmentsCall(String quoteId, String updateMode, QuoteAdjustment quoteAdjustment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteAdjustment;

        // create path and map variables
        String localVarPath = "/commerce/quotes/{quoteId}/adjustments"
            .replaceAll("\\{" + "quoteId" + "\\}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateMode", updateMode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteAdjustmentsValidateBeforeCall(String quoteId, String updateMode, QuoteAdjustment quoteAdjustment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling updateQuoteAdjustments(Async)");
        }
        

        okhttp3.Call localVarCall = updateQuoteAdjustmentsCall(quoteId, updateMode, quoteAdjustment, _callback);
        return localVarCall;

    }

    /**
     * Update Quote Adjustments
     * Set product, shipping, and handling adjustments on the specified quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param updateMode  (optional)
     * @param quoteAdjustment Adjustments to be added to the quote. (optional)
     * @return Quote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Quote updateQuoteAdjustments(String quoteId, String updateMode, QuoteAdjustment quoteAdjustment) throws ApiException {
        ApiResponse<Quote> localVarResp = updateQuoteAdjustmentsWithHttpInfo(quoteId, updateMode, quoteAdjustment);
        return localVarResp.getData();
    }

    /**
     * Update Quote Adjustments
     * Set product, shipping, and handling adjustments on the specified quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param updateMode  (optional)
     * @param quoteAdjustment Adjustments to be added to the quote. (optional)
     * @return ApiResponse&lt;Quote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Quote> updateQuoteAdjustmentsWithHttpInfo(String quoteId, String updateMode, QuoteAdjustment quoteAdjustment) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteAdjustmentsValidateBeforeCall(quoteId, updateMode, quoteAdjustment, null);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Quote Adjustments (asynchronously)
     * Set product, shipping, and handling adjustments on the specified quote.
     * @param quoteId Unique identifier of the quote. (required)
     * @param updateMode  (optional)
     * @param quoteAdjustment Adjustments to be added to the quote. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateQuoteAdjustmentsAsync(String quoteId, String updateMode, QuoteAdjustment quoteAdjustment, final ApiCallback<Quote> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteAdjustmentsValidateBeforeCall(quoteId, updateMode, quoteAdjustment, _callback);
        Type localVarReturnType = new TypeToken<Quote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public QuoteApi build() {
            return new QuoteApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
