/*
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.commerce.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.commerce.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.commerce.models.Checkout;
import com.kibocommerce.sdk.commerce.models.CheckoutAction;
import com.kibocommerce.sdk.commerce.models.CheckoutCollection;
import com.kibocommerce.sdk.commerce.models.CheckoutGroupRates;
import com.kibocommerce.sdk.commerce.models.CheckoutGroupShippingMethod;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeDestination;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderAttribute;
import com.kibocommerce.sdk.commerce.models.CommerceRuntimeOrderItem;
import com.kibocommerce.sdk.commerce.models.DigitalWallet;
import com.kibocommerce.sdk.commerce.models.InventoryTags;
import com.kibocommerce.sdk.commerce.models.ItemsAndDeliveryDates;
import com.kibocommerce.sdk.commerce.models.ItemsForDestination;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.commerce.models.PaymentAction;
import com.kibocommerce.sdk.commerce.models.SubscriptionInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CheckoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public CheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public CheckoutApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public CheckoutApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public CheckoutApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCheckoutItem
     * @param checkoutId ID of the checkout to add an item to. (required)
     * @param commerceRuntimeOrderItem All properties of the new item. Required property: Product.ProductCode. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckoutItemCall(String checkoutId, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderItem;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCheckoutItemValidateBeforeCall(String checkoutId, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling addCheckoutItem(Async)");
        }
        

        okhttp3.Call localVarCall = addCheckoutItemCall(checkoutId, commerceRuntimeOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Add Checkout Item
     * Adds a product or other item to the checkout of the current shopper.
     * @param checkoutId ID of the checkout to add an item to. (required)
     * @param commerceRuntimeOrderItem All properties of the new item. Required property: Product.ProductCode. (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout addCheckoutItem(String checkoutId, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        ApiResponse<Checkout> localVarResp = addCheckoutItemWithHttpInfo(checkoutId, commerceRuntimeOrderItem);
        return localVarResp.getData();
    }

    /**
     * Add Checkout Item
     * Adds a product or other item to the checkout of the current shopper.
     * @param checkoutId ID of the checkout to add an item to. (required)
     * @param commerceRuntimeOrderItem All properties of the new item. Required property: Product.ProductCode. (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> addCheckoutItemWithHttpInfo(String checkoutId, CommerceRuntimeOrderItem commerceRuntimeOrderItem) throws ApiException {
        okhttp3.Call localVarCall = addCheckoutItemValidateBeforeCall(checkoutId, commerceRuntimeOrderItem, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Checkout Item (asynchronously)
     * Adds a product or other item to the checkout of the current shopper.
     * @param checkoutId ID of the checkout to add an item to. (required)
     * @param commerceRuntimeOrderItem All properties of the new item. Required property: Product.ProductCode. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCheckoutItemAsync(String checkoutId, CommerceRuntimeOrderItem commerceRuntimeOrderItem, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCheckoutItemValidateBeforeCall(checkoutId, commerceRuntimeOrderItem, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addDestination
     * @param checkoutId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDestinationCall(String checkoutId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeDestination;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/destinations"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDestinationValidateBeforeCall(String checkoutId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling addDestination(Async)");
        }
        

        okhttp3.Call localVarCall = addDestinationCall(checkoutId, commerceRuntimeDestination, _callback);
        return localVarCall;

    }

    /**
     * Add Destination
     * Adds a specific destination to the checkout.
     * @param checkoutId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @return CommerceRuntimeDestination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeDestination addDestination(String checkoutId, CommerceRuntimeDestination commerceRuntimeDestination) throws ApiException {
        ApiResponse<CommerceRuntimeDestination> localVarResp = addDestinationWithHttpInfo(checkoutId, commerceRuntimeDestination);
        return localVarResp.getData();
    }

    /**
     * Add Destination
     * Adds a specific destination to the checkout.
     * @param checkoutId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @return ApiResponse&lt;CommerceRuntimeDestination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeDestination> addDestinationWithHttpInfo(String checkoutId, CommerceRuntimeDestination commerceRuntimeDestination) throws ApiException {
        okhttp3.Call localVarCall = addDestinationValidateBeforeCall(checkoutId, commerceRuntimeDestination, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Destination (asynchronously)
     * Adds a specific destination to the checkout.
     * @param checkoutId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addDestinationAsync(String checkoutId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback<CommerceRuntimeDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDestinationValidateBeforeCall(checkoutId, commerceRuntimeDestination, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCoupon
     * @param checkoutId Unique identifier of the Checkout with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponCall(String checkoutId, String couponCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/coupons/{couponCode}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCouponValidateBeforeCall(String checkoutId, String couponCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling applyCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling applyCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = applyCouponCall(checkoutId, couponCode, _callback);
        return localVarCall;

    }

    /**
     * Apply Coupon
     * Apply a coupon to the Checkout.
     * @param checkoutId Unique identifier of the Checkout with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout applyCoupon(String checkoutId, String couponCode) throws ApiException {
        ApiResponse<Checkout> localVarResp = applyCouponWithHttpInfo(checkoutId, couponCode);
        return localVarResp.getData();
    }

    /**
     * Apply Coupon
     * Apply a coupon to the Checkout.
     * @param checkoutId Unique identifier of the Checkout with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> applyCouponWithHttpInfo(String checkoutId, String couponCode) throws ApiException {
        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(checkoutId, couponCode, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply Coupon (asynchronously)
     * Apply a coupon to the Checkout.
     * @param checkoutId Unique identifier of the Checkout with which to associate the coupon. (required)
     * @param couponCode Coupon code that the customer supplies to get the discounted price. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponAsync(String checkoutId, String couponCode, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(checkoutId, couponCode, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateDeliveryDates
     * @param checkoutId ID of the Checkout (required)
     * @param itemsAndDeliveryDates Pairings of Delivery Date and associated ItemIds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateDeliveryDatesCall(String checkoutId, List<ItemsAndDeliveryDates> itemsAndDeliveryDates, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemsAndDeliveryDates;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/deliverydates"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateDeliveryDatesValidateBeforeCall(String checkoutId, List<ItemsAndDeliveryDates> itemsAndDeliveryDates, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling bulkUpdateDeliveryDates(Async)");
        }
        

        okhttp3.Call localVarCall = bulkUpdateDeliveryDatesCall(checkoutId, itemsAndDeliveryDates, _callback);
        return localVarCall;

    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     * @param checkoutId ID of the Checkout (required)
     * @param itemsAndDeliveryDates Pairings of Delivery Date and associated ItemIds (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout bulkUpdateDeliveryDates(String checkoutId, List<ItemsAndDeliveryDates> itemsAndDeliveryDates) throws ApiException {
        ApiResponse<Checkout> localVarResp = bulkUpdateDeliveryDatesWithHttpInfo(checkoutId, itemsAndDeliveryDates);
        return localVarResp.getData();
    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     * @param checkoutId ID of the Checkout (required)
     * @param itemsAndDeliveryDates Pairings of Delivery Date and associated ItemIds (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> bulkUpdateDeliveryDatesWithHttpInfo(String checkoutId, List<ItemsAndDeliveryDates> itemsAndDeliveryDates) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateDeliveryDatesValidateBeforeCall(checkoutId, itemsAndDeliveryDates, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Delivery Dates of Items in bulk (asynchronously)
     * Update Delivery Dates of Items in bulk
     * @param checkoutId ID of the Checkout (required)
     * @param itemsAndDeliveryDates Pairings of Delivery Date and associated ItemIds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateDeliveryDatesAsync(String checkoutId, List<ItemsAndDeliveryDates> itemsAndDeliveryDates, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateDeliveryDatesValidateBeforeCall(checkoutId, itemsAndDeliveryDates, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkUpdateItemDestinations
     * @param checkoutId ID of the checkout (required)
     * @param itemsForDestination Pairings of destination IDs with their associated items by ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateItemDestinationsCall(String checkoutId, List<ItemsForDestination> itemsForDestination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemsForDestination;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/destinations"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateItemDestinationsValidateBeforeCall(String checkoutId, List<ItemsForDestination> itemsForDestination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling bulkUpdateItemDestinations(Async)");
        }
        

        okhttp3.Call localVarCall = bulkUpdateItemDestinationsCall(checkoutId, itemsForDestination, _callback);
        return localVarCall;

    }

    /**
     * Bulk Update Item Destinations
     * Associate items to destinations in bulk.
     * @param checkoutId ID of the checkout (required)
     * @param itemsForDestination Pairings of destination IDs with their associated items by ID (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout bulkUpdateItemDestinations(String checkoutId, List<ItemsForDestination> itemsForDestination) throws ApiException {
        ApiResponse<Checkout> localVarResp = bulkUpdateItemDestinationsWithHttpInfo(checkoutId, itemsForDestination);
        return localVarResp.getData();
    }

    /**
     * Bulk Update Item Destinations
     * Associate items to destinations in bulk.
     * @param checkoutId ID of the checkout (required)
     * @param itemsForDestination Pairings of destination IDs with their associated items by ID (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> bulkUpdateItemDestinationsWithHttpInfo(String checkoutId, List<ItemsForDestination> itemsForDestination) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateItemDestinationsValidateBeforeCall(checkoutId, itemsForDestination, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Update Item Destinations (asynchronously)
     * Associate items to destinations in bulk.
     * @param checkoutId ID of the checkout (required)
     * @param itemsForDestination Pairings of destination IDs with their associated items by ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpdateItemDestinationsAsync(String checkoutId, List<ItemsForDestination> itemsForDestination, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateItemDestinationsValidateBeforeCall(checkoutId, itemsForDestination, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeCheckoutPriceList
     * @param checkoutId Unique identifier of the checkout to change (required)
     * @param body The code for the pricelist to apply (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeCheckoutPriceListCall(String checkoutId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/priceList"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeCheckoutPriceListValidateBeforeCall(String checkoutId, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling changeCheckoutPriceList(Async)");
        }
        

        okhttp3.Call localVarCall = changeCheckoutPriceListCall(checkoutId, body, _callback);
        return localVarCall;

    }

    /**
     * Change Checkout PriceList
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * @param checkoutId Unique identifier of the checkout to change (required)
     * @param body The code for the pricelist to apply (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout changeCheckoutPriceList(String checkoutId, String body) throws ApiException {
        ApiResponse<Checkout> localVarResp = changeCheckoutPriceListWithHttpInfo(checkoutId, body);
        return localVarResp.getData();
    }

    /**
     * Change Checkout PriceList
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * @param checkoutId Unique identifier of the checkout to change (required)
     * @param body The code for the pricelist to apply (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> changeCheckoutPriceListWithHttpInfo(String checkoutId, String body) throws ApiException {
        okhttp3.Call localVarCall = changeCheckoutPriceListValidateBeforeCall(checkoutId, body, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Checkout PriceList (asynchronously)
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * @param checkoutId Unique identifier of the checkout to change (required)
     * @param body The code for the pricelist to apply (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeCheckoutPriceListAsync(String checkoutId, String body, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeCheckoutPriceListValidateBeforeCall(checkoutId, body, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCheckoutAttributes
     * @param checkoutId  (required)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckoutAttributesCall(String checkoutId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderAttribute;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/attributes"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckoutAttributesValidateBeforeCall(String checkoutId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling createCheckoutAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = createCheckoutAttributesCall(checkoutId, commerceRuntimeOrderAttribute, _callback);
        return localVarCall;

    }

    /**
     * Create Checkout Attributes
     * Creates list of checkout attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> createCheckoutAttributes(String checkoutId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = createCheckoutAttributesWithHttpInfo(checkoutId, commerceRuntimeOrderAttribute);
        return localVarResp.getData();
    }

    /**
     * Create Checkout Attributes
     * Creates list of checkout attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> createCheckoutAttributesWithHttpInfo(String checkoutId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        okhttp3.Call localVarCall = createCheckoutAttributesValidateBeforeCall(checkoutId, commerceRuntimeOrderAttribute, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Checkout Attributes (asynchronously)
     * Creates list of checkout attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckoutAttributesAsync(String checkoutId, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckoutAttributesValidateBeforeCall(checkoutId, commerceRuntimeOrderAttribute, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCheckoutFromCart
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckoutFromCartCall(String cartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cartId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cartId", cartId));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCheckoutFromCartValidateBeforeCall(String cartId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCheckoutFromCartCall(cartId, _callback);
        return localVarCall;

    }

    /**
     * Create Checkout From Cart
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout createCheckoutFromCart(String cartId) throws ApiException {
        ApiResponse<Checkout> localVarResp = createCheckoutFromCartWithHttpInfo(cartId);
        return localVarResp.getData();
    }

    /**
     * Create Checkout From Cart
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> createCheckoutFromCartWithHttpInfo(String cartId) throws ApiException {
        okhttp3.Call localVarCall = createCheckoutFromCartValidateBeforeCall(cartId, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Checkout From Cart (asynchronously)
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * @param cartId Unique identifier of the cart. This is the original cart ID expressed as a GUID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCheckoutFromCartAsync(String cartId, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCheckoutFromCartValidateBeforeCall(cartId, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentAction
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionCall(String checkoutId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/payments/actions"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentActionValidateBeforeCall(String checkoutId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling createPaymentAction(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentActionCall(checkoutId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout createPaymentAction(String checkoutId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<Checkout> localVarResp = createPaymentActionWithHttpInfo(checkoutId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Create Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> createPaymentActionWithHttpInfo(String checkoutId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = createPaymentActionValidateBeforeCall(checkoutId, paymentAction, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Action (asynchronously)
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentActionAsync(String checkoutId, PaymentAction paymentAction, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentActionValidateBeforeCall(checkoutId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCheckoutItem
     * @param checkoutId  (required)
     * @param itemId Unique identifier of the item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCheckoutItemCall(String checkoutId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCheckoutItemValidateBeforeCall(String checkoutId, String itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling deleteCheckoutItem(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteCheckoutItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCheckoutItemCall(checkoutId, itemId, _callback);
        return localVarCall;

    }

    /**
     * Delete Checkout Item
     * Removes a particular item from the checkout of the current shopper.
     * @param checkoutId  (required)
     * @param itemId Unique identifier of the item. (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout deleteCheckoutItem(String checkoutId, String itemId) throws ApiException {
        ApiResponse<Checkout> localVarResp = deleteCheckoutItemWithHttpInfo(checkoutId, itemId);
        return localVarResp.getData();
    }

    /**
     * Delete Checkout Item
     * Removes a particular item from the checkout of the current shopper.
     * @param checkoutId  (required)
     * @param itemId Unique identifier of the item. (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> deleteCheckoutItemWithHttpInfo(String checkoutId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteCheckoutItemValidateBeforeCall(checkoutId, itemId, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Checkout Item (asynchronously)
     * Removes a particular item from the checkout of the current shopper.
     * @param checkoutId  (required)
     * @param itemId Unique identifier of the item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCheckoutItemAsync(String checkoutId, String itemId, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCheckoutItemValidateBeforeCall(checkoutId, itemId, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableActions
     * @param checkoutId Unique identifier of the checkout whose available actions you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableActionsCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/actions"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableActionsValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getAvailableActions(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableActionsCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Actions
     * Retrieves available actions which depends on the status of the checkout.
     * @param checkoutId Unique identifier of the checkout whose available actions you want to get. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getAvailableActions(String checkoutId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getAvailableActionsWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Get Available Actions
     * Retrieves available actions which depends on the status of the checkout.
     * @param checkoutId Unique identifier of the checkout whose available actions you want to get. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getAvailableActionsWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableActionsValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Actions (asynchronously)
     * Retrieves available actions which depends on the status of the checkout.
     * @param checkoutId Unique identifier of the checkout whose available actions you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableActionsAsync(String checkoutId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableActionsValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableShippingMethods
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShippingMethodsCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/shippingMethods"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableShippingMethodsValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getAvailableShippingMethods(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableShippingMethodsCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Get Available Shipping Methods
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to get. (required)
     * @return List&lt;CheckoutGroupRates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CheckoutGroupRates> getAvailableShippingMethods(String checkoutId) throws ApiException {
        ApiResponse<List<CheckoutGroupRates>> localVarResp = getAvailableShippingMethodsWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Get Available Shipping Methods
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to get. (required)
     * @return ApiResponse&lt;List&lt;CheckoutGroupRates&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CheckoutGroupRates>> getAvailableShippingMethodsWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getAvailableShippingMethodsValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<List<CheckoutGroupRates>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Available Shipping Methods (asynchronously)
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableShippingMethodsAsync(String checkoutId, final ApiCallback<List<CheckoutGroupRates>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableShippingMethodsValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<List<CheckoutGroupRates>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckout
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getCheckout(Async)");
        }
        

        okhttp3.Call localVarCall = getCheckoutCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Get Checkout
     * Retrieves the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout getCheckout(String checkoutId) throws ApiException {
        ApiResponse<Checkout> localVarResp = getCheckoutWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Get Checkout
     * Retrieves the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> getCheckoutWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getCheckoutValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Checkout (asynchronously)
     * Retrieves the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutAsync(String checkoutId, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckoutAttributes
     * @param checkoutId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutAttributesCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/attributes"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutAttributesValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getCheckoutAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = getCheckoutAttributesCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Get Checkout Attributes
     * Gets the list of attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> getCheckoutAttributes(String checkoutId) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = getCheckoutAttributesWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Get Checkout Attributes
     * Gets the list of attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> getCheckoutAttributesWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getCheckoutAttributesValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Checkout Attributes (asynchronously)
     * Gets the list of attributes specified by checkout Id.
     * @param checkoutId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutAttributesAsync(String checkoutId, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutAttributesValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCheckouts
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutsCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (qLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qLimit", qLimit));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCheckoutsValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCheckoutsCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        return localVarCall;

    }

    /**
     * Get Checkouts
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return CheckoutCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CheckoutCollection getCheckouts(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        ApiResponse<CheckoutCollection> localVarResp = getCheckoutsWithHttpInfo(startIndex, pageSize, sortBy, filter, q, qLimit);
        return localVarResp.getData();
    }

    /**
     * Get Checkouts
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @return ApiResponse&lt;CheckoutCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckoutCollection> getCheckoutsWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit) throws ApiException {
        okhttp3.Call localVarCall = getCheckoutsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, null);
        Type localVarReturnType = new TypeToken<CheckoutCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Checkouts (asynchronously)
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional. (optional)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param q Text to perform a search on (optional)
     * @param qLimit Limit of the records to include in a search, used for global search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCheckoutsAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String q, Integer qLimit, final ApiCallback<CheckoutCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCheckoutsValidateBeforeCall(startIndex, pageSize, sortBy, filter, q, qLimit, _callback);
        Type localVarReturnType = new TypeToken<CheckoutCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDestination
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationCall(String checkoutId, String destinationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/destinations/{destinationId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "destinationId" + "\\}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationValidateBeforeCall(String checkoutId, String destinationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getDestination(Async)");
        }
        
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling getDestination(Async)");
        }
        

        okhttp3.Call localVarCall = getDestinationCall(checkoutId, destinationId, _callback);
        return localVarCall;

    }

    /**
     * Get Destination
     * Gets a destination specified by the checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @return CommerceRuntimeDestination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeDestination getDestination(String checkoutId, String destinationId) throws ApiException {
        ApiResponse<CommerceRuntimeDestination> localVarResp = getDestinationWithHttpInfo(checkoutId, destinationId);
        return localVarResp.getData();
    }

    /**
     * Get Destination
     * Gets a destination specified by the checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @return ApiResponse&lt;CommerceRuntimeDestination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeDestination> getDestinationWithHttpInfo(String checkoutId, String destinationId) throws ApiException {
        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(checkoutId, destinationId, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Destination (asynchronously)
     * Gets a destination specified by the checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationAsync(String checkoutId, String destinationId, final ApiCallback<CommerceRuntimeDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(checkoutId, destinationId, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDestinations
     * @param checkoutId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationsCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/destinations"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationsValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getDestinations(Async)");
        }
        

        okhttp3.Call localVarCall = getDestinationsCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Get Destinations
     * Gets all the destinations specified by the checkout Id.
     * @param checkoutId  (required)
     * @return List&lt;CommerceRuntimeDestination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeDestination> getDestinations(String checkoutId) throws ApiException {
        ApiResponse<List<CommerceRuntimeDestination>> localVarResp = getDestinationsWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Get Destinations
     * Gets all the destinations specified by the checkout Id.
     * @param checkoutId  (required)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeDestination&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeDestination>> getDestinationsWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = getDestinationsValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeDestination>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Destinations (asynchronously)
     * Gets all the destinations specified by the checkout Id.
     * @param checkoutId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDestinationsAsync(String checkoutId, final ApiCallback<List<CommerceRuntimeDestination>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDestinationsValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeDestination>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performCheckoutAction
     * @param checkoutId Unique identifier of the checkout. (required)
     * @param checkoutAction The action to perform (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performCheckoutActionCall(String checkoutId, CheckoutAction checkoutAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutAction;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/actions"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performCheckoutActionValidateBeforeCall(String checkoutId, CheckoutAction checkoutAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling performCheckoutAction(Async)");
        }
        

        okhttp3.Call localVarCall = performCheckoutActionCall(checkoutId, checkoutAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Checkout Action
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * @param checkoutId Unique identifier of the checkout. (required)
     * @param checkoutAction The action to perform (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout performCheckoutAction(String checkoutId, CheckoutAction checkoutAction) throws ApiException {
        ApiResponse<Checkout> localVarResp = performCheckoutActionWithHttpInfo(checkoutId, checkoutAction);
        return localVarResp.getData();
    }

    /**
     * Perform Checkout Action
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * @param checkoutId Unique identifier of the checkout. (required)
     * @param checkoutAction The action to perform (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> performCheckoutActionWithHttpInfo(String checkoutId, CheckoutAction checkoutAction) throws ApiException {
        okhttp3.Call localVarCall = performCheckoutActionValidateBeforeCall(checkoutId, checkoutAction, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Checkout Action (asynchronously)
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * @param checkoutId Unique identifier of the checkout. (required)
     * @param checkoutAction The action to perform (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performCheckoutActionAsync(String checkoutId, CheckoutAction checkoutAction, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = performCheckoutActionValidateBeforeCall(checkoutId, checkoutAction, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for performPaymentAction
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionCall(String checkoutId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentAction;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "paymentId" + "\\}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performPaymentActionValidateBeforeCall(String checkoutId, String paymentId, PaymentAction paymentAction, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling performPaymentAction(Async)");
        }
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling performPaymentAction(Async)");
        }
        

        okhttp3.Call localVarCall = performPaymentActionCall(checkoutId, paymentId, paymentAction, _callback);
        return localVarCall;

    }

    /**
     * Perform Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout performPaymentAction(String checkoutId, String paymentId, PaymentAction paymentAction) throws ApiException {
        ApiResponse<Checkout> localVarResp = performPaymentActionWithHttpInfo(checkoutId, paymentId, paymentAction);
        return localVarResp.getData();
    }

    /**
     * Perform Payment Action
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> performPaymentActionWithHttpInfo(String checkoutId, String paymentId, PaymentAction paymentAction) throws ApiException {
        okhttp3.Call localVarCall = performPaymentActionValidateBeforeCall(checkoutId, paymentId, paymentAction, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform Payment Action (asynchronously)
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * @param checkoutId Unique identifier of the checkout whose payment action you want to change. (required)
     * @param paymentId  (required)
     * @param paymentAction Action to be performed, along with any metadata. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call performPaymentActionAsync(String checkoutId, String paymentId, PaymentAction paymentAction, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = performPaymentActionValidateBeforeCall(checkoutId, paymentId, paymentAction, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processDigitalWallet
     * @param checkoutId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processDigitalWalletCall(String checkoutId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = digitalWallet;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "digitalWalletType" + "\\}", localVarApiClient.escapeString(digitalWalletType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processDigitalWalletValidateBeforeCall(String checkoutId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling processDigitalWallet(Async)");
        }
        
        // verify the required parameter 'digitalWalletType' is set
        if (digitalWalletType == null) {
            throw new ApiException("Missing the required parameter 'digitalWalletType' when calling processDigitalWallet(Async)");
        }
        

        okhttp3.Call localVarCall = processDigitalWalletCall(checkoutId, digitalWalletType, digitalWallet, _callback);
        return localVarCall;

    }

    /**
     * Process Digital Wallet
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * @param checkoutId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout processDigitalWallet(String checkoutId, String digitalWalletType, DigitalWallet digitalWallet) throws ApiException {
        ApiResponse<Checkout> localVarResp = processDigitalWalletWithHttpInfo(checkoutId, digitalWalletType, digitalWallet);
        return localVarResp.getData();
    }

    /**
     * Process Digital Wallet
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * @param checkoutId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> processDigitalWalletWithHttpInfo(String checkoutId, String digitalWalletType, DigitalWallet digitalWallet) throws ApiException {
        okhttp3.Call localVarCall = processDigitalWalletValidateBeforeCall(checkoutId, digitalWalletType, digitalWallet, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process Digital Wallet (asynchronously)
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * @param checkoutId  (required)
     * @param digitalWalletType  (required)
     * @param digitalWallet  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call processDigitalWalletAsync(String checkoutId, String digitalWalletType, DigitalWallet digitalWallet, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = processDigitalWalletValidateBeforeCall(checkoutId, digitalWalletType, digitalWallet, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupon
     * @param checkoutId Unique identifier of the checkout with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponCall(String checkoutId, String couponCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/coupons/{couponCode}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "couponCode" + "\\}", localVarApiClient.escapeString(couponCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponValidateBeforeCall(String checkoutId, String couponCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling removeCoupon(Async)");
        }
        
        // verify the required parameter 'couponCode' is set
        if (couponCode == null) {
            throw new ApiException("Missing the required parameter 'couponCode' when calling removeCoupon(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponCall(checkoutId, couponCode, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the checkout with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout removeCoupon(String checkoutId, String couponCode) throws ApiException {
        ApiResponse<Checkout> localVarResp = removeCouponWithHttpInfo(checkoutId, couponCode);
        return localVarResp.getData();
    }

    /**
     * Remove Coupon
     * Removes a coupon that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the checkout with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> removeCouponWithHttpInfo(String checkoutId, String couponCode) throws ApiException {
        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(checkoutId, couponCode, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupon (asynchronously)
     * Removes a coupon that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the checkout with the coupon you want to remove. (required)
     * @param couponCode Coupon code to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponAsync(String checkoutId, String couponCode, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(checkoutId, couponCode, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupons
     * @param checkoutId Unique identifier of the order with the coupon you want to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/coupons"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponsValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling removeCoupons(Async)");
        }
        

        okhttp3.Call localVarCall = removeCouponsCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the order with the coupon you want to remove. (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout removeCoupons(String checkoutId) throws ApiException {
        ApiResponse<Checkout> localVarResp = removeCouponsWithHttpInfo(checkoutId);
        return localVarResp.getData();
    }

    /**
     * Remove Coupons
     * Removes all coupons that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the order with the coupon you want to remove. (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> removeCouponsWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(checkoutId, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Coupons (asynchronously)
     * Removes all coupons that had been previously applied to the checkout.
     * @param checkoutId Unique identifier of the order with the coupon you want to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponsAsync(String checkoutId, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponsValidateBeforeCall(checkoutId, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeDestination
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDestinationCall(String checkoutId, String destinationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/destinations/{destinationId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "destinationId" + "\\}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDestinationValidateBeforeCall(String checkoutId, String destinationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling removeDestination(Async)");
        }
        
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling removeDestination(Async)");
        }
        

        okhttp3.Call localVarCall = removeDestinationCall(checkoutId, destinationId, _callback);
        return localVarCall;

    }

    /**
     * Remove Destination
     * Removes a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void removeDestination(String checkoutId, String destinationId) throws ApiException {
        removeDestinationWithHttpInfo(checkoutId, destinationId);
    }

    /**
     * Remove Destination
     * Removes a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeDestinationWithHttpInfo(String checkoutId, String destinationId) throws ApiException {
        okhttp3.Call localVarCall = removeDestinationValidateBeforeCall(checkoutId, destinationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Destination (asynchronously)
     * Removes a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeDestinationAsync(String checkoutId, String destinationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDestinationValidateBeforeCall(checkoutId, destinationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendCheckoutConfirmationEmail
     * @param checkoutId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCheckoutConfirmationEmailCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/email/resend"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendCheckoutConfirmationEmailValidateBeforeCall(String checkoutId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling resendCheckoutConfirmationEmail(Async)");
        }
        

        okhttp3.Call localVarCall = resendCheckoutConfirmationEmailCall(checkoutId, _callback);
        return localVarCall;

    }

    /**
     * Resend Checkout Confirmation Email
     * esends email on checkout confirmation.
     * @param checkoutId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void resendCheckoutConfirmationEmail(String checkoutId) throws ApiException {
        resendCheckoutConfirmationEmailWithHttpInfo(checkoutId);
    }

    /**
     * Resend Checkout Confirmation Email
     * esends email on checkout confirmation.
     * @param checkoutId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendCheckoutConfirmationEmailWithHttpInfo(String checkoutId) throws ApiException {
        okhttp3.Call localVarCall = resendCheckoutConfirmationEmailValidateBeforeCall(checkoutId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Checkout Confirmation Email (asynchronously)
     * esends email on checkout confirmation.
     * @param checkoutId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendCheckoutConfirmationEmailAsync(String checkoutId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendCheckoutConfirmationEmailValidateBeforeCall(checkoutId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setShippingMethods
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to set. (required)
     * @param checkoutGroupShippingMethod Pairings of checkout group to shipping method (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setShippingMethodsCall(String checkoutId, List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkoutGroupShippingMethod;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/shippingMethods"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setShippingMethodsValidateBeforeCall(String checkoutId, List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling setShippingMethods(Async)");
        }
        

        okhttp3.Call localVarCall = setShippingMethodsCall(checkoutId, checkoutGroupShippingMethod, _callback);
        return localVarCall;

    }

    /**
     * Set Shipping Methods
     * Sets the shipping method for specified groupings.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to set. (required)
     * @param checkoutGroupShippingMethod Pairings of checkout group to shipping method (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout setShippingMethods(String checkoutId, List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod) throws ApiException {
        ApiResponse<Checkout> localVarResp = setShippingMethodsWithHttpInfo(checkoutId, checkoutGroupShippingMethod);
        return localVarResp.getData();
    }

    /**
     * Set Shipping Methods
     * Sets the shipping method for specified groupings.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to set. (required)
     * @param checkoutGroupShippingMethod Pairings of checkout group to shipping method (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> setShippingMethodsWithHttpInfo(String checkoutId, List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod) throws ApiException {
        okhttp3.Call localVarCall = setShippingMethodsValidateBeforeCall(checkoutId, checkoutGroupShippingMethod, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Shipping Methods (asynchronously)
     * Sets the shipping method for specified groupings.
     * @param checkoutId Unique identifier of the checkout whose shipping methods you want to set. (required)
     * @param checkoutGroupShippingMethod Pairings of checkout group to shipping method (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setShippingMethodsAsync(String checkoutId, List<CheckoutGroupShippingMethod> checkoutGroupShippingMethod, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = setShippingMethodsValidateBeforeCall(checkoutId, checkoutGroupShippingMethod, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitItem
     * @param checkoutId ID of the checkout containing the item to split (required)
     * @param itemId The ID of the item to split (required)
     * @param quantity What quantity to split off. Defaults to 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitItemCall(String checkoutId, String itemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}/split"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitItemValidateBeforeCall(String checkoutId, String itemId, Integer quantity, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling splitItem(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling splitItem(Async)");
        }
        

        okhttp3.Call localVarCall = splitItemCall(checkoutId, itemId, quantity, _callback);
        return localVarCall;

    }

    /**
     * Split Item
     * Splits an existing item into two. The new item&#39;s quantity will be !:quantity and the original item&#39;s quantity will be reduced accordingly.
     * @param checkoutId ID of the checkout containing the item to split (required)
     * @param itemId The ID of the item to split (required)
     * @param quantity What quantity to split off. Defaults to 1. (optional, default to 1)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout splitItem(String checkoutId, String itemId, Integer quantity) throws ApiException {
        ApiResponse<Checkout> localVarResp = splitItemWithHttpInfo(checkoutId, itemId, quantity);
        return localVarResp.getData();
    }

    /**
     * Split Item
     * Splits an existing item into two. The new item&#39;s quantity will be !:quantity and the original item&#39;s quantity will be reduced accordingly.
     * @param checkoutId ID of the checkout containing the item to split (required)
     * @param itemId The ID of the item to split (required)
     * @param quantity What quantity to split off. Defaults to 1. (optional, default to 1)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> splitItemWithHttpInfo(String checkoutId, String itemId, Integer quantity) throws ApiException {
        okhttp3.Call localVarCall = splitItemValidateBeforeCall(checkoutId, itemId, quantity, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Split Item (asynchronously)
     * Splits an existing item into two. The new item&#39;s quantity will be !:quantity and the original item&#39;s quantity will be reduced accordingly.
     * @param checkoutId ID of the checkout containing the item to split (required)
     * @param itemId The ID of the item to split (required)
     * @param quantity What quantity to split off. Defaults to 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitItemAsync(String checkoutId, String itemId, Integer quantity, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitItemValidateBeforeCall(checkoutId, itemId, quantity, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCheckout
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param checkout Checkout that needs update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutCall(String checkoutId, Checkout checkout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkout;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckoutValidateBeforeCall(String checkoutId, Checkout checkout, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateCheckout(Async)");
        }
        

        okhttp3.Call localVarCall = updateCheckoutCall(checkoutId, checkout, _callback);
        return localVarCall;

    }

    /**
     * Update Checkout
     * Updates the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param checkout Checkout that needs update (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout updateCheckout(String checkoutId, Checkout checkout) throws ApiException {
        ApiResponse<Checkout> localVarResp = updateCheckoutWithHttpInfo(checkoutId, checkout);
        return localVarResp.getData();
    }

    /**
     * Update Checkout
     * Updates the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param checkout Checkout that needs update (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> updateCheckoutWithHttpInfo(String checkoutId, Checkout checkout) throws ApiException {
        okhttp3.Call localVarCall = updateCheckoutValidateBeforeCall(checkoutId, checkout, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Checkout (asynchronously)
     * Updates the details of a checkout specified by the checkout ID.
     * @param checkoutId Unique identifier of the checkout whose details you want. (required)
     * @param checkout Checkout that needs update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutAsync(String checkoutId, Checkout checkout, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckoutValidateBeforeCall(checkoutId, checkout, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCheckoutAttribute
     * @param checkoutId  (required)
     * @param removeMissing  (optional, default to false)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutAttributeCall(String checkoutId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeOrderAttribute;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/attributes"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (removeMissing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("removeMissing", removeMissing));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCheckoutAttributeValidateBeforeCall(String checkoutId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateCheckoutAttribute(Async)");
        }
        

        okhttp3.Call localVarCall = updateCheckoutAttributeCall(checkoutId, removeMissing, commerceRuntimeOrderAttribute, _callback);
        return localVarCall;

    }

    /**
     * Update Checkout Attribute
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * @param checkoutId  (required)
     * @param removeMissing  (optional, default to false)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @return List&lt;CommerceRuntimeOrderAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommerceRuntimeOrderAttribute> updateCheckoutAttribute(String checkoutId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        ApiResponse<List<CommerceRuntimeOrderAttribute>> localVarResp = updateCheckoutAttributeWithHttpInfo(checkoutId, removeMissing, commerceRuntimeOrderAttribute);
        return localVarResp.getData();
    }

    /**
     * Update Checkout Attribute
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * @param checkoutId  (required)
     * @param removeMissing  (optional, default to false)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @return ApiResponse&lt;List&lt;CommerceRuntimeOrderAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommerceRuntimeOrderAttribute>> updateCheckoutAttributeWithHttpInfo(String checkoutId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateCheckoutAttributeValidateBeforeCall(checkoutId, removeMissing, commerceRuntimeOrderAttribute, null);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Checkout Attribute (asynchronously)
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * @param checkoutId  (required)
     * @param removeMissing  (optional, default to false)
     * @param commerceRuntimeOrderAttribute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCheckoutAttributeAsync(String checkoutId, Boolean removeMissing, List<CommerceRuntimeOrderAttribute> commerceRuntimeOrderAttribute, final ApiCallback<List<CommerceRuntimeOrderAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCheckoutAttributeValidateBeforeCall(checkoutId, removeMissing, commerceRuntimeOrderAttribute, _callback);
        Type localVarReturnType = new TypeToken<List<CommerceRuntimeOrderAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDestination
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDestinationCall(String checkoutId, String destinationId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commerceRuntimeDestination;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/destinations/{destinationId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "destinationId" + "\\}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDestinationValidateBeforeCall(String checkoutId, String destinationId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateDestination(Async)");
        }
        
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling updateDestination(Async)");
        }
        

        okhttp3.Call localVarCall = updateDestinationCall(checkoutId, destinationId, commerceRuntimeDestination, _callback);
        return localVarCall;

    }

    /**
     * Update Destination
     * Updates a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @return CommerceRuntimeDestination
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CommerceRuntimeDestination updateDestination(String checkoutId, String destinationId, CommerceRuntimeDestination commerceRuntimeDestination) throws ApiException {
        ApiResponse<CommerceRuntimeDestination> localVarResp = updateDestinationWithHttpInfo(checkoutId, destinationId, commerceRuntimeDestination);
        return localVarResp.getData();
    }

    /**
     * Update Destination
     * Updates a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @return ApiResponse&lt;CommerceRuntimeDestination&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommerceRuntimeDestination> updateDestinationWithHttpInfo(String checkoutId, String destinationId, CommerceRuntimeDestination commerceRuntimeDestination) throws ApiException {
        okhttp3.Call localVarCall = updateDestinationValidateBeforeCall(checkoutId, destinationId, commerceRuntimeDestination, null);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Destination (asynchronously)
     * Updates a destination specified by checkout Id and destination Id.
     * @param checkoutId  (required)
     * @param destinationId  (required)
     * @param commerceRuntimeDestination  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDestinationAsync(String checkoutId, String destinationId, CommerceRuntimeDestination commerceRuntimeDestination, final ApiCallback<CommerceRuntimeDestination> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDestinationValidateBeforeCall(checkoutId, destinationId, commerceRuntimeDestination, _callback);
        Type localVarReturnType = new TypeToken<CommerceRuntimeDestination>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemDeliveryDate
     * @param checkoutId ID of the Checkout (required)
     * @param itemId ID of the item to update (required)
     * @param body Delivery DateTme to update to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDeliveryDateCall(String checkoutId, String itemId, OffsetDateTime body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}/deliverydate"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemDeliveryDateValidateBeforeCall(String checkoutId, String itemId, OffsetDateTime body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateItemDeliveryDate(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateItemDeliveryDate(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemDeliveryDateCall(checkoutId, itemId, body, _callback);
        return localVarCall;

    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     * @param checkoutId ID of the Checkout (required)
     * @param itemId ID of the item to update (required)
     * @param body Delivery DateTme to update to (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout updateItemDeliveryDate(String checkoutId, String itemId, OffsetDateTime body) throws ApiException {
        ApiResponse<Checkout> localVarResp = updateItemDeliveryDateWithHttpInfo(checkoutId, itemId, body);
        return localVarResp.getData();
    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     * @param checkoutId ID of the Checkout (required)
     * @param itemId ID of the item to update (required)
     * @param body Delivery DateTme to update to (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> updateItemDeliveryDateWithHttpInfo(String checkoutId, String itemId, OffsetDateTime body) throws ApiException {
        okhttp3.Call localVarCall = updateItemDeliveryDateValidateBeforeCall(checkoutId, itemId, body, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the Delivery Date of the Item (asynchronously)
     * Update the Delivery Date of the Item
     * @param checkoutId ID of the Checkout (required)
     * @param itemId ID of the item to update (required)
     * @param body Delivery DateTme to update to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDeliveryDateAsync(String checkoutId, String itemId, OffsetDateTime body, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemDeliveryDateValidateBeforeCall(checkoutId, itemId, body, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItemDestination
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param destinationId ID of the destination (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDestinationCall(String checkoutId, String itemId, String destinationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "destinationId" + "\\}", localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemDestinationValidateBeforeCall(String checkoutId, String itemId, String destinationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateItemDestination(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateItemDestination(Async)");
        }
        
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException("Missing the required parameter 'destinationId' when calling updateItemDestination(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemDestinationCall(checkoutId, itemId, destinationId, _callback);
        return localVarCall;

    }

    /**
     * Update Item Destination
     * Associate an item to a destination.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param destinationId ID of the destination (required)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout updateItemDestination(String checkoutId, String itemId, String destinationId) throws ApiException {
        ApiResponse<Checkout> localVarResp = updateItemDestinationWithHttpInfo(checkoutId, itemId, destinationId);
        return localVarResp.getData();
    }

    /**
     * Update Item Destination
     * Associate an item to a destination.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param destinationId ID of the destination (required)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> updateItemDestinationWithHttpInfo(String checkoutId, String itemId, String destinationId) throws ApiException {
        okhttp3.Call localVarCall = updateItemDestinationValidateBeforeCall(checkoutId, itemId, destinationId, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Destination (asynchronously)
     * Associate an item to a destination.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param destinationId ID of the destination (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemDestinationAsync(String checkoutId, String itemId, String destinationId, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemDestinationValidateBeforeCall(checkoutId, itemId, destinationId, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionInfo
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param subscriptionInfo The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionInfoCall(String checkoutId, String itemId, SubscriptionInfo subscriptionInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionInfo;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}/subscriptionInfo"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionInfoValidateBeforeCall(String checkoutId, String itemId, SubscriptionInfo subscriptionInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling updateSubscriptionInfo(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateSubscriptionInfo(Async)");
        }
        

        okhttp3.Call localVarCall = updateSubscriptionInfoCall(checkoutId, itemId, subscriptionInfo, _callback);
        return localVarCall;

    }

    /**
     * Update Item Subscription Info
     * Updates the subscription info on the Item.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param subscriptionInfo The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout updateSubscriptionInfo(String checkoutId, String itemId, SubscriptionInfo subscriptionInfo) throws ApiException {
        ApiResponse<Checkout> localVarResp = updateSubscriptionInfoWithHttpInfo(checkoutId, itemId, subscriptionInfo);
        return localVarResp.getData();
    }

    /**
     * Update Item Subscription Info
     * Updates the subscription info on the Item.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param subscriptionInfo The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> updateSubscriptionInfoWithHttpInfo(String checkoutId, String itemId, SubscriptionInfo subscriptionInfo) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionInfoValidateBeforeCall(checkoutId, itemId, subscriptionInfo, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Item Subscription Info (asynchronously)
     * Updates the subscription info on the Item.
     * @param checkoutId ID of the checkout (required)
     * @param itemId ID of the item to update (required)
     * @param subscriptionInfo The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionInfoAsync(String checkoutId, String itemId, SubscriptionInfo subscriptionInfo, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionInfoValidateBeforeCall(checkoutId, itemId, subscriptionInfo, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertInventoryTags
     * @param checkoutId  (required)
     * @param itemId  (required)
     * @param inventoryTags  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsCall(String checkoutId, String itemId, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inventoryTags;

        // create path and map variables
        String localVarPath = "/commerce/checkouts/{checkoutId}/items/{itemId}/upsert-inventory-tags"
            .replaceAll("\\{" + "checkoutId" + "\\}", localVarApiClient.escapeString(checkoutId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertInventoryTagsValidateBeforeCall(String checkoutId, String itemId, List<InventoryTags> inventoryTags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling upsertInventoryTags(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling upsertInventoryTags(Async)");
        }
        

        okhttp3.Call localVarCall = upsertInventoryTagsCall(checkoutId, itemId, inventoryTags, _callback);
        return localVarCall;

    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     * @param checkoutId  (required)
     * @param itemId  (required)
     * @param inventoryTags  (optional)
     * @return Checkout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Checkout upsertInventoryTags(String checkoutId, String itemId, List<InventoryTags> inventoryTags) throws ApiException {
        ApiResponse<Checkout> localVarResp = upsertInventoryTagsWithHttpInfo(checkoutId, itemId, inventoryTags);
        return localVarResp.getData();
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     * @param checkoutId  (required)
     * @param itemId  (required)
     * @param inventoryTags  (optional)
     * @return ApiResponse&lt;Checkout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Checkout> upsertInventoryTagsWithHttpInfo(String checkoutId, String itemId, List<InventoryTags> inventoryTags) throws ApiException {
        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(checkoutId, itemId, inventoryTags, null);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Inventory Tags (asynchronously)
     * Upsert Inventory Tags
     * @param checkoutId  (required)
     * @param itemId  (required)
     * @param inventoryTags  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertInventoryTagsAsync(String checkoutId, String itemId, List<InventoryTags> inventoryTags, final ApiCallback<Checkout> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertInventoryTagsValidateBeforeCall(checkoutId, itemId, inventoryTags, _callback);
        Type localVarReturnType = new TypeToken<Checkout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public CheckoutApi build() {
            return new CheckoutApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
