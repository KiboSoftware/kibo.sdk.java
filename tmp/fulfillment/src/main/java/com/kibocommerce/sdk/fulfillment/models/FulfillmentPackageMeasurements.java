/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.fulfillment.models.FulfillmentMeasurement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FulfillmentPackageMeasurements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FulfillmentPackageMeasurements implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = null;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private FulfillmentMeasurement height;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private FulfillmentMeasurement length;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private FulfillmentMeasurement weight;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private FulfillmentMeasurement width;

  public FulfillmentPackageMeasurements() {
  }

  public FulfillmentPackageMeasurements attributes(Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public FulfillmentPackageMeasurements putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public FulfillmentPackageMeasurements height(FulfillmentMeasurement height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentMeasurement getHeight() {
    return height;
  }


  public void setHeight(FulfillmentMeasurement height) {
    this.height = height;
  }


  public FulfillmentPackageMeasurements length(FulfillmentMeasurement length) {
    
    this.length = length;
    return this;
  }

   /**
   * Get length
   * @return length
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentMeasurement getLength() {
    return length;
  }


  public void setLength(FulfillmentMeasurement length) {
    this.length = length;
  }


  public FulfillmentPackageMeasurements weight(FulfillmentMeasurement weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Get weight
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentMeasurement getWeight() {
    return weight;
  }


  public void setWeight(FulfillmentMeasurement weight) {
    this.weight = weight;
  }


  public FulfillmentPackageMeasurements width(FulfillmentMeasurement width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FulfillmentMeasurement getWidth() {
    return width;
  }


  public void setWidth(FulfillmentMeasurement width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FulfillmentPackageMeasurements fulfillmentPackageMeasurements = (FulfillmentPackageMeasurements) o;
    return Objects.equals(this.attributes, fulfillmentPackageMeasurements.attributes) &&
        Objects.equals(this.height, fulfillmentPackageMeasurements.height) &&
        Objects.equals(this.length, fulfillmentPackageMeasurements.length) &&
        Objects.equals(this.weight, fulfillmentPackageMeasurements.weight) &&
        Objects.equals(this.width, fulfillmentPackageMeasurements.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, height, length, weight, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FulfillmentPackageMeasurements {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("height");
    openapiFields.add("length");
    openapiFields.add("weight");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FulfillmentPackageMeasurements
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FulfillmentPackageMeasurements.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FulfillmentPackageMeasurements is not found in the empty JSON string", FulfillmentPackageMeasurements.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FulfillmentPackageMeasurements.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FulfillmentPackageMeasurements` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `height`
      if (jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) {
        FulfillmentMeasurement.validateJsonObject(jsonObj.getAsJsonObject("height"));
      }
      // validate the optional field `length`
      if (jsonObj.get("length") != null && !jsonObj.get("length").isJsonNull()) {
        FulfillmentMeasurement.validateJsonObject(jsonObj.getAsJsonObject("length"));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        FulfillmentMeasurement.validateJsonObject(jsonObj.getAsJsonObject("weight"));
      }
      // validate the optional field `width`
      if (jsonObj.get("width") != null && !jsonObj.get("width").isJsonNull()) {
        FulfillmentMeasurement.validateJsonObject(jsonObj.getAsJsonObject("width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FulfillmentPackageMeasurements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FulfillmentPackageMeasurements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FulfillmentPackageMeasurements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FulfillmentPackageMeasurements.class));

       return (TypeAdapter<T>) new TypeAdapter<FulfillmentPackageMeasurements>() {
           @Override
           public void write(JsonWriter out, FulfillmentPackageMeasurements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FulfillmentPackageMeasurements read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FulfillmentPackageMeasurements given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FulfillmentPackageMeasurements
  * @throws IOException if the JSON string is invalid with respect to FulfillmentPackageMeasurements
  */
  public static FulfillmentPackageMeasurements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FulfillmentPackageMeasurements.class);
  }

 /**
  * Convert an instance of FulfillmentPackageMeasurements to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

