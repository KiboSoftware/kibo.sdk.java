/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.fulfillment.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.fulfillment.models.EntityModelOfWorkflowProcess;
import com.kibocommerce.sdk.fulfillment.models.PagedModelOfEntityModelOfWorkflowProcess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FulfillmentWorkflowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public FulfillmentWorkflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentWorkflowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public FulfillmentWorkflowApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public FulfillmentWorkflowApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public FulfillmentWorkflowApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDefinitionImageUsingGET
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionImageUsingGETCall(String containerIdOrAlias, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/definitionImage/{containerIdOrAlias}/{processId}"
            .replaceAll("\\{" + "containerIdOrAlias" + "\\}", localVarApiClient.escapeString(containerIdOrAlias.toString()))
            .replaceAll("\\{" + "processId" + "\\}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/svg+xml", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefinitionImageUsingGETValidateBeforeCall(String containerIdOrAlias, String processId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerIdOrAlias' is set
        if (containerIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'containerIdOrAlias' when calling getDefinitionImageUsingGET(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling getDefinitionImageUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getDefinitionImageUsingGETCall(containerIdOrAlias, processId, _callback);
        return localVarCall;

    }

    /**
     * Get Definition Image
     * Get Definition Image
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public String getDefinitionImageUsingGET(String containerIdOrAlias, String processId) throws ApiException {
        ApiResponse<String> localVarResp = getDefinitionImageUsingGETWithHttpInfo(containerIdOrAlias, processId);
        return localVarResp.getData();
    }

    /**
     * Get Definition Image
     * Get Definition Image
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getDefinitionImageUsingGETWithHttpInfo(String containerIdOrAlias, String processId) throws ApiException {
        okhttp3.Call localVarCall = getDefinitionImageUsingGETValidateBeforeCall(containerIdOrAlias, processId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Definition Image (asynchronously)
     * Get Definition Image
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefinitionImageUsingGETAsync(String containerIdOrAlias, String processId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefinitionImageUsingGETValidateBeforeCall(containerIdOrAlias, processId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkflowProcessByShipmentTypeLocationCodeUsingGET
     * @param shipmentType shipmentType (required)
     * @param locationCode locationCode (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessByShipmentTypeLocationCodeUsingGETCall(String shipmentType, String locationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/shipmentType/{shipmentType}/location/{locationCode}"
            .replaceAll("\\{" + "shipmentType" + "\\}", localVarApiClient.escapeString(shipmentType.toString()))
            .replaceAll("\\{" + "locationCode" + "\\}", localVarApiClient.escapeString(locationCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowProcessByShipmentTypeLocationCodeUsingGETValidateBeforeCall(String shipmentType, String locationCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shipmentType' is set
        if (shipmentType == null) {
            throw new ApiException("Missing the required parameter 'shipmentType' when calling getWorkflowProcessByShipmentTypeLocationCodeUsingGET(Async)");
        }
        
        // verify the required parameter 'locationCode' is set
        if (locationCode == null) {
            throw new ApiException("Missing the required parameter 'locationCode' when calling getWorkflowProcessByShipmentTypeLocationCodeUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationCodeUsingGETCall(shipmentType, locationCode, _callback);
        return localVarCall;

    }

    /**
     * Get Workflow Process by Shipment Type and Location Code
     * Get Workflow Process by Shipment Type and Location Code
     * @param shipmentType shipmentType (required)
     * @param locationCode locationCode (required)
     * @return EntityModelOfWorkflowProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfWorkflowProcess getWorkflowProcessByShipmentTypeLocationCodeUsingGET(String shipmentType, String locationCode) throws ApiException {
        ApiResponse<EntityModelOfWorkflowProcess> localVarResp = getWorkflowProcessByShipmentTypeLocationCodeUsingGETWithHttpInfo(shipmentType, locationCode);
        return localVarResp.getData();
    }

    /**
     * Get Workflow Process by Shipment Type and Location Code
     * Get Workflow Process by Shipment Type and Location Code
     * @param shipmentType shipmentType (required)
     * @param locationCode locationCode (required)
     * @return ApiResponse&lt;EntityModelOfWorkflowProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfWorkflowProcess> getWorkflowProcessByShipmentTypeLocationCodeUsingGETWithHttpInfo(String shipmentType, String locationCode) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationCodeUsingGETValidateBeforeCall(shipmentType, locationCode, null);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Workflow Process by Shipment Type and Location Code (asynchronously)
     * Get Workflow Process by Shipment Type and Location Code
     * @param shipmentType shipmentType (required)
     * @param locationCode locationCode (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessByShipmentTypeLocationCodeUsingGETAsync(String shipmentType, String locationCode, final ApiCallback<EntityModelOfWorkflowProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationCodeUsingGETValidateBeforeCall(shipmentType, locationCode, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET
     * @param shipmentType shipmentType (required)
     * @param locationGroupCode locationGroupCode (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETCall(String shipmentType, String locationGroupCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/shipmentType/{shipmentType}/locationGroup/{locationGroupCode}"
            .replaceAll("\\{" + "shipmentType" + "\\}", localVarApiClient.escapeString(shipmentType.toString()))
            .replaceAll("\\{" + "locationGroupCode" + "\\}", localVarApiClient.escapeString(locationGroupCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETValidateBeforeCall(String shipmentType, String locationGroupCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shipmentType' is set
        if (shipmentType == null) {
            throw new ApiException("Missing the required parameter 'shipmentType' when calling getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET(Async)");
        }
        
        // verify the required parameter 'locationGroupCode' is set
        if (locationGroupCode == null) {
            throw new ApiException("Missing the required parameter 'locationGroupCode' when calling getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETCall(shipmentType, locationGroupCode, _callback);
        return localVarCall;

    }

    /**
     * Get Workflow Process by Shipment Type and Location Group Code
     * Get Workflow Process by Shipment Type and Location Group Code
     * @param shipmentType shipmentType (required)
     * @param locationGroupCode locationGroupCode (required)
     * @return EntityModelOfWorkflowProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfWorkflowProcess getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET(String shipmentType, String locationGroupCode) throws ApiException {
        ApiResponse<EntityModelOfWorkflowProcess> localVarResp = getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETWithHttpInfo(shipmentType, locationGroupCode);
        return localVarResp.getData();
    }

    /**
     * Get Workflow Process by Shipment Type and Location Group Code
     * Get Workflow Process by Shipment Type and Location Group Code
     * @param shipmentType shipmentType (required)
     * @param locationGroupCode locationGroupCode (required)
     * @return ApiResponse&lt;EntityModelOfWorkflowProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfWorkflowProcess> getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETWithHttpInfo(String shipmentType, String locationGroupCode) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETValidateBeforeCall(shipmentType, locationGroupCode, null);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Workflow Process by Shipment Type and Location Group Code (asynchronously)
     * Get Workflow Process by Shipment Type and Location Group Code
     * @param shipmentType shipmentType (required)
     * @param locationGroupCode locationGroupCode (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETAsync(String shipmentType, String locationGroupCode, final ApiCallback<EntityModelOfWorkflowProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETValidateBeforeCall(shipmentType, locationGroupCode, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkflowProcessByShipmentTypeUsingGET
     * @param shipmentType shipmentType (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getWorkflowProcessByShipmentTypeUsingGETCall(String shipmentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/shipmentType/{shipmentType}"
            .replaceAll("\\{" + "shipmentType" + "\\}", localVarApiClient.escapeString(shipmentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowProcessByShipmentTypeUsingGETValidateBeforeCall(String shipmentType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shipmentType' is set
        if (shipmentType == null) {
            throw new ApiException("Missing the required parameter 'shipmentType' when calling getWorkflowProcessByShipmentTypeUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeUsingGETCall(shipmentType, _callback);
        return localVarCall;

    }

    /**
     * Get Workflow Process by Shipment Type
     * Get Workflow Process by Shipment Type
     * @param shipmentType shipmentType (required)
     * @return EntityModelOfWorkflowProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EntityModelOfWorkflowProcess getWorkflowProcessByShipmentTypeUsingGET(String shipmentType) throws ApiException {
        ApiResponse<EntityModelOfWorkflowProcess> localVarResp = getWorkflowProcessByShipmentTypeUsingGETWithHttpInfo(shipmentType);
        return localVarResp.getData();
    }

    /**
     * Get Workflow Process by Shipment Type
     * Get Workflow Process by Shipment Type
     * @param shipmentType shipmentType (required)
     * @return ApiResponse&lt;EntityModelOfWorkflowProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EntityModelOfWorkflowProcess> getWorkflowProcessByShipmentTypeUsingGETWithHttpInfo(String shipmentType) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeUsingGETValidateBeforeCall(shipmentType, null);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Workflow Process by Shipment Type (asynchronously)
     * Get Workflow Process by Shipment Type
     * @param shipmentType shipmentType (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getWorkflowProcessByShipmentTypeUsingGETAsync(String shipmentType, final ApiCallback<EntityModelOfWorkflowProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowProcessByShipmentTypeUsingGETValidateBeforeCall(shipmentType, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkflowProcessUsingGET
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessUsingGETCall(String containerIdOrAlias, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/definitions/{containerIdOrAlias}/{processId}"
            .replaceAll("\\{" + "containerIdOrAlias" + "\\}", localVarApiClient.escapeString(containerIdOrAlias.toString()))
            .replaceAll("\\{" + "processId" + "\\}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowProcessUsingGETValidateBeforeCall(String containerIdOrAlias, String processId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'containerIdOrAlias' is set
        if (containerIdOrAlias == null) {
            throw new ApiException("Missing the required parameter 'containerIdOrAlias' when calling getWorkflowProcessUsingGET(Async)");
        }
        
        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling getWorkflowProcessUsingGET(Async)");
        }
        

        okhttp3.Call localVarCall = getWorkflowProcessUsingGETCall(containerIdOrAlias, processId, _callback);
        return localVarCall;

    }

    /**
     * Get Workflow Process
     * Get Workflow Process
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @return EntityModelOfWorkflowProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntityModelOfWorkflowProcess getWorkflowProcessUsingGET(String containerIdOrAlias, String processId) throws ApiException {
        ApiResponse<EntityModelOfWorkflowProcess> localVarResp = getWorkflowProcessUsingGETWithHttpInfo(containerIdOrAlias, processId);
        return localVarResp.getData();
    }

    /**
     * Get Workflow Process
     * Get Workflow Process
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @return ApiResponse&lt;EntityModelOfWorkflowProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityModelOfWorkflowProcess> getWorkflowProcessUsingGETWithHttpInfo(String containerIdOrAlias, String processId) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowProcessUsingGETValidateBeforeCall(containerIdOrAlias, processId, null);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Workflow Process (asynchronously)
     * Get Workflow Process
     * @param containerIdOrAlias containerIdOrAlias (required)
     * @param processId processId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessUsingGETAsync(String containerIdOrAlias, String processId, final ApiCallback<EntityModelOfWorkflowProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowProcessUsingGETValidateBeforeCall(containerIdOrAlias, processId, _callback);
        Type localVarReturnType = new TypeToken<EntityModelOfWorkflowProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWorkflowProcessesUsingGET
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessesUsingGETCall(Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/processes/definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "application/hal+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkflowProcessesUsingGETValidateBeforeCall(Integer page, Integer pageSize, String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getWorkflowProcessesUsingGETCall(page, pageSize, sort, _callback);
        return localVarCall;

    }

    /**
     * Get Workflow Processes
     * Get Workflow Processes
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return PagedModelOfEntityModelOfWorkflowProcess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PagedModelOfEntityModelOfWorkflowProcess getWorkflowProcessesUsingGET(Integer page, Integer pageSize, String sort) throws ApiException {
        ApiResponse<PagedModelOfEntityModelOfWorkflowProcess> localVarResp = getWorkflowProcessesUsingGETWithHttpInfo(page, pageSize, sort);
        return localVarResp.getData();
    }

    /**
     * Get Workflow Processes
     * Get Workflow Processes
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;PagedModelOfEntityModelOfWorkflowProcess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedModelOfEntityModelOfWorkflowProcess> getWorkflowProcessesUsingGETWithHttpInfo(Integer page, Integer pageSize, String sort) throws ApiException {
        okhttp3.Call localVarCall = getWorkflowProcessesUsingGETValidateBeforeCall(page, pageSize, sort, null);
        Type localVarReturnType = new TypeToken<PagedModelOfEntityModelOfWorkflowProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Workflow Processes (asynchronously)
     * Get Workflow Processes
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWorkflowProcessesUsingGETAsync(Integer page, Integer pageSize, String sort, final ApiCallback<PagedModelOfEntityModelOfWorkflowProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkflowProcessesUsingGETValidateBeforeCall(page, pageSize, sort, _callback);
        Type localVarReturnType = new TypeToken<PagedModelOfEntityModelOfWorkflowProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public FulfillmentWorkflowApi build() {
            return new FulfillmentWorkflowApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
