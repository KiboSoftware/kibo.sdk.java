/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.fulfillment.models.BinShipmentProductQuantity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ClosePickWave
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ClosePickWave implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = null;

  public static final String SERIALIZED_NAME_CREATE_RECOVERY = "createRecovery";
  @SerializedName(SERIALIZED_NAME_CREATE_RECOVERY)
  private Boolean createRecovery;

  public static final String SERIALIZED_NAME_QUANTITIES = "quantities";
  @SerializedName(SERIALIZED_NAME_QUANTITIES)
  private List<BinShipmentProductQuantity> quantities = null;

  public ClosePickWave() {
  }

  public ClosePickWave attributes(Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public ClosePickWave putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public ClosePickWave createRecovery(Boolean createRecovery) {
    
    this.createRecovery = createRecovery;
    return this;
  }

   /**
   * Get createRecovery
   * @return createRecovery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCreateRecovery() {
    return createRecovery;
  }


  public void setCreateRecovery(Boolean createRecovery) {
    this.createRecovery = createRecovery;
  }


  public ClosePickWave quantities(List<BinShipmentProductQuantity> quantities) {
    
    this.quantities = quantities;
    return this;
  }

  public ClosePickWave addQuantitiesItem(BinShipmentProductQuantity quantitiesItem) {
    if (this.quantities == null) {
      this.quantities = new ArrayList<>();
    }
    this.quantities.add(quantitiesItem);
    return this;
  }

   /**
   * Get quantities
   * @return quantities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<BinShipmentProductQuantity> getQuantities() {
    return quantities;
  }


  public void setQuantities(List<BinShipmentProductQuantity> quantities) {
    this.quantities = quantities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClosePickWave closePickWave = (ClosePickWave) o;
    return Objects.equals(this.attributes, closePickWave.attributes) &&
        Objects.equals(this.createRecovery, closePickWave.createRecovery) &&
        Objects.equals(this.quantities, closePickWave.quantities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, createRecovery, quantities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClosePickWave {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    createRecovery: ").append(toIndentedString(createRecovery)).append("\n");
    sb.append("    quantities: ").append(toIndentedString(quantities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("createRecovery");
    openapiFields.add("quantities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClosePickWave
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ClosePickWave.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClosePickWave is not found in the empty JSON string", ClosePickWave.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ClosePickWave.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClosePickWave` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("quantities") != null && !jsonObj.get("quantities").isJsonNull()) {
        JsonArray jsonArrayquantities = jsonObj.getAsJsonArray("quantities");
        if (jsonArrayquantities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quantities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quantities` to be an array in the JSON string but got `%s`", jsonObj.get("quantities").toString()));
          }

          // validate the optional field `quantities` (array)
          for (int i = 0; i < jsonArrayquantities.size(); i++) {
            BinShipmentProductQuantity.validateJsonObject(jsonArrayquantities.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClosePickWave.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClosePickWave' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClosePickWave> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClosePickWave.class));

       return (TypeAdapter<T>) new TypeAdapter<ClosePickWave>() {
           @Override
           public void write(JsonWriter out, ClosePickWave value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClosePickWave read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClosePickWave given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClosePickWave
  * @throws IOException if the JSON string is invalid with respect to ClosePickWave
  */
  public static ClosePickWave fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClosePickWave.class);
  }

 /**
  * Convert an instance of ClosePickWave to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

