/*
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.fulfillment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.fulfillment.models.ReassignItem;
import com.kibocommerce.sdk.fulfillment.models.ReassignedReason;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ReassignShipment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReassignShipment implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_BLOCK_ASSIGNMENT = "blockAssignment";
  @SerializedName(SERIALIZED_NAME_BLOCK_ASSIGNMENT)
  private Boolean blockAssignment;

  public static final String SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE = "fulfillmentLocationCode";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_LOCATION_CODE)
  private String fulfillmentLocationCode;

  public static final String SERIALIZED_NAME_IS_USER_ACTION = "isUserAction";
  @SerializedName(SERIALIZED_NAME_IS_USER_ACTION)
  private Boolean isUserAction;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ReassignItem> items = null;

  public static final String SERIALIZED_NAME_REASSIGNED_REASON = "reassignedReason";
  @SerializedName(SERIALIZED_NAME_REASSIGNED_REASON)
  private ReassignedReason reassignedReason;

  public ReassignShipment() {
  }

  public ReassignShipment blockAssignment(Boolean blockAssignment) {
    
    this.blockAssignment = blockAssignment;
    return this;
  }

   /**
   * If true, order routing will not suggest that any shipments with these items be assigned to the original location. This persists until the inventory records for these items are updated. When the records are updated, blockAssignment will automatically be disabled again to allow new assignments. This is an optional parameter and defaults to false if not provided in the request.
   * @return blockAssignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If true, order routing will not suggest that any shipments with these items be assigned to the original location. This persists until the inventory records for these items are updated. When the records are updated, blockAssignment will automatically be disabled again to allow new assignments. This is an optional parameter and defaults to false if not provided in the request.")

  public Boolean getBlockAssignment() {
    return blockAssignment;
  }


  public void setBlockAssignment(Boolean blockAssignment) {
    this.blockAssignment = blockAssignment;
  }


  public ReassignShipment fulfillmentLocationCode(String fulfillmentLocationCode) {
    
    this.fulfillmentLocationCode = fulfillmentLocationCode;
    return this;
  }

   /**
   * Get fulfillmentLocationCode
   * @return fulfillmentLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFulfillmentLocationCode() {
    return fulfillmentLocationCode;
  }


  public void setFulfillmentLocationCode(String fulfillmentLocationCode) {
    this.fulfillmentLocationCode = fulfillmentLocationCode;
  }


  public ReassignShipment isUserAction(Boolean isUserAction) {
    
    this.isUserAction = isUserAction;
    return this;
  }

   /**
   * Get isUserAction
   * @return isUserAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsUserAction() {
    return isUserAction;
  }


  public void setIsUserAction(Boolean isUserAction) {
    this.isUserAction = isUserAction;
  }


  public ReassignShipment items(List<ReassignItem> items) {
    
    this.items = items;
    return this;
  }

  public ReassignShipment addItemsItem(ReassignItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReassignItem> getItems() {
    return items;
  }


  public void setItems(List<ReassignItem> items) {
    this.items = items;
  }


  public ReassignShipment reassignedReason(ReassignedReason reassignedReason) {
    
    this.reassignedReason = reassignedReason;
    return this;
  }

   /**
   * Get reassignedReason
   * @return reassignedReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReassignedReason getReassignedReason() {
    return reassignedReason;
  }


  public void setReassignedReason(ReassignedReason reassignedReason) {
    this.reassignedReason = reassignedReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReassignShipment reassignShipment = (ReassignShipment) o;
    return Objects.equals(this.blockAssignment, reassignShipment.blockAssignment) &&
        Objects.equals(this.fulfillmentLocationCode, reassignShipment.fulfillmentLocationCode) &&
        Objects.equals(this.isUserAction, reassignShipment.isUserAction) &&
        Objects.equals(this.items, reassignShipment.items) &&
        Objects.equals(this.reassignedReason, reassignShipment.reassignedReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockAssignment, fulfillmentLocationCode, isUserAction, items, reassignedReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReassignShipment {\n");
    sb.append("    blockAssignment: ").append(toIndentedString(blockAssignment)).append("\n");
    sb.append("    fulfillmentLocationCode: ").append(toIndentedString(fulfillmentLocationCode)).append("\n");
    sb.append("    isUserAction: ").append(toIndentedString(isUserAction)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    reassignedReason: ").append(toIndentedString(reassignedReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockAssignment");
    openapiFields.add("fulfillmentLocationCode");
    openapiFields.add("isUserAction");
    openapiFields.add("items");
    openapiFields.add("reassignedReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReassignShipment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReassignShipment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReassignShipment is not found in the empty JSON string", ReassignShipment.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ReassignShipment.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReassignShipment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("fulfillmentLocationCode") != null && !jsonObj.get("fulfillmentLocationCode").isJsonNull()) && !jsonObj.get("fulfillmentLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentLocationCode").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ReassignItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `reassignedReason`
      if (jsonObj.get("reassignedReason") != null && !jsonObj.get("reassignedReason").isJsonNull()) {
        ReassignedReason.validateJsonObject(jsonObj.getAsJsonObject("reassignedReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReassignShipment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReassignShipment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReassignShipment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReassignShipment.class));

       return (TypeAdapter<T>) new TypeAdapter<ReassignShipment>() {
           @Override
           public void write(JsonWriter out, ReassignShipment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReassignShipment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReassignShipment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReassignShipment
  * @throws IOException if the JSON string is invalid with respect to ReassignShipment
  */
  public static ReassignShipment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReassignShipment.class);
  }

 /**
  * Convert an instance of ReassignShipment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

