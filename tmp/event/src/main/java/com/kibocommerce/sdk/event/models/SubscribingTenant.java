/*
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.event.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.event.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.event.models.SubscribingSite;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * A tenant that is associated with a subscription
 */
@ApiModel(description = "A tenant that is associated with a subscription")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscribingTenant implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SUBSCRIBING_CONTEXT_LEVEL_TYPE = "subscribingContextLevelType";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBING_CONTEXT_LEVEL_TYPE)
  private String subscribingContextLevelType;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public static final String SERIALIZED_NAME_SUBSCRIBING_SITES = "subscribingSites";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBING_SITES)
  private List<SubscribingSite> subscribingSites = null;

  public SubscribingTenant() {
  }

  public SubscribingTenant subscribingContextLevelType(String subscribingContextLevelType) {
    
    this.subscribingContextLevelType = subscribingContextLevelType;
    return this;
  }

   /**
   * Type of Subscribing Context  !:SubscribingContextLevelTypeConst  Derived from state of the subscription.  If any Subscribing Sites exist (e.g. subscription is not at the Tenant Level, then the value will be Site)
   * @return subscribingContextLevelType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of Subscribing Context  !:SubscribingContextLevelTypeConst  Derived from state of the subscription.  If any Subscribing Sites exist (e.g. subscription is not at the Tenant Level, then the value will be Site)")

  public String getSubscribingContextLevelType() {
    return subscribingContextLevelType;
  }


  public void setSubscribingContextLevelType(String subscribingContextLevelType) {
    this.subscribingContextLevelType = subscribingContextLevelType;
  }


  public SubscribingTenant tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * The tenant identifier
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tenant identifier")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public SubscribingTenant isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Is the subscription active at the tenant level?  If the subscription context is at the Tenant Level this property will be utilized over the SiteLevel
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the subscription active at the tenant level?  If the subscription context is at the Tenant Level this property will be utilized over the SiteLevel")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public SubscribingTenant auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public SubscribingTenant subscribingSites(List<SubscribingSite> subscribingSites) {
    
    this.subscribingSites = subscribingSites;
    return this;
  }

  public SubscribingTenant addSubscribingSitesItem(SubscribingSite subscribingSitesItem) {
    if (this.subscribingSites == null) {
      this.subscribingSites = new ArrayList<>();
    }
    this.subscribingSites.add(subscribingSitesItem);
    return this;
  }

   /**
   * Subscribing Sites
   * @return subscribingSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscribing Sites")

  public List<SubscribingSite> getSubscribingSites() {
    return subscribingSites;
  }


  public void setSubscribingSites(List<SubscribingSite> subscribingSites) {
    this.subscribingSites = subscribingSites;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscribingTenant subscribingTenant = (SubscribingTenant) o;
    return Objects.equals(this.subscribingContextLevelType, subscribingTenant.subscribingContextLevelType) &&
        Objects.equals(this.tenantId, subscribingTenant.tenantId) &&
        Objects.equals(this.isActive, subscribingTenant.isActive) &&
        Objects.equals(this.auditInfo, subscribingTenant.auditInfo) &&
        Objects.equals(this.subscribingSites, subscribingTenant.subscribingSites);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscribingContextLevelType, tenantId, isActive, auditInfo, subscribingSites);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscribingTenant {\n");
    sb.append("    subscribingContextLevelType: ").append(toIndentedString(subscribingContextLevelType)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    subscribingSites: ").append(toIndentedString(subscribingSites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subscribingContextLevelType");
    openapiFields.add("tenantId");
    openapiFields.add("isActive");
    openapiFields.add("auditInfo");
    openapiFields.add("subscribingSites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubscribingTenant
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubscribingTenant.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscribingTenant is not found in the empty JSON string", SubscribingTenant.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!SubscribingTenant.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscribingTenant` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("subscribingContextLevelType") != null && !jsonObj.get("subscribingContextLevelType").isJsonNull()) && !jsonObj.get("subscribingContextLevelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribingContextLevelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribingContextLevelType").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
      if (jsonObj.get("subscribingSites") != null && !jsonObj.get("subscribingSites").isJsonNull()) {
        JsonArray jsonArraysubscribingSites = jsonObj.getAsJsonArray("subscribingSites");
        if (jsonArraysubscribingSites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subscribingSites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subscribingSites` to be an array in the JSON string but got `%s`", jsonObj.get("subscribingSites").toString()));
          }

          // validate the optional field `subscribingSites` (array)
          for (int i = 0; i < jsonArraysubscribingSites.size(); i++) {
            SubscribingSite.validateJsonObject(jsonArraysubscribingSites.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscribingTenant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscribingTenant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscribingTenant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscribingTenant.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscribingTenant>() {
           @Override
           public void write(JsonWriter out, SubscribingTenant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscribingTenant read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscribingTenant given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscribingTenant
  * @throws IOException if the JSON string is invalid with respect to SubscribingTenant
  */
  public static SubscribingTenant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscribingTenant.class);
  }

 /**
  * Convert an instance of SubscribingTenant to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

