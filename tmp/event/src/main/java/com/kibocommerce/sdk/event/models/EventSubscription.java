/*
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.event.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.event.models.SubscribingTenant;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * The subscription entity used specifically in PUSH event scenarios where a third-party desires to receive notification of events
 */
@ApiModel(description = "The subscription entity used specifically in PUSH event scenarios where a third-party desires to receive notification of events")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventSubscription implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = null;

  public static final String SERIALIZED_NAME_SUBSCRIBING_TENANTS = "subscribingTenants";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBING_TENANTS)
  private List<SubscribingTenant> subscribingTenants = null;

  public static final String SERIALIZED_NAME_NOTIFICATION_DELIVERY_TYPE = "notificationDeliveryType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DELIVERY_TYPE)
  private String notificationDeliveryType;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NO_CALLBACK = "noCallback";
  @SerializedName(SERIALIZED_NAME_NO_CALLBACK)
  private Boolean noCallback;

  public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "updateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_CREATE_BY = "createBy";
  @SerializedName(SERIALIZED_NAME_CREATE_BY)
  private String createBy;

  public static final String SERIALIZED_NAME_UPDATE_BY = "updateBy";
  @SerializedName(SERIALIZED_NAME_UPDATE_BY)
  private String updateBy;

  public EventSubscription() {
  }

  public EventSubscription id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for a subscription
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier for a subscription")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public EventSubscription appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * Application identifier for subscription
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Application identifier for subscription")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }


  public EventSubscription apiVersion(String apiVersion) {
    
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * ApiVersion
   * @return apiVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ApiVersion")

  public String getApiVersion() {
    return apiVersion;
  }


  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public EventSubscription topics(List<String> topics) {
    
    this.topics = topics;
    return this;
  }

  public EventSubscription addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * A list of topics that the subscription relates to
   * @return topics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of topics that the subscription relates to")

  public List<String> getTopics() {
    return topics;
  }


  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public EventSubscription subscribingTenants(List<SubscribingTenant> subscribingTenants) {
    
    this.subscribingTenants = subscribingTenants;
    return this;
  }

  public EventSubscription addSubscribingTenantsItem(SubscribingTenant subscribingTenantsItem) {
    if (this.subscribingTenants == null) {
      this.subscribingTenants = new ArrayList<>();
    }
    this.subscribingTenants.add(subscribingTenantsItem);
    return this;
  }

   /**
   * A list of subscribers or subscribing tenants that the subscription relates to
   * @return subscribingTenants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of subscribers or subscribing tenants that the subscription relates to")

  public List<SubscribingTenant> getSubscribingTenants() {
    return subscribingTenants;
  }


  public void setSubscribingTenants(List<SubscribingTenant> subscribingTenants) {
    this.subscribingTenants = subscribingTenants;
  }


  public EventSubscription notificationDeliveryType(String notificationDeliveryType) {
    
    this.notificationDeliveryType = notificationDeliveryType;
    return this;
  }

   /**
   * Notification delivery type which is a string representation of an enumeration of values.  Example: Http (this is case insensitive, so http may also be passed in)
   * @return notificationDeliveryType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Notification delivery type which is a string representation of an enumeration of values.  Example: Http (this is case insensitive, so http may also be passed in)")

  public String getNotificationDeliveryType() {
    return notificationDeliveryType;
  }


  public void setNotificationDeliveryType(String notificationDeliveryType) {
    this.notificationDeliveryType = notificationDeliveryType;
  }


  public EventSubscription contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Content type of the payload that will be delivered.  This is utilized in combination with the notification delivery type.  Example:  A HTTP Post (notification delivery type) is performed with a JSON representation of the event data (content type).
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content type of the payload that will be delivered.  This is utilized in combination with the notification delivery type.  Example:  A HTTP Post (notification delivery type) is performed with a JSON representation of the event data (content type).")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public EventSubscription endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * The delivery endpoint that will receive notifications when events concerning the specified topics on the subscription occur.  The format of the endpoint may differ depending on the notification type.  For example, the endpoint may be a URL in some cases and an email address in others if multiple notification types are available.
   * @return endpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The delivery endpoint that will receive notifications when events concerning the specified topics on the subscription occur.  The format of the endpoint may differ depending on the notification type.  For example, the endpoint may be a URL in some cases and an email address in others if multiple notification types are available.")

  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public EventSubscription confirmed(Boolean confirmed) {
    
    this.confirmed = confirmed;
    return this;
  }

   /**
   * A boolean value that indicates if the subscription endpoint has been confirmed
   * @return confirmed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A boolean value that indicates if the subscription endpoint has been confirmed")

  public Boolean getConfirmed() {
    return confirmed;
  }


  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public EventSubscription isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * A boolean value that indicates if the subscription is active.  The subscription may be inactive due to repeated downtimes at the endpoint.  If they subscription is deactivated the subscription owner or application will need to reactivate it for notifications to be delivered.
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A boolean value that indicates if the subscription is active.  The subscription may be inactive due to repeated downtimes at the endpoint.  If they subscription is deactivated the subscription owner or application will need to reactivate it for notifications to be delivered.")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public EventSubscription noCallback(Boolean noCallback) {
    
    this.noCallback = noCallback;
    return this;
  }

   /**
   * A boolean value that indicates if events should be delivered that resulted from an API call by the application.  If true, any events that occur as a result of a direct API call by the same application will not be delivered. This can prevent an endless loop in certain scenarios.
   * @return noCallback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A boolean value that indicates if events should be delivered that resulted from an API call by the application.  If true, any events that occur as a result of a direct API call by the same application will not be delivered. This can prevent an endless loop in certain scenarios.")

  public Boolean getNoCallback() {
    return noCallback;
  }


  public void setNoCallback(Boolean noCallback) {
    this.noCallback = noCallback;
  }


  public EventSubscription createDate(OffsetDateTime createDate) {
    
    this.createDate = createDate;
    return this;
  }

   /**
   * When the entity was created. System-supplied and read-only.
   * @return createDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the entity was created. System-supplied and read-only.")

  public OffsetDateTime getCreateDate() {
    return createDate;
  }


  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public EventSubscription updateDate(OffsetDateTime updateDate) {
    
    this.updateDate = updateDate;
    return this;
  }

   /**
   * When the entity was updated. System-supplied and read-only.
   * @return updateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When the entity was updated. System-supplied and read-only.")

  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }


  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public EventSubscription createBy(String createBy) {
    
    this.createBy = createBy;
    return this;
  }

   /**
   * Identifier of the user who created the entity. System-supplied and read-only.
   * @return createBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of the user who created the entity. System-supplied and read-only.")

  public String getCreateBy() {
    return createBy;
  }


  public void setCreateBy(String createBy) {
    this.createBy = createBy;
  }


  public EventSubscription updateBy(String updateBy) {
    
    this.updateBy = updateBy;
    return this;
  }

   /**
   * Identifier of the user who updated the entity. System-supplied and read-only.
   * @return updateBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier of the user who updated the entity. System-supplied and read-only.")

  public String getUpdateBy() {
    return updateBy;
  }


  public void setUpdateBy(String updateBy) {
    this.updateBy = updateBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSubscription eventSubscription = (EventSubscription) o;
    return Objects.equals(this.id, eventSubscription.id) &&
        Objects.equals(this.appId, eventSubscription.appId) &&
        Objects.equals(this.apiVersion, eventSubscription.apiVersion) &&
        Objects.equals(this.topics, eventSubscription.topics) &&
        Objects.equals(this.subscribingTenants, eventSubscription.subscribingTenants) &&
        Objects.equals(this.notificationDeliveryType, eventSubscription.notificationDeliveryType) &&
        Objects.equals(this.contentType, eventSubscription.contentType) &&
        Objects.equals(this.endpoint, eventSubscription.endpoint) &&
        Objects.equals(this.confirmed, eventSubscription.confirmed) &&
        Objects.equals(this.isActive, eventSubscription.isActive) &&
        Objects.equals(this.noCallback, eventSubscription.noCallback) &&
        Objects.equals(this.createDate, eventSubscription.createDate) &&
        Objects.equals(this.updateDate, eventSubscription.updateDate) &&
        Objects.equals(this.createBy, eventSubscription.createBy) &&
        Objects.equals(this.updateBy, eventSubscription.updateBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, appId, apiVersion, topics, subscribingTenants, notificationDeliveryType, contentType, endpoint, confirmed, isActive, noCallback, createDate, updateDate, createBy, updateBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSubscription {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    subscribingTenants: ").append(toIndentedString(subscribingTenants)).append("\n");
    sb.append("    notificationDeliveryType: ").append(toIndentedString(notificationDeliveryType)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    noCallback: ").append(toIndentedString(noCallback)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    createBy: ").append(toIndentedString(createBy)).append("\n");
    sb.append("    updateBy: ").append(toIndentedString(updateBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("appId");
    openapiFields.add("apiVersion");
    openapiFields.add("topics");
    openapiFields.add("subscribingTenants");
    openapiFields.add("notificationDeliveryType");
    openapiFields.add("contentType");
    openapiFields.add("endpoint");
    openapiFields.add("confirmed");
    openapiFields.add("isActive");
    openapiFields.add("noCallback");
    openapiFields.add("createDate");
    openapiFields.add("updateDate");
    openapiFields.add("createBy");
    openapiFields.add("updateBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventSubscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSubscription is not found in the empty JSON string", EventSubscription.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!EventSubscription.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSubscription` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if (jsonObj.get("subscribingTenants") != null && !jsonObj.get("subscribingTenants").isJsonNull()) {
        JsonArray jsonArraysubscribingTenants = jsonObj.getAsJsonArray("subscribingTenants");
        if (jsonArraysubscribingTenants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subscribingTenants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subscribingTenants` to be an array in the JSON string but got `%s`", jsonObj.get("subscribingTenants").toString()));
          }

          // validate the optional field `subscribingTenants` (array)
          for (int i = 0; i < jsonArraysubscribingTenants.size(); i++) {
            SubscribingTenant.validateJsonObject(jsonArraysubscribingTenants.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("notificationDeliveryType") != null && !jsonObj.get("notificationDeliveryType").isJsonNull()) && !jsonObj.get("notificationDeliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationDeliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationDeliveryType").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("createBy") != null && !jsonObj.get("createBy").isJsonNull()) && !jsonObj.get("createBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createBy").toString()));
      }
      if ((jsonObj.get("updateBy") != null && !jsonObj.get("updateBy").isJsonNull()) && !jsonObj.get("updateBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSubscription>() {
           @Override
           public void write(JsonWriter out, EventSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSubscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventSubscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventSubscription
  * @throws IOException if the JSON string is invalid with respect to EventSubscription
  */
  public static EventSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSubscription.class);
  }

 /**
  * Convert an instance of EventSubscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

