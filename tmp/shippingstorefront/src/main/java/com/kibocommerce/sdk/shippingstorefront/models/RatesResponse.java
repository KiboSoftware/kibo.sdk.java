/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingstorefront.models.CarrierRatesResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * RatesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RatesResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RESOLVED_SHIPPING_ZONE_CODE = "resolvedShippingZoneCode";
  @SerializedName(SERIALIZED_NAME_RESOLVED_SHIPPING_ZONE_CODE)
  private String resolvedShippingZoneCode;

  public static final String SERIALIZED_NAME_SHIPPING_ZONE_CODES = "shippingZoneCodes";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ZONE_CODES)
  private List<String> shippingZoneCodes = null;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<CarrierRatesResponse> rates = null;

  public RatesResponse() {
  }

  public RatesResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Resolved Shipping Zone Code.  This value can be null if the tenant/site does not have shipping zones defined or there are no matching   shipping zones for the request (e.g. the only zone defined is \&quot;UNITED-STATES\&quot; and the destination address of the rate request is in Canada)
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Resolved Shipping Zone Code.  This value can be null if the tenant/site does not have shipping zones defined or there are no matching   shipping zones for the request (e.g. the only zone defined is \"UNITED-STATES\" and the destination address of the rate request is in Canada)")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RatesResponse resolvedShippingZoneCode(String resolvedShippingZoneCode) {
    
    this.resolvedShippingZoneCode = resolvedShippingZoneCode;
    return this;
  }

   /**
   * Get resolvedShippingZoneCode
   * @return resolvedShippingZoneCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResolvedShippingZoneCode() {
    return resolvedShippingZoneCode;
  }


  public void setResolvedShippingZoneCode(String resolvedShippingZoneCode) {
    this.resolvedShippingZoneCode = resolvedShippingZoneCode;
  }


  public RatesResponse shippingZoneCodes(List<String> shippingZoneCodes) {
    
    this.shippingZoneCodes = shippingZoneCodes;
    return this;
  }

  public RatesResponse addShippingZoneCodesItem(String shippingZoneCodesItem) {
    if (this.shippingZoneCodes == null) {
      this.shippingZoneCodes = new ArrayList<>();
    }
    this.shippingZoneCodes.add(shippingZoneCodesItem);
    return this;
  }

   /**
   * Get shippingZoneCodes
   * @return shippingZoneCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getShippingZoneCodes() {
    return shippingZoneCodes;
  }


  public void setShippingZoneCodes(List<String> shippingZoneCodes) {
    this.shippingZoneCodes = shippingZoneCodes;
  }


  public RatesResponse rates(List<CarrierRatesResponse> rates) {
    
    this.rates = rates;
    return this;
  }

  public RatesResponse addRatesItem(CarrierRatesResponse ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

   /**
   * Get rates
   * @return rates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CarrierRatesResponse> getRates() {
    return rates;
  }


  public void setRates(List<CarrierRatesResponse> rates) {
    this.rates = rates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatesResponse ratesResponse = (RatesResponse) o;
    return Objects.equals(this.id, ratesResponse.id) &&
        Objects.equals(this.resolvedShippingZoneCode, ratesResponse.resolvedShippingZoneCode) &&
        Objects.equals(this.shippingZoneCodes, ratesResponse.shippingZoneCodes) &&
        Objects.equals(this.rates, ratesResponse.rates);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, resolvedShippingZoneCode, shippingZoneCodes, rates);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatesResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    resolvedShippingZoneCode: ").append(toIndentedString(resolvedShippingZoneCode)).append("\n");
    sb.append("    shippingZoneCodes: ").append(toIndentedString(shippingZoneCodes)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("resolvedShippingZoneCode");
    openapiFields.add("shippingZoneCodes");
    openapiFields.add("rates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RatesResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RatesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatesResponse is not found in the empty JSON string", RatesResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!RatesResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatesResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("resolvedShippingZoneCode") != null && !jsonObj.get("resolvedShippingZoneCode").isJsonNull()) && !jsonObj.get("resolvedShippingZoneCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolvedShippingZoneCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolvedShippingZoneCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("shippingZoneCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingZoneCodes` to be an array in the JSON string but got `%s`", jsonObj.get("shippingZoneCodes").toString()));
      }
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            CarrierRatesResponse.validateJsonObject(jsonArrayrates.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RatesResponse>() {
           @Override
           public void write(JsonWriter out, RatesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatesResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RatesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RatesResponse
  * @throws IOException if the JSON string is invalid with respect to RatesResponse
  */
  public static RatesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatesResponse.class);
  }

 /**
  * Convert an instance of RatesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

