/*
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.shippingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.shippingstorefront.models.Notification;
import com.kibocommerce.sdk.shippingstorefront.models.ShippingRuntimeManifestShipment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ManifestResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ManifestResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MANIFEST_ID = "manifestId";
  @SerializedName(SERIALIZED_NAME_MANIFEST_ID)
  private String manifestId;

  public static final String SERIALIZED_NAME_MANIFEST_URL = "manifestUrl";
  @SerializedName(SERIALIZED_NAME_MANIFEST_URL)
  private String manifestUrl;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrierId";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_INCLUDED_SHIPMENTS = "includedShipments";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SHIPMENTS)
  private List<ShippingRuntimeManifestShipment> includedShipments = null;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Notification> messages = null;

  public static final String SERIALIZED_NAME_IS_SUCCESSFUL = "isSuccessful";
  @SerializedName(SERIALIZED_NAME_IS_SUCCESSFUL)
  private Boolean isSuccessful;

  public ManifestResponse() {
  }

  public ManifestResponse manifestId(String manifestId) {
    
    this.manifestId = manifestId;
    return this;
  }

   /**
   * Get manifestId
   * @return manifestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getManifestId() {
    return manifestId;
  }


  public void setManifestId(String manifestId) {
    this.manifestId = manifestId;
  }


  public ManifestResponse manifestUrl(String manifestUrl) {
    
    this.manifestUrl = manifestUrl;
    return this;
  }

   /**
   * Get manifestUrl
   * @return manifestUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getManifestUrl() {
    return manifestUrl;
  }


  public void setManifestUrl(String manifestUrl) {
    this.manifestUrl = manifestUrl;
  }


  public ManifestResponse carrierId(String carrierId) {
    
    this.carrierId = carrierId;
    return this;
  }

   /**
   * Get carrierId
   * @return carrierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCarrierId() {
    return carrierId;
  }


  public void setCarrierId(String carrierId) {
    this.carrierId = carrierId;
  }


  public ManifestResponse locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Get locationCode
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public ManifestResponse includedShipments(List<ShippingRuntimeManifestShipment> includedShipments) {
    
    this.includedShipments = includedShipments;
    return this;
  }

  public ManifestResponse addIncludedShipmentsItem(ShippingRuntimeManifestShipment includedShipmentsItem) {
    if (this.includedShipments == null) {
      this.includedShipments = new ArrayList<>();
    }
    this.includedShipments.add(includedShipmentsItem);
    return this;
  }

   /**
   * Get includedShipments
   * @return includedShipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ShippingRuntimeManifestShipment> getIncludedShipments() {
    return includedShipments;
  }


  public void setIncludedShipments(List<ShippingRuntimeManifestShipment> includedShipments) {
    this.includedShipments = includedShipments;
  }


  public ManifestResponse messages(List<Notification> messages) {
    
    this.messages = messages;
    return this;
  }

  public ManifestResponse addMessagesItem(Notification messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Notification> getMessages() {
    return messages;
  }


  public void setMessages(List<Notification> messages) {
    this.messages = messages;
  }


  public ManifestResponse isSuccessful(Boolean isSuccessful) {
    
    this.isSuccessful = isSuccessful;
    return this;
  }

   /**
   * Get isSuccessful
   * @return isSuccessful
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsSuccessful() {
    return isSuccessful;
  }


  public void setIsSuccessful(Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManifestResponse manifestResponse = (ManifestResponse) o;
    return Objects.equals(this.manifestId, manifestResponse.manifestId) &&
        Objects.equals(this.manifestUrl, manifestResponse.manifestUrl) &&
        Objects.equals(this.carrierId, manifestResponse.carrierId) &&
        Objects.equals(this.locationCode, manifestResponse.locationCode) &&
        Objects.equals(this.includedShipments, manifestResponse.includedShipments) &&
        Objects.equals(this.messages, manifestResponse.messages) &&
        Objects.equals(this.isSuccessful, manifestResponse.isSuccessful);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(manifestId, manifestUrl, carrierId, locationCode, includedShipments, messages, isSuccessful);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManifestResponse {\n");
    sb.append("    manifestId: ").append(toIndentedString(manifestId)).append("\n");
    sb.append("    manifestUrl: ").append(toIndentedString(manifestUrl)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    includedShipments: ").append(toIndentedString(includedShipments)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    isSuccessful: ").append(toIndentedString(isSuccessful)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("manifestId");
    openapiFields.add("manifestUrl");
    openapiFields.add("carrierId");
    openapiFields.add("locationCode");
    openapiFields.add("includedShipments");
    openapiFields.add("messages");
    openapiFields.add("isSuccessful");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ManifestResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ManifestResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManifestResponse is not found in the empty JSON string", ManifestResponse.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ManifestResponse.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManifestResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("manifestId") != null && !jsonObj.get("manifestId").isJsonNull()) && !jsonObj.get("manifestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestId").toString()));
      }
      if ((jsonObj.get("manifestUrl") != null && !jsonObj.get("manifestUrl").isJsonNull()) && !jsonObj.get("manifestUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestUrl").toString()));
      }
      if ((jsonObj.get("carrierId") != null && !jsonObj.get("carrierId").isJsonNull()) && !jsonObj.get("carrierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrierId").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
      if (jsonObj.get("includedShipments") != null && !jsonObj.get("includedShipments").isJsonNull()) {
        JsonArray jsonArrayincludedShipments = jsonObj.getAsJsonArray("includedShipments");
        if (jsonArrayincludedShipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedShipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedShipments` to be an array in the JSON string but got `%s`", jsonObj.get("includedShipments").toString()));
          }

          // validate the optional field `includedShipments` (array)
          for (int i = 0; i < jsonArrayincludedShipments.size(); i++) {
            ShippingRuntimeManifestShipment.validateJsonObject(jsonArrayincludedShipments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            Notification.validateJsonObject(jsonArraymessages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManifestResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManifestResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManifestResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManifestResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ManifestResponse>() {
           @Override
           public void write(JsonWriter out, ManifestResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManifestResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManifestResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManifestResponse
  * @throws IOException if the JSON string is invalid with respect to ManifestResponse
  */
  public static ManifestResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManifestResponse.class);
  }

 /**
  * Convert an instance of ManifestResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

