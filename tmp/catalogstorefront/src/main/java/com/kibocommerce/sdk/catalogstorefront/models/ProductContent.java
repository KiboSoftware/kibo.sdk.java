/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.ProductImage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Name of the product and, if supplied, description, metatags, friendly URL, and associated images.
 */
@ApiModel(description = "Name of the product and, if supplied, description, metatags, friendly URL, and associated images.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProductContent implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_FULL_DESCRIPTION = "productFullDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FULL_DESCRIPTION)
  private String productFullDescription;

  public static final String SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION = "productShortDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SHORT_DESCRIPTION)
  private String productShortDescription;

  public static final String SERIALIZED_NAME_META_TAG_TITLE = "metaTagTitle";
  @SerializedName(SERIALIZED_NAME_META_TAG_TITLE)
  private String metaTagTitle;

  public static final String SERIALIZED_NAME_META_TAG_DESCRIPTION = "metaTagDescription";
  @SerializedName(SERIALIZED_NAME_META_TAG_DESCRIPTION)
  private String metaTagDescription;

  public static final String SERIALIZED_NAME_META_TAG_KEYWORDS = "metaTagKeywords";
  @SerializedName(SERIALIZED_NAME_META_TAG_KEYWORDS)
  private String metaTagKeywords;

  public static final String SERIALIZED_NAME_SEO_FRIENDLY_URL = "seoFriendlyUrl";
  @SerializedName(SERIALIZED_NAME_SEO_FRIENDLY_URL)
  private String seoFriendlyUrl;

  public static final String SERIALIZED_NAME_PRODUCT_IMAGES = "productImages";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IMAGES)
  private List<ProductImage> productImages = null;

  public ProductContent() {
  }

  public ProductContent productName(String productName) {
    
    this.productName = productName;
    return this;
  }

   /**
   * Name of the product.
   * @return productName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the product.")

  public String getProductName() {
    return productName;
  }


  public void setProductName(String productName) {
    this.productName = productName;
  }


  public ProductContent productFullDescription(String productFullDescription) {
    
    this.productFullDescription = productFullDescription;
    return this;
  }

   /**
   * Detailed description of the product typically used for a product details page.
   * @return productFullDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detailed description of the product typically used for a product details page.")

  public String getProductFullDescription() {
    return productFullDescription;
  }


  public void setProductFullDescription(String productFullDescription) {
    this.productFullDescription = productFullDescription;
  }


  public ProductContent productShortDescription(String productShortDescription) {
    
    this.productShortDescription = productShortDescription;
    return this;
  }

   /**
   * Brief description of the product typically used when the product is displayed in a list or search results.
   * @return productShortDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Brief description of the product typically used when the product is displayed in a list or search results.")

  public String getProductShortDescription() {
    return productShortDescription;
  }


  public void setProductShortDescription(String productShortDescription) {
    this.productShortDescription = productShortDescription;
  }


  public ProductContent metaTagTitle(String metaTagTitle) {
    
    this.metaTagTitle = metaTagTitle;
    return this;
  }

   /**
   * Metadata title used to manage information internally.
   * @return metaTagTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata title used to manage information internally.")

  public String getMetaTagTitle() {
    return metaTagTitle;
  }


  public void setMetaTagTitle(String metaTagTitle) {
    this.metaTagTitle = metaTagTitle;
  }


  public ProductContent metaTagDescription(String metaTagDescription) {
    
    this.metaTagDescription = metaTagDescription;
    return this;
  }

   /**
   * Metadata description used to manage information internally.
   * @return metaTagDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata description used to manage information internally.")

  public String getMetaTagDescription() {
    return metaTagDescription;
  }


  public void setMetaTagDescription(String metaTagDescription) {
    this.metaTagDescription = metaTagDescription;
  }


  public ProductContent metaTagKeywords(String metaTagKeywords) {
    
    this.metaTagKeywords = metaTagKeywords;
    return this;
  }

   /**
   * Metadata keywords used to manage information internally.
   * @return metaTagKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata keywords used to manage information internally.")

  public String getMetaTagKeywords() {
    return metaTagKeywords;
  }


  public void setMetaTagKeywords(String metaTagKeywords) {
    this.metaTagKeywords = metaTagKeywords;
  }


  public ProductContent seoFriendlyUrl(String seoFriendlyUrl) {
    
    this.seoFriendlyUrl = seoFriendlyUrl;
    return this;
  }

   /**
   * Human-readable identifier defined for the product to create friendly URLs.
   * @return seoFriendlyUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human-readable identifier defined for the product to create friendly URLs.")

  public String getSeoFriendlyUrl() {
    return seoFriendlyUrl;
  }


  public void setSeoFriendlyUrl(String seoFriendlyUrl) {
    this.seoFriendlyUrl = seoFriendlyUrl;
  }


  public ProductContent productImages(List<ProductImage> productImages) {
    
    this.productImages = productImages;
    return this;
  }

  public ProductContent addProductImagesItem(ProductImage productImagesItem) {
    if (this.productImages == null) {
      this.productImages = new ArrayList<>();
    }
    this.productImages.add(productImagesItem);
    return this;
  }

   /**
   * Images associated with the product.
   * @return productImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Images associated with the product.")

  public List<ProductImage> getProductImages() {
    return productImages;
  }


  public void setProductImages(List<ProductImage> productImages) {
    this.productImages = productImages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductContent productContent = (ProductContent) o;
    return Objects.equals(this.productName, productContent.productName) &&
        Objects.equals(this.productFullDescription, productContent.productFullDescription) &&
        Objects.equals(this.productShortDescription, productContent.productShortDescription) &&
        Objects.equals(this.metaTagTitle, productContent.metaTagTitle) &&
        Objects.equals(this.metaTagDescription, productContent.metaTagDescription) &&
        Objects.equals(this.metaTagKeywords, productContent.metaTagKeywords) &&
        Objects.equals(this.seoFriendlyUrl, productContent.seoFriendlyUrl) &&
        Objects.equals(this.productImages, productContent.productImages);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(productName, productFullDescription, productShortDescription, metaTagTitle, metaTagDescription, metaTagKeywords, seoFriendlyUrl, productImages);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductContent {\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productFullDescription: ").append(toIndentedString(productFullDescription)).append("\n");
    sb.append("    productShortDescription: ").append(toIndentedString(productShortDescription)).append("\n");
    sb.append("    metaTagTitle: ").append(toIndentedString(metaTagTitle)).append("\n");
    sb.append("    metaTagDescription: ").append(toIndentedString(metaTagDescription)).append("\n");
    sb.append("    metaTagKeywords: ").append(toIndentedString(metaTagKeywords)).append("\n");
    sb.append("    seoFriendlyUrl: ").append(toIndentedString(seoFriendlyUrl)).append("\n");
    sb.append("    productImages: ").append(toIndentedString(productImages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productName");
    openapiFields.add("productFullDescription");
    openapiFields.add("productShortDescription");
    openapiFields.add("metaTagTitle");
    openapiFields.add("metaTagDescription");
    openapiFields.add("metaTagKeywords");
    openapiFields.add("seoFriendlyUrl");
    openapiFields.add("productImages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductContent is not found in the empty JSON string", ProductContent.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ProductContent.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductContent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
      if ((jsonObj.get("productFullDescription") != null && !jsonObj.get("productFullDescription").isJsonNull()) && !jsonObj.get("productFullDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFullDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFullDescription").toString()));
      }
      if ((jsonObj.get("productShortDescription") != null && !jsonObj.get("productShortDescription").isJsonNull()) && !jsonObj.get("productShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productShortDescription").toString()));
      }
      if ((jsonObj.get("metaTagTitle") != null && !jsonObj.get("metaTagTitle").isJsonNull()) && !jsonObj.get("metaTagTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagTitle").toString()));
      }
      if ((jsonObj.get("metaTagDescription") != null && !jsonObj.get("metaTagDescription").isJsonNull()) && !jsonObj.get("metaTagDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagDescription").toString()));
      }
      if ((jsonObj.get("metaTagKeywords") != null && !jsonObj.get("metaTagKeywords").isJsonNull()) && !jsonObj.get("metaTagKeywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metaTagKeywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metaTagKeywords").toString()));
      }
      if ((jsonObj.get("seoFriendlyUrl") != null && !jsonObj.get("seoFriendlyUrl").isJsonNull()) && !jsonObj.get("seoFriendlyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seoFriendlyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seoFriendlyUrl").toString()));
      }
      if (jsonObj.get("productImages") != null && !jsonObj.get("productImages").isJsonNull()) {
        JsonArray jsonArrayproductImages = jsonObj.getAsJsonArray("productImages");
        if (jsonArrayproductImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productImages` to be an array in the JSON string but got `%s`", jsonObj.get("productImages").toString()));
          }

          // validate the optional field `productImages` (array)
          for (int i = 0; i < jsonArrayproductImages.size(); i++) {
            ProductImage.validateJsonObject(jsonArrayproductImages.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductContent.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductContent>() {
           @Override
           public void write(JsonWriter out, ProductContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductContent
  * @throws IOException if the JSON string is invalid with respect to ProductContent
  */
  public static ProductContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductContent.class);
  }

 /**
  * Convert an instance of ProductContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

