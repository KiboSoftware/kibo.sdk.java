/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogstorefront.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProduct;
import com.kibocommerce.sdk.catalogstorefront.models.CatalogRuntimesProductCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ConfiguredProduct;
import com.kibocommerce.sdk.catalogstorefront.models.DiscountSelections;
import com.kibocommerce.sdk.catalogstorefront.models.DiscountValidationSummary;
import com.kibocommerce.sdk.catalogstorefront.models.LocationInventoryCollection;
import com.kibocommerce.sdk.catalogstorefront.models.LocationInventoryQuery;
import java.time.OffsetDateTime;
import com.kibocommerce.sdk.catalogstorefront.models.ProductCostCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ProductCostQuery;
import com.kibocommerce.sdk.catalogstorefront.models.ProductForIndexing;
import com.kibocommerce.sdk.catalogstorefront.models.ProductOptionSelections;
import com.kibocommerce.sdk.catalogstorefront.models.ProductSubstituteCollection;
import com.kibocommerce.sdk.catalogstorefront.models.ProductValidationSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ProductsApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ProductsApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ProductsApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storefrontConfigureProduct
     * @param productCode Merchant-created code for the product being configured, for example, a SKU. Max length: 30. (required)
     * @param includeOptionDetails If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param subscriptionFrequency  (optional)
     * @param productOptionSelections Shopper-selected options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontConfigureProductCall(String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String variationProductCodeFilter, Boolean useSubscriptionPricing, String subscriptionFrequency, ProductOptionSelections productOptionSelections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productOptionSelections;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}/configure"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeOptionDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeOptionDetails", includeOptionDetails));
        }

        if (skipInventoryCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipInventoryCheck", skipInventoryCheck));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (purchaseLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseLocation", purchaseLocation));
        }

        if (variationProductCodeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variationProductCodeFilter", variationProductCodeFilter));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        if (subscriptionFrequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionFrequency", subscriptionFrequency));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontConfigureProductValidateBeforeCall(String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String variationProductCodeFilter, Boolean useSubscriptionPricing, String subscriptionFrequency, ProductOptionSelections productOptionSelections, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontConfigureProduct(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontConfigureProductCall(productCode, includeOptionDetails, skipInventoryCheck, quantity, purchaseLocation, variationProductCodeFilter, useSubscriptionPricing, subscriptionFrequency, productOptionSelections, _callback);
        return localVarCall;

    }

    /**
     * Configures a variant product
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     * @param productCode Merchant-created code for the product being configured, for example, a SKU. Max length: 30. (required)
     * @param includeOptionDetails If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param subscriptionFrequency  (optional)
     * @param productOptionSelections Shopper-selected options. (optional)
     * @return ConfiguredProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ConfiguredProduct storefrontConfigureProduct(String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String variationProductCodeFilter, Boolean useSubscriptionPricing, String subscriptionFrequency, ProductOptionSelections productOptionSelections) throws ApiException {
        ApiResponse<ConfiguredProduct> localVarResp = storefrontConfigureProductWithHttpInfo(productCode, includeOptionDetails, skipInventoryCheck, quantity, purchaseLocation, variationProductCodeFilter, useSubscriptionPricing, subscriptionFrequency, productOptionSelections);
        return localVarResp.getData();
    }

    /**
     * Configures a variant product
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     * @param productCode Merchant-created code for the product being configured, for example, a SKU. Max length: 30. (required)
     * @param includeOptionDetails If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param subscriptionFrequency  (optional)
     * @param productOptionSelections Shopper-selected options. (optional)
     * @return ApiResponse&lt;ConfiguredProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfiguredProduct> storefrontConfigureProductWithHttpInfo(String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String variationProductCodeFilter, Boolean useSubscriptionPricing, String subscriptionFrequency, ProductOptionSelections productOptionSelections) throws ApiException {
        okhttp3.Call localVarCall = storefrontConfigureProductValidateBeforeCall(productCode, includeOptionDetails, skipInventoryCheck, quantity, purchaseLocation, variationProductCodeFilter, useSubscriptionPricing, subscriptionFrequency, productOptionSelections, null);
        Type localVarReturnType = new TypeToken<ConfiguredProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configures a variant product (asynchronously)
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     * @param productCode Merchant-created code for the product being configured, for example, a SKU. Max length: 30. (required)
     * @param includeOptionDetails If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param subscriptionFrequency  (optional)
     * @param productOptionSelections Shopper-selected options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontConfigureProductAsync(String productCode, Boolean includeOptionDetails, Boolean skipInventoryCheck, Integer quantity, String purchaseLocation, String variationProductCodeFilter, Boolean useSubscriptionPricing, String subscriptionFrequency, ProductOptionSelections productOptionSelections, final ApiCallback<ConfiguredProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontConfigureProductValidateBeforeCall(productCode, includeOptionDetails, skipInventoryCheck, quantity, purchaseLocation, variationProductCodeFilter, useSubscriptionPricing, subscriptionFrequency, productOptionSelections, _callback);
        Type localVarReturnType = new TypeToken<ConfiguredProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProduct
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param variationProductCode Optional. Merchant-created code associated with a specific product variation. Max length: #. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param allowInactive Optional. If true, return a product if it is located but inactive. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param supressOutOfStock404 Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO. (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param sliceValue  (optional)
     * @param includeAllImages  (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductCall(String productCode, String variationProductCode, String responseGroups, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String variationProductCodeFilter, String sliceValue, Boolean includeAllImages, Boolean useSubscriptionPricing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variationProductCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variationProductCode", variationProductCode));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (allowInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowInactive", allowInactive));
        }

        if (skipInventoryCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipInventoryCheck", skipInventoryCheck));
        }

        if (supressOutOfStock404 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supressOutOfStock404", supressOutOfStock404));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (acceptVariantProductCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acceptVariantProductCode", acceptVariantProductCode));
        }

        if (purchaseLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseLocation", purchaseLocation));
        }

        if (variationProductCodeFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variationProductCodeFilter", variationProductCodeFilter));
        }

        if (sliceValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sliceValue", sliceValue));
        }

        if (includeAllImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllImages", includeAllImages));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductValidateBeforeCall(String productCode, String variationProductCode, String responseGroups, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String variationProductCodeFilter, String sliceValue, Boolean includeAllImages, Boolean useSubscriptionPricing, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontGetProduct(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontGetProductCall(productCode, variationProductCode, responseGroups, allowInactive, skipInventoryCheck, supressOutOfStock404, quantity, acceptVariantProductCode, purchaseLocation, variationProductCodeFilter, sliceValue, includeAllImages, useSubscriptionPricing, _callback);
        return localVarCall;

    }

    /**
     * Get a product
     * Retrieves information about a single product given its product code.
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param variationProductCode Optional. Merchant-created code associated with a specific product variation. Max length: #. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param allowInactive Optional. If true, return a product if it is located but inactive. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param supressOutOfStock404 Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO. (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param sliceValue  (optional)
     * @param includeAllImages  (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @return CatalogRuntimesProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogRuntimesProduct storefrontGetProduct(String productCode, String variationProductCode, String responseGroups, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String variationProductCodeFilter, String sliceValue, Boolean includeAllImages, Boolean useSubscriptionPricing) throws ApiException {
        ApiResponse<CatalogRuntimesProduct> localVarResp = storefrontGetProductWithHttpInfo(productCode, variationProductCode, responseGroups, allowInactive, skipInventoryCheck, supressOutOfStock404, quantity, acceptVariantProductCode, purchaseLocation, variationProductCodeFilter, sliceValue, includeAllImages, useSubscriptionPricing);
        return localVarResp.getData();
    }

    /**
     * Get a product
     * Retrieves information about a single product given its product code.
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param variationProductCode Optional. Merchant-created code associated with a specific product variation. Max length: #. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param allowInactive Optional. If true, return a product if it is located but inactive. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param supressOutOfStock404 Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO. (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param sliceValue  (optional)
     * @param includeAllImages  (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @return ApiResponse&lt;CatalogRuntimesProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogRuntimesProduct> storefrontGetProductWithHttpInfo(String productCode, String variationProductCode, String responseGroups, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String variationProductCodeFilter, String sliceValue, Boolean includeAllImages, Boolean useSubscriptionPricing) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductValidateBeforeCall(productCode, variationProductCode, responseGroups, allowInactive, skipInventoryCheck, supressOutOfStock404, quantity, acceptVariantProductCode, purchaseLocation, variationProductCodeFilter, sliceValue, includeAllImages, useSubscriptionPricing, null);
        Type localVarReturnType = new TypeToken<CatalogRuntimesProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a product (asynchronously)
     * Retrieves information about a single product given its product code.
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param variationProductCode Optional. Merchant-created code associated with a specific product variation. Max length: #. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param allowInactive Optional. If true, return a product if it is located but inactive. (optional)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param supressOutOfStock404 Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO. (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param variationProductCodeFilter  (optional)
     * @param sliceValue  (optional)
     * @param includeAllImages  (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductAsync(String productCode, String variationProductCode, String responseGroups, Boolean allowInactive, Boolean skipInventoryCheck, Boolean supressOutOfStock404, Integer quantity, Boolean acceptVariantProductCode, String purchaseLocation, String variationProductCodeFilter, String sliceValue, Boolean includeAllImages, Boolean useSubscriptionPricing, final ApiCallback<CatalogRuntimesProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductValidateBeforeCall(productCode, variationProductCode, responseGroups, allowInactive, skipInventoryCheck, supressOutOfStock404, quantity, acceptVariantProductCode, purchaseLocation, variationProductCodeFilter, sliceValue, includeAllImages, useSubscriptionPricing, _callback);
        Type localVarReturnType = new TypeToken<CatalogRuntimesProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProductCosts
     * @param productCostQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductCostsCall(ProductCostQuery productCostQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCostQuery;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/costs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductCostsValidateBeforeCall(ProductCostQuery productCostQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetProductCostsCall(productCostQuery, _callback);
        return localVarCall;

    }

    /**
     * Get costs for products
     * Get costs for products
     * @param productCostQuery  (optional)
     * @return ProductCostCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductCostCollection storefrontGetProductCosts(ProductCostQuery productCostQuery) throws ApiException {
        ApiResponse<ProductCostCollection> localVarResp = storefrontGetProductCostsWithHttpInfo(productCostQuery);
        return localVarResp.getData();
    }

    /**
     * Get costs for products
     * Get costs for products
     * @param productCostQuery  (optional)
     * @return ApiResponse&lt;ProductCostCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCostCollection> storefrontGetProductCostsWithHttpInfo(ProductCostQuery productCostQuery) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductCostsValidateBeforeCall(productCostQuery, null);
        Type localVarReturnType = new TypeToken<ProductCostCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get costs for products (asynchronously)
     * Get costs for products
     * @param productCostQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductCostsAsync(ProductCostQuery productCostQuery, final ApiCallback<ProductCostCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductCostsValidateBeforeCall(productCostQuery, _callback);
        Type localVarReturnType = new TypeToken<ProductCostCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProductForIndexing
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param productVersion Optional. The current version of the product to use for latency checking.                If this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data. (optional)
     * @param lastModifiedDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductForIndexingCall(String productCode, String responseGroups, Long productVersion, OffsetDateTime lastModifiedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/indexing/{productCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (productVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productVersion", productVersion));
        }

        if (lastModifiedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastModifiedDate", lastModifiedDate));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductForIndexingValidateBeforeCall(String productCode, String responseGroups, Long productVersion, OffsetDateTime lastModifiedDate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontGetProductForIndexing(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontGetProductForIndexingCall(productCode, responseGroups, productVersion, lastModifiedDate, _callback);
        return localVarCall;

    }

    /**
     * Get a product for indexing
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param productVersion Optional. The current version of the product to use for latency checking.                If this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data. (optional)
     * @param lastModifiedDate  (optional)
     * @return ProductForIndexing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductForIndexing storefrontGetProductForIndexing(String productCode, String responseGroups, Long productVersion, OffsetDateTime lastModifiedDate) throws ApiException {
        ApiResponse<ProductForIndexing> localVarResp = storefrontGetProductForIndexingWithHttpInfo(productCode, responseGroups, productVersion, lastModifiedDate);
        return localVarResp.getData();
    }

    /**
     * Get a product for indexing
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param productVersion Optional. The current version of the product to use for latency checking.                If this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data. (optional)
     * @param lastModifiedDate  (optional)
     * @return ApiResponse&lt;ProductForIndexing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductForIndexing> storefrontGetProductForIndexingWithHttpInfo(String productCode, String responseGroups, Long productVersion, OffsetDateTime lastModifiedDate) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductForIndexingValidateBeforeCall(productCode, responseGroups, productVersion, lastModifiedDate, null);
        Type localVarReturnType = new TypeToken<ProductForIndexing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a product for indexing (asynchronously)
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     * @param productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30. (required)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param productVersion Optional. The current version of the product to use for latency checking.                If this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data. (optional)
     * @param lastModifiedDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductForIndexingAsync(String productCode, String responseGroups, Long productVersion, OffsetDateTime lastModifiedDate, final ApiCallback<ProductForIndexing> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductForIndexingValidateBeforeCall(productCode, responseGroups, productVersion, lastModifiedDate, _callback);
        Type localVarReturnType = new TypeToken<ProductForIndexing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProductInventories
     * @param locationInventoryQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductInventoriesCall(LocationInventoryQuery locationInventoryQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationInventoryQuery;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/locationinventory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductInventoriesValidateBeforeCall(LocationInventoryQuery locationInventoryQuery, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetProductInventoriesCall(locationInventoryQuery, _callback);
        return localVarCall;

    }

    /**
     * Get location inventories for products
     * Get location inventories for products
     * @param locationInventoryQuery  (optional)
     * @return LocationInventoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationInventoryCollection storefrontGetProductInventories(LocationInventoryQuery locationInventoryQuery) throws ApiException {
        ApiResponse<LocationInventoryCollection> localVarResp = storefrontGetProductInventoriesWithHttpInfo(locationInventoryQuery);
        return localVarResp.getData();
    }

    /**
     * Get location inventories for products
     * Get location inventories for products
     * @param locationInventoryQuery  (optional)
     * @return ApiResponse&lt;LocationInventoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationInventoryCollection> storefrontGetProductInventoriesWithHttpInfo(LocationInventoryQuery locationInventoryQuery) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductInventoriesValidateBeforeCall(locationInventoryQuery, null);
        Type localVarReturnType = new TypeToken<LocationInventoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get location inventories for products (asynchronously)
     * Get location inventories for products
     * @param locationInventoryQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductInventoriesAsync(LocationInventoryQuery locationInventoryQuery, final ApiCallback<LocationInventoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductInventoriesValidateBeforeCall(locationInventoryQuery, _callback);
        Type localVarReturnType = new TypeToken<LocationInventoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProductInventory
     * @param productCode  (required)
     * @param locationCodes  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductInventoryCall(String productCode, String locationCodes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}/locationinventory"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locationCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locationCodes", locationCodes));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductInventoryValidateBeforeCall(String productCode, String locationCodes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontGetProductInventory(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontGetProductInventoryCall(productCode, locationCodes, _callback);
        return localVarCall;

    }

    /**
     * Get product inventory
     * Get product inventory
     * @param productCode  (required)
     * @param locationCodes  (optional)
     * @return LocationInventoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public LocationInventoryCollection storefrontGetProductInventory(String productCode, String locationCodes) throws ApiException {
        ApiResponse<LocationInventoryCollection> localVarResp = storefrontGetProductInventoryWithHttpInfo(productCode, locationCodes);
        return localVarResp.getData();
    }

    /**
     * Get product inventory
     * Get product inventory
     * @param productCode  (required)
     * @param locationCodes  (optional)
     * @return ApiResponse&lt;LocationInventoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationInventoryCollection> storefrontGetProductInventoryWithHttpInfo(String productCode, String locationCodes) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductInventoryValidateBeforeCall(productCode, locationCodes, null);
        Type localVarReturnType = new TypeToken<LocationInventoryCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product inventory (asynchronously)
     * Get product inventory
     * @param productCode  (required)
     * @param locationCodes  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductInventoryAsync(String productCode, String locationCodes, final ApiCallback<LocationInventoryCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductInventoryValidateBeforeCall(productCode, locationCodes, _callback);
        Type localVarReturnType = new TypeToken<LocationInventoryCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontGetProducts
     * @param filter Optional. A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. Default value: 0. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param defaultSort  (optional)
     * @param mid  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param includeProductDetailsOnlyProperty  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductsCall(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseGroups, String responseOptions, String cursorMark, String defaultSort, String mid, Boolean includeAllImages, Boolean useSubscriptionPricing, Boolean includeProductDetailsOnlyProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        if (responseOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseOptions", responseOptions));
        }

        if (cursorMark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursorMark", cursorMark));
        }

        if (defaultSort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultSort", defaultSort));
        }

        if (mid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mid", mid));
        }

        if (includeAllImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllImages", includeAllImages));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        if (includeProductDetailsOnlyProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeProductDetailsOnlyProperty", includeProductDetailsOnlyProperty));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontGetProductsValidateBeforeCall(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseGroups, String responseOptions, String cursorMark, String defaultSort, String mid, Boolean includeAllImages, Boolean useSubscriptionPricing, Boolean includeProductDetailsOnlyProperty, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = storefrontGetProductsCall(filter, startIndex, pageSize, sortBy, responseGroups, responseOptions, cursorMark, defaultSort, mid, includeAllImages, useSubscriptionPricing, includeProductDetailsOnlyProperty, _callback);
        return localVarCall;

    }

    /**
     * Get a list of products
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. Default value: 0. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param defaultSort  (optional)
     * @param mid  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param includeProductDetailsOnlyProperty  (optional, default to false)
     * @return CatalogRuntimesProductCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogRuntimesProductCollection storefrontGetProducts(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseGroups, String responseOptions, String cursorMark, String defaultSort, String mid, Boolean includeAllImages, Boolean useSubscriptionPricing, Boolean includeProductDetailsOnlyProperty) throws ApiException {
        ApiResponse<CatalogRuntimesProductCollection> localVarResp = storefrontGetProductsWithHttpInfo(filter, startIndex, pageSize, sortBy, responseGroups, responseOptions, cursorMark, defaultSort, mid, includeAllImages, useSubscriptionPricing, includeProductDetailsOnlyProperty);
        return localVarResp.getData();
    }

    /**
     * Get a list of products
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. Default value: 0. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param defaultSort  (optional)
     * @param mid  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param includeProductDetailsOnlyProperty  (optional, default to false)
     * @return ApiResponse&lt;CatalogRuntimesProductCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogRuntimesProductCollection> storefrontGetProductsWithHttpInfo(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseGroups, String responseOptions, String cursorMark, String defaultSort, String mid, Boolean includeAllImages, Boolean useSubscriptionPricing, Boolean includeProductDetailsOnlyProperty) throws ApiException {
        okhttp3.Call localVarCall = storefrontGetProductsValidateBeforeCall(filter, startIndex, pageSize, sortBy, responseGroups, responseOptions, cursorMark, defaultSort, mid, includeAllImages, useSubscriptionPricing, includeProductDetailsOnlyProperty, null);
        Type localVarReturnType = new TypeToken<CatalogRuntimesProductCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of products (asynchronously)
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     * @param filter Optional. A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. (optional)
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. Default value: 0. (optional)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200. (optional)
     * @param sortBy Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts &#39;asc&#39; or &#39;ASC&#39; or descending order (z-a) which accepts &#39;desc&#39; or &#39;DESC&#39;. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param responseGroups Optional. Response groups to be determined. (optional)
     * @param responseOptions  (optional)
     * @param cursorMark Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null. (optional)
     * @param defaultSort  (optional)
     * @param mid  (optional)
     * @param includeAllImages Optional. If true return all images instead of default images. (optional, default to false)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param includeProductDetailsOnlyProperty  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontGetProductsAsync(String filter, Integer startIndex, Integer pageSize, String sortBy, String responseGroups, String responseOptions, String cursorMark, String defaultSort, String mid, Boolean includeAllImages, Boolean useSubscriptionPricing, Boolean includeProductDetailsOnlyProperty, final ApiCallback<CatalogRuntimesProductCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontGetProductsValidateBeforeCall(filter, startIndex, pageSize, sortBy, responseGroups, responseOptions, cursorMark, defaultSort, mid, includeAllImages, useSubscriptionPricing, includeProductDetailsOnlyProperty, _callback);
        Type localVarReturnType = new TypeToken<CatalogRuntimesProductCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontProductSubstitutions
     * @param productCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontProductSubstitutionsCall(String productCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}/substitutions"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontProductSubstitutionsValidateBeforeCall(String productCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontProductSubstitutions(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontProductSubstitutionsCall(productCode, _callback);
        return localVarCall;

    }

    /**
     * Get product substitutions
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     * @param productCode  (required)
     * @return ProductSubstituteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductSubstituteCollection storefrontProductSubstitutions(String productCode) throws ApiException {
        ApiResponse<ProductSubstituteCollection> localVarResp = storefrontProductSubstitutionsWithHttpInfo(productCode);
        return localVarResp.getData();
    }

    /**
     * Get product substitutions
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     * @param productCode  (required)
     * @return ApiResponse&lt;ProductSubstituteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductSubstituteCollection> storefrontProductSubstitutionsWithHttpInfo(String productCode) throws ApiException {
        okhttp3.Call localVarCall = storefrontProductSubstitutionsValidateBeforeCall(productCode, null);
        Type localVarReturnType = new TypeToken<ProductSubstituteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product substitutions (asynchronously)
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     * @param productCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontProductSubstitutionsAsync(String productCode, final ApiCallback<ProductSubstituteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontProductSubstitutionsValidateBeforeCall(productCode, _callback);
        Type localVarReturnType = new TypeToken<ProductSubstituteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontValidateDiscounts
     * @param productCode  (required)
     * @param variationProductCode  (optional)
     * @param customerAccountId Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper. (optional)
     * @param allowInactive  (optional)
     * @param skipInventoryCheck  (optional, default to false)
     * @param discountSelections  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontValidateDiscountsCall(String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, DiscountSelections discountSelections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discountSelections;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}/validateDiscounts"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variationProductCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variationProductCode", variationProductCode));
        }

        if (customerAccountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerAccountId", customerAccountId));
        }

        if (allowInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowInactive", allowInactive));
        }

        if (skipInventoryCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipInventoryCheck", skipInventoryCheck));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontValidateDiscountsValidateBeforeCall(String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, DiscountSelections discountSelections, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontValidateDiscounts(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontValidateDiscountsCall(productCode, variationProductCode, customerAccountId, allowInactive, skipInventoryCheck, discountSelections, _callback);
        return localVarCall;

    }

    /**
     * Validates discounts for a product
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     * @param productCode  (required)
     * @param variationProductCode  (optional)
     * @param customerAccountId Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper. (optional)
     * @param allowInactive  (optional)
     * @param skipInventoryCheck  (optional, default to false)
     * @param discountSelections  (optional)
     * @return DiscountValidationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DiscountValidationSummary storefrontValidateDiscounts(String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, DiscountSelections discountSelections) throws ApiException {
        ApiResponse<DiscountValidationSummary> localVarResp = storefrontValidateDiscountsWithHttpInfo(productCode, variationProductCode, customerAccountId, allowInactive, skipInventoryCheck, discountSelections);
        return localVarResp.getData();
    }

    /**
     * Validates discounts for a product
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     * @param productCode  (required)
     * @param variationProductCode  (optional)
     * @param customerAccountId Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper. (optional)
     * @param allowInactive  (optional)
     * @param skipInventoryCheck  (optional, default to false)
     * @param discountSelections  (optional)
     * @return ApiResponse&lt;DiscountValidationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiscountValidationSummary> storefrontValidateDiscountsWithHttpInfo(String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, DiscountSelections discountSelections) throws ApiException {
        okhttp3.Call localVarCall = storefrontValidateDiscountsValidateBeforeCall(productCode, variationProductCode, customerAccountId, allowInactive, skipInventoryCheck, discountSelections, null);
        Type localVarReturnType = new TypeToken<DiscountValidationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates discounts for a product (asynchronously)
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     * @param productCode  (required)
     * @param variationProductCode  (optional)
     * @param customerAccountId Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper. (optional)
     * @param allowInactive  (optional)
     * @param skipInventoryCheck  (optional, default to false)
     * @param discountSelections  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontValidateDiscountsAsync(String productCode, String variationProductCode, Integer customerAccountId, Boolean allowInactive, Boolean skipInventoryCheck, DiscountSelections discountSelections, final ApiCallback<DiscountValidationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontValidateDiscountsValidateBeforeCall(productCode, variationProductCode, customerAccountId, allowInactive, skipInventoryCheck, discountSelections, _callback);
        Type localVarReturnType = new TypeToken<DiscountValidationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storefrontValidateProduct
     * @param productCode Merchant-created code of product being validated. (required)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param skipDefaults Determines whether or not to add configured default-extras on an item when validating (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param recalculateDynamicCategories  (optional, default to false)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param productOptionSelections Final state of shopper selected options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontValidateProductCall(String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, Boolean useSubscriptionPricing, Boolean recalculateDynamicCategories, Boolean acceptVariantProductCode, ProductOptionSelections productOptionSelections, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productOptionSelections;

        // create path and map variables
        String localVarPath = "/commerce/catalog/storefront/products/{productCode}/validate"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipInventoryCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipInventoryCheck", skipInventoryCheck));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (skipDefaults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDefaults", skipDefaults));
        }

        if (purchaseLocation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseLocation", purchaseLocation));
        }

        if (useSubscriptionPricing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useSubscriptionPricing", useSubscriptionPricing));
        }

        if (recalculateDynamicCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recalculateDynamicCategories", recalculateDynamicCategories));
        }

        if (acceptVariantProductCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acceptVariantProductCode", acceptVariantProductCode));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storefrontValidateProductValidateBeforeCall(String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, Boolean useSubscriptionPricing, Boolean recalculateDynamicCategories, Boolean acceptVariantProductCode, ProductOptionSelections productOptionSelections, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling storefrontValidateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = storefrontValidateProductCall(productCode, skipInventoryCheck, quantity, skipDefaults, purchaseLocation, useSubscriptionPricing, recalculateDynamicCategories, acceptVariantProductCode, productOptionSelections, _callback);
        return localVarCall;

    }

    /**
     * Validates a variant product
     * Validate the final state of shopper-selected options.
     * @param productCode Merchant-created code of product being validated. (required)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param skipDefaults Determines whether or not to add configured default-extras on an item when validating (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param recalculateDynamicCategories  (optional, default to false)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param productOptionSelections Final state of shopper selected options. (optional)
     * @return ProductValidationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductValidationSummary storefrontValidateProduct(String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, Boolean useSubscriptionPricing, Boolean recalculateDynamicCategories, Boolean acceptVariantProductCode, ProductOptionSelections productOptionSelections) throws ApiException {
        ApiResponse<ProductValidationSummary> localVarResp = storefrontValidateProductWithHttpInfo(productCode, skipInventoryCheck, quantity, skipDefaults, purchaseLocation, useSubscriptionPricing, recalculateDynamicCategories, acceptVariantProductCode, productOptionSelections);
        return localVarResp.getData();
    }

    /**
     * Validates a variant product
     * Validate the final state of shopper-selected options.
     * @param productCode Merchant-created code of product being validated. (required)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param skipDefaults Determines whether or not to add configured default-extras on an item when validating (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param recalculateDynamicCategories  (optional, default to false)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param productOptionSelections Final state of shopper selected options. (optional)
     * @return ApiResponse&lt;ProductValidationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductValidationSummary> storefrontValidateProductWithHttpInfo(String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, Boolean useSubscriptionPricing, Boolean recalculateDynamicCategories, Boolean acceptVariantProductCode, ProductOptionSelections productOptionSelections) throws ApiException {
        okhttp3.Call localVarCall = storefrontValidateProductValidateBeforeCall(productCode, skipInventoryCheck, quantity, skipDefaults, purchaseLocation, useSubscriptionPricing, recalculateDynamicCategories, acceptVariantProductCode, productOptionSelections, null);
        Type localVarReturnType = new TypeToken<ProductValidationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates a variant product (asynchronously)
     * Validate the final state of shopper-selected options.
     * @param productCode Merchant-created code of product being validated. (required)
     * @param skipInventoryCheck Determines whether or not to check inventory on an item when validating (optional, default to false)
     * @param quantity Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified. (optional)
     * @param skipDefaults Determines whether or not to add configured default-extras on an item when validating (optional, default to false)
     * @param purchaseLocation  (optional)
     * @param useSubscriptionPricing  (optional, default to false)
     * @param recalculateDynamicCategories  (optional, default to false)
     * @param acceptVariantProductCode  (optional, default to false)
     * @param productOptionSelections Final state of shopper selected options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storefrontValidateProductAsync(String productCode, Boolean skipInventoryCheck, Integer quantity, Boolean skipDefaults, String purchaseLocation, Boolean useSubscriptionPricing, Boolean recalculateDynamicCategories, Boolean acceptVariantProductCode, ProductOptionSelections productOptionSelections, final ApiCallback<ProductValidationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = storefrontValidateProductValidateBeforeCall(productCode, skipInventoryCheck, quantity, skipDefaults, purchaseLocation, useSubscriptionPricing, recalculateDynamicCategories, acceptVariantProductCode, productOptionSelections, _callback);
        Type localVarReturnType = new TypeToken<ProductValidationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ProductsApi build() {
            return new ProductsApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
