/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.CandidateCorrection;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Spellcheck related results
 */
@ApiModel(description = "Spellcheck related results")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesSpellcheck implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CANDIDATE_CORRECTIONS = "candidateCorrections";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_CORRECTIONS)
  private List<CandidateCorrection> candidateCorrections = null;

  public static final String SERIALIZED_NAME_AUTO_CORRECTED = "autoCorrected";
  @SerializedName(SERIALIZED_NAME_AUTO_CORRECTED)
  private Boolean autoCorrected;

  public static final String SERIALIZED_NAME_ORIGINAL_QUERY = "originalQuery";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUERY)
  private String originalQuery;

  public static final String SERIALIZED_NAME_CORRECTED_QUERY = "correctedQuery";
  @SerializedName(SERIALIZED_NAME_CORRECTED_QUERY)
  private String correctedQuery;

  public CatalogRuntimesSpellcheck() {
  }

  public CatalogRuntimesSpellcheck candidateCorrections(List<CandidateCorrection> candidateCorrections) {
    
    this.candidateCorrections = candidateCorrections;
    return this;
  }

  public CatalogRuntimesSpellcheck addCandidateCorrectionsItem(CandidateCorrection candidateCorrectionsItem) {
    if (this.candidateCorrections == null) {
      this.candidateCorrections = new ArrayList<>();
    }
    this.candidateCorrections.add(candidateCorrectionsItem);
    return this;
  }

   /**
   * Get candidateCorrections
   * @return candidateCorrections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CandidateCorrection> getCandidateCorrections() {
    return candidateCorrections;
  }


  public void setCandidateCorrections(List<CandidateCorrection> candidateCorrections) {
    this.candidateCorrections = candidateCorrections;
  }


  public CatalogRuntimesSpellcheck autoCorrected(Boolean autoCorrected) {
    
    this.autoCorrected = autoCorrected;
    return this;
  }

   /**
   * Get autoCorrected
   * @return autoCorrected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAutoCorrected() {
    return autoCorrected;
  }


  public void setAutoCorrected(Boolean autoCorrected) {
    this.autoCorrected = autoCorrected;
  }


  public CatalogRuntimesSpellcheck originalQuery(String originalQuery) {
    
    this.originalQuery = originalQuery;
    return this;
  }

   /**
   * Get originalQuery
   * @return originalQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOriginalQuery() {
    return originalQuery;
  }


  public void setOriginalQuery(String originalQuery) {
    this.originalQuery = originalQuery;
  }


  public CatalogRuntimesSpellcheck correctedQuery(String correctedQuery) {
    
    this.correctedQuery = correctedQuery;
    return this;
  }

   /**
   * Get correctedQuery
   * @return correctedQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCorrectedQuery() {
    return correctedQuery;
  }


  public void setCorrectedQuery(String correctedQuery) {
    this.correctedQuery = correctedQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesSpellcheck catalogRuntimesSpellcheck = (CatalogRuntimesSpellcheck) o;
    return Objects.equals(this.candidateCorrections, catalogRuntimesSpellcheck.candidateCorrections) &&
        Objects.equals(this.autoCorrected, catalogRuntimesSpellcheck.autoCorrected) &&
        Objects.equals(this.originalQuery, catalogRuntimesSpellcheck.originalQuery) &&
        Objects.equals(this.correctedQuery, catalogRuntimesSpellcheck.correctedQuery);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidateCorrections, autoCorrected, originalQuery, correctedQuery);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesSpellcheck {\n");
    sb.append("    candidateCorrections: ").append(toIndentedString(candidateCorrections)).append("\n");
    sb.append("    autoCorrected: ").append(toIndentedString(autoCorrected)).append("\n");
    sb.append("    originalQuery: ").append(toIndentedString(originalQuery)).append("\n");
    sb.append("    correctedQuery: ").append(toIndentedString(correctedQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidateCorrections");
    openapiFields.add("autoCorrected");
    openapiFields.add("originalQuery");
    openapiFields.add("correctedQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesSpellcheck
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesSpellcheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesSpellcheck is not found in the empty JSON string", CatalogRuntimesSpellcheck.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesSpellcheck.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesSpellcheck` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("candidateCorrections") != null && !jsonObj.get("candidateCorrections").isJsonNull()) {
        JsonArray jsonArraycandidateCorrections = jsonObj.getAsJsonArray("candidateCorrections");
        if (jsonArraycandidateCorrections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("candidateCorrections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `candidateCorrections` to be an array in the JSON string but got `%s`", jsonObj.get("candidateCorrections").toString()));
          }

          // validate the optional field `candidateCorrections` (array)
          for (int i = 0; i < jsonArraycandidateCorrections.size(); i++) {
            CandidateCorrection.validateJsonObject(jsonArraycandidateCorrections.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("originalQuery") != null && !jsonObj.get("originalQuery").isJsonNull()) && !jsonObj.get("originalQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalQuery").toString()));
      }
      if ((jsonObj.get("correctedQuery") != null && !jsonObj.get("correctedQuery").isJsonNull()) && !jsonObj.get("correctedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correctedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correctedQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesSpellcheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesSpellcheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesSpellcheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesSpellcheck.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesSpellcheck>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesSpellcheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesSpellcheck read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesSpellcheck given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesSpellcheck
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesSpellcheck
  */
  public static CatalogRuntimesSpellcheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesSpellcheck.class);
  }

 /**
  * Convert an instance of CatalogRuntimesSpellcheck to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

