/*
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogstorefront.models.PriceListNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CatalogRuntimesPriceList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogRuntimesPriceList implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_ID = "priceListId";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ID)
  private Integer priceListId;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOLVABLE = "resolvable";
  @SerializedName(SERIALIZED_NAME_RESOLVABLE)
  private Boolean resolvable;

  public static final String SERIALIZED_NAME_IS_INDEXED = "isIndexed";
  @SerializedName(SERIALIZED_NAME_IS_INDEXED)
  private Boolean isIndexed;

  public static final String SERIALIZED_NAME_FILTERED_IN_STORE_FRONT = "filteredInStoreFront";
  @SerializedName(SERIALIZED_NAME_FILTERED_IN_STORE_FRONT)
  private Boolean filteredInStoreFront;

  public static final String SERIALIZED_NAME_IS_SITE_DEFAULT = "isSiteDefault";
  @SerializedName(SERIALIZED_NAME_IS_SITE_DEFAULT)
  private Boolean isSiteDefault;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private List<PriceListNode> ancestors = null;

  public static final String SERIALIZED_NAME_DESCENDANTS = "descendants";
  @SerializedName(SERIALIZED_NAME_DESCENDANTS)
  private List<PriceListNode> descendants = null;

  public static final String SERIALIZED_NAME_VALID_SITES = "validSites";
  @SerializedName(SERIALIZED_NAME_VALID_SITES)
  private List<Integer> validSites = null;

  public CatalogRuntimesPriceList() {
  }

  public CatalogRuntimesPriceList priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * Get priceListCode
   * @return priceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public CatalogRuntimesPriceList priceListId(Integer priceListId) {
    
    this.priceListId = priceListId;
    return this;
  }

   /**
   * Get priceListId
   * @return priceListId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPriceListId() {
    return priceListId;
  }


  public void setPriceListId(Integer priceListId) {
    this.priceListId = priceListId;
  }


  public CatalogRuntimesPriceList enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CatalogRuntimesPriceList name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CatalogRuntimesPriceList resolvable(Boolean resolvable) {
    
    this.resolvable = resolvable;
    return this;
  }

   /**
   * Get resolvable
   * @return resolvable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getResolvable() {
    return resolvable;
  }


  public void setResolvable(Boolean resolvable) {
    this.resolvable = resolvable;
  }


  public CatalogRuntimesPriceList isIndexed(Boolean isIndexed) {
    
    this.isIndexed = isIndexed;
    return this;
  }

   /**
   * Get isIndexed
   * @return isIndexed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsIndexed() {
    return isIndexed;
  }


  public void setIsIndexed(Boolean isIndexed) {
    this.isIndexed = isIndexed;
  }


  public CatalogRuntimesPriceList filteredInStoreFront(Boolean filteredInStoreFront) {
    
    this.filteredInStoreFront = filteredInStoreFront;
    return this;
  }

   /**
   * Get filteredInStoreFront
   * @return filteredInStoreFront
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFilteredInStoreFront() {
    return filteredInStoreFront;
  }


  public void setFilteredInStoreFront(Boolean filteredInStoreFront) {
    this.filteredInStoreFront = filteredInStoreFront;
  }


  public CatalogRuntimesPriceList isSiteDefault(Boolean isSiteDefault) {
    
    this.isSiteDefault = isSiteDefault;
    return this;
  }

   /**
   * Get isSiteDefault
   * @return isSiteDefault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsSiteDefault() {
    return isSiteDefault;
  }


  public void setIsSiteDefault(Boolean isSiteDefault) {
    this.isSiteDefault = isSiteDefault;
  }


  public CatalogRuntimesPriceList description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CatalogRuntimesPriceList ancestors(List<PriceListNode> ancestors) {
    
    this.ancestors = ancestors;
    return this;
  }

  public CatalogRuntimesPriceList addAncestorsItem(PriceListNode ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PriceListNode> getAncestors() {
    return ancestors;
  }


  public void setAncestors(List<PriceListNode> ancestors) {
    this.ancestors = ancestors;
  }


  public CatalogRuntimesPriceList descendants(List<PriceListNode> descendants) {
    
    this.descendants = descendants;
    return this;
  }

  public CatalogRuntimesPriceList addDescendantsItem(PriceListNode descendantsItem) {
    if (this.descendants == null) {
      this.descendants = new ArrayList<>();
    }
    this.descendants.add(descendantsItem);
    return this;
  }

   /**
   * Get descendants
   * @return descendants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PriceListNode> getDescendants() {
    return descendants;
  }


  public void setDescendants(List<PriceListNode> descendants) {
    this.descendants = descendants;
  }


  public CatalogRuntimesPriceList validSites(List<Integer> validSites) {
    
    this.validSites = validSites;
    return this;
  }

  public CatalogRuntimesPriceList addValidSitesItem(Integer validSitesItem) {
    if (this.validSites == null) {
      this.validSites = new ArrayList<>();
    }
    this.validSites.add(validSitesItem);
    return this;
  }

   /**
   * Get validSites
   * @return validSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getValidSites() {
    return validSites;
  }


  public void setValidSites(List<Integer> validSites) {
    this.validSites = validSites;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogRuntimesPriceList catalogRuntimesPriceList = (CatalogRuntimesPriceList) o;
    return Objects.equals(this.priceListCode, catalogRuntimesPriceList.priceListCode) &&
        Objects.equals(this.priceListId, catalogRuntimesPriceList.priceListId) &&
        Objects.equals(this.enabled, catalogRuntimesPriceList.enabled) &&
        Objects.equals(this.name, catalogRuntimesPriceList.name) &&
        Objects.equals(this.resolvable, catalogRuntimesPriceList.resolvable) &&
        Objects.equals(this.isIndexed, catalogRuntimesPriceList.isIndexed) &&
        Objects.equals(this.filteredInStoreFront, catalogRuntimesPriceList.filteredInStoreFront) &&
        Objects.equals(this.isSiteDefault, catalogRuntimesPriceList.isSiteDefault) &&
        Objects.equals(this.description, catalogRuntimesPriceList.description) &&
        Objects.equals(this.ancestors, catalogRuntimesPriceList.ancestors) &&
        Objects.equals(this.descendants, catalogRuntimesPriceList.descendants) &&
        Objects.equals(this.validSites, catalogRuntimesPriceList.validSites);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(priceListCode, priceListId, enabled, name, resolvable, isIndexed, filteredInStoreFront, isSiteDefault, description, ancestors, descendants, validSites);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogRuntimesPriceList {\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    priceListId: ").append(toIndentedString(priceListId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resolvable: ").append(toIndentedString(resolvable)).append("\n");
    sb.append("    isIndexed: ").append(toIndentedString(isIndexed)).append("\n");
    sb.append("    filteredInStoreFront: ").append(toIndentedString(filteredInStoreFront)).append("\n");
    sb.append("    isSiteDefault: ").append(toIndentedString(isSiteDefault)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    descendants: ").append(toIndentedString(descendants)).append("\n");
    sb.append("    validSites: ").append(toIndentedString(validSites)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("priceListCode");
    openapiFields.add("priceListId");
    openapiFields.add("enabled");
    openapiFields.add("name");
    openapiFields.add("resolvable");
    openapiFields.add("isIndexed");
    openapiFields.add("filteredInStoreFront");
    openapiFields.add("isSiteDefault");
    openapiFields.add("description");
    openapiFields.add("ancestors");
    openapiFields.add("descendants");
    openapiFields.add("validSites");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogRuntimesPriceList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogRuntimesPriceList.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogRuntimesPriceList is not found in the empty JSON string", CatalogRuntimesPriceList.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogRuntimesPriceList.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogRuntimesPriceList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("priceListCode") != null && !jsonObj.get("priceListCode").isJsonNull()) && !jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull()) {
        JsonArray jsonArrayancestors = jsonObj.getAsJsonArray("ancestors");
        if (jsonArrayancestors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ancestors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be an array in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
          }

          // validate the optional field `ancestors` (array)
          for (int i = 0; i < jsonArrayancestors.size(); i++) {
            PriceListNode.validateJsonObject(jsonArrayancestors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("descendants") != null && !jsonObj.get("descendants").isJsonNull()) {
        JsonArray jsonArraydescendants = jsonObj.getAsJsonArray("descendants");
        if (jsonArraydescendants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("descendants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `descendants` to be an array in the JSON string but got `%s`", jsonObj.get("descendants").toString()));
          }

          // validate the optional field `descendants` (array)
          for (int i = 0; i < jsonArraydescendants.size(); i++) {
            PriceListNode.validateJsonObject(jsonArraydescendants.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("validSites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validSites` to be an array in the JSON string but got `%s`", jsonObj.get("validSites").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogRuntimesPriceList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogRuntimesPriceList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogRuntimesPriceList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogRuntimesPriceList.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogRuntimesPriceList>() {
           @Override
           public void write(JsonWriter out, CatalogRuntimesPriceList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogRuntimesPriceList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogRuntimesPriceList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogRuntimesPriceList
  * @throws IOException if the JSON string is invalid with respect to CatalogRuntimesPriceList
  */
  public static CatalogRuntimesPriceList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogRuntimesPriceList.class);
  }

 /**
  * Convert an instance of CatalogRuntimesPriceList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

