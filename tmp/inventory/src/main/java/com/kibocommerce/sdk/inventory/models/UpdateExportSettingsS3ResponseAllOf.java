/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.inventory.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * UpdateExportSettingsS3ResponseAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateExportSettingsS3ResponseAllOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TENANT_I_D = "tenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private Integer tenantID;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_S3_I_D = "exportSettingsS3ID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_S3_I_D)
  private Integer exportSettingsS3ID;

  public static final String SERIALIZED_NAME_EXPORT_SETTINGS_I_D = "exportSettingsID";
  @SerializedName(SERIALIZED_NAME_EXPORT_SETTINGS_I_D)
  private Integer exportSettingsID;

  public UpdateExportSettingsS3ResponseAllOf() {
  }

  public UpdateExportSettingsS3ResponseAllOf tenantID(Integer tenantID) {
    
    this.tenantID = tenantID;
    return this;
  }

   /**
   * Tenant ID
   * @return tenantID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tenant ID")

  public Integer getTenantID() {
    return tenantID;
  }


  public void setTenantID(Integer tenantID) {
    this.tenantID = tenantID;
  }


  public UpdateExportSettingsS3ResponseAllOf exportSettingsS3ID(Integer exportSettingsS3ID) {
    
    this.exportSettingsS3ID = exportSettingsS3ID;
    return this;
  }

   /**
   * Export Settings S3 ID
   * @return exportSettingsS3ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings S3 ID")

  public Integer getExportSettingsS3ID() {
    return exportSettingsS3ID;
  }


  public void setExportSettingsS3ID(Integer exportSettingsS3ID) {
    this.exportSettingsS3ID = exportSettingsS3ID;
  }


  public UpdateExportSettingsS3ResponseAllOf exportSettingsID(Integer exportSettingsID) {
    
    this.exportSettingsID = exportSettingsID;
    return this;
  }

   /**
   * Export Settings ID to associate the s3 settings with
   * @return exportSettingsID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Export Settings ID to associate the s3 settings with")

  public Integer getExportSettingsID() {
    return exportSettingsID;
  }


  public void setExportSettingsID(Integer exportSettingsID) {
    this.exportSettingsID = exportSettingsID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateExportSettingsS3ResponseAllOf updateExportSettingsS3ResponseAllOf = (UpdateExportSettingsS3ResponseAllOf) o;
    return Objects.equals(this.tenantID, updateExportSettingsS3ResponseAllOf.tenantID) &&
        Objects.equals(this.exportSettingsS3ID, updateExportSettingsS3ResponseAllOf.exportSettingsS3ID) &&
        Objects.equals(this.exportSettingsID, updateExportSettingsS3ResponseAllOf.exportSettingsID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantID, exportSettingsS3ID, exportSettingsID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateExportSettingsS3ResponseAllOf {\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("    exportSettingsS3ID: ").append(toIndentedString(exportSettingsS3ID)).append("\n");
    sb.append("    exportSettingsID: ").append(toIndentedString(exportSettingsID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenantID");
    openapiFields.add("exportSettingsS3ID");
    openapiFields.add("exportSettingsID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateExportSettingsS3ResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateExportSettingsS3ResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateExportSettingsS3ResponseAllOf is not found in the empty JSON string", UpdateExportSettingsS3ResponseAllOf.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!UpdateExportSettingsS3ResponseAllOf.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateExportSettingsS3ResponseAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateExportSettingsS3ResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateExportSettingsS3ResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateExportSettingsS3ResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateExportSettingsS3ResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateExportSettingsS3ResponseAllOf>() {
           @Override
           public void write(JsonWriter out, UpdateExportSettingsS3ResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateExportSettingsS3ResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateExportSettingsS3ResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateExportSettingsS3ResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to UpdateExportSettingsS3ResponseAllOf
  */
  public static UpdateExportSettingsS3ResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateExportSettingsS3ResponseAllOf.class);
  }

 /**
  * Convert an instance of UpdateExportSettingsS3ResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

