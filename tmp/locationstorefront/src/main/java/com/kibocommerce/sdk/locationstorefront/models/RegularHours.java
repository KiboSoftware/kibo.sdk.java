/*
 * Kibo Location Storefront Service
 * OpenAPI Spec for Kibo Location Storefront Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.locationstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.locationstorefront.models.Hours;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * RegularHours
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RegularHours implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SUNDAY = "sunday";
  @SerializedName(SERIALIZED_NAME_SUNDAY)
  private Hours sunday;

  public static final String SERIALIZED_NAME_MONDAY = "monday";
  @SerializedName(SERIALIZED_NAME_MONDAY)
  private Hours monday;

  public static final String SERIALIZED_NAME_TUESDAY = "tuesday";
  @SerializedName(SERIALIZED_NAME_TUESDAY)
  private Hours tuesday;

  public static final String SERIALIZED_NAME_WEDNESDAY = "wednesday";
  @SerializedName(SERIALIZED_NAME_WEDNESDAY)
  private Hours wednesday;

  public static final String SERIALIZED_NAME_THURSDAY = "thursday";
  @SerializedName(SERIALIZED_NAME_THURSDAY)
  private Hours thursday;

  public static final String SERIALIZED_NAME_FRIDAY = "friday";
  @SerializedName(SERIALIZED_NAME_FRIDAY)
  private Hours friday;

  public static final String SERIALIZED_NAME_SATURDAY = "saturday";
  @SerializedName(SERIALIZED_NAME_SATURDAY)
  private Hours saturday;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public RegularHours() {
  }

  public RegularHours sunday(Hours sunday) {
    
    this.sunday = sunday;
    return this;
  }

   /**
   * Get sunday
   * @return sunday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getSunday() {
    return sunday;
  }


  public void setSunday(Hours sunday) {
    this.sunday = sunday;
  }


  public RegularHours monday(Hours monday) {
    
    this.monday = monday;
    return this;
  }

   /**
   * Get monday
   * @return monday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getMonday() {
    return monday;
  }


  public void setMonday(Hours monday) {
    this.monday = monday;
  }


  public RegularHours tuesday(Hours tuesday) {
    
    this.tuesday = tuesday;
    return this;
  }

   /**
   * Get tuesday
   * @return tuesday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getTuesday() {
    return tuesday;
  }


  public void setTuesday(Hours tuesday) {
    this.tuesday = tuesday;
  }


  public RegularHours wednesday(Hours wednesday) {
    
    this.wednesday = wednesday;
    return this;
  }

   /**
   * Get wednesday
   * @return wednesday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getWednesday() {
    return wednesday;
  }


  public void setWednesday(Hours wednesday) {
    this.wednesday = wednesday;
  }


  public RegularHours thursday(Hours thursday) {
    
    this.thursday = thursday;
    return this;
  }

   /**
   * Get thursday
   * @return thursday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getThursday() {
    return thursday;
  }


  public void setThursday(Hours thursday) {
    this.thursday = thursday;
  }


  public RegularHours friday(Hours friday) {
    
    this.friday = friday;
    return this;
  }

   /**
   * Get friday
   * @return friday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getFriday() {
    return friday;
  }


  public void setFriday(Hours friday) {
    this.friday = friday;
  }


  public RegularHours saturday(Hours saturday) {
    
    this.saturday = saturday;
    return this;
  }

   /**
   * Get saturday
   * @return saturday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Hours getSaturday() {
    return saturday;
  }


  public void setSaturday(Hours saturday) {
    this.saturday = saturday;
  }


  public RegularHours timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegularHours regularHours = (RegularHours) o;
    return Objects.equals(this.sunday, regularHours.sunday) &&
        Objects.equals(this.monday, regularHours.monday) &&
        Objects.equals(this.tuesday, regularHours.tuesday) &&
        Objects.equals(this.wednesday, regularHours.wednesday) &&
        Objects.equals(this.thursday, regularHours.thursday) &&
        Objects.equals(this.friday, regularHours.friday) &&
        Objects.equals(this.saturday, regularHours.saturday) &&
        Objects.equals(this.timeZone, regularHours.timeZone);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sunday, monday, tuesday, wednesday, thursday, friday, saturday, timeZone);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegularHours {\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("    monday: ").append(toIndentedString(monday)).append("\n");
    sb.append("    tuesday: ").append(toIndentedString(tuesday)).append("\n");
    sb.append("    wednesday: ").append(toIndentedString(wednesday)).append("\n");
    sb.append("    thursday: ").append(toIndentedString(thursday)).append("\n");
    sb.append("    friday: ").append(toIndentedString(friday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sunday");
    openapiFields.add("monday");
    openapiFields.add("tuesday");
    openapiFields.add("wednesday");
    openapiFields.add("thursday");
    openapiFields.add("friday");
    openapiFields.add("saturday");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegularHours
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RegularHours.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegularHours is not found in the empty JSON string", RegularHours.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!RegularHours.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegularHours` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `sunday`
      if (jsonObj.get("sunday") != null && !jsonObj.get("sunday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("sunday"));
      }
      // validate the optional field `monday`
      if (jsonObj.get("monday") != null && !jsonObj.get("monday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("monday"));
      }
      // validate the optional field `tuesday`
      if (jsonObj.get("tuesday") != null && !jsonObj.get("tuesday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("tuesday"));
      }
      // validate the optional field `wednesday`
      if (jsonObj.get("wednesday") != null && !jsonObj.get("wednesday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("wednesday"));
      }
      // validate the optional field `thursday`
      if (jsonObj.get("thursday") != null && !jsonObj.get("thursday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("thursday"));
      }
      // validate the optional field `friday`
      if (jsonObj.get("friday") != null && !jsonObj.get("friday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("friday"));
      }
      // validate the optional field `saturday`
      if (jsonObj.get("saturday") != null && !jsonObj.get("saturday").isJsonNull()) {
        Hours.validateJsonObject(jsonObj.getAsJsonObject("saturday"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegularHours.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegularHours' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegularHours> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegularHours.class));

       return (TypeAdapter<T>) new TypeAdapter<RegularHours>() {
           @Override
           public void write(JsonWriter out, RegularHours value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegularHours read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegularHours given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegularHours
  * @throws IOException if the JSON string is invalid with respect to RegularHours
  */
  public static RegularHours fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegularHours.class);
  }

 /**
  * Convert an instance of RegularHours to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

