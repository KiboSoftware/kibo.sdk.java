/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CustomerAuditEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerAuditEntry implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID = "customerAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_ID)
  private Integer customerAccountId;

  public static final String SERIALIZED_NAME_CUSTOMER_AUDIT_ENTRY_ID = "customerAuditEntryId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_AUDIT_ENTRY_ID)
  private Integer customerAuditEntryId;

  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_ENTRY_USER = "entryUser";
  @SerializedName(SERIALIZED_NAME_ENTRY_USER)
  private String entryUser;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIELD_PATH = "fieldPath";
  @SerializedName(SERIALIZED_NAME_FIELD_PATH)
  private String fieldPath;

  public static final String SERIALIZED_NAME_OLD_VALUE = "oldValue";
  @SerializedName(SERIALIZED_NAME_OLD_VALUE)
  private String oldValue;

  public static final String SERIALIZED_NAME_NEW_VALUE = "newValue";
  @SerializedName(SERIALIZED_NAME_NEW_VALUE)
  private String newValue;

  public CustomerAuditEntry() {
  }

  public CustomerAuditEntry customerAccountId(Integer customerAccountId) {
    
    this.customerAccountId = customerAccountId;
    return this;
  }

   /**
   * Customer associated with this entry
   * @return customerAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer associated with this entry")

  public Integer getCustomerAccountId() {
    return customerAccountId;
  }


  public void setCustomerAccountId(Integer customerAccountId) {
    this.customerAccountId = customerAccountId;
  }


  public CustomerAuditEntry customerAuditEntryId(Integer customerAuditEntryId) {
    
    this.customerAuditEntryId = customerAuditEntryId;
    return this;
  }

   /**
   * Id of this entry
   * @return customerAuditEntryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of this entry")

  public Integer getCustomerAuditEntryId() {
    return customerAuditEntryId;
  }


  public void setCustomerAuditEntryId(Integer customerAuditEntryId) {
    this.customerAuditEntryId = customerAuditEntryId;
  }


  public CustomerAuditEntry entryDate(OffsetDateTime entryDate) {
    
    this.entryDate = entryDate;
    return this;
  }

   /**
   * Date of the Entry
   * @return entryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the Entry")

  public OffsetDateTime getEntryDate() {
    return entryDate;
  }


  public void setEntryDate(OffsetDateTime entryDate) {
    this.entryDate = entryDate;
  }


  public CustomerAuditEntry entryUser(String entryUser) {
    
    this.entryUser = entryUser;
    return this;
  }

   /**
   * User ID associated with this Entry
   * @return entryUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User ID associated with this Entry")

  public String getEntryUser() {
    return entryUser;
  }


  public void setEntryUser(String entryUser) {
    this.entryUser = entryUser;
  }


  public CustomerAuditEntry application(String application) {
    
    this.application = application;
    return this;
  }

   /**
   * Applicattion associated with this entry
   * @return application
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Applicattion associated with this entry")

  public String getApplication() {
    return application;
  }


  public void setApplication(String application) {
    this.application = application;
  }


  public CustomerAuditEntry site(String site) {
    
    this.site = site;
    return this;
  }

   /**
   * Site associated wit this entry
   * @return site
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Site associated wit this entry")

  public String getSite() {
    return site;
  }


  public void setSite(String site) {
    this.site = site;
  }


  public CustomerAuditEntry description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the change (UI Displayable)
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the change (UI Displayable)")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CustomerAuditEntry fieldPath(String fieldPath) {
    
    this.fieldPath = fieldPath;
    return this;
  }

   /**
   * Path of the field value being changed (e.g. /Customer/Contacts/1/FirstName)
   * @return fieldPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path of the field value being changed (e.g. /Customer/Contacts/1/FirstName)")

  public String getFieldPath() {
    return fieldPath;
  }


  public void setFieldPath(String fieldPath) {
    this.fieldPath = fieldPath;
  }


  public CustomerAuditEntry oldValue(String oldValue) {
    
    this.oldValue = oldValue;
    return this;
  }

   /**
   * Original value before this event
   * @return oldValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Original value before this event")

  public String getOldValue() {
    return oldValue;
  }


  public void setOldValue(String oldValue) {
    this.oldValue = oldValue;
  }


  public CustomerAuditEntry newValue(String newValue) {
    
    this.newValue = newValue;
    return this;
  }

   /**
   * New Value after this event
   * @return newValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New Value after this event")

  public String getNewValue() {
    return newValue;
  }


  public void setNewValue(String newValue) {
    this.newValue = newValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAuditEntry customerAuditEntry = (CustomerAuditEntry) o;
    return Objects.equals(this.customerAccountId, customerAuditEntry.customerAccountId) &&
        Objects.equals(this.customerAuditEntryId, customerAuditEntry.customerAuditEntryId) &&
        Objects.equals(this.entryDate, customerAuditEntry.entryDate) &&
        Objects.equals(this.entryUser, customerAuditEntry.entryUser) &&
        Objects.equals(this.application, customerAuditEntry.application) &&
        Objects.equals(this.site, customerAuditEntry.site) &&
        Objects.equals(this.description, customerAuditEntry.description) &&
        Objects.equals(this.fieldPath, customerAuditEntry.fieldPath) &&
        Objects.equals(this.oldValue, customerAuditEntry.oldValue) &&
        Objects.equals(this.newValue, customerAuditEntry.newValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountId, customerAuditEntryId, entryDate, entryUser, application, site, description, fieldPath, oldValue, newValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAuditEntry {\n");
    sb.append("    customerAccountId: ").append(toIndentedString(customerAccountId)).append("\n");
    sb.append("    customerAuditEntryId: ").append(toIndentedString(customerAuditEntryId)).append("\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    entryUser: ").append(toIndentedString(entryUser)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fieldPath: ").append(toIndentedString(fieldPath)).append("\n");
    sb.append("    oldValue: ").append(toIndentedString(oldValue)).append("\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerAccountId");
    openapiFields.add("customerAuditEntryId");
    openapiFields.add("entryDate");
    openapiFields.add("entryUser");
    openapiFields.add("application");
    openapiFields.add("site");
    openapiFields.add("description");
    openapiFields.add("fieldPath");
    openapiFields.add("oldValue");
    openapiFields.add("newValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAuditEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAuditEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAuditEntry is not found in the empty JSON string", CustomerAuditEntry.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomerAuditEntry.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerAuditEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("entryUser") != null && !jsonObj.get("entryUser").isJsonNull()) && !jsonObj.get("entryUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryUser").toString()));
      }
      if ((jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) && !jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if ((jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) && !jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fieldPath") != null && !jsonObj.get("fieldPath").isJsonNull()) && !jsonObj.get("fieldPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldPath").toString()));
      }
      if ((jsonObj.get("oldValue") != null && !jsonObj.get("oldValue").isJsonNull()) && !jsonObj.get("oldValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldValue").toString()));
      }
      if ((jsonObj.get("newValue") != null && !jsonObj.get("newValue").isJsonNull()) && !jsonObj.get("newValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAuditEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAuditEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAuditEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAuditEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAuditEntry>() {
           @Override
           public void write(JsonWriter out, CustomerAuditEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAuditEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAuditEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAuditEntry
  * @throws IOException if the JSON string is invalid with respect to CustomerAuditEntry
  */
  public static CustomerAuditEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAuditEntry.class);
  }

 /**
  * Convert an instance of CustomerAuditEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

