/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.AdminUserAuditInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Customer purchase order transaction log
 */
@ApiModel(description = "Customer purchase order transaction log")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PurchaseOrderTransaction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CUSTOMER_PURCHASE_ORDER_ACCOUNT_ID = "customerPurchaseOrderAccountId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PURCHASE_ORDER_ACCOUNT_ID)
  private Integer customerPurchaseOrderAccountId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_NUMBER = "purchaseOrderNumber";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_NUMBER)
  private String purchaseOrderNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Double transactionAmount;

  public static final String SERIALIZED_NAME_CREDIT_LIMIT = "creditLimit";
  @SerializedName(SERIALIZED_NAME_CREDIT_LIMIT)
  private Double creditLimit;

  public static final String SERIALIZED_NAME_ADDITIONAL_TRANSACTION_DETAIL = "additionalTransactionDetail";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TRANSACTION_DETAIL)
  private String additionalTransactionDetail;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_ID = "transactionTypeId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_ID)
  private Integer transactionTypeId;

  public static final String SERIALIZED_NAME_TRANSACTION_DESCRIPTION = "transactionDescription";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DESCRIPTION)
  private String transactionDescription;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public PurchaseOrderTransaction() {
  }

  public PurchaseOrderTransaction customerPurchaseOrderAccountId(Integer customerPurchaseOrderAccountId) {
    
    this.customerPurchaseOrderAccountId = customerPurchaseOrderAccountId;
    return this;
  }

   /**
   * Unique identifier for Customer purchase order account
   * @return customerPurchaseOrderAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for Customer purchase order account")

  public Integer getCustomerPurchaseOrderAccountId() {
    return customerPurchaseOrderAccountId;
  }


  public void setCustomerPurchaseOrderAccountId(Integer customerPurchaseOrderAccountId) {
    this.customerPurchaseOrderAccountId = customerPurchaseOrderAccountId;
  }


  public PurchaseOrderTransaction externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public PurchaseOrderTransaction siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Site Id associated with transaction log
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Site Id associated with transaction log")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public PurchaseOrderTransaction tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Tenant Id associated with transaction log
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tenant Id associated with transaction log")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public PurchaseOrderTransaction transactionDate(OffsetDateTime transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Date when the transaction was made on a purchase order account
   * @return transactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when the transaction was made on a purchase order account")

  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
  }


  public PurchaseOrderTransaction orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Unique identifier for an order
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for an order")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PurchaseOrderTransaction purchaseOrderNumber(String purchaseOrderNumber) {
    
    this.purchaseOrderNumber = purchaseOrderNumber;
    return this;
  }

   /**
   * Purchase order number
   * @return purchaseOrderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase order number")

  public String getPurchaseOrderNumber() {
    return purchaseOrderNumber;
  }


  public void setPurchaseOrderNumber(String purchaseOrderNumber) {
    this.purchaseOrderNumber = purchaseOrderNumber;
  }


  public PurchaseOrderTransaction transactionAmount(Double transactionAmount) {
    
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Transaction amount in transaction log for a purchase order account
   * @return transactionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction amount in transaction log for a purchase order account")

  public Double getTransactionAmount() {
    return transactionAmount;
  }


  public void setTransactionAmount(Double transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public PurchaseOrderTransaction creditLimit(Double creditLimit) {
    
    this.creditLimit = creditLimit;
    return this;
  }

   /**
   * Maximum credit available on a purchase order account
   * @return creditLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum credit available on a purchase order account")

  public Double getCreditLimit() {
    return creditLimit;
  }


  public void setCreditLimit(Double creditLimit) {
    this.creditLimit = creditLimit;
  }


  public PurchaseOrderTransaction additionalTransactionDetail(String additionalTransactionDetail) {
    
    this.additionalTransactionDetail = additionalTransactionDetail;
    return this;
  }

   /**
   * Any additional transaction detail other than transaction description
   * @return additionalTransactionDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any additional transaction detail other than transaction description")

  public String getAdditionalTransactionDetail() {
    return additionalTransactionDetail;
  }


  public void setAdditionalTransactionDetail(String additionalTransactionDetail) {
    this.additionalTransactionDetail = additionalTransactionDetail;
  }


  public PurchaseOrderTransaction availableBalance(Double availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Current available balance on Purchase Order account
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current available balance on Purchase Order account")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
  }


  public PurchaseOrderTransaction transactionTypeId(Integer transactionTypeId) {
    
    this.transactionTypeId = transactionTypeId;
    return this;
  }

   /**
   *  Purchase Order transaction type  1 - Line of Credit Change  2 - Order Submitted  3 - Payment Collected  4 - Payment Voided  5 - Payment Refund  6 - Manual Adjustment
   * @return transactionTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " Purchase Order transaction type  1 - Line of Credit Change  2 - Order Submitted  3 - Payment Collected  4 - Payment Voided  5 - Payment Refund  6 - Manual Adjustment")

  public Integer getTransactionTypeId() {
    return transactionTypeId;
  }


  public void setTransactionTypeId(Integer transactionTypeId) {
    this.transactionTypeId = transactionTypeId;
  }


  public PurchaseOrderTransaction transactionDescription(String transactionDescription) {
    
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Purchase Order transaction description  Line of Credit Change  Order Submitted  Payment Collected  Payment Voided  Payment Refund  Manual Adjustment
   * @return transactionDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase Order transaction description  Line of Credit Change  Order Submitted  Payment Collected  Payment Voided  Payment Refund  Manual Adjustment")

  public String getTransactionDescription() {
    return transactionDescription;
  }


  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }


  public PurchaseOrderTransaction author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public PurchaseOrderTransaction auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseOrderTransaction purchaseOrderTransaction = (PurchaseOrderTransaction) o;
    return Objects.equals(this.customerPurchaseOrderAccountId, purchaseOrderTransaction.customerPurchaseOrderAccountId) &&
        Objects.equals(this.externalId, purchaseOrderTransaction.externalId) &&
        Objects.equals(this.siteId, purchaseOrderTransaction.siteId) &&
        Objects.equals(this.tenantId, purchaseOrderTransaction.tenantId) &&
        Objects.equals(this.transactionDate, purchaseOrderTransaction.transactionDate) &&
        Objects.equals(this.orderId, purchaseOrderTransaction.orderId) &&
        Objects.equals(this.purchaseOrderNumber, purchaseOrderTransaction.purchaseOrderNumber) &&
        Objects.equals(this.transactionAmount, purchaseOrderTransaction.transactionAmount) &&
        Objects.equals(this.creditLimit, purchaseOrderTransaction.creditLimit) &&
        Objects.equals(this.additionalTransactionDetail, purchaseOrderTransaction.additionalTransactionDetail) &&
        Objects.equals(this.availableBalance, purchaseOrderTransaction.availableBalance) &&
        Objects.equals(this.transactionTypeId, purchaseOrderTransaction.transactionTypeId) &&
        Objects.equals(this.transactionDescription, purchaseOrderTransaction.transactionDescription) &&
        Objects.equals(this.author, purchaseOrderTransaction.author) &&
        Objects.equals(this.auditInfo, purchaseOrderTransaction.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerPurchaseOrderAccountId, externalId, siteId, tenantId, transactionDate, orderId, purchaseOrderNumber, transactionAmount, creditLimit, additionalTransactionDetail, availableBalance, transactionTypeId, transactionDescription, author, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseOrderTransaction {\n");
    sb.append("    customerPurchaseOrderAccountId: ").append(toIndentedString(customerPurchaseOrderAccountId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    purchaseOrderNumber: ").append(toIndentedString(purchaseOrderNumber)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    additionalTransactionDetail: ").append(toIndentedString(additionalTransactionDetail)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    transactionTypeId: ").append(toIndentedString(transactionTypeId)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerPurchaseOrderAccountId");
    openapiFields.add("externalId");
    openapiFields.add("siteId");
    openapiFields.add("tenantId");
    openapiFields.add("transactionDate");
    openapiFields.add("orderId");
    openapiFields.add("purchaseOrderNumber");
    openapiFields.add("transactionAmount");
    openapiFields.add("creditLimit");
    openapiFields.add("additionalTransactionDetail");
    openapiFields.add("availableBalance");
    openapiFields.add("transactionTypeId");
    openapiFields.add("transactionDescription");
    openapiFields.add("author");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PurchaseOrderTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PurchaseOrderTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseOrderTransaction is not found in the empty JSON string", PurchaseOrderTransaction.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PurchaseOrderTransaction.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseOrderTransaction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("purchaseOrderNumber") != null && !jsonObj.get("purchaseOrderNumber").isJsonNull()) && !jsonObj.get("purchaseOrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderNumber").toString()));
      }
      if ((jsonObj.get("additionalTransactionDetail") != null && !jsonObj.get("additionalTransactionDetail").isJsonNull()) && !jsonObj.get("additionalTransactionDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalTransactionDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalTransactionDetail").toString()));
      }
      if ((jsonObj.get("transactionDescription") != null && !jsonObj.get("transactionDescription").isJsonNull()) && !jsonObj.get("transactionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionDescription").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseOrderTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseOrderTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseOrderTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseOrderTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseOrderTransaction>() {
           @Override
           public void write(JsonWriter out, PurchaseOrderTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseOrderTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PurchaseOrderTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PurchaseOrderTransaction
  * @throws IOException if the JSON string is invalid with respect to PurchaseOrderTransaction
  */
  public static PurchaseOrderTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseOrderTransaction.class);
  }

 /**
  * Convert an instance of PurchaseOrderTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

