/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.customer.models.CustomerPurchaseOrderPaymentTerm;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * CustomerPurchaseOrderAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerPurchaseOrderAccount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_CREDIT_LIMIT = "creditLimit";
  @SerializedName(SERIALIZED_NAME_CREDIT_LIMIT)
  private Double creditLimit;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_BALANCE = "totalAvailableBalance";
  @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_BALANCE)
  private Double totalAvailableBalance;

  public static final String SERIALIZED_NAME_OVERDRAFT_ALLOWANCE = "overdraftAllowance";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_ALLOWANCE)
  private Double overdraftAllowance;

  public static final String SERIALIZED_NAME_OVERDRAFT_ALLOWANCE_TYPE = "overdraftAllowanceType";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_ALLOWANCE_TYPE)
  private String overdraftAllowanceType;

  public static final String SERIALIZED_NAME_CUSTOMER_PURCHASE_ORDER_PAYMENT_TERMS = "customerPurchaseOrderPaymentTerms";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PURCHASE_ORDER_PAYMENT_TERMS)
  private List<CustomerPurchaseOrderPaymentTerm> customerPurchaseOrderPaymentTerms = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public CustomerPurchaseOrderAccount() {
  }

  public CustomerPurchaseOrderAccount id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CustomerPurchaseOrderAccount accountId(Integer accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAccountId() {
    return accountId;
  }


  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public CustomerPurchaseOrderAccount isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public CustomerPurchaseOrderAccount creditLimit(Double creditLimit) {
    
    this.creditLimit = creditLimit;
    return this;
  }

   /**
   * Get creditLimit
   * @return creditLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCreditLimit() {
    return creditLimit;
  }


  public void setCreditLimit(Double creditLimit) {
    this.creditLimit = creditLimit;
  }


  public CustomerPurchaseOrderAccount availableBalance(Double availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Get availableBalance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    this.availableBalance = availableBalance;
  }


  public CustomerPurchaseOrderAccount totalAvailableBalance(Double totalAvailableBalance) {
    
    this.totalAvailableBalance = totalAvailableBalance;
    return this;
  }

   /**
   * Get totalAvailableBalance
   * @return totalAvailableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalAvailableBalance() {
    return totalAvailableBalance;
  }


  public void setTotalAvailableBalance(Double totalAvailableBalance) {
    this.totalAvailableBalance = totalAvailableBalance;
  }


  public CustomerPurchaseOrderAccount overdraftAllowance(Double overdraftAllowance) {
    
    this.overdraftAllowance = overdraftAllowance;
    return this;
  }

   /**
   * Get overdraftAllowance
   * @return overdraftAllowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOverdraftAllowance() {
    return overdraftAllowance;
  }


  public void setOverdraftAllowance(Double overdraftAllowance) {
    this.overdraftAllowance = overdraftAllowance;
  }


  public CustomerPurchaseOrderAccount overdraftAllowanceType(String overdraftAllowanceType) {
    
    this.overdraftAllowanceType = overdraftAllowanceType;
    return this;
  }

   /**
   * Indicates type of overdraft. Possible values are \&quot;Percent\&quot; and \&quot;Amount\&quot;
   * @return overdraftAllowanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates type of overdraft. Possible values are \"Percent\" and \"Amount\"")

  public String getOverdraftAllowanceType() {
    return overdraftAllowanceType;
  }


  public void setOverdraftAllowanceType(String overdraftAllowanceType) {
    this.overdraftAllowanceType = overdraftAllowanceType;
  }


  public CustomerPurchaseOrderAccount customerPurchaseOrderPaymentTerms(List<CustomerPurchaseOrderPaymentTerm> customerPurchaseOrderPaymentTerms) {
    
    this.customerPurchaseOrderPaymentTerms = customerPurchaseOrderPaymentTerms;
    return this;
  }

  public CustomerPurchaseOrderAccount addCustomerPurchaseOrderPaymentTermsItem(CustomerPurchaseOrderPaymentTerm customerPurchaseOrderPaymentTermsItem) {
    if (this.customerPurchaseOrderPaymentTerms == null) {
      this.customerPurchaseOrderPaymentTerms = new ArrayList<>();
    }
    this.customerPurchaseOrderPaymentTerms.add(customerPurchaseOrderPaymentTermsItem);
    return this;
  }

   /**
   * Get customerPurchaseOrderPaymentTerms
   * @return customerPurchaseOrderPaymentTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CustomerPurchaseOrderPaymentTerm> getCustomerPurchaseOrderPaymentTerms() {
    return customerPurchaseOrderPaymentTerms;
  }


  public void setCustomerPurchaseOrderPaymentTerms(List<CustomerPurchaseOrderPaymentTerm> customerPurchaseOrderPaymentTerms) {
    this.customerPurchaseOrderPaymentTerms = customerPurchaseOrderPaymentTerms;
  }


  public CustomerPurchaseOrderAccount auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerPurchaseOrderAccount customerPurchaseOrderAccount = (CustomerPurchaseOrderAccount) o;
    return Objects.equals(this.id, customerPurchaseOrderAccount.id) &&
        Objects.equals(this.accountId, customerPurchaseOrderAccount.accountId) &&
        Objects.equals(this.isEnabled, customerPurchaseOrderAccount.isEnabled) &&
        Objects.equals(this.creditLimit, customerPurchaseOrderAccount.creditLimit) &&
        Objects.equals(this.availableBalance, customerPurchaseOrderAccount.availableBalance) &&
        Objects.equals(this.totalAvailableBalance, customerPurchaseOrderAccount.totalAvailableBalance) &&
        Objects.equals(this.overdraftAllowance, customerPurchaseOrderAccount.overdraftAllowance) &&
        Objects.equals(this.overdraftAllowanceType, customerPurchaseOrderAccount.overdraftAllowanceType) &&
        Objects.equals(this.customerPurchaseOrderPaymentTerms, customerPurchaseOrderAccount.customerPurchaseOrderPaymentTerms) &&
        Objects.equals(this.auditInfo, customerPurchaseOrderAccount.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountId, isEnabled, creditLimit, availableBalance, totalAvailableBalance, overdraftAllowance, overdraftAllowanceType, customerPurchaseOrderPaymentTerms, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerPurchaseOrderAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    totalAvailableBalance: ").append(toIndentedString(totalAvailableBalance)).append("\n");
    sb.append("    overdraftAllowance: ").append(toIndentedString(overdraftAllowance)).append("\n");
    sb.append("    overdraftAllowanceType: ").append(toIndentedString(overdraftAllowanceType)).append("\n");
    sb.append("    customerPurchaseOrderPaymentTerms: ").append(toIndentedString(customerPurchaseOrderPaymentTerms)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("accountId");
    openapiFields.add("isEnabled");
    openapiFields.add("creditLimit");
    openapiFields.add("availableBalance");
    openapiFields.add("totalAvailableBalance");
    openapiFields.add("overdraftAllowance");
    openapiFields.add("overdraftAllowanceType");
    openapiFields.add("customerPurchaseOrderPaymentTerms");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerPurchaseOrderAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerPurchaseOrderAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerPurchaseOrderAccount is not found in the empty JSON string", CustomerPurchaseOrderAccount.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CustomerPurchaseOrderAccount.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerPurchaseOrderAccount` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("overdraftAllowanceType") != null && !jsonObj.get("overdraftAllowanceType").isJsonNull()) && !jsonObj.get("overdraftAllowanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overdraftAllowanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overdraftAllowanceType").toString()));
      }
      if (jsonObj.get("customerPurchaseOrderPaymentTerms") != null && !jsonObj.get("customerPurchaseOrderPaymentTerms").isJsonNull()) {
        JsonArray jsonArraycustomerPurchaseOrderPaymentTerms = jsonObj.getAsJsonArray("customerPurchaseOrderPaymentTerms");
        if (jsonArraycustomerPurchaseOrderPaymentTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerPurchaseOrderPaymentTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerPurchaseOrderPaymentTerms` to be an array in the JSON string but got `%s`", jsonObj.get("customerPurchaseOrderPaymentTerms").toString()));
          }

          // validate the optional field `customerPurchaseOrderPaymentTerms` (array)
          for (int i = 0; i < jsonArraycustomerPurchaseOrderPaymentTerms.size(); i++) {
            CustomerPurchaseOrderPaymentTerm.validateJsonObject(jsonArraycustomerPurchaseOrderPaymentTerms.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerPurchaseOrderAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerPurchaseOrderAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerPurchaseOrderAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerPurchaseOrderAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerPurchaseOrderAccount>() {
           @Override
           public void write(JsonWriter out, CustomerPurchaseOrderAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerPurchaseOrderAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerPurchaseOrderAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerPurchaseOrderAccount
  * @throws IOException if the JSON string is invalid with respect to CustomerPurchaseOrderAccount
  */
  public static CustomerPurchaseOrderAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerPurchaseOrderAccount.class);
  }

 /**
  * Convert an instance of CustomerPurchaseOrderAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

