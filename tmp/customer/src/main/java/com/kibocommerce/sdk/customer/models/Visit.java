/*
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.customer.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.customer.models.Transaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Visit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Visit implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<Transaction> transactions = null;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_WEB_SITE_ID = "webSiteId";
  @SerializedName(SERIALIZED_NAME_WEB_SITE_ID)
  private Integer webSiteId;

  public static final String SERIALIZED_NAME_WEB_REFERRER = "webReferrer";
  @SerializedName(SERIALIZED_NAME_WEB_REFERRER)
  private String webReferrer;

  public static final String SERIALIZED_NAME_WEB_SESSION_ID = "webSessionId";
  @SerializedName(SERIALIZED_NAME_WEB_SESSION_ID)
  private String webSessionId;

  public static final String SERIALIZED_NAME_WEB_USER_AGENT = "webUserAgent";
  @SerializedName(SERIALIZED_NAME_WEB_USER_AGENT)
  private String webUserAgent;

  public static final String SERIALIZED_NAME_BROWSER_LOCATION_CODE = "browserLocationCode";
  @SerializedName(SERIALIZED_NAME_BROWSER_LOCATION_CODE)
  private String browserLocationCode;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "locationCode";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public Visit() {
  }

  public Visit id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Visit accountId(Integer accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAccountId() {
    return accountId;
  }


  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public Visit type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public Visit date(OffsetDateTime date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public Visit transactions(List<Transaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public Visit addTransactionsItem(Transaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Transaction> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }


  public Visit userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Visit webSiteId(Integer webSiteId) {
    
    this.webSiteId = webSiteId;
    return this;
  }

   /**
   * Get webSiteId
   * @return webSiteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWebSiteId() {
    return webSiteId;
  }


  public void setWebSiteId(Integer webSiteId) {
    this.webSiteId = webSiteId;
  }


  public Visit webReferrer(String webReferrer) {
    
    this.webReferrer = webReferrer;
    return this;
  }

   /**
   * Get webReferrer
   * @return webReferrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWebReferrer() {
    return webReferrer;
  }


  public void setWebReferrer(String webReferrer) {
    this.webReferrer = webReferrer;
  }


  public Visit webSessionId(String webSessionId) {
    
    this.webSessionId = webSessionId;
    return this;
  }

   /**
   * Get webSessionId
   * @return webSessionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWebSessionId() {
    return webSessionId;
  }


  public void setWebSessionId(String webSessionId) {
    this.webSessionId = webSessionId;
  }


  public Visit webUserAgent(String webUserAgent) {
    
    this.webUserAgent = webUserAgent;
    return this;
  }

   /**
   * Get webUserAgent
   * @return webUserAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWebUserAgent() {
    return webUserAgent;
  }


  public void setWebUserAgent(String webUserAgent) {
    this.webUserAgent = webUserAgent;
  }


  public Visit browserLocationCode(String browserLocationCode) {
    
    this.browserLocationCode = browserLocationCode;
    return this;
  }

   /**
   * Get browserLocationCode
   * @return browserLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBrowserLocationCode() {
    return browserLocationCode;
  }


  public void setBrowserLocationCode(String browserLocationCode) {
    this.browserLocationCode = browserLocationCode;
  }


  public Visit locationCode(String locationCode) {
    
    this.locationCode = locationCode;
    return this;
  }

   /**
   * Get locationCode
   * @return locationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocationCode() {
    return locationCode;
  }


  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Visit visit = (Visit) o;
    return Objects.equals(this.id, visit.id) &&
        Objects.equals(this.accountId, visit.accountId) &&
        Objects.equals(this.type, visit.type) &&
        Objects.equals(this.date, visit.date) &&
        Objects.equals(this.transactions, visit.transactions) &&
        Objects.equals(this.userId, visit.userId) &&
        Objects.equals(this.webSiteId, visit.webSiteId) &&
        Objects.equals(this.webReferrer, visit.webReferrer) &&
        Objects.equals(this.webSessionId, visit.webSessionId) &&
        Objects.equals(this.webUserAgent, visit.webUserAgent) &&
        Objects.equals(this.browserLocationCode, visit.browserLocationCode) &&
        Objects.equals(this.locationCode, visit.locationCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountId, type, date, transactions, userId, webSiteId, webReferrer, webSessionId, webUserAgent, browserLocationCode, locationCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visit {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    webSiteId: ").append(toIndentedString(webSiteId)).append("\n");
    sb.append("    webReferrer: ").append(toIndentedString(webReferrer)).append("\n");
    sb.append("    webSessionId: ").append(toIndentedString(webSessionId)).append("\n");
    sb.append("    webUserAgent: ").append(toIndentedString(webUserAgent)).append("\n");
    sb.append("    browserLocationCode: ").append(toIndentedString(browserLocationCode)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("accountId");
    openapiFields.add("type");
    openapiFields.add("date");
    openapiFields.add("transactions");
    openapiFields.add("userId");
    openapiFields.add("webSiteId");
    openapiFields.add("webReferrer");
    openapiFields.add("webSessionId");
    openapiFields.add("webUserAgent");
    openapiFields.add("browserLocationCode");
    openapiFields.add("locationCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Visit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Visit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Visit is not found in the empty JSON string", Visit.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!Visit.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Visit` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            Transaction.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("webReferrer") != null && !jsonObj.get("webReferrer").isJsonNull()) && !jsonObj.get("webReferrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webReferrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webReferrer").toString()));
      }
      if ((jsonObj.get("webSessionId") != null && !jsonObj.get("webSessionId").isJsonNull()) && !jsonObj.get("webSessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webSessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webSessionId").toString()));
      }
      if ((jsonObj.get("webUserAgent") != null && !jsonObj.get("webUserAgent").isJsonNull()) && !jsonObj.get("webUserAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webUserAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webUserAgent").toString()));
      }
      if ((jsonObj.get("browserLocationCode") != null && !jsonObj.get("browserLocationCode").isJsonNull()) && !jsonObj.get("browserLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserLocationCode").toString()));
      }
      if ((jsonObj.get("locationCode") != null && !jsonObj.get("locationCode").isJsonNull()) && !jsonObj.get("locationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Visit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Visit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Visit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Visit.class));

       return (TypeAdapter<T>) new TypeAdapter<Visit>() {
           @Override
           public void write(JsonWriter out, Visit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Visit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Visit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Visit
  * @throws IOException if the JSON string is invalid with respect to Visit
  */
  public static Visit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Visit.class);
  }

 /**
  * Convert an instance of Visit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

