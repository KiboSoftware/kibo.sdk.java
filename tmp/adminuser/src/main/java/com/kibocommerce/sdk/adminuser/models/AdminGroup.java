/*
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.adminuser.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.adminuser.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.adminuser.models.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * AdminGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AdminGroup implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_SCOPE_TYPE_ID = "scopeTypeId";
  @SerializedName(SERIALIZED_NAME_SCOPE_TYPE_ID)
  private Integer scopeTypeId;

  public static final String SERIALIZED_NAME_SCOPE_ID = "scopeId";
  @SerializedName(SERIALIZED_NAME_SCOPE_ID)
  private Integer scopeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<User> users = null;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public AdminGroup() {
  }

  public AdminGroup groupCode(String groupCode) {
    
    this.groupCode = groupCode;
    return this;
  }

   /**
   * User Group Id
   * @return groupCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User Group Id")

  public String getGroupCode() {
    return groupCode;
  }


  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public AdminGroup scopeTypeId(Integer scopeTypeId) {
    
    this.scopeTypeId = scopeTypeId;
    return this;
  }

   /**
   * Scope Type Id
   * @return scopeTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Scope Type Id")

  public Integer getScopeTypeId() {
    return scopeTypeId;
  }


  public void setScopeTypeId(Integer scopeTypeId) {
    this.scopeTypeId = scopeTypeId;
  }


  public AdminGroup scopeId(Integer scopeId) {
    
    this.scopeId = scopeId;
    return this;
  }

   /**
   * Scope Id
   * @return scopeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Scope Id")

  public Integer getScopeId() {
    return scopeId;
  }


  public void setScopeId(Integer scopeId) {
    this.scopeId = scopeId;
  }


  public AdminGroup name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Human-readable Name of the group
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human-readable Name of the group")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AdminGroup description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Human-readable description of the group
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human-readable description of the group")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AdminGroup users(List<User> users) {
    
    this.users = users;
    return this;
  }

  public AdminGroup addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Users associate with a group
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Users associate with a group")

  public List<User> getUsers() {
    return users;
  }


  public void setUsers(List<User> users) {
    this.users = users;
  }


  public AdminGroup auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminGroup adminGroup = (AdminGroup) o;
    return Objects.equals(this.groupCode, adminGroup.groupCode) &&
        Objects.equals(this.scopeTypeId, adminGroup.scopeTypeId) &&
        Objects.equals(this.scopeId, adminGroup.scopeId) &&
        Objects.equals(this.name, adminGroup.name) &&
        Objects.equals(this.description, adminGroup.description) &&
        Objects.equals(this.users, adminGroup.users) &&
        Objects.equals(this.auditInfo, adminGroup.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupCode, scopeTypeId, scopeId, name, description, users, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminGroup {\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    scopeTypeId: ").append(toIndentedString(scopeTypeId)).append("\n");
    sb.append("    scopeId: ").append(toIndentedString(scopeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupCode");
    openapiFields.add("scopeTypeId");
    openapiFields.add("scopeId");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("users");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AdminGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AdminGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminGroup is not found in the empty JSON string", AdminGroup.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!AdminGroup.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            User.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminGroup>() {
           @Override
           public void write(JsonWriter out, AdminGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdminGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdminGroup
  * @throws IOException if the JSON string is invalid with respect to AdminGroup
  */
  public static AdminGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminGroup.class);
  }

 /**
  * Convert an instance of AdminGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

