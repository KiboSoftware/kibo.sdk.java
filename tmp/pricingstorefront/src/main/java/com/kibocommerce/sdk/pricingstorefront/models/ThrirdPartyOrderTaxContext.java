/*
 * Kibo PricingRuntime Service
 * OpenAPI Spec for Kibo PricingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.pricingstorefront.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.pricingstorefront.models.ThrirdPartyItemTaxContext;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ThrirdPartyOrderTaxContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ThrirdPartyOrderTaxContext implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ITEM_TAX_CONTEXTS = "itemTaxContexts";
  @SerializedName(SERIALIZED_NAME_ITEM_TAX_CONTEXTS)
  private List<ThrirdPartyItemTaxContext> itemTaxContexts = null;

  public static final String SERIALIZED_NAME_SHIPPING_TAX = "shippingTax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX)
  private Double shippingTax;

  public static final String SERIALIZED_NAME_HANDLING_FEE_TAX = "handlingFeeTax";
  @SerializedName(SERIALIZED_NAME_HANDLING_FEE_TAX)
  private Double handlingFeeTax;

  public static final String SERIALIZED_NAME_ORDER_TAX = "orderTax";
  @SerializedName(SERIALIZED_NAME_ORDER_TAX)
  private Double orderTax;

  public ThrirdPartyOrderTaxContext() {
  }

  public ThrirdPartyOrderTaxContext itemTaxContexts(List<ThrirdPartyItemTaxContext> itemTaxContexts) {
    
    this.itemTaxContexts = itemTaxContexts;
    return this;
  }

  public ThrirdPartyOrderTaxContext addItemTaxContextsItem(ThrirdPartyItemTaxContext itemTaxContextsItem) {
    if (this.itemTaxContexts == null) {
      this.itemTaxContexts = new ArrayList<>();
    }
    this.itemTaxContexts.add(itemTaxContextsItem);
    return this;
  }

   /**
   * Taxes applied to each item in the order.
   * @return itemTaxContexts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxes applied to each item in the order.")

  public List<ThrirdPartyItemTaxContext> getItemTaxContexts() {
    return itemTaxContexts;
  }


  public void setItemTaxContexts(List<ThrirdPartyItemTaxContext> itemTaxContexts) {
    this.itemTaxContexts = itemTaxContexts;
  }


  public ThrirdPartyOrderTaxContext shippingTax(Double shippingTax) {
    
    this.shippingTax = shippingTax;
    return this;
  }

   /**
   * Rollup shipping tax for this order
   * @return shippingTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rollup shipping tax for this order")

  public Double getShippingTax() {
    return shippingTax;
  }


  public void setShippingTax(Double shippingTax) {
    this.shippingTax = shippingTax;
  }


  public ThrirdPartyOrderTaxContext handlingFeeTax(Double handlingFeeTax) {
    
    this.handlingFeeTax = handlingFeeTax;
    return this;
  }

   /**
   * The handling fee tax amount for this line item
   * @return handlingFeeTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The handling fee tax amount for this line item")

  public Double getHandlingFeeTax() {
    return handlingFeeTax;
  }


  public void setHandlingFeeTax(Double handlingFeeTax) {
    this.handlingFeeTax = handlingFeeTax;
  }


  public ThrirdPartyOrderTaxContext orderTax(Double orderTax) {
    
    this.orderTax = orderTax;
    return this;
  }

   /**
   * Rollup tax on the order not including shipping
   * @return orderTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rollup tax on the order not including shipping")

  public Double getOrderTax() {
    return orderTax;
  }


  public void setOrderTax(Double orderTax) {
    this.orderTax = orderTax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThrirdPartyOrderTaxContext thrirdPartyOrderTaxContext = (ThrirdPartyOrderTaxContext) o;
    return Objects.equals(this.itemTaxContexts, thrirdPartyOrderTaxContext.itemTaxContexts) &&
        Objects.equals(this.shippingTax, thrirdPartyOrderTaxContext.shippingTax) &&
        Objects.equals(this.handlingFeeTax, thrirdPartyOrderTaxContext.handlingFeeTax) &&
        Objects.equals(this.orderTax, thrirdPartyOrderTaxContext.orderTax);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemTaxContexts, shippingTax, handlingFeeTax, orderTax);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThrirdPartyOrderTaxContext {\n");
    sb.append("    itemTaxContexts: ").append(toIndentedString(itemTaxContexts)).append("\n");
    sb.append("    shippingTax: ").append(toIndentedString(shippingTax)).append("\n");
    sb.append("    handlingFeeTax: ").append(toIndentedString(handlingFeeTax)).append("\n");
    sb.append("    orderTax: ").append(toIndentedString(orderTax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemTaxContexts");
    openapiFields.add("shippingTax");
    openapiFields.add("handlingFeeTax");
    openapiFields.add("orderTax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ThrirdPartyOrderTaxContext
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ThrirdPartyOrderTaxContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThrirdPartyOrderTaxContext is not found in the empty JSON string", ThrirdPartyOrderTaxContext.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ThrirdPartyOrderTaxContext.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThrirdPartyOrderTaxContext` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("itemTaxContexts") != null && !jsonObj.get("itemTaxContexts").isJsonNull()) {
        JsonArray jsonArrayitemTaxContexts = jsonObj.getAsJsonArray("itemTaxContexts");
        if (jsonArrayitemTaxContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemTaxContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemTaxContexts` to be an array in the JSON string but got `%s`", jsonObj.get("itemTaxContexts").toString()));
          }

          // validate the optional field `itemTaxContexts` (array)
          for (int i = 0; i < jsonArrayitemTaxContexts.size(); i++) {
            ThrirdPartyItemTaxContext.validateJsonObject(jsonArrayitemTaxContexts.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThrirdPartyOrderTaxContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThrirdPartyOrderTaxContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThrirdPartyOrderTaxContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThrirdPartyOrderTaxContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ThrirdPartyOrderTaxContext>() {
           @Override
           public void write(JsonWriter out, ThrirdPartyOrderTaxContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThrirdPartyOrderTaxContext read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThrirdPartyOrderTaxContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThrirdPartyOrderTaxContext
  * @throws IOException if the JSON string is invalid with respect to ThrirdPartyOrderTaxContext
  */
  public static ThrirdPartyOrderTaxContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThrirdPartyOrderTaxContext.class);
  }

 /**
  * Convert an instance of ThrirdPartyOrderTaxContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

