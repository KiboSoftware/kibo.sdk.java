/*
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.content.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * The projection of an individual field in a view.
 */
@ApiModel(description = "The projection of an individual field in a view.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ViewField implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public ViewField() {
  }

  public ViewField name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the field projected into the view document, meaning the name given to the target field after it is projected.  The name must be unique within the list of viewFields provided in the view.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the field projected into the view document, meaning the name given to the target field after it is projected.  The name must be unique within the list of viewFields provided in the view.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ViewField target(String target) {
    
    this.target = target;
    return this;
  }

   /**
   * Specifies the document field to project. First-class fields will be returned on the document, but can be projected into the view properties.   Valid first-class fields include name, id, documentTypeFqn, listFqn and publishState. Dynamic fields within the properties field can be projected by prefixing the target string with \&quot;properties.\&quot;  Example: \&quot;properties.property1\&quot;. If a property is an object, then dot notation can be used to walk to particular subelements. Example: \&quot;properties.property1.subProperty1\&quot;  Individual array elements can be selected as well. Example: \&quot;properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem\&quot;  Any target miss will result in a null value returning for the projected field.
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the document field to project. First-class fields will be returned on the document, but can be projected into the view properties.   Valid first-class fields include name, id, documentTypeFqn, listFqn and publishState. Dynamic fields within the properties field can be projected by prefixing the target string with \"properties.\"  Example: \"properties.property1\". If a property is an object, then dot notation can be used to walk to particular subelements. Example: \"properties.property1.subProperty1\"  Individual array elements can be selected as well. Example: \"properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem\"  Any target miss will result in a null value returning for the projected field.")

  public String getTarget() {
    return target;
  }


  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewField viewField = (ViewField) o;
    return Objects.equals(this.name, viewField.name) &&
        Objects.equals(this.target, viewField.target);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, target);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewField {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ViewField
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ViewField.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewField is not found in the empty JSON string", ViewField.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ViewField.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewField` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewField.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewField>() {
           @Override
           public void write(JsonWriter out, ViewField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewField read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ViewField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ViewField
  * @throws IOException if the JSON string is invalid with respect to ViewField
  */
  public static ViewField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewField.class);
  }

 /**
  * Convert an instance of ViewField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

