/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.SiteSettingsPurchaseOrderCustomField;
import com.kibocommerce.sdk.settings.models.SiteSettingsPurchaseOrderPaymentTerm;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * PurchaseOrderPaymentDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PurchaseOrderPaymentDefinition implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_PAYMENT_TERMS = "paymentTerms";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERMS)
  private List<SiteSettingsPurchaseOrderPaymentTerm> paymentTerms = null;

  public static final String SERIALIZED_NAME_ALLOW_SPLIT_PAYMENT = "allowSplitPayment";
  @SerializedName(SERIALIZED_NAME_ALLOW_SPLIT_PAYMENT)
  private Boolean allowSplitPayment;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<SiteSettingsPurchaseOrderCustomField> customFields = null;

  public PurchaseOrderPaymentDefinition() {
  }

  public PurchaseOrderPaymentDefinition isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Is purchase order payment enabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is purchase order payment enabled")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public PurchaseOrderPaymentDefinition paymentTerms(List<SiteSettingsPurchaseOrderPaymentTerm> paymentTerms) {
    
    this.paymentTerms = paymentTerms;
    return this;
  }

  public PurchaseOrderPaymentDefinition addPaymentTermsItem(SiteSettingsPurchaseOrderPaymentTerm paymentTermsItem) {
    if (this.paymentTerms == null) {
      this.paymentTerms = new ArrayList<>();
    }
    this.paymentTerms.add(paymentTermsItem);
    return this;
  }

   /**
   * Allowed net terms
   * @return paymentTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allowed net terms")

  public List<SiteSettingsPurchaseOrderPaymentTerm> getPaymentTerms() {
    return paymentTerms;
  }


  public void setPaymentTerms(List<SiteSettingsPurchaseOrderPaymentTerm> paymentTerms) {
    this.paymentTerms = paymentTerms;
  }


  public PurchaseOrderPaymentDefinition allowSplitPayment(Boolean allowSplitPayment) {
    
    this.allowSplitPayment = allowSplitPayment;
    return this;
  }

   /**
   * Indicates whether another payment can be used with the purchase order
   * @return allowSplitPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether another payment can be used with the purchase order")

  public Boolean getAllowSplitPayment() {
    return allowSplitPayment;
  }


  public void setAllowSplitPayment(Boolean allowSplitPayment) {
    this.allowSplitPayment = allowSplitPayment;
  }


  public PurchaseOrderPaymentDefinition customFields(List<SiteSettingsPurchaseOrderCustomField> customFields) {
    
    this.customFields = customFields;
    return this;
  }

  public PurchaseOrderPaymentDefinition addCustomFieldsItem(SiteSettingsPurchaseOrderCustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * 
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SiteSettingsPurchaseOrderCustomField> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<SiteSettingsPurchaseOrderCustomField> customFields) {
    this.customFields = customFields;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseOrderPaymentDefinition purchaseOrderPaymentDefinition = (PurchaseOrderPaymentDefinition) o;
    return Objects.equals(this.isEnabled, purchaseOrderPaymentDefinition.isEnabled) &&
        Objects.equals(this.paymentTerms, purchaseOrderPaymentDefinition.paymentTerms) &&
        Objects.equals(this.allowSplitPayment, purchaseOrderPaymentDefinition.allowSplitPayment) &&
        Objects.equals(this.customFields, purchaseOrderPaymentDefinition.customFields);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEnabled, paymentTerms, allowSplitPayment, customFields);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseOrderPaymentDefinition {\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    paymentTerms: ").append(toIndentedString(paymentTerms)).append("\n");
    sb.append("    allowSplitPayment: ").append(toIndentedString(allowSplitPayment)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isEnabled");
    openapiFields.add("paymentTerms");
    openapiFields.add("allowSplitPayment");
    openapiFields.add("customFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PurchaseOrderPaymentDefinition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PurchaseOrderPaymentDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseOrderPaymentDefinition is not found in the empty JSON string", PurchaseOrderPaymentDefinition.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PurchaseOrderPaymentDefinition.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseOrderPaymentDefinition` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("paymentTerms") != null && !jsonObj.get("paymentTerms").isJsonNull()) {
        JsonArray jsonArraypaymentTerms = jsonObj.getAsJsonArray("paymentTerms");
        if (jsonArraypaymentTerms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentTerms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentTerms` to be an array in the JSON string but got `%s`", jsonObj.get("paymentTerms").toString()));
          }

          // validate the optional field `paymentTerms` (array)
          for (int i = 0; i < jsonArraypaymentTerms.size(); i++) {
            SiteSettingsPurchaseOrderPaymentTerm.validateJsonObject(jsonArraypaymentTerms.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customFields") != null && !jsonObj.get("customFields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("customFields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFields` to be an array in the JSON string but got `%s`", jsonObj.get("customFields").toString()));
          }

          // validate the optional field `customFields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            SiteSettingsPurchaseOrderCustomField.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseOrderPaymentDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseOrderPaymentDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseOrderPaymentDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseOrderPaymentDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseOrderPaymentDefinition>() {
           @Override
           public void write(JsonWriter out, PurchaseOrderPaymentDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseOrderPaymentDefinition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PurchaseOrderPaymentDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PurchaseOrderPaymentDefinition
  * @throws IOException if the JSON string is invalid with respect to PurchaseOrderPaymentDefinition
  */
  public static PurchaseOrderPaymentDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseOrderPaymentDefinition.class);
  }

 /**
  * Convert an instance of PurchaseOrderPaymentDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

