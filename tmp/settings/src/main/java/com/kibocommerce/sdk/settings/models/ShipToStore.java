/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.Cancellation;
import com.kibocommerce.sdk.settings.models.ShippingMethod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * ShipToStore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShipToStore implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_ALWAYS_CREATE_TRANSFER_SHIPMENTS = "alwaysCreateTransferShipments";
  @SerializedName(SERIALIZED_NAME_ALWAYS_CREATE_TRANSFER_SHIPMENTS)
  private Boolean alwaysCreateTransferShipments;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private ShippingMethod shippingMethod;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private Cancellation cancellation;

  public ShipToStore() {
  }

  public ShipToStore isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Get isEnabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ShipToStore alwaysCreateTransferShipments(Boolean alwaysCreateTransferShipments) {
    
    this.alwaysCreateTransferShipments = alwaysCreateTransferShipments;
    return this;
  }

   /**
   * Get alwaysCreateTransferShipments
   * @return alwaysCreateTransferShipments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAlwaysCreateTransferShipments() {
    return alwaysCreateTransferShipments;
  }


  public void setAlwaysCreateTransferShipments(Boolean alwaysCreateTransferShipments) {
    this.alwaysCreateTransferShipments = alwaysCreateTransferShipments;
  }


  public ShipToStore shippingMethod(ShippingMethod shippingMethod) {
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Get shippingMethod
   * @return shippingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShippingMethod getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(ShippingMethod shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public ShipToStore cancellation(Cancellation cancellation) {
    
    this.cancellation = cancellation;
    return this;
  }

   /**
   * Get cancellation
   * @return cancellation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Cancellation getCancellation() {
    return cancellation;
  }


  public void setCancellation(Cancellation cancellation) {
    this.cancellation = cancellation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipToStore shipToStore = (ShipToStore) o;
    return Objects.equals(this.isEnabled, shipToStore.isEnabled) &&
        Objects.equals(this.alwaysCreateTransferShipments, shipToStore.alwaysCreateTransferShipments) &&
        Objects.equals(this.shippingMethod, shipToStore.shippingMethod) &&
        Objects.equals(this.cancellation, shipToStore.cancellation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEnabled, alwaysCreateTransferShipments, shippingMethod, cancellation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipToStore {\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    alwaysCreateTransferShipments: ").append(toIndentedString(alwaysCreateTransferShipments)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isEnabled");
    openapiFields.add("alwaysCreateTransferShipments");
    openapiFields.add("shippingMethod");
    openapiFields.add("cancellation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShipToStore
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShipToStore.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipToStore is not found in the empty JSON string", ShipToStore.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ShipToStore.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipToStore` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      // validate the optional field `shippingMethod`
      if (jsonObj.get("shippingMethod") != null && !jsonObj.get("shippingMethod").isJsonNull()) {
        ShippingMethod.validateJsonObject(jsonObj.getAsJsonObject("shippingMethod"));
      }
      // validate the optional field `cancellation`
      if (jsonObj.get("cancellation") != null && !jsonObj.get("cancellation").isJsonNull()) {
        Cancellation.validateJsonObject(jsonObj.getAsJsonObject("cancellation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipToStore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipToStore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipToStore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipToStore.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipToStore>() {
           @Override
           public void write(JsonWriter out, ShipToStore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipToStore read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShipToStore given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShipToStore
  * @throws IOException if the JSON string is invalid with respect to ShipToStore
  */
  public static ShipToStore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipToStore.class);
  }

 /**
  * Convert an instance of ShipToStore to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

