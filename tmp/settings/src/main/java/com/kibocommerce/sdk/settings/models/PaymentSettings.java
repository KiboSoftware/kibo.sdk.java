/*
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.settings.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.settings.models.AdminUserAuditInfo;
import com.kibocommerce.sdk.settings.models.ExternalPaymentWorkflowDefinition;
import com.kibocommerce.sdk.settings.models.Gateway;
import com.kibocommerce.sdk.settings.models.OrderJobSettings;
import com.kibocommerce.sdk.settings.models.PurchaseOrderPaymentDefinition;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Payment gateway settings defined for this site. A payment gateway is an e-commerce application service provider that authorizes   payments for e-businesses and online retailers. You can define multiple payment gateway settings but only one is active at a time.   Authorize.net is the only payment gateway supported currently.
 */
@ApiModel(description = "Payment gateway settings defined for this site. A payment gateway is an e-commerce application service provider that authorizes   payments for e-businesses and online retailers. You can define multiple payment gateway settings but only one is active at a time.   Authorize.net is the only payment gateway supported currently.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PaymentSettings implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_GATEWAYS = "gateways";
  @SerializedName(SERIALIZED_NAME_GATEWAYS)
  private List<Gateway> gateways = null;

  public static final String SERIALIZED_NAME_EXTERNAL_PAYMENT_WORKFLOW_DEFINITIONS = "externalPaymentWorkflowDefinitions";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PAYMENT_WORKFLOW_DEFINITIONS)
  private List<ExternalPaymentWorkflowDefinition> externalPaymentWorkflowDefinitions = null;

  public static final String SERIALIZED_NAME_PAY_BY_MAIL = "payByMail";
  @SerializedName(SERIALIZED_NAME_PAY_BY_MAIL)
  private Boolean payByMail;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchaseOrder";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private PurchaseOrderPaymentDefinition purchaseOrder;

  public static final String SERIALIZED_NAME_JOB_SETTINGS = "jobSettings";
  @SerializedName(SERIALIZED_NAME_JOB_SETTINGS)
  private OrderJobSettings jobSettings;

  public static final String SERIALIZED_NAME_PAYMENT_RANKING = "paymentRanking";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RANKING)
  private String paymentRanking;

  public static final String SERIALIZED_NAME_REFUND_RANKING = "refundRanking";
  @SerializedName(SERIALIZED_NAME_REFUND_RANKING)
  private String refundRanking;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public PaymentSettings() {
  }

  public PaymentSettings gateways(List<Gateway> gateways) {
    
    this.gateways = gateways;
    return this;
  }

  public PaymentSettings addGatewaysItem(Gateway gatewaysItem) {
    if (this.gateways == null) {
      this.gateways = new ArrayList<>();
    }
    this.gateways.add(gatewaysItem);
    return this;
  }

   /**
   * Get gateways
   * @return gateways
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Gateway> getGateways() {
    return gateways;
  }


  public void setGateways(List<Gateway> gateways) {
    this.gateways = gateways;
  }


  public PaymentSettings externalPaymentWorkflowDefinitions(List<ExternalPaymentWorkflowDefinition> externalPaymentWorkflowDefinitions) {
    
    this.externalPaymentWorkflowDefinitions = externalPaymentWorkflowDefinitions;
    return this;
  }

  public PaymentSettings addExternalPaymentWorkflowDefinitionsItem(ExternalPaymentWorkflowDefinition externalPaymentWorkflowDefinitionsItem) {
    if (this.externalPaymentWorkflowDefinitions == null) {
      this.externalPaymentWorkflowDefinitions = new ArrayList<>();
    }
    this.externalPaymentWorkflowDefinitions.add(externalPaymentWorkflowDefinitionsItem);
    return this;
  }

   /**
   * Get externalPaymentWorkflowDefinitions
   * @return externalPaymentWorkflowDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ExternalPaymentWorkflowDefinition> getExternalPaymentWorkflowDefinitions() {
    return externalPaymentWorkflowDefinitions;
  }


  public void setExternalPaymentWorkflowDefinitions(List<ExternalPaymentWorkflowDefinition> externalPaymentWorkflowDefinitions) {
    this.externalPaymentWorkflowDefinitions = externalPaymentWorkflowDefinitions;
  }


  public PaymentSettings payByMail(Boolean payByMail) {
    
    this.payByMail = payByMail;
    return this;
  }

   /**
   * Get payByMail
   * @return payByMail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPayByMail() {
    return payByMail;
  }


  public void setPayByMail(Boolean payByMail) {
    this.payByMail = payByMail;
  }


  public PaymentSettings purchaseOrder(PurchaseOrderPaymentDefinition purchaseOrder) {
    
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PurchaseOrderPaymentDefinition getPurchaseOrder() {
    return purchaseOrder;
  }


  public void setPurchaseOrder(PurchaseOrderPaymentDefinition purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public PaymentSettings jobSettings(OrderJobSettings jobSettings) {
    
    this.jobSettings = jobSettings;
    return this;
  }

   /**
   * Get jobSettings
   * @return jobSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderJobSettings getJobSettings() {
    return jobSettings;
  }


  public void setJobSettings(OrderJobSettings jobSettings) {
    this.jobSettings = jobSettings;
  }


  public PaymentSettings paymentRanking(String paymentRanking) {
    
    this.paymentRanking = paymentRanking;
    return this;
  }

   /**
   * Get paymentRanking
   * @return paymentRanking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentRanking() {
    return paymentRanking;
  }


  public void setPaymentRanking(String paymentRanking) {
    this.paymentRanking = paymentRanking;
  }


  public PaymentSettings refundRanking(String refundRanking) {
    
    this.refundRanking = refundRanking;
    return this;
  }

   /**
   * Get refundRanking
   * @return refundRanking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRefundRanking() {
    return refundRanking;
  }


  public void setRefundRanking(String refundRanking) {
    this.refundRanking = refundRanking;
  }


  public PaymentSettings auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentSettings paymentSettings = (PaymentSettings) o;
    return Objects.equals(this.gateways, paymentSettings.gateways) &&
        Objects.equals(this.externalPaymentWorkflowDefinitions, paymentSettings.externalPaymentWorkflowDefinitions) &&
        Objects.equals(this.payByMail, paymentSettings.payByMail) &&
        Objects.equals(this.purchaseOrder, paymentSettings.purchaseOrder) &&
        Objects.equals(this.jobSettings, paymentSettings.jobSettings) &&
        Objects.equals(this.paymentRanking, paymentSettings.paymentRanking) &&
        Objects.equals(this.refundRanking, paymentSettings.refundRanking) &&
        Objects.equals(this.auditInfo, paymentSettings.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gateways, externalPaymentWorkflowDefinitions, payByMail, purchaseOrder, jobSettings, paymentRanking, refundRanking, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentSettings {\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("    externalPaymentWorkflowDefinitions: ").append(toIndentedString(externalPaymentWorkflowDefinitions)).append("\n");
    sb.append("    payByMail: ").append(toIndentedString(payByMail)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    jobSettings: ").append(toIndentedString(jobSettings)).append("\n");
    sb.append("    paymentRanking: ").append(toIndentedString(paymentRanking)).append("\n");
    sb.append("    refundRanking: ").append(toIndentedString(refundRanking)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gateways");
    openapiFields.add("externalPaymentWorkflowDefinitions");
    openapiFields.add("payByMail");
    openapiFields.add("purchaseOrder");
    openapiFields.add("jobSettings");
    openapiFields.add("paymentRanking");
    openapiFields.add("refundRanking");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentSettings is not found in the empty JSON string", PaymentSettings.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!PaymentSettings.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if (jsonObj.get("gateways") != null && !jsonObj.get("gateways").isJsonNull()) {
        JsonArray jsonArraygateways = jsonObj.getAsJsonArray("gateways");
        if (jsonArraygateways != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gateways").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gateways` to be an array in the JSON string but got `%s`", jsonObj.get("gateways").toString()));
          }

          // validate the optional field `gateways` (array)
          for (int i = 0; i < jsonArraygateways.size(); i++) {
            Gateway.validateJsonObject(jsonArraygateways.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("externalPaymentWorkflowDefinitions") != null && !jsonObj.get("externalPaymentWorkflowDefinitions").isJsonNull()) {
        JsonArray jsonArrayexternalPaymentWorkflowDefinitions = jsonObj.getAsJsonArray("externalPaymentWorkflowDefinitions");
        if (jsonArrayexternalPaymentWorkflowDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalPaymentWorkflowDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalPaymentWorkflowDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("externalPaymentWorkflowDefinitions").toString()));
          }

          // validate the optional field `externalPaymentWorkflowDefinitions` (array)
          for (int i = 0; i < jsonArrayexternalPaymentWorkflowDefinitions.size(); i++) {
            ExternalPaymentWorkflowDefinition.validateJsonObject(jsonArrayexternalPaymentWorkflowDefinitions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `purchaseOrder`
      if (jsonObj.get("purchaseOrder") != null && !jsonObj.get("purchaseOrder").isJsonNull()) {
        PurchaseOrderPaymentDefinition.validateJsonObject(jsonObj.getAsJsonObject("purchaseOrder"));
      }
      // validate the optional field `jobSettings`
      if (jsonObj.get("jobSettings") != null && !jsonObj.get("jobSettings").isJsonNull()) {
        OrderJobSettings.validateJsonObject(jsonObj.getAsJsonObject("jobSettings"));
      }
      if ((jsonObj.get("paymentRanking") != null && !jsonObj.get("paymentRanking").isJsonNull()) && !jsonObj.get("paymentRanking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentRanking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentRanking").toString()));
      }
      if ((jsonObj.get("refundRanking") != null && !jsonObj.get("refundRanking").isJsonNull()) && !jsonObj.get("refundRanking").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refundRanking` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refundRanking").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentSettings>() {
           @Override
           public void write(JsonWriter out, PaymentSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentSettings
  * @throws IOException if the JSON string is invalid with respect to PaymentSettings
  */
  public static PaymentSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentSettings.class);
  }

 /**
  * Convert an instance of PaymentSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

