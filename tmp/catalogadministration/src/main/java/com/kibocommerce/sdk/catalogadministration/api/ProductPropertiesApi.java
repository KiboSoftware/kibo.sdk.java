/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsProductProperty;
import com.kibocommerce.sdk.catalogadministration.models.ProductPropertyValueLocalizedContent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductPropertiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ProductPropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductPropertiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ProductPropertiesApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ProductPropertiesApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ProductPropertiesApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addProperty
     * @param productCode  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyCall(String productCode, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsProductProperty;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyValidateBeforeCall(String productCode, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling addProperty(Async)");
        }
        

        okhttp3.Call localVarCall = addPropertyCall(productCode, catalogAdminsProductProperty, _callback);
        return localVarCall;

    }

    /**
     * Add property
     * Add property
     * @param productCode  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @return CatalogAdminsProductProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsProductProperty addProperty(String productCode, CatalogAdminsProductProperty catalogAdminsProductProperty) throws ApiException {
        ApiResponse<CatalogAdminsProductProperty> localVarResp = addPropertyWithHttpInfo(productCode, catalogAdminsProductProperty);
        return localVarResp.getData();
    }

    /**
     * Add property
     * Add property
     * @param productCode  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @return ApiResponse&lt;CatalogAdminsProductProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsProductProperty> addPropertyWithHttpInfo(String productCode, CatalogAdminsProductProperty catalogAdminsProductProperty) throws ApiException {
        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(productCode, catalogAdminsProductProperty, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add property (asynchronously)
     * Add property
     * @param productCode  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyAsync(String productCode, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback<CatalogAdminsProductProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(productCode, catalogAdminsProductProperty, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPropertyValueLocalizedContent
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyValueLocalizedContentCall(String productCode, String attributeFQN, String value, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productPropertyValueLocalizedContent;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyValueLocalizedContentValidateBeforeCall(String productCode, String attributeFQN, String value, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling addPropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling addPropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling addPropertyValueLocalizedContent(Async)");
        }
        

        okhttp3.Call localVarCall = addPropertyValueLocalizedContentCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, _callback);
        return localVarCall;

    }

    /**
     * Add property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return ProductPropertyValueLocalizedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductPropertyValueLocalizedContent addPropertyValueLocalizedContent(String productCode, String attributeFQN, String value, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent) throws ApiException {
        ApiResponse<ProductPropertyValueLocalizedContent> localVarResp = addPropertyValueLocalizedContentWithHttpInfo(productCode, attributeFQN, value, productPropertyValueLocalizedContent);
        return localVarResp.getData();
    }

    /**
     * Add property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return ApiResponse&lt;ProductPropertyValueLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPropertyValueLocalizedContent> addPropertyValueLocalizedContentWithHttpInfo(String productCode, String attributeFQN, String value, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent) throws ApiException {
        okhttp3.Call localVarCall = addPropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, null);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add property value localized content (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyValueLocalizedContentAsync(String productCode, String attributeFQN, String value, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback<ProductPropertyValueLocalizedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, _callback);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProperty
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling deleteProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteProperty(Async)");
        }
        

        okhttp3.Call localVarCall = deletePropertyCall(productCode, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete property
     * Delete Property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProperty(String productCode, String attributeFQN) throws ApiException {
        deletePropertyWithHttpInfo(productCode, attributeFQN);
    }

    /**
     * Delete property
     * Delete Property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePropertyWithHttpInfo(String productCode, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(productCode, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete property (asynchronously)
     * Delete Property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyAsync(String productCode, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(productCode, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePropertyValueLocalizedContent
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyValueLocalizedContentCall(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "localeCode" + "\\}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValueLocalizedContentValidateBeforeCall(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling deletePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deletePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling deletePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling deletePropertyValueLocalizedContent(Async)");
        }
        

        okhttp3.Call localVarCall = deletePropertyValueLocalizedContentCall(productCode, attributeFQN, value, localeCode, _callback);
        return localVarCall;

    }

    /**
     * Delete property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deletePropertyValueLocalizedContent(String productCode, String attributeFQN, String value, String localeCode) throws ApiException {
        deletePropertyValueLocalizedContentWithHttpInfo(productCode, attributeFQN, value, localeCode);
    }

    /**
     * Delete property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePropertyValueLocalizedContentWithHttpInfo(String productCode, String attributeFQN, String value, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete property value localized content (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyValueLocalizedContentAsync(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperties
     * @param productCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesCall(String productCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertiesValidateBeforeCall(String productCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertiesCall(productCode, _callback);
        return localVarCall;

    }

    /**
     * Get properties
     * Get properties for the product
     * @param productCode  (required)
     * @return List&lt;CatalogAdminsProductProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CatalogAdminsProductProperty> getProperties(String productCode) throws ApiException {
        ApiResponse<List<CatalogAdminsProductProperty>> localVarResp = getPropertiesWithHttpInfo(productCode);
        return localVarResp.getData();
    }

    /**
     * Get properties
     * Get properties for the product
     * @param productCode  (required)
     * @return ApiResponse&lt;List&lt;CatalogAdminsProductProperty&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CatalogAdminsProductProperty>> getPropertiesWithHttpInfo(String productCode) throws ApiException {
        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(productCode, null);
        Type localVarReturnType = new TypeToken<List<CatalogAdminsProductProperty>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties (asynchronously)
     * Get properties for the product
     * @param productCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesAsync(String productCode, final ApiCallback<List<CatalogAdminsProductProperty>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(productCode, _callback);
        Type localVarReturnType = new TypeToken<List<CatalogAdminsProductProperty>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperty
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValidateBeforeCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertyCall(productCode, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get property
     * Get individual property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return CatalogAdminsProductProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsProductProperty getProperty(String productCode, String attributeFQN) throws ApiException {
        ApiResponse<CatalogAdminsProductProperty> localVarResp = getPropertyWithHttpInfo(productCode, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get property
     * Get individual property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;CatalogAdminsProductProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsProductProperty> getPropertyWithHttpInfo(String productCode, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(productCode, attributeFQN, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get property (asynchronously)
     * Get individual property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAsync(String productCode, String attributeFQN, final ApiCallback<CatalogAdminsProductProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(productCode, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyValueLocalizedContent
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyValueLocalizedContentCall(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "localeCode" + "\\}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValueLocalizedContentValidateBeforeCall(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getPropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getPropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling getPropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling getPropertyValueLocalizedContent(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertyValueLocalizedContentCall(productCode, attributeFQN, value, localeCode, _callback);
        return localVarCall;

    }

    /**
     * Get property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @return ProductPropertyValueLocalizedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductPropertyValueLocalizedContent getPropertyValueLocalizedContent(String productCode, String attributeFQN, String value, String localeCode) throws ApiException {
        ApiResponse<ProductPropertyValueLocalizedContent> localVarResp = getPropertyValueLocalizedContentWithHttpInfo(productCode, attributeFQN, value, localeCode);
        return localVarResp.getData();
    }

    /**
     * Get property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @return ApiResponse&lt;ProductPropertyValueLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPropertyValueLocalizedContent> getPropertyValueLocalizedContentWithHttpInfo(String productCode, String attributeFQN, String value, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, null);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get property value localized content (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyValueLocalizedContentAsync(String productCode, String attributeFQN, String value, String localeCode, final ApiCallback<ProductPropertyValueLocalizedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, _callback);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyValueLocalizedContents
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyValueLocalizedContentsCall(String productCode, String attributeFQN, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValueLocalizedContentsValidateBeforeCall(String productCode, String attributeFQN, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getPropertyValueLocalizedContents(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getPropertyValueLocalizedContents(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling getPropertyValueLocalizedContents(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertyValueLocalizedContentsCall(productCode, attributeFQN, value, _callback);
        return localVarCall;

    }

    /**
     * Get property value localized contents
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @return List&lt;ProductPropertyValueLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductPropertyValueLocalizedContent> getPropertyValueLocalizedContents(String productCode, String attributeFQN, String value) throws ApiException {
        ApiResponse<List<ProductPropertyValueLocalizedContent>> localVarResp = getPropertyValueLocalizedContentsWithHttpInfo(productCode, attributeFQN, value);
        return localVarResp.getData();
    }

    /**
     * Get property value localized contents
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @return ApiResponse&lt;List&lt;ProductPropertyValueLocalizedContent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductPropertyValueLocalizedContent>> getPropertyValueLocalizedContentsWithHttpInfo(String productCode, String attributeFQN, String value) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValueLocalizedContentsValidateBeforeCall(productCode, attributeFQN, value, null);
        Type localVarReturnType = new TypeToken<List<ProductPropertyValueLocalizedContent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get property value localized contents (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyValueLocalizedContentsAsync(String productCode, String attributeFQN, String value, final ApiCallback<List<ProductPropertyValueLocalizedContent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValueLocalizedContentsValidateBeforeCall(productCode, attributeFQN, value, _callback);
        Type localVarReturnType = new TypeToken<List<ProductPropertyValueLocalizedContent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProperty
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyCall(String productCode, String attributeFQN, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsProductProperty;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyValidateBeforeCall(String productCode, String attributeFQN, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updateProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updatePropertyCall(productCode, attributeFQN, catalogAdminsProductProperty, _callback);
        return localVarCall;

    }

    /**
     * Update property
     * Update property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @return CatalogAdminsProductProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CatalogAdminsProductProperty updateProperty(String productCode, String attributeFQN, CatalogAdminsProductProperty catalogAdminsProductProperty) throws ApiException {
        ApiResponse<CatalogAdminsProductProperty> localVarResp = updatePropertyWithHttpInfo(productCode, attributeFQN, catalogAdminsProductProperty);
        return localVarResp.getData();
    }

    /**
     * Update property
     * Update property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @return ApiResponse&lt;CatalogAdminsProductProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogAdminsProductProperty> updatePropertyWithHttpInfo(String productCode, String attributeFQN, CatalogAdminsProductProperty catalogAdminsProductProperty) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(productCode, attributeFQN, catalogAdminsProductProperty, null);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update property (asynchronously)
     * Update property
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param catalogAdminsProductProperty  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyAsync(String productCode, String attributeFQN, CatalogAdminsProductProperty catalogAdminsProductProperty, final ApiCallback<CatalogAdminsProductProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(productCode, attributeFQN, catalogAdminsProductProperty, _callback);
        Type localVarReturnType = new TypeToken<CatalogAdminsProductProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePropertyValueLocalizedContent
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyValueLocalizedContentCall(String productCode, String attributeFQN, String value, String localeCode, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productPropertyValueLocalizedContent;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "localeCode" + "\\}", localVarApiClient.escapeString(localeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyValueLocalizedContentValidateBeforeCall(String productCode, String attributeFQN, String value, String localeCode, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updatePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updatePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updatePropertyValueLocalizedContent(Async)");
        }
        
        // verify the required parameter 'localeCode' is set
        if (localeCode == null) {
            throw new ApiException("Missing the required parameter 'localeCode' when calling updatePropertyValueLocalizedContent(Async)");
        }
        

        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentCall(productCode, attributeFQN, value, localeCode, productPropertyValueLocalizedContent, _callback);
        return localVarCall;

    }

    /**
     * Update property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return ProductPropertyValueLocalizedContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductPropertyValueLocalizedContent updatePropertyValueLocalizedContent(String productCode, String attributeFQN, String value, String localeCode, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent) throws ApiException {
        ApiResponse<ProductPropertyValueLocalizedContent> localVarResp = updatePropertyValueLocalizedContentWithHttpInfo(productCode, attributeFQN, value, localeCode, productPropertyValueLocalizedContent);
        return localVarResp.getData();
    }

    /**
     * Update property value localized content
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return ApiResponse&lt;ProductPropertyValueLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPropertyValueLocalizedContent> updatePropertyValueLocalizedContentWithHttpInfo(String productCode, String attributeFQN, String value, String localeCode, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, productPropertyValueLocalizedContent, null);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update property value localized content (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param localeCode  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyValueLocalizedContentAsync(String productCode, String attributeFQN, String value, String localeCode, ProductPropertyValueLocalizedContent productPropertyValueLocalizedContent, final ApiCallback<ProductPropertyValueLocalizedContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentValidateBeforeCall(productCode, attributeFQN, value, localeCode, productPropertyValueLocalizedContent, _callback);
        Type localVarReturnType = new TypeToken<ProductPropertyValueLocalizedContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePropertyValueLocalizedContents
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyValueLocalizedContentsCall(String productCode, String attributeFQN, String value, List<ProductPropertyValueLocalizedContent> productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productPropertyValueLocalizedContent;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyValueLocalizedContentsValidateBeforeCall(String productCode, String attributeFQN, String value, List<ProductPropertyValueLocalizedContent> productPropertyValueLocalizedContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updatePropertyValueLocalizedContents(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updatePropertyValueLocalizedContents(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updatePropertyValueLocalizedContents(Async)");
        }
        

        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentsCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, _callback);
        return localVarCall;

    }

    /**
     * Update property value localized contents
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return List&lt;ProductPropertyValueLocalizedContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductPropertyValueLocalizedContent> updatePropertyValueLocalizedContents(String productCode, String attributeFQN, String value, List<ProductPropertyValueLocalizedContent> productPropertyValueLocalizedContent) throws ApiException {
        ApiResponse<List<ProductPropertyValueLocalizedContent>> localVarResp = updatePropertyValueLocalizedContentsWithHttpInfo(productCode, attributeFQN, value, productPropertyValueLocalizedContent);
        return localVarResp.getData();
    }

    /**
     * Update property value localized contents
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @return ApiResponse&lt;List&lt;ProductPropertyValueLocalizedContent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductPropertyValueLocalizedContent>> updatePropertyValueLocalizedContentsWithHttpInfo(String productCode, String attributeFQN, String value, List<ProductPropertyValueLocalizedContent> productPropertyValueLocalizedContent) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentsValidateBeforeCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, null);
        Type localVarReturnType = new TypeToken<List<ProductPropertyValueLocalizedContent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update property value localized contents (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productPropertyValueLocalizedContent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyValueLocalizedContentsAsync(String productCode, String attributeFQN, String value, List<ProductPropertyValueLocalizedContent> productPropertyValueLocalizedContent, final ApiCallback<List<ProductPropertyValueLocalizedContent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyValueLocalizedContentsValidateBeforeCall(productCode, attributeFQN, value, productPropertyValueLocalizedContent, _callback);
        Type localVarReturnType = new TypeToken<List<ProductPropertyValueLocalizedContent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ProductPropertiesApi build() {
            return new ProductPropertiesApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
