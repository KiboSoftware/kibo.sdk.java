/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.catalogadministration.models.AdminUserAuditInfo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Category
 */
@ApiModel(description = "Category")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CatalogAdminsPriceList implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRICE_LIST_CODE = "priceListCode";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_CODE)
  private String priceListCode;

  public static final String SERIALIZED_NAME_PRICE_LIST_SEQUENCE = "priceListSequence";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_SEQUENCE)
  private Integer priceListSequence;

  public static final String SERIALIZED_NAME_PARENT_PRICE_LIST_CODE = "parentPriceListCode";
  @SerializedName(SERIALIZED_NAME_PARENT_PRICE_LIST_CODE)
  private String parentPriceListCode;

  public static final String SERIALIZED_NAME_PARENT_PRICE_LIST_NAME = "parentPriceListName";
  @SerializedName(SERIALIZED_NAME_PARENT_PRICE_LIST_NAME)
  private String parentPriceListName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FILTERED_IN_STOREFRONT = "filteredInStorefront";
  @SerializedName(SERIALIZED_NAME_FILTERED_IN_STOREFRONT)
  private Boolean filteredInStorefront;

  public static final String SERIALIZED_NAME_VALID_FOR_ALL_SITES = "validForAllSites";
  @SerializedName(SERIALIZED_NAME_VALID_FOR_ALL_SITES)
  private Boolean validForAllSites;

  public static final String SERIALIZED_NAME_VALID_SITES = "validSites";
  @SerializedName(SERIALIZED_NAME_VALID_SITES)
  private List<Integer> validSites = null;

  public static final String SERIALIZED_NAME_DEFAULT_FOR_SITES = "defaultForSites";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FOR_SITES)
  private List<Integer> defaultForSites = null;

  public static final String SERIALIZED_NAME_INDEXED_SITES = "indexedSites";
  @SerializedName(SERIALIZED_NAME_INDEXED_SITES)
  private List<Integer> indexedSites = null;

  public static final String SERIALIZED_NAME_MAPPED_CUSTOMER_SEGMENTS = "mappedCustomerSegments";
  @SerializedName(SERIALIZED_NAME_MAPPED_CUSTOMER_SEGMENTS)
  private List<String> mappedCustomerSegments = null;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_RESOLVABLE = "resolvable";
  @SerializedName(SERIALIZED_NAME_RESOLVABLE)
  private Boolean resolvable;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "auditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AdminUserAuditInfo auditInfo;

  public CatalogAdminsPriceList() {
  }

  public CatalogAdminsPriceList priceListCode(String priceListCode) {
    
    this.priceListCode = priceListCode;
    return this;
  }

   /**
   * External unique identifier of the PriceList. Must be unique an only contain url sanitized characters. Max length is 50
   * @return priceListCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "External unique identifier of the PriceList. Must be unique an only contain url sanitized characters. Max length is 50")

  public String getPriceListCode() {
    return priceListCode;
  }


  public void setPriceListCode(String priceListCode) {
    this.priceListCode = priceListCode;
  }


  public CatalogAdminsPriceList priceListSequence(Integer priceListSequence) {
    
    this.priceListSequence = priceListSequence;
    return this;
  }

   /**
   * Get priceListSequence
   * @return priceListSequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPriceListSequence() {
    return priceListSequence;
  }


  public void setPriceListSequence(Integer priceListSequence) {
    this.priceListSequence = priceListSequence;
  }


  public CatalogAdminsPriceList parentPriceListCode(String parentPriceListCode) {
    
    this.parentPriceListCode = parentPriceListCode;
    return this;
  }

   /**
   * Parent PriceList code, Can be null for root level priceLists
   * @return parentPriceListCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parent PriceList code, Can be null for root level priceLists")

  public String getParentPriceListCode() {
    return parentPriceListCode;
  }


  public void setParentPriceListCode(String parentPriceListCode) {
    this.parentPriceListCode = parentPriceListCode;
  }


  public CatalogAdminsPriceList parentPriceListName(String parentPriceListName) {
    
    this.parentPriceListName = parentPriceListName;
    return this;
  }

   /**
   * Parent PriceList name, Can be null for root level priceLists. Read only in contract.
   * @return parentPriceListName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parent PriceList name, Can be null for root level priceLists. Read only in contract.")

  public String getParentPriceListName() {
    return parentPriceListName;
  }


  public void setParentPriceListName(String parentPriceListName) {
    this.parentPriceListName = parentPriceListName;
  }


  public CatalogAdminsPriceList name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the priceList. Max length is 100
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the priceList. Max length is 100")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CatalogAdminsPriceList description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the price list. Max length is 300
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the price list. Max length is 300")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CatalogAdminsPriceList enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Is the price list enabled and valid in the storefront. Default is true.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is the price list enabled and valid in the storefront. Default is true.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CatalogAdminsPriceList filteredInStorefront(Boolean filteredInStorefront) {
    
    this.filteredInStorefront = filteredInStorefront;
    return this;
  }

   /**
   * When true, only products with valid price list entries will be visible in the storefront. Default is false
   * @return filteredInStorefront
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When true, only products with valid price list entries will be visible in the storefront. Default is false")

  public Boolean getFilteredInStorefront() {
    return filteredInStorefront;
  }


  public void setFilteredInStorefront(Boolean filteredInStorefront) {
    this.filteredInStorefront = filteredInStorefront;
  }


  public CatalogAdminsPriceList validForAllSites(Boolean validForAllSites) {
    
    this.validForAllSites = validForAllSites;
    return this;
  }

   /**
   * When true, no valid sites need to be specifiied. Price list is considered valid for all sites. Default is true
   * @return validForAllSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When true, no valid sites need to be specifiied. Price list is considered valid for all sites. Default is true")

  public Boolean getValidForAllSites() {
    return validForAllSites;
  }


  public void setValidForAllSites(Boolean validForAllSites) {
    this.validForAllSites = validForAllSites;
  }


  public CatalogAdminsPriceList validSites(List<Integer> validSites) {
    
    this.validSites = validSites;
    return this;
  }

  public CatalogAdminsPriceList addValidSitesItem(Integer validSitesItem) {
    if (this.validSites == null) {
      this.validSites = new ArrayList<>();
    }
    this.validSites.add(validSitesItem);
    return this;
  }

   /**
   * When ValidForAllSites &#x3D; false, a list of siteIDs that the price list is valid for should be supplied
   * @return validSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When ValidForAllSites = false, a list of siteIDs that the price list is valid for should be supplied")

  public List<Integer> getValidSites() {
    return validSites;
  }


  public void setValidSites(List<Integer> validSites) {
    this.validSites = validSites;
  }


  public CatalogAdminsPriceList defaultForSites(List<Integer> defaultForSites) {
    
    this.defaultForSites = defaultForSites;
    return this;
  }

  public CatalogAdminsPriceList addDefaultForSitesItem(Integer defaultForSitesItem) {
    if (this.defaultForSites == null) {
      this.defaultForSites = new ArrayList<>();
    }
    this.defaultForSites.add(defaultForSitesItem);
    return this;
  }

   /**
   * Get defaultForSites
   * @return defaultForSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDefaultForSites() {
    return defaultForSites;
  }


  public void setDefaultForSites(List<Integer> defaultForSites) {
    this.defaultForSites = defaultForSites;
  }


  public CatalogAdminsPriceList indexedSites(List<Integer> indexedSites) {
    
    this.indexedSites = indexedSites;
    return this;
  }

  public CatalogAdminsPriceList addIndexedSitesItem(Integer indexedSitesItem) {
    if (this.indexedSites == null) {
      this.indexedSites = new ArrayList<>();
    }
    this.indexedSites.add(indexedSitesItem);
    return this;
  }

   /**
   * Get indexedSites
   * @return indexedSites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getIndexedSites() {
    return indexedSites;
  }


  public void setIndexedSites(List<Integer> indexedSites) {
    this.indexedSites = indexedSites;
  }


  public CatalogAdminsPriceList mappedCustomerSegments(List<String> mappedCustomerSegments) {
    
    this.mappedCustomerSegments = mappedCustomerSegments;
    return this;
  }

  public CatalogAdminsPriceList addMappedCustomerSegmentsItem(String mappedCustomerSegmentsItem) {
    if (this.mappedCustomerSegments == null) {
      this.mappedCustomerSegments = new ArrayList<>();
    }
    this.mappedCustomerSegments.add(mappedCustomerSegmentsItem);
    return this;
  }

   /**
   * List of customer segment code associated with this price list.  Used to resolve default price list
   * @return mappedCustomerSegments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of customer segment code associated with this price list.  Used to resolve default price list")

  public List<String> getMappedCustomerSegments() {
    return mappedCustomerSegments;
  }


  public void setMappedCustomerSegments(List<String> mappedCustomerSegments) {
    this.mappedCustomerSegments = mappedCustomerSegments;
  }


  public CatalogAdminsPriceList rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * Used to prioritize price list resolution when more than 1 price list maps
   * @return rank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used to prioritize price list resolution when more than 1 price list maps")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public CatalogAdminsPriceList resolvable(Boolean resolvable) {
    
    this.resolvable = resolvable;
    return this;
  }

   /**
   * Determines if this price list can be resolved as the current price list   within a session.
   * @return resolvable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines if this price list can be resolved as the current price list   within a session.")

  public Boolean getResolvable() {
    return resolvable;
  }


  public void setResolvable(Boolean resolvable) {
    this.resolvable = resolvable;
  }


  public CatalogAdminsPriceList auditInfo(AdminUserAuditInfo auditInfo) {
    
    this.auditInfo = auditInfo;
    return this;
  }

   /**
   * Get auditInfo
   * @return auditInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AdminUserAuditInfo getAuditInfo() {
    return auditInfo;
  }


  public void setAuditInfo(AdminUserAuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogAdminsPriceList catalogAdminsPriceList = (CatalogAdminsPriceList) o;
    return Objects.equals(this.priceListCode, catalogAdminsPriceList.priceListCode) &&
        Objects.equals(this.priceListSequence, catalogAdminsPriceList.priceListSequence) &&
        Objects.equals(this.parentPriceListCode, catalogAdminsPriceList.parentPriceListCode) &&
        Objects.equals(this.parentPriceListName, catalogAdminsPriceList.parentPriceListName) &&
        Objects.equals(this.name, catalogAdminsPriceList.name) &&
        Objects.equals(this.description, catalogAdminsPriceList.description) &&
        Objects.equals(this.enabled, catalogAdminsPriceList.enabled) &&
        Objects.equals(this.filteredInStorefront, catalogAdminsPriceList.filteredInStorefront) &&
        Objects.equals(this.validForAllSites, catalogAdminsPriceList.validForAllSites) &&
        Objects.equals(this.validSites, catalogAdminsPriceList.validSites) &&
        Objects.equals(this.defaultForSites, catalogAdminsPriceList.defaultForSites) &&
        Objects.equals(this.indexedSites, catalogAdminsPriceList.indexedSites) &&
        Objects.equals(this.mappedCustomerSegments, catalogAdminsPriceList.mappedCustomerSegments) &&
        Objects.equals(this.rank, catalogAdminsPriceList.rank) &&
        Objects.equals(this.resolvable, catalogAdminsPriceList.resolvable) &&
        Objects.equals(this.auditInfo, catalogAdminsPriceList.auditInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(priceListCode, priceListSequence, parentPriceListCode, parentPriceListName, name, description, enabled, filteredInStorefront, validForAllSites, validSites, defaultForSites, indexedSites, mappedCustomerSegments, rank, resolvable, auditInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogAdminsPriceList {\n");
    sb.append("    priceListCode: ").append(toIndentedString(priceListCode)).append("\n");
    sb.append("    priceListSequence: ").append(toIndentedString(priceListSequence)).append("\n");
    sb.append("    parentPriceListCode: ").append(toIndentedString(parentPriceListCode)).append("\n");
    sb.append("    parentPriceListName: ").append(toIndentedString(parentPriceListName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    filteredInStorefront: ").append(toIndentedString(filteredInStorefront)).append("\n");
    sb.append("    validForAllSites: ").append(toIndentedString(validForAllSites)).append("\n");
    sb.append("    validSites: ").append(toIndentedString(validSites)).append("\n");
    sb.append("    defaultForSites: ").append(toIndentedString(defaultForSites)).append("\n");
    sb.append("    indexedSites: ").append(toIndentedString(indexedSites)).append("\n");
    sb.append("    mappedCustomerSegments: ").append(toIndentedString(mappedCustomerSegments)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    resolvable: ").append(toIndentedString(resolvable)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("priceListCode");
    openapiFields.add("priceListSequence");
    openapiFields.add("parentPriceListCode");
    openapiFields.add("parentPriceListName");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("filteredInStorefront");
    openapiFields.add("validForAllSites");
    openapiFields.add("validSites");
    openapiFields.add("defaultForSites");
    openapiFields.add("indexedSites");
    openapiFields.add("mappedCustomerSegments");
    openapiFields.add("rank");
    openapiFields.add("resolvable");
    openapiFields.add("auditInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("priceListCode");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CatalogAdminsPriceList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CatalogAdminsPriceList.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogAdminsPriceList is not found in the empty JSON string", CatalogAdminsPriceList.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!CatalogAdminsPriceList.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogAdminsPriceList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogAdminsPriceList.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("priceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListCode").toString()));
      }
      if ((jsonObj.get("parentPriceListCode") != null && !jsonObj.get("parentPriceListCode").isJsonNull()) && !jsonObj.get("parentPriceListCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentPriceListCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentPriceListCode").toString()));
      }
      if ((jsonObj.get("parentPriceListName") != null && !jsonObj.get("parentPriceListName").isJsonNull()) && !jsonObj.get("parentPriceListName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentPriceListName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentPriceListName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("validSites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validSites` to be an array in the JSON string but got `%s`", jsonObj.get("validSites").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("defaultForSites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultForSites` to be an array in the JSON string but got `%s`", jsonObj.get("defaultForSites").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("indexedSites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexedSites` to be an array in the JSON string but got `%s`", jsonObj.get("indexedSites").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("mappedCustomerSegments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappedCustomerSegments` to be an array in the JSON string but got `%s`", jsonObj.get("mappedCustomerSegments").toString()));
      }
      // validate the optional field `auditInfo`
      if (jsonObj.get("auditInfo") != null && !jsonObj.get("auditInfo").isJsonNull()) {
        AdminUserAuditInfo.validateJsonObject(jsonObj.getAsJsonObject("auditInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogAdminsPriceList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogAdminsPriceList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogAdminsPriceList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogAdminsPriceList.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogAdminsPriceList>() {
           @Override
           public void write(JsonWriter out, CatalogAdminsPriceList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogAdminsPriceList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CatalogAdminsPriceList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CatalogAdminsPriceList
  * @throws IOException if the JSON string is invalid with respect to CatalogAdminsPriceList
  */
  public static CatalogAdminsPriceList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogAdminsPriceList.class);
  }

 /**
  * Convert an instance of CatalogAdminsPriceList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

