/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.AttributeInProductType;
import com.kibocommerce.sdk.catalogadministration.models.CatalogAdminsProductOption;
import com.kibocommerce.sdk.catalogadministration.models.ProductType;
import com.kibocommerce.sdk.catalogadministration.models.ProductTypeCollection;
import com.kibocommerce.sdk.catalogadministration.models.ProductVariationPagedCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ProductTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ProductTypesApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ProductTypesApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ProductTypesApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addExtra
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtraValidateBeforeCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling addExtra(Async)");
        }
        

        okhttp3.Call localVarCall = addExtraCall(productTypeId, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Add extra
     * Add extra.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType addExtra(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = addExtraWithHttpInfo(productTypeId, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Add extra
     * Add extra.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> addExtraWithHttpInfo(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = addExtraValidateBeforeCall(productTypeId, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add extra (asynchronously)
     * Add extra.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraAsync(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtraValidateBeforeCall(productTypeId, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOption
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOptionCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOptionValidateBeforeCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling addOption(Async)");
        }
        

        okhttp3.Call localVarCall = addOptionCall(productTypeId, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Add option
     * Add option.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType addOption(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = addOptionWithHttpInfo(productTypeId, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Add option
     * Add option.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> addOptionWithHttpInfo(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = addOptionValidateBeforeCall(productTypeId, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add option (asynchronously)
     * Add option.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOptionAsync(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOptionValidateBeforeCall(productTypeId, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProductType
     * @param productType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductTypeCall(ProductType productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductTypeValidateBeforeCall(ProductType productType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addProductTypeCall(productType, _callback);
        return localVarCall;

    }

    /**
     * Add product type
     * Get product type by Id.
     * @param productType  (optional)
     * @return ProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductType addProductType(ProductType productType) throws ApiException {
        ApiResponse<ProductType> localVarResp = addProductTypeWithHttpInfo(productType);
        return localVarResp.getData();
    }

    /**
     * Add product type
     * Get product type by Id.
     * @param productType  (optional)
     * @return ApiResponse&lt;ProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductType> addProductTypeWithHttpInfo(ProductType productType) throws ApiException {
        okhttp3.Call localVarCall = addProductTypeValidateBeforeCall(productType, null);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add product type (asynchronously)
     * Get product type by Id.
     * @param productType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductTypeAsync(ProductType productType, final ApiCallback<ProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductTypeValidateBeforeCall(productType, _callback);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProperty
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPropertyValidateBeforeCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling addProperty(Async)");
        }
        

        okhttp3.Call localVarCall = addPropertyCall(productTypeId, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Add product type property
     * Add property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType addProperty(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = addPropertyWithHttpInfo(productTypeId, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Add product type property
     * Add property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> addPropertyWithHttpInfo(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(productTypeId, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add product type property (asynchronously)
     * Add property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPropertyAsync(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPropertyValidateBeforeCall(productTypeId, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVariantProperty
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVariantPropertyCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVariantPropertyValidateBeforeCall(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling addVariantProperty(Async)");
        }
        

        okhttp3.Call localVarCall = addVariantPropertyCall(productTypeId, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Add variant property
     * Add variant property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType addVariantProperty(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = addVariantPropertyWithHttpInfo(productTypeId, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Add variant property
     * Add variant property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> addVariantPropertyWithHttpInfo(Integer productTypeId, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = addVariantPropertyValidateBeforeCall(productTypeId, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add variant property (asynchronously)
     * Add variant property.
     * @param productTypeId  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVariantPropertyAsync(Integer productTypeId, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVariantPropertyValidateBeforeCall(productTypeId, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtra
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtraValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling deleteExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteExtra(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExtraCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete extra
     * Delete extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExtra(Integer productTypeId, String attributeFQN) throws ApiException {
        deleteExtraWithHttpInfo(productTypeId, attributeFQN);
    }

    /**
     * Delete extra
     * Delete extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExtraWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deleteExtraValidateBeforeCall(productTypeId, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete extra (asynchronously)
     * Delete extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraAsync(Integer productTypeId, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtraValidateBeforeCall(productTypeId, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOption
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOptionCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOptionValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling deleteOption(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteOption(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOptionCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete option
     * Delete option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOption(Integer productTypeId, String attributeFQN) throws ApiException {
        deleteOptionWithHttpInfo(productTypeId, attributeFQN);
    }

    /**
     * Delete option
     * Delete option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOptionWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deleteOptionValidateBeforeCall(productTypeId, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete option (asynchronously)
     * Delete option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOptionAsync(Integer productTypeId, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOptionValidateBeforeCall(productTypeId, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductType
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductTypeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductTypeValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling deleteProductType(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductTypeCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Delete product type
     * Delete product type.
     * @param productTypeId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProductType(Integer productTypeId) throws ApiException {
        deleteProductTypeWithHttpInfo(productTypeId);
    }

    /**
     * Delete product type
     * Delete product type.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductTypeWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductTypeValidateBeforeCall(productTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete product type (asynchronously)
     * Delete product type.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductTypeAsync(Integer productTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductTypeValidateBeforeCall(productTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling deleteProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteProperty(Async)");
        }
        

        okhttp3.Call localVarCall = deletePropertyCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete product type property
     * Delete property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProperty(Integer productTypeId, String attributeFQN) throws ApiException {
        deletePropertyWithHttpInfo(productTypeId, attributeFQN);
    }

    /**
     * Delete product type property
     * Delete property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePropertyWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(productTypeId, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete product type property (asynchronously)
     * Delete property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyAsync(Integer productTypeId, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePropertyValidateBeforeCall(productTypeId, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVariantProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariantPropertyCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVariantPropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling deleteVariantProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteVariantProperty(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVariantPropertyCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete variant property
     * Delete variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVariantProperty(Integer productTypeId, String attributeFQN) throws ApiException {
        deleteVariantPropertyWithHttpInfo(productTypeId, attributeFQN);
    }

    /**
     * Delete variant property
     * Delete variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVariantPropertyWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deleteVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete variant property (asynchronously)
     * Delete variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVariantPropertyAsync(Integer productTypeId, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateProductVariations
     * @param productTypeId  (required)
     * @param productCode  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param catalogAdminsProductOption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateProductVariationsCall(Integer productTypeId, String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, List<CatalogAdminsProductOption> catalogAdminsProductOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogAdminsProductOption;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productCode", productCode));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateProductVariationsValidateBeforeCall(Integer productTypeId, String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, List<CatalogAdminsProductOption> catalogAdminsProductOption, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling generateProductVariations(Async)");
        }
        

        okhttp3.Call localVarCall = generateProductVariationsCall(productTypeId, productCode, startIndex, pageSize, sortBy, filter, catalogAdminsProductOption, _callback);
        return localVarCall;

    }

    /**
     * Generate product variations
     * 
     * @param productTypeId  (required)
     * @param productCode  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param catalogAdminsProductOption  (optional)
     * @return ProductVariationPagedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariationPagedCollection generateProductVariations(Integer productTypeId, String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, List<CatalogAdminsProductOption> catalogAdminsProductOption) throws ApiException {
        ApiResponse<ProductVariationPagedCollection> localVarResp = generateProductVariationsWithHttpInfo(productTypeId, productCode, startIndex, pageSize, sortBy, filter, catalogAdminsProductOption);
        return localVarResp.getData();
    }

    /**
     * Generate product variations
     * 
     * @param productTypeId  (required)
     * @param productCode  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param catalogAdminsProductOption  (optional)
     * @return ApiResponse&lt;ProductVariationPagedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariationPagedCollection> generateProductVariationsWithHttpInfo(Integer productTypeId, String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, List<CatalogAdminsProductOption> catalogAdminsProductOption) throws ApiException {
        okhttp3.Call localVarCall = generateProductVariationsValidateBeforeCall(productTypeId, productCode, startIndex, pageSize, sortBy, filter, catalogAdminsProductOption, null);
        Type localVarReturnType = new TypeToken<ProductVariationPagedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate product variations (asynchronously)
     * 
     * @param productTypeId  (required)
     * @param productCode  (optional)
     * @param startIndex  (optional, default to 0)
     * @param pageSize  (optional, default to 0)
     * @param sortBy  (optional)
     * @param filter  (optional)
     * @param catalogAdminsProductOption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateProductVariationsAsync(Integer productTypeId, String productCode, Integer startIndex, Integer pageSize, String sortBy, String filter, List<CatalogAdminsProductOption> catalogAdminsProductOption, final ApiCallback<ProductVariationPagedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateProductVariationsValidateBeforeCall(productTypeId, productCode, startIndex, pageSize, sortBy, filter, catalogAdminsProductOption, _callback);
        Type localVarReturnType = new TypeToken<ProductVariationPagedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtra
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtraValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getExtra(Async)");
        }
        

        okhttp3.Call localVarCall = getExtraCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get extra
     * Get extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType getExtra(Integer productTypeId, String attributeFQN) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = getExtraWithHttpInfo(productTypeId, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get extra
     * Get extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> getExtraWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getExtraValidateBeforeCall(productTypeId, attributeFQN, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extra (asynchronously)
     * Get extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraAsync(Integer productTypeId, String attributeFQN, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtraValidateBeforeCall(productTypeId, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtras
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtrasCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtrasValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getExtras(Async)");
        }
        

        okhttp3.Call localVarCall = getExtrasCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get extras
     * Get extras.
     * @param productTypeId  (required)
     * @return List&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AttributeInProductType> getExtras(Integer productTypeId) throws ApiException {
        ApiResponse<List<AttributeInProductType>> localVarResp = getExtrasWithHttpInfo(productTypeId);
        return localVarResp.getData();
    }

    /**
     * Get extras
     * Get extras.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;List&lt;AttributeInProductType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttributeInProductType>> getExtrasWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = getExtrasValidateBeforeCall(productTypeId, null);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extras (asynchronously)
     * Get extras.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtrasAsync(Integer productTypeId, final ApiCallback<List<AttributeInProductType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtrasValidateBeforeCall(productTypeId, _callback);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOption
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getOption(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getOption(Async)");
        }
        

        okhttp3.Call localVarCall = getOptionCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get option
     * Get individual option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType getOption(Integer productTypeId, String attributeFQN) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = getOptionWithHttpInfo(productTypeId, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get option
     * Get individual option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> getOptionWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getOptionValidateBeforeCall(productTypeId, attributeFQN, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get option (asynchronously)
     * Get individual option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionAsync(Integer productTypeId, String attributeFQN, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionValidateBeforeCall(productTypeId, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOptions
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionsCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionsValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getOptions(Async)");
        }
        

        okhttp3.Call localVarCall = getOptionsCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get options
     * Get options for the product type.
     * @param productTypeId  (required)
     * @return List&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AttributeInProductType> getOptions(Integer productTypeId) throws ApiException {
        ApiResponse<List<AttributeInProductType>> localVarResp = getOptionsWithHttpInfo(productTypeId);
        return localVarResp.getData();
    }

    /**
     * Get options
     * Get options for the product type.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;List&lt;AttributeInProductType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttributeInProductType>> getOptionsWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(productTypeId, null);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get options (asynchronously)
     * Get options for the product type.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOptionsAsync(Integer productTypeId, final ApiCallback<List<AttributeInProductType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(productTypeId, _callback);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductType
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductTypeValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getProductType(Async)");
        }
        

        okhttp3.Call localVarCall = getProductTypeCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get product type
     * Get product type by Id.
     * @param productTypeId  (required)
     * @return ProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductType getProductType(Integer productTypeId) throws ApiException {
        ApiResponse<ProductType> localVarResp = getProductTypeWithHttpInfo(productTypeId);
        return localVarResp.getData();
    }

    /**
     * Get product type
     * Get product type by Id.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;ProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductType> getProductTypeWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = getProductTypeValidateBeforeCall(productTypeId, null);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product type (asynchronously)
     * Get product type by Id.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypeAsync(Integer productTypeId, final ApiCallback<ProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductTypeValidateBeforeCall(productTypeId, _callback);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductTypes
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypesCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (responseGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("responseGroups", responseGroups));
        }

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductTypesValidateBeforeCall(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProductTypesCall(startIndex, pageSize, sortBy, filter, responseGroups, _callback);
        return localVarCall;

    }

    /**
     * Get product types
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode. (optional)
     * @return ProductTypeCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductTypeCollection getProductTypes(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups) throws ApiException {
        ApiResponse<ProductTypeCollection> localVarResp = getProductTypesWithHttpInfo(startIndex, pageSize, sortBy, filter, responseGroups);
        return localVarResp.getData();
    }

    /**
     * Get product types
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode. (optional)
     * @return ApiResponse&lt;ProductTypeCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTypeCollection> getProductTypesWithHttpInfo(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups) throws ApiException {
        okhttp3.Call localVarCall = getProductTypesValidateBeforeCall(startIndex, pageSize, sortBy, filter, responseGroups, null);
        Type localVarReturnType = new TypeToken<ProductTypeCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product types (asynchronously)
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * @param startIndex Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. (optional, default to 0)
     * @param pageSize Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200. (optional, default to 0)
     * @param sortBy The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc. (optional)
     * @param filter A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional. (optional)
     * @param responseGroups Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypesAsync(Integer startIndex, Integer pageSize, String sortBy, String filter, String responseGroups, final ApiCallback<ProductTypeCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductTypesValidateBeforeCall(startIndex, pageSize, sortBy, filter, responseGroups, _callback);
        Type localVarReturnType = new TypeToken<ProductTypeCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperties
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertiesValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertiesCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get product type properties
     * Get properties.
     * @param productTypeId  (required)
     * @return List&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AttributeInProductType> getProperties(Integer productTypeId) throws ApiException {
        ApiResponse<List<AttributeInProductType>> localVarResp = getPropertiesWithHttpInfo(productTypeId);
        return localVarResp.getData();
    }

    /**
     * Get product type properties
     * Get properties.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;List&lt;AttributeInProductType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttributeInProductType>> getPropertiesWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(productTypeId, null);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product type properties (asynchronously)
     * Get properties.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesAsync(Integer productTypeId, final ApiCallback<List<AttributeInProductType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(productTypeId, _callback);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertyCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get product type property
     * Get property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType getProperty(Integer productTypeId, String attributeFQN) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = getPropertyWithHttpInfo(productTypeId, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get product type property
     * Get property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> getPropertyWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(productTypeId, attributeFQN, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product type property (asynchronously)
     * Get property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyAsync(Integer productTypeId, String attributeFQN, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyValidateBeforeCall(productTypeId, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantProperties
     * @param productTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPropertiesCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantPropertiesValidateBeforeCall(Integer productTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getVariantProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getVariantPropertiesCall(productTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get variant properties
     * Get variant properties.
     * @param productTypeId  (required)
     * @return List&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<AttributeInProductType> getVariantProperties(Integer productTypeId) throws ApiException {
        ApiResponse<List<AttributeInProductType>> localVarResp = getVariantPropertiesWithHttpInfo(productTypeId);
        return localVarResp.getData();
    }

    /**
     * Get variant properties
     * Get variant properties.
     * @param productTypeId  (required)
     * @return ApiResponse&lt;List&lt;AttributeInProductType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttributeInProductType>> getVariantPropertiesWithHttpInfo(Integer productTypeId) throws ApiException {
        okhttp3.Call localVarCall = getVariantPropertiesValidateBeforeCall(productTypeId, null);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get variant properties (asynchronously)
     * Get variant properties.
     * @param productTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPropertiesAsync(Integer productTypeId, final ApiCallback<List<AttributeInProductType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantPropertiesValidateBeforeCall(productTypeId, _callback);
        Type localVarReturnType = new TypeToken<List<AttributeInProductType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVariantProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPropertyCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVariantPropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling getVariantProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getVariantProperty(Async)");
        }
        

        okhttp3.Call localVarCall = getVariantPropertyCall(productTypeId, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get variant property
     * Get variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType getVariantProperty(Integer productTypeId, String attributeFQN) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = getVariantPropertyWithHttpInfo(productTypeId, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get variant property
     * Get variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> getVariantPropertyWithHttpInfo(Integer productTypeId, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get variant property (asynchronously)
     * Get variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVariantPropertyAsync(Integer productTypeId, String attributeFQN, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtra
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraValidateBeforeCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling updateExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateExtra(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Update extra
     * Update extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType updateExtra(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = updateExtraWithHttpInfo(productTypeId, attributeFQN, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Update extra
     * Update extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> updateExtraWithHttpInfo(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = updateExtraValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra (asynchronously)
     * Update extra.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraAsync(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOption
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOptionCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOptionValidateBeforeCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling updateOption(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateOption(Async)");
        }
        

        okhttp3.Call localVarCall = updateOptionCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Update option
     * Update option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType updateOption(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = updateOptionWithHttpInfo(productTypeId, attributeFQN, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Update option
     * Update option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> updateOptionWithHttpInfo(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = updateOptionValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update option (asynchronously)
     * Update option.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOptionAsync(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOptionValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductType
     * @param productTypeId  (required)
     * @param productType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductTypeCall(Integer productTypeId, ProductType productType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductTypeValidateBeforeCall(Integer productTypeId, ProductType productType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling updateProductType(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductTypeCall(productTypeId, productType, _callback);
        return localVarCall;

    }

    /**
     * Update product type
     * Update product type.
     * @param productTypeId  (required)
     * @param productType  (optional)
     * @return ProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductType updateProductType(Integer productTypeId, ProductType productType) throws ApiException {
        ApiResponse<ProductType> localVarResp = updateProductTypeWithHttpInfo(productTypeId, productType);
        return localVarResp.getData();
    }

    /**
     * Update product type
     * Update product type.
     * @param productTypeId  (required)
     * @param productType  (optional)
     * @return ApiResponse&lt;ProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductType> updateProductTypeWithHttpInfo(Integer productTypeId, ProductType productType) throws ApiException {
        okhttp3.Call localVarCall = updateProductTypeValidateBeforeCall(productTypeId, productType, null);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update product type (asynchronously)
     * Update product type.
     * @param productTypeId  (required)
     * @param productType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductTypeAsync(Integer productTypeId, ProductType productType, final ApiCallback<ProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductTypeValidateBeforeCall(productTypeId, productType, _callback);
        Type localVarReturnType = new TypeToken<ProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling updateProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updatePropertyCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Update product type property
     * Update property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType updateProperty(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = updatePropertyWithHttpInfo(productTypeId, attributeFQN, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Update product type property
     * Update property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> updatePropertyWithHttpInfo(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update product type property (asynchronously)
     * Update property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyAsync(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertyValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVariantProperty
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVariantPropertyCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributeInProductType;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}"
            .replaceAll("\\{" + "productTypeId" + "\\}", localVarApiClient.escapeString(productTypeId.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVariantPropertyValidateBeforeCall(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productTypeId' is set
        if (productTypeId == null) {
            throw new ApiException("Missing the required parameter 'productTypeId' when calling updateVariantProperty(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateVariantProperty(Async)");
        }
        

        okhttp3.Call localVarCall = updateVariantPropertyCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        return localVarCall;

    }

    /**
     * Update variant property
     * Update variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return AttributeInProductType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInProductType updateVariantProperty(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        ApiResponse<AttributeInProductType> localVarResp = updateVariantPropertyWithHttpInfo(productTypeId, attributeFQN, attributeInProductType);
        return localVarResp.getData();
    }

    /**
     * Update variant property
     * Update variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @return ApiResponse&lt;AttributeInProductType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInProductType> updateVariantPropertyWithHttpInfo(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType) throws ApiException {
        okhttp3.Call localVarCall = updateVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, null);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update variant property (asynchronously)
     * Update variant property.
     * @param productTypeId  (required)
     * @param attributeFQN  (required)
     * @param attributeInProductType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVariantPropertyAsync(Integer productTypeId, String attributeFQN, AttributeInProductType attributeInProductType, final ApiCallback<AttributeInProductType> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVariantPropertyValidateBeforeCall(productTypeId, attributeFQN, attributeInProductType, _callback);
        Type localVarReturnType = new TypeToken<AttributeInProductType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ProductTypesApi build() {
            return new ProductTypesApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
