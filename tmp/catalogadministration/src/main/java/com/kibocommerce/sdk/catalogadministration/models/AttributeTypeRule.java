/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Attribute Value Localized Resource
 */
@ApiModel(description = "Attribute Value Localized Resource")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AttributeTypeRule implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ATTRIBUTE_INPUT_TYPE = "attributeInputType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_INPUT_TYPE)
  private String attributeInputType;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DATA_TYPE = "attributeDataType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DATA_TYPE)
  private String attributeDataType;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE_TYPE = "attributeValueType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE_TYPE)
  private String attributeValueType;

  public static final String SERIALIZED_NAME_ATTRIBUTE_USAGE_TYPE = "attributeUsageType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_USAGE_TYPE)
  private String attributeUsageType;

  public AttributeTypeRule() {
  }

  public AttributeTypeRule attributeInputType(String attributeInputType) {
    
    this.attributeInputType = attributeInputType;
    return this;
  }

   /**
   * AttributeInputType identifier
   * @return attributeInputType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AttributeInputType identifier")

  public String getAttributeInputType() {
    return attributeInputType;
  }


  public void setAttributeInputType(String attributeInputType) {
    this.attributeInputType = attributeInputType;
  }


  public AttributeTypeRule attributeDataType(String attributeDataType) {
    
    this.attributeDataType = attributeDataType;
    return this;
  }

   /**
   * AttributeDataType identifier
   * @return attributeDataType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AttributeDataType identifier")

  public String getAttributeDataType() {
    return attributeDataType;
  }


  public void setAttributeDataType(String attributeDataType) {
    this.attributeDataType = attributeDataType;
  }


  public AttributeTypeRule attributeValueType(String attributeValueType) {
    
    this.attributeValueType = attributeValueType;
    return this;
  }

   /**
   * AttributeValueType identifier
   * @return attributeValueType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AttributeValueType identifier")

  public String getAttributeValueType() {
    return attributeValueType;
  }


  public void setAttributeValueType(String attributeValueType) {
    this.attributeValueType = attributeValueType;
  }


  public AttributeTypeRule attributeUsageType(String attributeUsageType) {
    
    this.attributeUsageType = attributeUsageType;
    return this;
  }

   /**
   * AttributeUsageType identifier
   * @return attributeUsageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AttributeUsageType identifier")

  public String getAttributeUsageType() {
    return attributeUsageType;
  }


  public void setAttributeUsageType(String attributeUsageType) {
    this.attributeUsageType = attributeUsageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeTypeRule attributeTypeRule = (AttributeTypeRule) o;
    return Objects.equals(this.attributeInputType, attributeTypeRule.attributeInputType) &&
        Objects.equals(this.attributeDataType, attributeTypeRule.attributeDataType) &&
        Objects.equals(this.attributeValueType, attributeTypeRule.attributeValueType) &&
        Objects.equals(this.attributeUsageType, attributeTypeRule.attributeUsageType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeInputType, attributeDataType, attributeValueType, attributeUsageType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeTypeRule {\n");
    sb.append("    attributeInputType: ").append(toIndentedString(attributeInputType)).append("\n");
    sb.append("    attributeDataType: ").append(toIndentedString(attributeDataType)).append("\n");
    sb.append("    attributeValueType: ").append(toIndentedString(attributeValueType)).append("\n");
    sb.append("    attributeUsageType: ").append(toIndentedString(attributeUsageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeInputType");
    openapiFields.add("attributeDataType");
    openapiFields.add("attributeValueType");
    openapiFields.add("attributeUsageType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttributeTypeRule
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AttributeTypeRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeTypeRule is not found in the empty JSON string", AttributeTypeRule.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!AttributeTypeRule.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeTypeRule` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("attributeInputType") != null && !jsonObj.get("attributeInputType").isJsonNull()) && !jsonObj.get("attributeInputType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeInputType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeInputType").toString()));
      }
      if ((jsonObj.get("attributeDataType") != null && !jsonObj.get("attributeDataType").isJsonNull()) && !jsonObj.get("attributeDataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeDataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeDataType").toString()));
      }
      if ((jsonObj.get("attributeValueType") != null && !jsonObj.get("attributeValueType").isJsonNull()) && !jsonObj.get("attributeValueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeValueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeValueType").toString()));
      }
      if ((jsonObj.get("attributeUsageType") != null && !jsonObj.get("attributeUsageType").isJsonNull()) && !jsonObj.get("attributeUsageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeUsageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeUsageType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeTypeRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeTypeRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeTypeRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeTypeRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeTypeRule>() {
           @Override
           public void write(JsonWriter out, AttributeTypeRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeTypeRule read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttributeTypeRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttributeTypeRule
  * @throws IOException if the JSON string is invalid with respect to AttributeTypeRule
  */
  public static AttributeTypeRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeTypeRule.class);
  }

 /**
  * Convert an instance of AttributeTypeRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

