/*
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.catalogadministration.api;
import com.kibocommerce.sdk.common.*;

import com.kibocommerce.sdk.common.ApiCallback;
import com.kibocommerce.sdk.common.ApiClient;
import com.kibocommerce.sdk.common.ApiException;
import com.kibocommerce.sdk.common.ApiResponse;
import com.kibocommerce.sdk.common.Configuration;

import com.kibocommerce.sdk.common.Pair;
import com.kibocommerce.sdk.common.ProgressRequestBody;
import com.kibocommerce.sdk.common.ProgressResponseBody;

import com.kibocommerce.sdk.catalogadministration.ServerConfiguration;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.sdk.catalogadministration.models.ProductExtra;
import com.kibocommerce.sdk.catalogadministration.models.ProductExtraValueDeltaPrice;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductExtrasApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    private static String localServerBaseTemplate = ServerConfiguration.defaultServerTemplate;
    private Map<String, String> localHeaders = new HashMap<String, String>();

    public ProductExtrasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductExtrasApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    public ProductExtrasApi(KiboConfiguration configuration) {
        this(configuration.getServerForTemplate(localServerBaseTemplate),
            configuration.getClient(),
            configuration.getHeaders()
        );
    }
    public ProductExtrasApi(String baseUrl, ApiClient apiClient, Map<String, String> headers) {
        this.localCustomBaseUrl = baseUrl;
        this.localVarApiClient = apiClient;
        this.localHeaders = headers;
    }
    public ProductExtrasApi(Builder builder) {
        this.localCustomBaseUrl = builder.configuration.getServerForTemplate(localServerBaseTemplate);
        this.localVarApiClient = builder.configuration.getClient();
        this.localHeaders = builder.configuration.getHeaders();
    }
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    public Map<String, String> getHeaders(){
        return localHeaders;
    }
    public void setHeaders(Map<String, String> headers){
        this.localHeaders = headers;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addExtra
     * @param productCode  (required)
     * @param productExtra  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraCall(String productCode, ProductExtra productExtra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productExtra;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtraValidateBeforeCall(String productCode, ProductExtra productExtra, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling addExtra(Async)");
        }
        

        okhttp3.Call localVarCall = addExtraCall(productCode, productExtra, _callback);
        return localVarCall;

    }

    /**
     * Add extra
     * Add extra
     * @param productCode  (required)
     * @param productExtra  (optional)
     * @return ProductExtra
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtra addExtra(String productCode, ProductExtra productExtra) throws ApiException {
        ApiResponse<ProductExtra> localVarResp = addExtraWithHttpInfo(productCode, productExtra);
        return localVarResp.getData();
    }

    /**
     * Add extra
     * Add extra
     * @param productCode  (required)
     * @param productExtra  (optional)
     * @return ApiResponse&lt;ProductExtra&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtra> addExtraWithHttpInfo(String productCode, ProductExtra productExtra) throws ApiException {
        okhttp3.Call localVarCall = addExtraValidateBeforeCall(productCode, productExtra, null);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add extra (asynchronously)
     * Add extra
     * @param productCode  (required)
     * @param productExtra  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraAsync(String productCode, ProductExtra productExtra, final ApiCallback<ProductExtra> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtraValidateBeforeCall(productCode, productExtra, _callback);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addExtraValueLocalizedDeltaPrice
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraValueLocalizedDeltaPriceCall(String productCode, String attributeFQN, String value, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productExtraValueDeltaPrice;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExtraValueLocalizedDeltaPriceValidateBeforeCall(String productCode, String attributeFQN, String value, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling addExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling addExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling addExtraValueLocalizedDeltaPrice(Async)");
        }
        

        okhttp3.Call localVarCall = addExtraValueLocalizedDeltaPriceCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, _callback);
        return localVarCall;

    }

    /**
     * Add extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return ProductExtraValueDeltaPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtraValueDeltaPrice addExtraValueLocalizedDeltaPrice(String productCode, String attributeFQN, String value, ProductExtraValueDeltaPrice productExtraValueDeltaPrice) throws ApiException {
        ApiResponse<ProductExtraValueDeltaPrice> localVarResp = addExtraValueLocalizedDeltaPriceWithHttpInfo(productCode, attributeFQN, value, productExtraValueDeltaPrice);
        return localVarResp.getData();
    }

    /**
     * Add extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return ApiResponse&lt;ProductExtraValueDeltaPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtraValueDeltaPrice> addExtraValueLocalizedDeltaPriceWithHttpInfo(String productCode, String attributeFQN, String value, ProductExtraValueDeltaPrice productExtraValueDeltaPrice) throws ApiException {
        okhttp3.Call localVarCall = addExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, null);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add extra value localized delta price (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addExtraValueLocalizedDeltaPriceAsync(String productCode, String attributeFQN, String value, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback<ProductExtraValueDeltaPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, _callback);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtraValidateBeforeCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling deleteExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteExtra(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExtraCall(productCode, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Delete extra
     * Delete extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExtra(String productCode, String attributeFQN) throws ApiException {
        deleteExtraWithHttpInfo(productCode, attributeFQN);
    }

    /**
     * Delete extra
     * Delete extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExtraWithHttpInfo(String productCode, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = deleteExtraValidateBeforeCall(productCode, attributeFQN, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete extra (asynchronously)
     * Delete extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraAsync(String productCode, String attributeFQN, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtraValidateBeforeCall(productCode, attributeFQN, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteExtraValueLocalizedDeltaPrice
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraValueLocalizedDeltaPriceCall(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtraValueLocalizedDeltaPriceValidateBeforeCall(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling deleteExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling deleteExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling deleteExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling deleteExtraValueLocalizedDeltaPrice(Async)");
        }
        

        okhttp3.Call localVarCall = deleteExtraValueLocalizedDeltaPriceCall(productCode, attributeFQN, value, currencyCode, _callback);
        return localVarCall;

    }

    /**
     * Delete extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void deleteExtraValueLocalizedDeltaPrice(String productCode, String attributeFQN, String value, String currencyCode) throws ApiException {
        deleteExtraValueLocalizedDeltaPriceWithHttpInfo(productCode, attributeFQN, value, currencyCode);
    }

    /**
     * Delete extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteExtraValueLocalizedDeltaPriceWithHttpInfo(String productCode, String attributeFQN, String value, String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = deleteExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete extra value localized delta price (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteExtraValueLocalizedDeltaPriceAsync(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtraValidateBeforeCall(String productCode, String attributeFQN, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getExtra(Async)");
        }
        

        okhttp3.Call localVarCall = getExtraCall(productCode, attributeFQN, _callback);
        return localVarCall;

    }

    /**
     * Get extra
     * Get individual extra.
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return ProductExtra
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtra getExtra(String productCode, String attributeFQN) throws ApiException {
        ApiResponse<ProductExtra> localVarResp = getExtraWithHttpInfo(productCode, attributeFQN);
        return localVarResp.getData();
    }

    /**
     * Get extra
     * Get individual extra.
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @return ApiResponse&lt;ProductExtra&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtra> getExtraWithHttpInfo(String productCode, String attributeFQN) throws ApiException {
        okhttp3.Call localVarCall = getExtraValidateBeforeCall(productCode, attributeFQN, null);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extra (asynchronously)
     * Get individual extra.
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraAsync(String productCode, String attributeFQN, final ApiCallback<ProductExtra> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtraValidateBeforeCall(productCode, attributeFQN, _callback);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtraValueLocalizedDeltaPrice
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraValueLocalizedDeltaPriceCall(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtraValueLocalizedDeltaPriceValidateBeforeCall(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling getExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getExtraValueLocalizedDeltaPrice(Async)");
        }
        

        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPriceCall(productCode, attributeFQN, value, currencyCode, _callback);
        return localVarCall;

    }

    /**
     * Get extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @return ProductExtraValueDeltaPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtraValueDeltaPrice getExtraValueLocalizedDeltaPrice(String productCode, String attributeFQN, String value, String currencyCode) throws ApiException {
        ApiResponse<ProductExtraValueDeltaPrice> localVarResp = getExtraValueLocalizedDeltaPriceWithHttpInfo(productCode, attributeFQN, value, currencyCode);
        return localVarResp.getData();
    }

    /**
     * Get extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @return ApiResponse&lt;ProductExtraValueDeltaPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtraValueDeltaPrice> getExtraValueLocalizedDeltaPriceWithHttpInfo(String productCode, String attributeFQN, String value, String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, null);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extra value localized delta price (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraValueLocalizedDeltaPriceAsync(String productCode, String attributeFQN, String value, String currencyCode, final ApiCallback<ProductExtraValueDeltaPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, _callback);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtraValueLocalizedDeltaPrices
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraValueLocalizedDeltaPricesCall(String productCode, String attributeFQN, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtraValueLocalizedDeltaPricesValidateBeforeCall(String productCode, String attributeFQN, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getExtraValueLocalizedDeltaPrices(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling getExtraValueLocalizedDeltaPrices(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling getExtraValueLocalizedDeltaPrices(Async)");
        }
        

        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPricesCall(productCode, attributeFQN, value, _callback);
        return localVarCall;

    }

    /**
     * Get extra value localized delta prices
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @return List&lt;ProductExtraValueDeltaPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductExtraValueDeltaPrice> getExtraValueLocalizedDeltaPrices(String productCode, String attributeFQN, String value) throws ApiException {
        ApiResponse<List<ProductExtraValueDeltaPrice>> localVarResp = getExtraValueLocalizedDeltaPricesWithHttpInfo(productCode, attributeFQN, value);
        return localVarResp.getData();
    }

    /**
     * Get extra value localized delta prices
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @return ApiResponse&lt;List&lt;ProductExtraValueDeltaPrice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductExtraValueDeltaPrice>> getExtraValueLocalizedDeltaPricesWithHttpInfo(String productCode, String attributeFQN, String value) throws ApiException {
        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPricesValidateBeforeCall(productCode, attributeFQN, value, null);
        Type localVarReturnType = new TypeToken<List<ProductExtraValueDeltaPrice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extra value localized delta prices (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtraValueLocalizedDeltaPricesAsync(String productCode, String attributeFQN, String value, final ApiCallback<List<ProductExtraValueDeltaPrice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtraValueLocalizedDeltaPricesValidateBeforeCall(productCode, attributeFQN, value, _callback);
        Type localVarReturnType = new TypeToken<List<ProductExtraValueDeltaPrice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExtras
     * @param productCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtrasCall(String productCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtrasValidateBeforeCall(String productCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling getExtras(Async)");
        }
        

        okhttp3.Call localVarCall = getExtrasCall(productCode, _callback);
        return localVarCall;

    }

    /**
     * Get extras
     * Get extras for the product.
     * @param productCode  (required)
     * @return List&lt;ProductExtra&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductExtra> getExtras(String productCode) throws ApiException {
        ApiResponse<List<ProductExtra>> localVarResp = getExtrasWithHttpInfo(productCode);
        return localVarResp.getData();
    }

    /**
     * Get extras
     * Get extras for the product.
     * @param productCode  (required)
     * @return ApiResponse&lt;List&lt;ProductExtra&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductExtra>> getExtrasWithHttpInfo(String productCode) throws ApiException {
        okhttp3.Call localVarCall = getExtrasValidateBeforeCall(productCode, null);
        Type localVarReturnType = new TypeToken<List<ProductExtra>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extras (asynchronously)
     * Get extras for the product.
     * @param productCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtrasAsync(String productCode, final ApiCallback<List<ProductExtra>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtrasValidateBeforeCall(productCode, _callback);
        Type localVarReturnType = new TypeToken<List<ProductExtra>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param productExtra  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraCall(String productCode, String attributeFQN, ProductExtra productExtra, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productExtra;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraValidateBeforeCall(String productCode, String attributeFQN, ProductExtra productExtra, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updateExtra(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateExtra(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraCall(productCode, attributeFQN, productExtra, _callback);
        return localVarCall;

    }

    /**
     * Update extra
     * Update extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param productExtra  (optional)
     * @return ProductExtra
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtra updateExtra(String productCode, String attributeFQN, ProductExtra productExtra) throws ApiException {
        ApiResponse<ProductExtra> localVarResp = updateExtraWithHttpInfo(productCode, attributeFQN, productExtra);
        return localVarResp.getData();
    }

    /**
     * Update extra
     * Update extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param productExtra  (optional)
     * @return ApiResponse&lt;ProductExtra&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtra> updateExtraWithHttpInfo(String productCode, String attributeFQN, ProductExtra productExtra) throws ApiException {
        okhttp3.Call localVarCall = updateExtraValidateBeforeCall(productCode, attributeFQN, productExtra, null);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra (asynchronously)
     * Update extra
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param productExtra  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraAsync(String productCode, String attributeFQN, ProductExtra productExtra, final ApiCallback<ProductExtra> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraValidateBeforeCall(productCode, attributeFQN, productExtra, _callback);
        Type localVarReturnType = new TypeToken<ProductExtra>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtraValueLocalizedDeltaPrice
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraValueLocalizedDeltaPriceCall(String productCode, String attributeFQN, String value, String currencyCode, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productExtraValueDeltaPrice;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice/{currencyCode}"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "currencyCode" + "\\}", localVarApiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraValueLocalizedDeltaPriceValidateBeforeCall(String productCode, String attributeFQN, String value, String currencyCode, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updateExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateExtraValueLocalizedDeltaPrice(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateExtraValueLocalizedDeltaPrice(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPriceCall(productCode, attributeFQN, value, currencyCode, productExtraValueDeltaPrice, _callback);
        return localVarCall;

    }

    /**
     * Update extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return ProductExtraValueDeltaPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ProductExtraValueDeltaPrice updateExtraValueLocalizedDeltaPrice(String productCode, String attributeFQN, String value, String currencyCode, ProductExtraValueDeltaPrice productExtraValueDeltaPrice) throws ApiException {
        ApiResponse<ProductExtraValueDeltaPrice> localVarResp = updateExtraValueLocalizedDeltaPriceWithHttpInfo(productCode, attributeFQN, value, currencyCode, productExtraValueDeltaPrice);
        return localVarResp.getData();
    }

    /**
     * Update extra value localized delta price
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return ApiResponse&lt;ProductExtraValueDeltaPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductExtraValueDeltaPrice> updateExtraValueLocalizedDeltaPriceWithHttpInfo(String productCode, String attributeFQN, String value, String currencyCode, ProductExtraValueDeltaPrice productExtraValueDeltaPrice) throws ApiException {
        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, productExtraValueDeltaPrice, null);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra value localized delta price (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param currencyCode  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraValueLocalizedDeltaPriceAsync(String productCode, String attributeFQN, String value, String currencyCode, ProductExtraValueDeltaPrice productExtraValueDeltaPrice, final ApiCallback<ProductExtraValueDeltaPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPriceValidateBeforeCall(productCode, attributeFQN, value, currencyCode, productExtraValueDeltaPrice, _callback);
        Type localVarReturnType = new TypeToken<ProductExtraValueDeltaPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtraValueLocalizedDeltaPrices
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraValueLocalizedDeltaPricesCall(String productCode, String attributeFQN, String value, List<ProductExtraValueDeltaPrice> productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productExtraValueDeltaPrice;

        // create path and map variables
        String localVarPath = "/commerce/catalog/admin/products/{productCode}/Extras/{attributeFQN}/Values/{value}/localizedDeltaPrice"
            .replaceAll("\\{" + "productCode" + "\\}", localVarApiClient.escapeString(productCode.toString()))
            .replaceAll("\\{" + "attributeFQN" + "\\}", localVarApiClient.escapeString(attributeFQN.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>(localHeaders);
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth", "clientOauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtraValueLocalizedDeltaPricesValidateBeforeCall(String productCode, String attributeFQN, String value, List<ProductExtraValueDeltaPrice> productExtraValueDeltaPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCode' is set
        if (productCode == null) {
            throw new ApiException("Missing the required parameter 'productCode' when calling updateExtraValueLocalizedDeltaPrices(Async)");
        }
        
        // verify the required parameter 'attributeFQN' is set
        if (attributeFQN == null) {
            throw new ApiException("Missing the required parameter 'attributeFQN' when calling updateExtraValueLocalizedDeltaPrices(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateExtraValueLocalizedDeltaPrices(Async)");
        }
        

        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPricesCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, _callback);
        return localVarCall;

    }

    /**
     * Update extra value localized delta prices
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return List&lt;ProductExtraValueDeltaPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductExtraValueDeltaPrice> updateExtraValueLocalizedDeltaPrices(String productCode, String attributeFQN, String value, List<ProductExtraValueDeltaPrice> productExtraValueDeltaPrice) throws ApiException {
        ApiResponse<List<ProductExtraValueDeltaPrice>> localVarResp = updateExtraValueLocalizedDeltaPricesWithHttpInfo(productCode, attributeFQN, value, productExtraValueDeltaPrice);
        return localVarResp.getData();
    }

    /**
     * Update extra value localized delta prices
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @return ApiResponse&lt;List&lt;ProductExtraValueDeltaPrice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductExtraValueDeltaPrice>> updateExtraValueLocalizedDeltaPricesWithHttpInfo(String productCode, String attributeFQN, String value, List<ProductExtraValueDeltaPrice> productExtraValueDeltaPrice) throws ApiException {
        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPricesValidateBeforeCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, null);
        Type localVarReturnType = new TypeToken<List<ProductExtraValueDeltaPrice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update extra value localized delta prices (asynchronously)
     * 
     * @param productCode  (required)
     * @param attributeFQN  (required)
     * @param value  (required)
     * @param productExtraValueDeltaPrice  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtraValueLocalizedDeltaPricesAsync(String productCode, String attributeFQN, String value, List<ProductExtraValueDeltaPrice> productExtraValueDeltaPrice, final ApiCallback<List<ProductExtraValueDeltaPrice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtraValueLocalizedDeltaPricesValidateBeforeCall(productCode, attributeFQN, value, productExtraValueDeltaPrice, _callback);
        Type localVarReturnType = new TypeToken<List<ProductExtraValueDeltaPrice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public static class Builder {
        private KiboConfiguration configuration;
        private Map<String, String> customHeaders;
        public Builder() {
        }
        public Builder withHeaders(Map<String, String> customHeaders) {
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder withConfig(KiboConfiguration configuration) {
            this.configuration = configuration;
            return this;
        }
        public ProductExtrasApi build() {
            return new ProductExtrasApi(this);
        }
    }
    public static Builder builder() {

        return new Builder();
    }
}
