/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicationTransaction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_APPLICATION_TRANSACTION_ID = "applicationTransactionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TRANSACTION_ID)
  private Integer applicationTransactionId;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private Integer applicationId;

  public static final String SERIALIZED_NAME_APPLICATION_ENTITLEMENT_ID = "applicationEntitlementId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ENTITLEMENT_ID)
  private Integer applicationEntitlementId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private Integer tenantId;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private Integer siteId;

  public static final String SERIALIZED_NAME_LOCALE_CODE = "localeCode";
  @SerializedName(SERIALIZED_NAME_LOCALE_CODE)
  private Integer localeCode;

  public static final String SERIALIZED_NAME_ISO_CURRENCY_CODE = "isoCurrencyCode";
  @SerializedName(SERIALIZED_NAME_ISO_CURRENCY_CODE)
  private String isoCurrencyCode;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public static final String SERIALIZED_NAME_TRANSACTION_PRICE = "transactionPrice";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PRICE)
  private Double transactionPrice;

  public static final String SERIALIZED_NAME_TRANSACTION_TAX = "transactionTax";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TAX)
  private Double transactionTax;

  public static final String SERIALIZED_NAME_TRANSACTION_TOTAL = "transactionTotal";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TOTAL)
  private Double transactionTotal;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public ApplicationTransaction() {
  }

  public ApplicationTransaction applicationTransactionId(Integer applicationTransactionId) {
    
    this.applicationTransactionId = applicationTransactionId;
    return this;
  }

   /**
   * 
   * @return applicationTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApplicationTransactionId() {
    return applicationTransactionId;
  }


  public void setApplicationTransactionId(Integer applicationTransactionId) {
    this.applicationTransactionId = applicationTransactionId;
  }


  public ApplicationTransaction applicationId(Integer applicationId) {
    
    this.applicationId = applicationId;
    return this;
  }

   /**
   * 
   * @return applicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApplicationId() {
    return applicationId;
  }


  public void setApplicationId(Integer applicationId) {
    this.applicationId = applicationId;
  }


  public ApplicationTransaction applicationEntitlementId(Integer applicationEntitlementId) {
    
    this.applicationEntitlementId = applicationEntitlementId;
    return this;
  }

   /**
   * 
   * @return applicationEntitlementId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApplicationEntitlementId() {
    return applicationEntitlementId;
  }


  public void setApplicationEntitlementId(Integer applicationEntitlementId) {
    this.applicationEntitlementId = applicationEntitlementId;
  }


  public ApplicationTransaction tenantId(Integer tenantId) {
    
    this.tenantId = tenantId;
    return this;
  }

   /**
   * 
   * @return tenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTenantId() {
    return tenantId;
  }


  public void setTenantId(Integer tenantId) {
    this.tenantId = tenantId;
  }


  public ApplicationTransaction siteId(Integer siteId) {
    
    this.siteId = siteId;
    return this;
  }

   /**
   * 
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSiteId() {
    return siteId;
  }


  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }


  public ApplicationTransaction localeCode(Integer localeCode) {
    
    this.localeCode = localeCode;
    return this;
  }

   /**
   * 
   * @return localeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLocaleCode() {
    return localeCode;
  }


  public void setLocaleCode(Integer localeCode) {
    this.localeCode = localeCode;
  }


  public ApplicationTransaction isoCurrencyCode(String isoCurrencyCode) {
    
    this.isoCurrencyCode = isoCurrencyCode;
    return this;
  }

   /**
   * 
   * @return isoCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIsoCurrencyCode() {
    return isoCurrencyCode;
  }


  public void setIsoCurrencyCode(String isoCurrencyCode) {
    this.isoCurrencyCode = isoCurrencyCode;
  }


  public ApplicationTransaction transactionDate(OffsetDateTime transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * 
   * @return transactionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(OffsetDateTime transactionDate) {
    this.transactionDate = transactionDate;
  }


  public ApplicationTransaction transactionPrice(Double transactionPrice) {
    
    this.transactionPrice = transactionPrice;
    return this;
  }

   /**
   * 
   * @return transactionPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTransactionPrice() {
    return transactionPrice;
  }


  public void setTransactionPrice(Double transactionPrice) {
    this.transactionPrice = transactionPrice;
  }


  public ApplicationTransaction transactionTax(Double transactionTax) {
    
    this.transactionTax = transactionTax;
    return this;
  }

   /**
   * 
   * @return transactionTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTransactionTax() {
    return transactionTax;
  }


  public void setTransactionTax(Double transactionTax) {
    this.transactionTax = transactionTax;
  }


  public ApplicationTransaction transactionTotal(Double transactionTotal) {
    
    this.transactionTotal = transactionTotal;
    return this;
  }

   /**
   * 
   * @return transactionTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTransactionTotal() {
    return transactionTotal;
  }


  public void setTransactionTotal(Double transactionTotal) {
    this.transactionTotal = transactionTotal;
  }


  public ApplicationTransaction orderNumber(String orderNumber) {
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * 
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    this.orderNumber = orderNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationTransaction applicationTransaction = (ApplicationTransaction) o;
    return Objects.equals(this.applicationTransactionId, applicationTransaction.applicationTransactionId) &&
        Objects.equals(this.applicationId, applicationTransaction.applicationId) &&
        Objects.equals(this.applicationEntitlementId, applicationTransaction.applicationEntitlementId) &&
        Objects.equals(this.tenantId, applicationTransaction.tenantId) &&
        Objects.equals(this.siteId, applicationTransaction.siteId) &&
        Objects.equals(this.localeCode, applicationTransaction.localeCode) &&
        Objects.equals(this.isoCurrencyCode, applicationTransaction.isoCurrencyCode) &&
        Objects.equals(this.transactionDate, applicationTransaction.transactionDate) &&
        Objects.equals(this.transactionPrice, applicationTransaction.transactionPrice) &&
        Objects.equals(this.transactionTax, applicationTransaction.transactionTax) &&
        Objects.equals(this.transactionTotal, applicationTransaction.transactionTotal) &&
        Objects.equals(this.orderNumber, applicationTransaction.orderNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationTransactionId, applicationId, applicationEntitlementId, tenantId, siteId, localeCode, isoCurrencyCode, transactionDate, transactionPrice, transactionTax, transactionTotal, orderNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationTransaction {\n");
    sb.append("    applicationTransactionId: ").append(toIndentedString(applicationTransactionId)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    applicationEntitlementId: ").append(toIndentedString(applicationEntitlementId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    localeCode: ").append(toIndentedString(localeCode)).append("\n");
    sb.append("    isoCurrencyCode: ").append(toIndentedString(isoCurrencyCode)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    transactionPrice: ").append(toIndentedString(transactionPrice)).append("\n");
    sb.append("    transactionTax: ").append(toIndentedString(transactionTax)).append("\n");
    sb.append("    transactionTotal: ").append(toIndentedString(transactionTotal)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationTransactionId");
    openapiFields.add("applicationId");
    openapiFields.add("applicationEntitlementId");
    openapiFields.add("tenantId");
    openapiFields.add("siteId");
    openapiFields.add("localeCode");
    openapiFields.add("isoCurrencyCode");
    openapiFields.add("transactionDate");
    openapiFields.add("transactionPrice");
    openapiFields.add("transactionTax");
    openapiFields.add("transactionTotal");
    openapiFields.add("orderNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationTransaction is not found in the empty JSON string", ApplicationTransaction.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ApplicationTransaction.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationTransaction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("isoCurrencyCode") != null && !jsonObj.get("isoCurrencyCode").isJsonNull()) && !jsonObj.get("isoCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoCurrencyCode").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationTransaction>() {
           @Override
           public void write(JsonWriter out, ApplicationTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationTransaction
  * @throws IOException if the JSON string is invalid with respect to ApplicationTransaction
  */
  public static ApplicationTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationTransaction.class);
  }

 /**
  * Convert an instance of ApplicationTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

