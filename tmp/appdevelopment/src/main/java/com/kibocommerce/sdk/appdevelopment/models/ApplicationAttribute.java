/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.appdevelopment.models.AppDevAttribute;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * Holds attribute definitions for AppVersion
 */
@ApiModel(description = "Holds attribute definitions for AppVersion")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApplicationAttribute implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SUBSYSTEM = "subsystem";
  @SerializedName(SERIALIZED_NAME_SUBSYSTEM)
  private String subsystem;

  public static final String SERIALIZED_NAME_ATTRIBUTE_JSON = "attributeJson";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_JSON)
  private String attributeJson;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE_JSON = "productTypeJson";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE_JSON)
  private String productTypeJson;

  public static final String SERIALIZED_NAME_IS_APPLIED_TO_BASE = "isAppliedToBase";
  @SerializedName(SERIALIZED_NAME_IS_APPLIED_TO_BASE)
  private Boolean isAppliedToBase;

  public static final String SERIALIZED_NAME_SOURCE_TENANT_ID = "sourceTenantId";
  @SerializedName(SERIALIZED_NAME_SOURCE_TENANT_ID)
  private Integer sourceTenantId;

  public static final String SERIALIZED_NAME_SOURCE_TENANT_NAME = "sourceTenantName";
  @SerializedName(SERIALIZED_NAME_SOURCE_TENANT_NAME)
  private String sourceTenantName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_CODES = "attributeCodes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_CODES)
  private String attributeCodes;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "packageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private Integer packageId;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AppDevAttribute> attributes = null;

  public ApplicationAttribute() {
  }

  public ApplicationAttribute subsystem(String subsystem) {
    
    this.subsystem = subsystem;
    return this;
  }

   /**
   * Customer, Order, or Product
   * @return subsystem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer, Order, or Product")

  public String getSubsystem() {
    return subsystem;
  }


  public void setSubsystem(String subsystem) {
    this.subsystem = subsystem;
  }


  public ApplicationAttribute attributeJson(String attributeJson) {
    
    this.attributeJson = attributeJson;
    return this;
  }

   /**
   * json representation of attribute definitions
   * @return attributeJson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "json representation of attribute definitions")

  public String getAttributeJson() {
    return attributeJson;
  }


  public void setAttributeJson(String attributeJson) {
    this.attributeJson = attributeJson;
  }


  public ApplicationAttribute productTypeJson(String productTypeJson) {
    
    this.productTypeJson = productTypeJson;
    return this;
  }

   /**
   * Will contain ProductTypeCollection if Product, else AttributeSet
   * @return productTypeJson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Will contain ProductTypeCollection if Product, else AttributeSet")

  public String getProductTypeJson() {
    return productTypeJson;
  }


  public void setProductTypeJson(String productTypeJson) {
    this.productTypeJson = productTypeJson;
  }


  public ApplicationAttribute isAppliedToBase(Boolean isAppliedToBase) {
    
    this.isAppliedToBase = isAppliedToBase;
    return this;
  }

   /**
   * Get isAppliedToBase
   * @return isAppliedToBase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsAppliedToBase() {
    return isAppliedToBase;
  }


  public void setIsAppliedToBase(Boolean isAppliedToBase) {
    this.isAppliedToBase = isAppliedToBase;
  }


  public ApplicationAttribute sourceTenantId(Integer sourceTenantId) {
    
    this.sourceTenantId = sourceTenantId;
    return this;
  }

   /**
   * Source Tenant Id
   * @return sourceTenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source Tenant Id")

  public Integer getSourceTenantId() {
    return sourceTenantId;
  }


  public void setSourceTenantId(Integer sourceTenantId) {
    this.sourceTenantId = sourceTenantId;
  }


  public ApplicationAttribute sourceTenantName(String sourceTenantName) {
    
    this.sourceTenantName = sourceTenantName;
    return this;
  }

   /**
   * Source Tenant Name
   * @return sourceTenantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Source Tenant Name")

  public String getSourceTenantName() {
    return sourceTenantName;
  }


  public void setSourceTenantName(String sourceTenantName) {
    this.sourceTenantName = sourceTenantName;
  }


  public ApplicationAttribute attributeCodes(String attributeCodes) {
    
    this.attributeCodes = attributeCodes;
    return this;
  }

   /**
   * Comma delimited list of attribute codes.
   * @return attributeCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma delimited list of attribute codes.")

  public String getAttributeCodes() {
    return attributeCodes;
  }


  public void setAttributeCodes(String attributeCodes) {
    this.attributeCodes = attributeCodes;
  }


  public ApplicationAttribute packageId(Integer packageId) {
    
    this.packageId = packageId;
    return this;
  }

   /**
   * 
   * @return packageId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPackageId() {
    return packageId;
  }


  public void setPackageId(Integer packageId) {
    this.packageId = packageId;
  }


  public ApplicationAttribute attributes(List<AppDevAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public ApplicationAttribute addAttributesItem(AppDevAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * 
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<AppDevAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<AppDevAttribute> attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationAttribute applicationAttribute = (ApplicationAttribute) o;
    return Objects.equals(this.subsystem, applicationAttribute.subsystem) &&
        Objects.equals(this.attributeJson, applicationAttribute.attributeJson) &&
        Objects.equals(this.productTypeJson, applicationAttribute.productTypeJson) &&
        Objects.equals(this.isAppliedToBase, applicationAttribute.isAppliedToBase) &&
        Objects.equals(this.sourceTenantId, applicationAttribute.sourceTenantId) &&
        Objects.equals(this.sourceTenantName, applicationAttribute.sourceTenantName) &&
        Objects.equals(this.attributeCodes, applicationAttribute.attributeCodes) &&
        Objects.equals(this.packageId, applicationAttribute.packageId) &&
        Objects.equals(this.attributes, applicationAttribute.attributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(subsystem, attributeJson, productTypeJson, isAppliedToBase, sourceTenantId, sourceTenantName, attributeCodes, packageId, attributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationAttribute {\n");
    sb.append("    subsystem: ").append(toIndentedString(subsystem)).append("\n");
    sb.append("    attributeJson: ").append(toIndentedString(attributeJson)).append("\n");
    sb.append("    productTypeJson: ").append(toIndentedString(productTypeJson)).append("\n");
    sb.append("    isAppliedToBase: ").append(toIndentedString(isAppliedToBase)).append("\n");
    sb.append("    sourceTenantId: ").append(toIndentedString(sourceTenantId)).append("\n");
    sb.append("    sourceTenantName: ").append(toIndentedString(sourceTenantName)).append("\n");
    sb.append("    attributeCodes: ").append(toIndentedString(attributeCodes)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subsystem");
    openapiFields.add("attributeJson");
    openapiFields.add("productTypeJson");
    openapiFields.add("isAppliedToBase");
    openapiFields.add("sourceTenantId");
    openapiFields.add("sourceTenantName");
    openapiFields.add("attributeCodes");
    openapiFields.add("packageId");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationAttribute
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationAttribute is not found in the empty JSON string", ApplicationAttribute.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!ApplicationAttribute.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationAttribute` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("subsystem") != null && !jsonObj.get("subsystem").isJsonNull()) && !jsonObj.get("subsystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subsystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subsystem").toString()));
      }
      if ((jsonObj.get("attributeJson") != null && !jsonObj.get("attributeJson").isJsonNull()) && !jsonObj.get("attributeJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeJson").toString()));
      }
      if ((jsonObj.get("productTypeJson") != null && !jsonObj.get("productTypeJson").isJsonNull()) && !jsonObj.get("productTypeJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTypeJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTypeJson").toString()));
      }
      if ((jsonObj.get("sourceTenantName") != null && !jsonObj.get("sourceTenantName").isJsonNull()) && !jsonObj.get("sourceTenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceTenantName").toString()));
      }
      if ((jsonObj.get("attributeCodes") != null && !jsonObj.get("attributeCodes").isJsonNull()) && !jsonObj.get("attributeCodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeCodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeCodes").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            AppDevAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationAttribute>() {
           @Override
           public void write(JsonWriter out, ApplicationAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationAttribute read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationAttribute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationAttribute
  * @throws IOException if the JSON string is invalid with respect to ApplicationAttribute
  */
  public static ApplicationAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationAttribute.class);
  }

 /**
  * Convert an instance of ApplicationAttribute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

