/*
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.sdk.appdevelopment.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.sdk.appdevelopment.models.FileMetadata;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.kibocommerce.sdk.common.JSON;

/**
 * FolderMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FolderMetadata implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FULL_PATH = "fullPath";
  @SerializedName(SERIALIZED_NAME_FULL_PATH)
  private String fullPath;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<FileMetadata> files = null;

  public static final String SERIALIZED_NAME_SUB_FOLDERS = "subFolders";
  @SerializedName(SERIALIZED_NAME_SUB_FOLDERS)
  private List<FolderMetadata> subFolders = null;

  public FolderMetadata() {
  }

  public FolderMetadata name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FolderMetadata fullPath(String fullPath) {
    
    this.fullPath = fullPath;
    return this;
  }

   /**
   * Get fullPath
   * @return fullPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullPath() {
    return fullPath;
  }


  public void setFullPath(String fullPath) {
    this.fullPath = fullPath;
  }


  public FolderMetadata files(List<FileMetadata> files) {
    
    this.files = files;
    return this;
  }

  public FolderMetadata addFilesItem(FileMetadata filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FileMetadata> getFiles() {
    return files;
  }


  public void setFiles(List<FileMetadata> files) {
    this.files = files;
  }


  public FolderMetadata subFolders(List<FolderMetadata> subFolders) {
    
    this.subFolders = subFolders;
    return this;
  }

  public FolderMetadata addSubFoldersItem(FolderMetadata subFoldersItem) {
    if (this.subFolders == null) {
      this.subFolders = new ArrayList<>();
    }
    this.subFolders.add(subFoldersItem);
    return this;
  }

   /**
   * Get subFolders
   * @return subFolders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FolderMetadata> getSubFolders() {
    return subFolders;
  }


  public void setSubFolders(List<FolderMetadata> subFolders) {
    this.subFolders = subFolders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderMetadata folderMetadata = (FolderMetadata) o;
    return Objects.equals(this.name, folderMetadata.name) &&
        Objects.equals(this.fullPath, folderMetadata.fullPath) &&
        Objects.equals(this.files, folderMetadata.files) &&
        Objects.equals(this.subFolders, folderMetadata.subFolders);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, fullPath, files, subFolders);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullPath: ").append(toIndentedString(fullPath)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    subFolders: ").append(toIndentedString(subFolders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("fullPath");
    openapiFields.add("files");
    openapiFields.add("subFolders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FolderMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FolderMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FolderMetadata is not found in the empty JSON string", FolderMetadata.openapiRequiredFields.toString()));
        }
      }

      // Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      // for (Entry<String, JsonElement> entry : entries) {
      //  if (!FolderMetadata.openapiFields.contains(entry.getKey())) {
      //    throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FolderMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
      //    }
      //  }
      
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("fullPath") != null && !jsonObj.get("fullPath").isJsonNull()) && !jsonObj.get("fullPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPath").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            FileMetadata.validateJsonObject(jsonArrayfiles.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("subFolders") != null && !jsonObj.get("subFolders").isJsonNull()) {
        JsonArray jsonArraysubFolders = jsonObj.getAsJsonArray("subFolders");
        if (jsonArraysubFolders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subFolders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subFolders` to be an array in the JSON string but got `%s`", jsonObj.get("subFolders").toString()));
          }

          // validate the optional field `subFolders` (array)
          for (int i = 0; i < jsonArraysubFolders.size(); i++) {
            FolderMetadata.validateJsonObject(jsonArraysubFolders.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FolderMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FolderMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FolderMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FolderMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<FolderMetadata>() {
           @Override
           public void write(JsonWriter out, FolderMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FolderMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FolderMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FolderMetadata
  * @throws IOException if the JSON string is invalid with respect to FolderMetadata
  */
  public static FolderMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FolderMetadata.class);
  }

 /**
  * Convert an instance of FolderMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

