/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.java.inventory.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kibocommerce.kibo.sdk.java.inventory.model.BaseRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinRange;
import com.kibocommerce.kibo.sdk.java.inventory.model.DateRange;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CreateWaveRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-22T23:27:35.732-05:00[America/Chicago]")
public class CreateWaveRequest extends BaseRequest {
  /**
   * Type of wave
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NORMAL("NORMAL"),
    
    SPECIAL("SPECIAL"),
    
    SINGLE("SINGLE"),
    
    MULTIPLE("MULTIPLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_MAX_ORDERS = "maxOrders";
  @SerializedName(SERIALIZED_NAME_MAX_ORDERS)
  private Integer maxOrders;

  public static final String SERIALIZED_NAME_INCLUDE_ZERO_INVENTORY = "includeZeroInventory";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ZERO_INVENTORY)
  private Boolean includeZeroInventory;

  public static final String SERIALIZED_NAME_BIN_RANGES = "binRanges";
  @SerializedName(SERIALIZED_NAME_BIN_RANGES)
  private List<BinRange> binRanges = null;

  public static final String SERIALIZED_NAME_ORDER_DATE_RANGE = "orderDateRange";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE_RANGE)
  private DateRange orderDateRange = null;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private String products;

  /**
   * Shipping Options
   */
  @JsonAdapter(ShippingOptionsEnum.Adapter.class)
  public enum ShippingOptionsEnum {
    STANDARD_ONLY("STANDARD_ONLY"),
    
    EXPRESS_ONLY("EXPRESS_ONLY"),
    
    ALL("ALL");

    private String value;

    ShippingOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShippingOptionsEnum fromValue(String text) {
      for (ShippingOptionsEnum b : ShippingOptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<ShippingOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShippingOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShippingOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ShippingOptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shippingOptions";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private ShippingOptionsEnum shippingOptions;

  public static final String SERIALIZED_NAME_CUSTOM_ORDER_ITEM_DATA = "customOrderItemData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ORDER_ITEM_DATA)
  private List<List<String>> customOrderItemData = null;

  public CreateWaveRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of wave
   * @return type
  **/
  @ApiModelProperty(value = "Type of wave")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CreateWaveRequest maxOrders(Integer maxOrders) {
    this.maxOrders = maxOrders;
    return this;
  }

   /**
   * Maximum number of orders
   * @return maxOrders
  **/
  @ApiModelProperty(value = "Maximum number of orders")
  public Integer getMaxOrders() {
    return maxOrders;
  }

  public void setMaxOrders(Integer maxOrders) {
    this.maxOrders = maxOrders;
  }

  public CreateWaveRequest includeZeroInventory(Boolean includeZeroInventory) {
    this.includeZeroInventory = includeZeroInventory;
    return this;
  }

   /**
   * Flag for including zero inventory items
   * @return includeZeroInventory
  **/
  @ApiModelProperty(value = "Flag for including zero inventory items")
  public Boolean getIncludeZeroInventory() {
    return includeZeroInventory;
  }

  public void setIncludeZeroInventory(Boolean includeZeroInventory) {
    this.includeZeroInventory = includeZeroInventory;
  }

  public CreateWaveRequest binRanges(List<BinRange> binRanges) {
    this.binRanges = binRanges;
    return this;
  }

  public CreateWaveRequest addBinRangesItem(BinRange binRangesItem) {
    if (this.binRanges == null) {
      this.binRanges = new ArrayList<BinRange>();
    }
    this.binRanges.add(binRangesItem);
    return this;
  }

   /**
   * List of Bin Ranges
   * @return binRanges
  **/
  @ApiModelProperty(value = "List of Bin Ranges")
  public List<BinRange> getBinRanges() {
    return binRanges;
  }

  public void setBinRanges(List<BinRange> binRanges) {
    this.binRanges = binRanges;
  }

  public CreateWaveRequest orderDateRange(DateRange orderDateRange) {
    this.orderDateRange = orderDateRange;
    return this;
  }

   /**
   * Get orderDateRange
   * @return orderDateRange
  **/
  @ApiModelProperty(value = "")
  public DateRange getOrderDateRange() {
    return orderDateRange;
  }

  public void setOrderDateRange(DateRange orderDateRange) {
    this.orderDateRange = orderDateRange;
  }

  public CreateWaveRequest products(String products) {
    this.products = products;
    return this;
  }

   /**
   * Part/Product Number
   * @return products
  **/
  @ApiModelProperty(value = "Part/Product Number")
  public String getProducts() {
    return products;
  }

  public void setProducts(String products) {
    this.products = products;
  }

  public CreateWaveRequest shippingOptions(ShippingOptionsEnum shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

   /**
   * Shipping Options
   * @return shippingOptions
  **/
  @ApiModelProperty(value = "Shipping Options")
  public ShippingOptionsEnum getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(ShippingOptionsEnum shippingOptions) {
    this.shippingOptions = shippingOptions;
  }

  public CreateWaveRequest customOrderItemData(List<List<String>> customOrderItemData) {
    this.customOrderItemData = customOrderItemData;
    return this;
  }

  public CreateWaveRequest addCustomOrderItemDataItem(List<String> customOrderItemDataItem) {
    if (this.customOrderItemData == null) {
      this.customOrderItemData = new ArrayList<List<String>>();
    }
    this.customOrderItemData.add(customOrderItemDataItem);
    return this;
  }

   /**
   * Custom order item data
   * @return customOrderItemData
  **/
  @ApiModelProperty(value = "Custom order item data")
  public List<List<String>> getCustomOrderItemData() {
    return customOrderItemData;
  }

  public void setCustomOrderItemData(List<List<String>> customOrderItemData) {
    this.customOrderItemData = customOrderItemData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWaveRequest createWaveRequest = (CreateWaveRequest) o;
    return Objects.equals(this.type, createWaveRequest.type) &&
        Objects.equals(this.maxOrders, createWaveRequest.maxOrders) &&
        Objects.equals(this.includeZeroInventory, createWaveRequest.includeZeroInventory) &&
        Objects.equals(this.binRanges, createWaveRequest.binRanges) &&
        Objects.equals(this.orderDateRange, createWaveRequest.orderDateRange) &&
        Objects.equals(this.products, createWaveRequest.products) &&
        Objects.equals(this.shippingOptions, createWaveRequest.shippingOptions) &&
        Objects.equals(this.customOrderItemData, createWaveRequest.customOrderItemData) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, maxOrders, includeZeroInventory, binRanges, orderDateRange, products, shippingOptions, customOrderItemData, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWaveRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maxOrders: ").append(toIndentedString(maxOrders)).append("\n");
    sb.append("    includeZeroInventory: ").append(toIndentedString(includeZeroInventory)).append("\n");
    sb.append("    binRanges: ").append(toIndentedString(binRanges)).append("\n");
    sb.append("    orderDateRange: ").append(toIndentedString(orderDateRange)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    customOrderItemData: ").append(toIndentedString(customOrderItemData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

