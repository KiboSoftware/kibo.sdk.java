/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.java.inventory;

import com.kibocommerce.kibo.sdk.java.inventory.ApiCallback;
import com.kibocommerce.kibo.sdk.java.inventory.ApiClient;
import com.kibocommerce.kibo.sdk.java.inventory.ApiException;
import com.kibocommerce.kibo.sdk.java.inventory.ApiResponse;
import com.kibocommerce.kibo.sdk.java.inventory.Configuration;
import com.kibocommerce.kibo.sdk.java.inventory.Pair;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressRequestBody;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.kibo.sdk.java.inventory.model.CreateWaveRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.CreateWaveResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.InlineResponse404;
import com.kibocommerce.kibo.sdk.java.inventory.model.Wave;
import com.kibocommerce.kibo.sdk.java.inventory.model.WaveCompletion;
import com.kibocommerce.kibo.sdk.java.inventory.model.WaveSuggestionRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.WaveSuggestionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaveControllerApi {
    private ApiClient apiClient;

    public WaveControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaveControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for closePickWave
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param waveCompletion Request to complete a wave (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closePickWaveCall(Integer xVolTenant, Integer waveId, WaveCompletion waveCompletion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = waveCompletion;

        // create path and map variables
        String localVarPath = "/v1/wave/{wave_id}/close/"
            .replaceAll("\\{" + "wave_id" + "\\}", apiClient.escapeString(waveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closePickWaveValidateBeforeCall(Integer xVolTenant, Integer waveId, WaveCompletion waveCompletion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling closePickWave(Async)");
        }
        
        // verify the required parameter 'waveId' is set
        if (waveId == null) {
            throw new ApiException("Missing the required parameter 'waveId' when calling closePickWave(Async)");
        }
        
        // verify the required parameter 'waveCompletion' is set
        if (waveCompletion == null) {
            throw new ApiException("Missing the required parameter 'waveCompletion' when calling closePickWave(Async)");
        }
        

        com.squareup.okhttp.Call call = closePickWaveCall(xVolTenant, waveId, waveCompletion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Close Pick Wave (Complete)
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param waveCompletion Request to complete a wave (required)
     * @return CreateWaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateWaveResponse closePickWave(Integer xVolTenant, Integer waveId, WaveCompletion waveCompletion) throws ApiException {
        ApiResponse<CreateWaveResponse> resp = closePickWaveWithHttpInfo(xVolTenant, waveId, waveCompletion);
        return resp.getData();
    }

    /**
     * 
     * Close Pick Wave (Complete)
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param waveCompletion Request to complete a wave (required)
     * @return ApiResponse&lt;CreateWaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateWaveResponse> closePickWaveWithHttpInfo(Integer xVolTenant, Integer waveId, WaveCompletion waveCompletion) throws ApiException {
        com.squareup.okhttp.Call call = closePickWaveValidateBeforeCall(xVolTenant, waveId, waveCompletion, null, null);
        Type localVarReturnType = new TypeToken<CreateWaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Close Pick Wave (Complete)
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param waveCompletion Request to complete a wave (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closePickWaveAsync(Integer xVolTenant, Integer waveId, WaveCompletion waveCompletion, final ApiCallback<CreateWaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closePickWaveValidateBeforeCall(xVolTenant, waveId, waveCompletion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateWaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPickWave
     * @param xVolTenant Tenant ID (required)
     * @param createWaveRequest Request to create a new pick wave(s) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPickWaveCall(Integer xVolTenant, CreateWaveRequest createWaveRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createWaveRequest;

        // create path and map variables
        String localVarPath = "/v1/wave/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPickWaveValidateBeforeCall(Integer xVolTenant, CreateWaveRequest createWaveRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createPickWave(Async)");
        }
        
        // verify the required parameter 'createWaveRequest' is set
        if (createWaveRequest == null) {
            throw new ApiException("Missing the required parameter 'createWaveRequest' when calling createPickWave(Async)");
        }
        

        com.squareup.okhttp.Call call = createPickWaveCall(xVolTenant, createWaveRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create Pick Wave
     * @param xVolTenant Tenant ID (required)
     * @param createWaveRequest Request to create a new pick wave(s) (required)
     * @return CreateWaveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateWaveResponse createPickWave(Integer xVolTenant, CreateWaveRequest createWaveRequest) throws ApiException {
        ApiResponse<CreateWaveResponse> resp = createPickWaveWithHttpInfo(xVolTenant, createWaveRequest);
        return resp.getData();
    }

    /**
     * 
     * Create Pick Wave
     * @param xVolTenant Tenant ID (required)
     * @param createWaveRequest Request to create a new pick wave(s) (required)
     * @return ApiResponse&lt;CreateWaveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateWaveResponse> createPickWaveWithHttpInfo(Integer xVolTenant, CreateWaveRequest createWaveRequest) throws ApiException {
        com.squareup.okhttp.Call call = createPickWaveValidateBeforeCall(xVolTenant, createWaveRequest, null, null);
        Type localVarReturnType = new TypeToken<CreateWaveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Pick Wave
     * @param xVolTenant Tenant ID (required)
     * @param createWaveRequest Request to create a new pick wave(s) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPickWaveAsync(Integer xVolTenant, CreateWaveRequest createWaveRequest, final ApiCallback<CreateWaveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPickWaveValidateBeforeCall(xVolTenant, createWaveRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateWaveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpenPickWaves
     * @param xVolTenant Tenant ID (required)
     * @param locationId Location Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpenPickWavesCall(Integer xVolTenant, Integer locationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/wave/open/{location_id}/"
            .replaceAll("\\{" + "location_id" + "\\}", apiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpenPickWavesValidateBeforeCall(Integer xVolTenant, Integer locationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getOpenPickWaves(Async)");
        }
        
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getOpenPickWaves(Async)");
        }
        

        com.squareup.okhttp.Call call = getOpenPickWavesCall(xVolTenant, locationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Open Pick Waves
     * @param xVolTenant Tenant ID (required)
     * @param locationId Location Identifier (required)
     * @return List&lt;Wave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Wave> getOpenPickWaves(Integer xVolTenant, Integer locationId) throws ApiException {
        ApiResponse<List<Wave>> resp = getOpenPickWavesWithHttpInfo(xVolTenant, locationId);
        return resp.getData();
    }

    /**
     * 
     * Get Open Pick Waves
     * @param xVolTenant Tenant ID (required)
     * @param locationId Location Identifier (required)
     * @return ApiResponse&lt;List&lt;Wave&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Wave>> getOpenPickWavesWithHttpInfo(Integer xVolTenant, Integer locationId) throws ApiException {
        com.squareup.okhttp.Call call = getOpenPickWavesValidateBeforeCall(xVolTenant, locationId, null, null);
        Type localVarReturnType = new TypeToken<List<Wave>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Open Pick Waves
     * @param xVolTenant Tenant ID (required)
     * @param locationId Location Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpenPickWavesAsync(Integer xVolTenant, Integer locationId, final ApiCallback<List<Wave>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOpenPickWavesValidateBeforeCall(xVolTenant, locationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Wave>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWaveDetails
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWaveDetailsCall(Integer xVolTenant, Integer waveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/wave/{wave_id}/"
            .replaceAll("\\{" + "wave_id" + "\\}", apiClient.escapeString(waveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWaveDetailsValidateBeforeCall(Integer xVolTenant, Integer waveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getWaveDetails(Async)");
        }
        
        // verify the required parameter 'waveId' is set
        if (waveId == null) {
            throw new ApiException("Missing the required parameter 'waveId' when calling getWaveDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getWaveDetailsCall(xVolTenant, waveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get Wave Details
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @return Wave
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wave getWaveDetails(Integer xVolTenant, Integer waveId) throws ApiException {
        ApiResponse<Wave> resp = getWaveDetailsWithHttpInfo(xVolTenant, waveId);
        return resp.getData();
    }

    /**
     * 
     * Get Wave Details
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @return ApiResponse&lt;Wave&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wave> getWaveDetailsWithHttpInfo(Integer xVolTenant, Integer waveId) throws ApiException {
        com.squareup.okhttp.Call call = getWaveDetailsValidateBeforeCall(xVolTenant, waveId, null, null);
        Type localVarReturnType = new TypeToken<Wave>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Wave Details
     * @param xVolTenant Tenant ID (required)
     * @param waveId Wave Identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWaveDetailsAsync(Integer xVolTenant, Integer waveId, final ApiCallback<Wave> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWaveDetailsValidateBeforeCall(xVolTenant, waveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wave>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryWaveSuggestion
     * @param waveSuggestionRequest Request to query for a pick wave suggestion (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryWaveSuggestionCall(WaveSuggestionRequest waveSuggestionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = waveSuggestionRequest;

        // create path and map variables
        String localVarPath = "/v1/wave/suggestion/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryWaveSuggestionValidateBeforeCall(WaveSuggestionRequest waveSuggestionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'waveSuggestionRequest' is set
        if (waveSuggestionRequest == null) {
            throw new ApiException("Missing the required parameter 'waveSuggestionRequest' when calling queryWaveSuggestion(Async)");
        }
        

        com.squareup.okhttp.Call call = queryWaveSuggestionCall(waveSuggestionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Query Wave Suggestion (as a post)
     * @param waveSuggestionRequest Request to query for a pick wave suggestion (required)
     * @return WaveSuggestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WaveSuggestionResponse queryWaveSuggestion(WaveSuggestionRequest waveSuggestionRequest) throws ApiException {
        ApiResponse<WaveSuggestionResponse> resp = queryWaveSuggestionWithHttpInfo(waveSuggestionRequest);
        return resp.getData();
    }

    /**
     * 
     * Query Wave Suggestion (as a post)
     * @param waveSuggestionRequest Request to query for a pick wave suggestion (required)
     * @return ApiResponse&lt;WaveSuggestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WaveSuggestionResponse> queryWaveSuggestionWithHttpInfo(WaveSuggestionRequest waveSuggestionRequest) throws ApiException {
        com.squareup.okhttp.Call call = queryWaveSuggestionValidateBeforeCall(waveSuggestionRequest, null, null);
        Type localVarReturnType = new TypeToken<WaveSuggestionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query Wave Suggestion (as a post)
     * @param waveSuggestionRequest Request to query for a pick wave suggestion (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryWaveSuggestionAsync(WaveSuggestionRequest waveSuggestionRequest, final ApiCallback<WaveSuggestionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryWaveSuggestionValidateBeforeCall(waveSuggestionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WaveSuggestionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
