/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.phps.inventory;

import com.kibocommerce.kibo.sdk.java.inventory.ApiCallback;
import com.kibocommerce.kibo.sdk.java.inventory.ApiClient;
import com.kibocommerce.kibo.sdk.java.inventory.ApiException;
import com.kibocommerce.kibo.sdk.java.inventory.ApiResponse;
import com.kibocommerce.kibo.sdk.java.inventory.Configuration;
import com.kibocommerce.kibo.sdk.java.inventory.Pair;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressRequestBody;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.kibo.sdk.java.inventory.model.CreateExportSettingsFTPRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.CreateExportSettingsRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.CreateExportSettingsS3Request;
import com.kibocommerce.kibo.sdk.java.inventory.model.ExportInventoryRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.ExportInventoryResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.ExportSettings;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsFTPRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsFTPResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsS3Request;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateExportSettingsS3Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportInventoryControllerApi {
    private ApiClient apiClient;

    public ExportInventoryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportInventoryControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsCall(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createExportSettingsRequest;

        // create path and map variables
        String localVarPath = "/v1/export/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExportSettingsValidateBeforeCall(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettings(Async)");
        }
        
        // verify the required parameter 'createExportSettingsRequest' is set
        if (createExportSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsRequest' when calling createExportSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = createExportSettingsCall(xVolTenant, createExportSettingsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String createExportSettings(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest) throws ApiException {
        ApiResponse<String> resp = createExportSettingsWithHttpInfo(xVolTenant, createExportSettingsRequest);
        return resp.getData();
    }

    /**
     * 
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> createExportSettingsWithHttpInfo(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest) throws ApiException {
        com.squareup.okhttp.Call call = createExportSettingsValidateBeforeCall(xVolTenant, createExportSettingsRequest, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsRequest Request to create a new Export Settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsAsync(Integer xVolTenant, CreateExportSettingsRequest createExportSettingsRequest, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExportSettingsValidateBeforeCall(xVolTenant, createExportSettingsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsFTPCall(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createExportSettingsFTPRequest;

        // create path and map variables
        String localVarPath = "/v1/export/ftp/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExportSettingsFTPValidateBeforeCall(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'createExportSettingsFTPRequest' is set
        if (createExportSettingsFTPRequest == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsFTPRequest' when calling createExportSettingsFTP(Async)");
        }
        

        com.squareup.okhttp.Call call = createExportSettingsFTPCall(xVolTenant, createExportSettingsFTPRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String createExportSettingsFTP(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest) throws ApiException {
        ApiResponse<String> resp = createExportSettingsFTPWithHttpInfo(xVolTenant, createExportSettingsFTPRequest);
        return resp.getData();
    }

    /**
     * 
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> createExportSettingsFTPWithHttpInfo(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest) throws ApiException {
        com.squareup.okhttp.Call call = createExportSettingsFTPValidateBeforeCall(xVolTenant, createExportSettingsFTPRequest, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsFTPRequest Request to create a new Export Settings FTP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsFTPAsync(Integer xVolTenant, CreateExportSettingsFTPRequest createExportSettingsFTPRequest, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExportSettingsFTPValidateBeforeCall(xVolTenant, createExportSettingsFTPRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsS3Call(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createExportSettingsS3Request;

        // create path and map variables
        String localVarPath = "/v1/export/s3/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExportSettingsS3ValidateBeforeCall(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'createExportSettingsS3Request' is set
        if (createExportSettingsS3Request == null) {
            throw new ApiException("Missing the required parameter 'createExportSettingsS3Request' when calling createExportSettingsS3(Async)");
        }
        

        com.squareup.okhttp.Call call = createExportSettingsS3Call(xVolTenant, createExportSettingsS3Request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer createExportSettingsS3(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request) throws ApiException {
        ApiResponse<Integer> resp = createExportSettingsS3WithHttpInfo(xVolTenant, createExportSettingsS3Request);
        return resp.getData();
    }

    /**
     * 
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> createExportSettingsS3WithHttpInfo(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request) throws ApiException {
        com.squareup.okhttp.Call call = createExportSettingsS3ValidateBeforeCall(xVolTenant, createExportSettingsS3Request, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param createExportSettingsS3Request Request to create a new Export Settings S3 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExportSettingsS3Async(Integer xVolTenant, CreateExportSettingsS3Request createExportSettingsS3Request, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExportSettingsS3ValidateBeforeCall(xVolTenant, createExportSettingsS3Request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsCall(Integer xVolTenant, String exportSettingsName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/export/{exportSettingsName}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exportSettingsName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExportSettingsValidateBeforeCall(Integer xVolTenant, String exportSettingsName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettings(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExportSettingsCall(xVolTenant, exportSettingsName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer deleteExportSettings(Integer xVolTenant, String exportSettingsName) throws ApiException {
        ApiResponse<Integer> resp = deleteExportSettingsWithHttpInfo(xVolTenant, exportSettingsName);
        return resp.getData();
    }

    /**
     * 
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> deleteExportSettingsWithHttpInfo(Integer xVolTenant, String exportSettingsName) throws ApiException {
        com.squareup.okhttp.Call call = deleteExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsAsync(Integer xVolTenant, String exportSettingsName, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsFTPCall(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}"
            .replaceAll("\\{" + "exportSettingsFTPName" + "\\}", apiClient.escapeString(exportSettingsFTPName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exportSettingsName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExportSettingsFTPValidateBeforeCall(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'exportSettingsFTPName' is set
        if (exportSettingsFTPName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsFTPName' when calling deleteExportSettingsFTP(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExportSettingsFTPCall(xVolTenant, exportSettingsName, exportSettingsFTPName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer deleteExportSettingsFTP(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName) throws ApiException {
        ApiResponse<Integer> resp = deleteExportSettingsFTPWithHttpInfo(xVolTenant, exportSettingsName, exportSettingsFTPName);
        return resp.getData();
    }

    /**
     * 
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> deleteExportSettingsFTPWithHttpInfo(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName) throws ApiException {
        com.squareup.okhttp.Call call = deleteExportSettingsFTPValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsFTPName, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsFTPName Export Settings FTP Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsFTPAsync(Integer xVolTenant, String exportSettingsName, String exportSettingsFTPName, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExportSettingsFTPValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsFTPName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsS3Call(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}"
            .replaceAll("\\{" + "exportSettingsS3Name" + "\\}", apiClient.escapeString(exportSettingsS3Name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exportSettingsName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExportSettingsS3ValidateBeforeCall(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'exportSettingsS3Name' is set
        if (exportSettingsS3Name == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsS3Name' when calling deleteExportSettingsS3(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExportSettingsS3Call(xVolTenant, exportSettingsName, exportSettingsS3Name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean deleteExportSettingsS3(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name) throws ApiException {
        ApiResponse<Boolean> resp = deleteExportSettingsS3WithHttpInfo(xVolTenant, exportSettingsName, exportSettingsS3Name);
        return resp.getData();
    }

    /**
     * 
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> deleteExportSettingsS3WithHttpInfo(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name) throws ApiException {
        com.squareup.okhttp.Call call = deleteExportSettingsS3ValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsS3Name, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param exportSettingsS3Name Export Settings S3 Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExportSettingsS3Async(Integer xVolTenant, String exportSettingsName, String exportSettingsS3Name, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExportSettingsS3ValidateBeforeCall(xVolTenant, exportSettingsName, exportSettingsS3Name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExportSettingsCall(Integer xVolTenant, String exportSettingsName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exportSettingsName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("exportSettingsName", exportSettingsName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExportSettingsValidateBeforeCall(Integer xVolTenant, String exportSettingsName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getExportSettings(Async)");
        }
        
        // verify the required parameter 'exportSettingsName' is set
        if (exportSettingsName == null) {
            throw new ApiException("Missing the required parameter 'exportSettingsName' when calling getExportSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = getExportSettingsCall(xVolTenant, exportSettingsName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return List&lt;ExportSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExportSettings> getExportSettings(Integer xVolTenant, String exportSettingsName) throws ApiException {
        ApiResponse<List<ExportSettings>> resp = getExportSettingsWithHttpInfo(xVolTenant, exportSettingsName);
        return resp.getData();
    }

    /**
     * 
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @return ApiResponse&lt;List&lt;ExportSettings&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExportSettings>> getExportSettingsWithHttpInfo(Integer xVolTenant, String exportSettingsName) throws ApiException {
        com.squareup.okhttp.Call call = getExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, null, null);
        Type localVarReturnType = new TypeToken<List<ExportSettings>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an export settings
     * @param xVolTenant Tenant ID (required)
     * @param exportSettingsName Export Settings Name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExportSettingsAsync(Integer xVolTenant, String exportSettingsName, final ApiCallback<List<ExportSettings>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExportSettingsValidateBeforeCall(xVolTenant, exportSettingsName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExportSettings>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runExport
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runExportCall(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = exportInventoryRequest;

        // create path and map variables
        String localVarPath = "/v1/export/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runExportValidateBeforeCall(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling runExport(Async)");
        }
        
        // verify the required parameter 'exportInventoryRequest' is set
        if (exportInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'exportInventoryRequest' when calling runExport(Async)");
        }
        

        com.squareup.okhttp.Call call = runExportCall(xVolTenant, exportInventoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @return ExportInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExportInventoryResponse runExport(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest) throws ApiException {
        ApiResponse<ExportInventoryResponse> resp = runExportWithHttpInfo(xVolTenant, exportInventoryRequest);
        return resp.getData();
    }

    /**
     * 
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @return ApiResponse&lt;ExportInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExportInventoryResponse> runExportWithHttpInfo(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = runExportValidateBeforeCall(xVolTenant, exportInventoryRequest, null, null);
        Type localVarReturnType = new TypeToken<ExportInventoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Run Export Settings Job
     * @param xVolTenant Tenant ID (required)
     * @param exportInventoryRequest Request to run an inventory export (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runExportAsync(Integer xVolTenant, ExportInventoryRequest exportInventoryRequest, final ApiCallback<ExportInventoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runExportValidateBeforeCall(xVolTenant, exportInventoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExportInventoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExportSettings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsCall(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateExportSettingsRequest;

        // create path and map variables
        String localVarPath = "/v1/export/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExportSettingsValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettings(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsRequest' is set
        if (updateExportSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsRequest' when calling updateExportSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExportSettingsCall(xVolTenant, updateExportSettingsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @return UpdateExportSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateExportSettingsResponse updateExportSettings(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest) throws ApiException {
        ApiResponse<UpdateExportSettingsResponse> resp = updateExportSettingsWithHttpInfo(xVolTenant, updateExportSettingsRequest);
        return resp.getData();
    }

    /**
     * 
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @return ApiResponse&lt;UpdateExportSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateExportSettingsResponse> updateExportSettingsWithHttpInfo(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateExportSettingsValidateBeforeCall(xVolTenant, updateExportSettingsRequest, null, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Export Settings
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsRequest Request to update an existing Export Settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsAsync(Integer xVolTenant, UpdateExportSettingsRequest updateExportSettingsRequest, final ApiCallback<UpdateExportSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExportSettingsValidateBeforeCall(xVolTenant, updateExportSettingsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExportSettingsFTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsFTPCall(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateExportSettingsFTPRequest;

        // create path and map variables
        String localVarPath = "/v1/export/ftp/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExportSettingsFTPValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettingsFTP(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsFTPRequest' is set
        if (updateExportSettingsFTPRequest == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsFTPRequest' when calling updateExportSettingsFTP(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExportSettingsFTPCall(xVolTenant, updateExportSettingsFTPRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @return UpdateExportSettingsFTPResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateExportSettingsFTPResponse updateExportSettingsFTP(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest) throws ApiException {
        ApiResponse<UpdateExportSettingsFTPResponse> resp = updateExportSettingsFTPWithHttpInfo(xVolTenant, updateExportSettingsFTPRequest);
        return resp.getData();
    }

    /**
     * 
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @return ApiResponse&lt;UpdateExportSettingsFTPResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateExportSettingsFTPResponse> updateExportSettingsFTPWithHttpInfo(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateExportSettingsFTPValidateBeforeCall(xVolTenant, updateExportSettingsFTPRequest, null, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsFTPResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Export Settings FTP
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsFTPRequest Request to update an existing Export Settings FTP (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsFTPAsync(Integer xVolTenant, UpdateExportSettingsFTPRequest updateExportSettingsFTPRequest, final ApiCallback<UpdateExportSettingsFTPResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExportSettingsFTPValidateBeforeCall(xVolTenant, updateExportSettingsFTPRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsFTPResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExportSettingsS3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsS3Call(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateExportSettingsS3Request;

        // create path and map variables
        String localVarPath = "/v1/export/s3/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExportSettingsS3ValidateBeforeCall(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateExportSettingsS3(Async)");
        }
        
        // verify the required parameter 'updateExportSettingsS3Request' is set
        if (updateExportSettingsS3Request == null) {
            throw new ApiException("Missing the required parameter 'updateExportSettingsS3Request' when calling updateExportSettingsS3(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExportSettingsS3Call(xVolTenant, updateExportSettingsS3Request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @return UpdateExportSettingsS3Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateExportSettingsS3Response updateExportSettingsS3(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request) throws ApiException {
        ApiResponse<UpdateExportSettingsS3Response> resp = updateExportSettingsS3WithHttpInfo(xVolTenant, updateExportSettingsS3Request);
        return resp.getData();
    }

    /**
     * 
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @return ApiResponse&lt;UpdateExportSettingsS3Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateExportSettingsS3Response> updateExportSettingsS3WithHttpInfo(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request) throws ApiException {
        com.squareup.okhttp.Call call = updateExportSettingsS3ValidateBeforeCall(xVolTenant, updateExportSettingsS3Request, null, null);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsS3Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Export Settings S3
     * @param xVolTenant Tenant ID (required)
     * @param updateExportSettingsS3Request Request to update an existing Export Settings S3 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExportSettingsS3Async(Integer xVolTenant, UpdateExportSettingsS3Request updateExportSettingsS3Request, final ApiCallback<UpdateExportSettingsS3Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExportSettingsS3ValidateBeforeCall(xVolTenant, updateExportSettingsS3Request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateExportSettingsS3Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
