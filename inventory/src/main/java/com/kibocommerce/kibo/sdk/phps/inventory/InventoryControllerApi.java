/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.phps.inventory;

import com.kibocommerce.kibo.sdk.java.inventory.ApiCallback;
import com.kibocommerce.kibo.sdk.java.inventory.ApiClient;
import com.kibocommerce.kibo.sdk.java.inventory.ApiException;
import com.kibocommerce.kibo.sdk.java.inventory.ApiResponse;
import com.kibocommerce.kibo.sdk.java.inventory.Configuration;
import com.kibocommerce.kibo.sdk.java.inventory.Pair;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressRequestBody;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.kibo.sdk.java.inventory.model.AggregateRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.AggregateResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.InventoryRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.InventoryResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.ItemQuantity;
import com.kibocommerce.kibo.sdk.java.inventory.model.RequestLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryControllerApi {
    private ApiClient apiClient;

    public InventoryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aggregate
     * @param xVolTenant Tenant ID (required)
     * @param aggregateRequest Request to aggregate inventory (required)
     * @param xVolSite Site ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aggregateCall(Integer xVolTenant, AggregateRequest aggregateRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregateRequest;

        // create path and map variables
        String localVarPath = "/v5/inventory/aggregate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aggregateValidateBeforeCall(Integer xVolTenant, AggregateRequest aggregateRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling aggregate(Async)");
        }
        
        // verify the required parameter 'aggregateRequest' is set
        if (aggregateRequest == null) {
            throw new ApiException("Missing the required parameter 'aggregateRequest' when calling aggregate(Async)");
        }
        

        com.squareup.okhttp.Call call = aggregateCall(xVolTenant, aggregateRequest, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Aggregates Inventory
     * @param xVolTenant Tenant ID (required)
     * @param aggregateRequest Request to aggregate inventory (required)
     * @param xVolSite Site ID (optional)
     * @return List&lt;AggregateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregateResponse> aggregate(Integer xVolTenant, AggregateRequest aggregateRequest, Integer xVolSite) throws ApiException {
        ApiResponse<List<AggregateResponse>> resp = aggregateWithHttpInfo(xVolTenant, aggregateRequest, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * Aggregates Inventory
     * @param xVolTenant Tenant ID (required)
     * @param aggregateRequest Request to aggregate inventory (required)
     * @param xVolSite Site ID (optional)
     * @return ApiResponse&lt;List&lt;AggregateResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregateResponse>> aggregateWithHttpInfo(Integer xVolTenant, AggregateRequest aggregateRequest, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = aggregateValidateBeforeCall(xVolTenant, aggregateRequest, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<List<AggregateResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Aggregates Inventory
     * @param xVolTenant Tenant ID (required)
     * @param aggregateRequest Request to aggregate inventory (required)
     * @param xVolSite Site ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aggregateAsync(Integer xVolTenant, AggregateRequest aggregateRequest, Integer xVolSite, final ApiCallback<List<AggregateResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aggregateValidateBeforeCall(xVolTenant, aggregateRequest, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregateResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInventory
     * @param xVolTenant Tenant ID (required)
     * @param type Type of request enum (required)
     * @param xVolSite Site ID (optional)
     * @param items List of Items to search on (optional)
     * @param requestLocation Location for Request (optional, default to null)
     * @param locationWhitelist List of location codes that are allowed to be included in results (optional)
     * @param locationBlacklist List of location codes that are NOT allowed to be included in results (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param ignoreSafetyStock Whether to ignore the safety stock buffer put in place (optional)
     * @param includeNegativeInventory Whether to allow items with negative inventory in the results (optional)
     * @param shippingLocation Whether to limit results to locations that are shipping enabled (optional)
     * @param transferEnabled Filter results by locations that have transfer enabled (true) or don&#39;t (false) (optional)
     * @param pickup Filter results by locations that are pickup-enabled (true) or not (false) (optional)
     * @param includeInAggregate Filter results by locations that have aggregate export enabled (true) or don&#39;t (false) (optional)
     * @param includeAttributes Flag to include attributes or not (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryCall(Integer xVolTenant, String type, Integer xVolSite, List<ItemQuantity> items, RequestLocation requestLocation, List<String> locationWhitelist, List<String> locationBlacklist, Integer limit, Boolean ignoreSafetyStock, Boolean includeNegativeInventory, Boolean shippingLocation, Boolean transferEnabled, Boolean pickup, Boolean includeInAggregate, Boolean includeAttributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v5/inventory/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        if (items != null) {
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "items", items));
        }

        if (requestLocation != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("requestLocation", requestLocation));
        }

        if (locationWhitelist != null) {
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "locationWhitelist", locationWhitelist));
        }

        if (locationBlacklist != null) {
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "locationBlacklist", locationBlacklist));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (ignoreSafetyStock != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ignoreSafetyStock", ignoreSafetyStock));
        }

        if (includeNegativeInventory != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("includeNegativeInventory", includeNegativeInventory));
        }

        if (shippingLocation != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shippingLocation", shippingLocation));
        }

        if (transferEnabled != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("transferEnabled", transferEnabled));
        }

        if (pickup != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pickup", pickup));
        }

        if (includeInAggregate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("includeInAggregate", includeInAggregate));
        }

        if (includeAttributes != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("includeAttributes", includeAttributes));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryValidateBeforeCall(Integer xVolTenant, String type, Integer xVolSite, List<ItemQuantity> items, RequestLocation requestLocation, List<String> locationWhitelist, List<String> locationBlacklist, Integer limit, Boolean ignoreSafetyStock, Boolean includeNegativeInventory, Boolean shippingLocation, Boolean transferEnabled, Boolean pickup, Boolean includeInAggregate, Boolean includeAttributes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getInventory(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = getInventoryCall(xVolTenant, type, xVolSite, items, requestLocation, locationWhitelist, locationBlacklist, limit, ignoreSafetyStock, includeNegativeInventory, shippingLocation, transferEnabled, pickup, includeInAggregate, includeAttributes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get inventory from specified location
     * @param xVolTenant Tenant ID (required)
     * @param type Type of request enum (required)
     * @param xVolSite Site ID (optional)
     * @param items List of Items to search on (optional)
     * @param requestLocation Location for Request (optional, default to null)
     * @param locationWhitelist List of location codes that are allowed to be included in results (optional)
     * @param locationBlacklist List of location codes that are NOT allowed to be included in results (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param ignoreSafetyStock Whether to ignore the safety stock buffer put in place (optional)
     * @param includeNegativeInventory Whether to allow items with negative inventory in the results (optional)
     * @param shippingLocation Whether to limit results to locations that are shipping enabled (optional)
     * @param transferEnabled Filter results by locations that have transfer enabled (true) or don&#39;t (false) (optional)
     * @param pickup Filter results by locations that are pickup-enabled (true) or not (false) (optional)
     * @param includeInAggregate Filter results by locations that have aggregate export enabled (true) or don&#39;t (false) (optional)
     * @param includeAttributes Flag to include attributes or not (optional)
     * @return List&lt;InventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventoryResponse> getInventory(Integer xVolTenant, String type, Integer xVolSite, List<ItemQuantity> items, RequestLocation requestLocation, List<String> locationWhitelist, List<String> locationBlacklist, Integer limit, Boolean ignoreSafetyStock, Boolean includeNegativeInventory, Boolean shippingLocation, Boolean transferEnabled, Boolean pickup, Boolean includeInAggregate, Boolean includeAttributes) throws ApiException {
        ApiResponse<List<InventoryResponse>> resp = getInventoryWithHttpInfo(xVolTenant, type, xVolSite, items, requestLocation, locationWhitelist, locationBlacklist, limit, ignoreSafetyStock, includeNegativeInventory, shippingLocation, transferEnabled, pickup, includeInAggregate, includeAttributes);
        return resp.getData();
    }

    /**
     * 
     * Get inventory from specified location
     * @param xVolTenant Tenant ID (required)
     * @param type Type of request enum (required)
     * @param xVolSite Site ID (optional)
     * @param items List of Items to search on (optional)
     * @param requestLocation Location for Request (optional, default to null)
     * @param locationWhitelist List of location codes that are allowed to be included in results (optional)
     * @param locationBlacklist List of location codes that are NOT allowed to be included in results (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param ignoreSafetyStock Whether to ignore the safety stock buffer put in place (optional)
     * @param includeNegativeInventory Whether to allow items with negative inventory in the results (optional)
     * @param shippingLocation Whether to limit results to locations that are shipping enabled (optional)
     * @param transferEnabled Filter results by locations that have transfer enabled (true) or don&#39;t (false) (optional)
     * @param pickup Filter results by locations that are pickup-enabled (true) or not (false) (optional)
     * @param includeInAggregate Filter results by locations that have aggregate export enabled (true) or don&#39;t (false) (optional)
     * @param includeAttributes Flag to include attributes or not (optional)
     * @return ApiResponse&lt;List&lt;InventoryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventoryResponse>> getInventoryWithHttpInfo(Integer xVolTenant, String type, Integer xVolSite, List<ItemQuantity> items, RequestLocation requestLocation, List<String> locationWhitelist, List<String> locationBlacklist, Integer limit, Boolean ignoreSafetyStock, Boolean includeNegativeInventory, Boolean shippingLocation, Boolean transferEnabled, Boolean pickup, Boolean includeInAggregate, Boolean includeAttributes) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryValidateBeforeCall(xVolTenant, type, xVolSite, items, requestLocation, locationWhitelist, locationBlacklist, limit, ignoreSafetyStock, includeNegativeInventory, shippingLocation, transferEnabled, pickup, includeInAggregate, includeAttributes, null, null);
        Type localVarReturnType = new TypeToken<List<InventoryResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get inventory from specified location
     * @param xVolTenant Tenant ID (required)
     * @param type Type of request enum (required)
     * @param xVolSite Site ID (optional)
     * @param items List of Items to search on (optional)
     * @param requestLocation Location for Request (optional, default to null)
     * @param locationWhitelist List of location codes that are allowed to be included in results (optional)
     * @param locationBlacklist List of location codes that are NOT allowed to be included in results (optional)
     * @param limit The maximum number of results to return, defaults to 100 for most (optional)
     * @param ignoreSafetyStock Whether to ignore the safety stock buffer put in place (optional)
     * @param includeNegativeInventory Whether to allow items with negative inventory in the results (optional)
     * @param shippingLocation Whether to limit results to locations that are shipping enabled (optional)
     * @param transferEnabled Filter results by locations that have transfer enabled (true) or don&#39;t (false) (optional)
     * @param pickup Filter results by locations that are pickup-enabled (true) or not (false) (optional)
     * @param includeInAggregate Filter results by locations that have aggregate export enabled (true) or don&#39;t (false) (optional)
     * @param includeAttributes Flag to include attributes or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAsync(Integer xVolTenant, String type, Integer xVolSite, List<ItemQuantity> items, RequestLocation requestLocation, List<String> locationWhitelist, List<String> locationBlacklist, Integer limit, Boolean ignoreSafetyStock, Boolean includeNegativeInventory, Boolean shippingLocation, Boolean transferEnabled, Boolean pickup, Boolean includeInAggregate, Boolean includeAttributes, final ApiCallback<List<InventoryResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryValidateBeforeCall(xVolTenant, type, xVolSite, items, requestLocation, locationWhitelist, locationBlacklist, limit, ignoreSafetyStock, includeNegativeInventory, shippingLocation, transferEnabled, pickup, includeInAggregate, includeAttributes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventoryResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postQueryInventory
     * @param xVolTenant Tenant ID (required)
     * @param inventoryRequest Request to get inventory (required)
     * @param xVolSite Site ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postQueryInventoryCall(Integer xVolTenant, InventoryRequest inventoryRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inventoryRequest;

        // create path and map variables
        String localVarPath = "/v5/inventory/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        if (xVolSite != null) {
            localVarHeaderParams.put("x-vol-site", apiClient.parameterToString(xVolSite));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postQueryInventoryValidateBeforeCall(Integer xVolTenant, InventoryRequest inventoryRequest, Integer xVolSite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling postQueryInventory(Async)");
        }
        
        // verify the required parameter 'inventoryRequest' is set
        if (inventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'inventoryRequest' when calling postQueryInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = postQueryInventoryCall(xVolTenant, inventoryRequest, xVolSite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Queries for specified inventory at given location
     * @param xVolTenant Tenant ID (required)
     * @param inventoryRequest Request to get inventory (required)
     * @param xVolSite Site ID (optional)
     * @return List&lt;InventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventoryResponse> postQueryInventory(Integer xVolTenant, InventoryRequest inventoryRequest, Integer xVolSite) throws ApiException {
        ApiResponse<List<InventoryResponse>> resp = postQueryInventoryWithHttpInfo(xVolTenant, inventoryRequest, xVolSite);
        return resp.getData();
    }

    /**
     * 
     * Queries for specified inventory at given location
     * @param xVolTenant Tenant ID (required)
     * @param inventoryRequest Request to get inventory (required)
     * @param xVolSite Site ID (optional)
     * @return ApiResponse&lt;List&lt;InventoryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventoryResponse>> postQueryInventoryWithHttpInfo(Integer xVolTenant, InventoryRequest inventoryRequest, Integer xVolSite) throws ApiException {
        com.squareup.okhttp.Call call = postQueryInventoryValidateBeforeCall(xVolTenant, inventoryRequest, xVolSite, null, null);
        Type localVarReturnType = new TypeToken<List<InventoryResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries for specified inventory at given location
     * @param xVolTenant Tenant ID (required)
     * @param inventoryRequest Request to get inventory (required)
     * @param xVolSite Site ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postQueryInventoryAsync(Integer xVolTenant, InventoryRequest inventoryRequest, Integer xVolSite, final ApiCallback<List<InventoryResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postQueryInventoryValidateBeforeCall(xVolTenant, inventoryRequest, xVolSite, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventoryResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
