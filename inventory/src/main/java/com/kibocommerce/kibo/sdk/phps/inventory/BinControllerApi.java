/*
 * Inventory
 * Swagger JSON for inventory apis
 *
 * OpenAPI spec version: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kibocommerce.kibo.sdk.phps.inventory;

import com.kibocommerce.kibo.sdk.java.inventory.ApiCallback;
import com.kibocommerce.kibo.sdk.java.inventory.ApiClient;
import com.kibocommerce.kibo.sdk.java.inventory.ApiException;
import com.kibocommerce.kibo.sdk.java.inventory.ApiResponse;
import com.kibocommerce.kibo.sdk.java.inventory.Configuration;
import com.kibocommerce.kibo.sdk.java.inventory.Pair;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressRequestBody;
import com.kibocommerce.kibo.sdk.java.inventory.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kibocommerce.kibo.sdk.java.inventory.model.BaseResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.Bin;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinResponseModel;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinSearchRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinSearchResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinStatusModel;
import com.kibocommerce.kibo.sdk.java.inventory.model.BinTypeModel;
import com.kibocommerce.kibo.sdk.java.inventory.model.CreateBinRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.LoadBinInventoryRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.LoadBinInventoryResponse;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateBinRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateBinsRequest;
import com.kibocommerce.kibo.sdk.java.inventory.model.UpdateBinsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BinControllerApi {
    private ApiClient apiClient;

    public BinControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BinControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBin
     * @param xVolTenant Tenant ID (required)
     * @param createBinRequest Request to create a new bin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBinCall(Integer xVolTenant, CreateBinRequest createBinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createBinRequest;

        // create path and map variables
        String localVarPath = "/v1/bin/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBinValidateBeforeCall(Integer xVolTenant, CreateBinRequest createBinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling createBin(Async)");
        }
        
        // verify the required parameter 'createBinRequest' is set
        if (createBinRequest == null) {
            throw new ApiException("Missing the required parameter 'createBinRequest' when calling createBin(Async)");
        }
        

        com.squareup.okhttp.Call call = createBinCall(xVolTenant, createBinRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a bin
     * @param xVolTenant Tenant ID (required)
     * @param createBinRequest Request to create a new bin (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer createBin(Integer xVolTenant, CreateBinRequest createBinRequest) throws ApiException {
        ApiResponse<Integer> resp = createBinWithHttpInfo(xVolTenant, createBinRequest);
        return resp.getData();
    }

    /**
     * 
     * Create a bin
     * @param xVolTenant Tenant ID (required)
     * @param createBinRequest Request to create a new bin (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> createBinWithHttpInfo(Integer xVolTenant, CreateBinRequest createBinRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBinValidateBeforeCall(xVolTenant, createBinRequest, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a bin
     * @param xVolTenant Tenant ID (required)
     * @param createBinRequest Request to create a new bin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBinAsync(Integer xVolTenant, CreateBinRequest createBinRequest, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBinValidateBeforeCall(xVolTenant, createBinRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param binName Bin Name (required)
     * @param locationCode Location Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBinCall(Integer xVolTenant, Long binId, Integer binName, String locationCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/bin/{bin_id}"
            .replaceAll("\\{" + "bin_id" + "\\}", apiClient.escapeString(binId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (binName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("binName", binName));
        }

        if (locationCode != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationCode", locationCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBinValidateBeforeCall(Integer xVolTenant, Long binId, Integer binName, String locationCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling deleteBin(Async)");
        }
        
        // verify the required parameter 'binId' is set
        if (binId == null) {
            throw new ApiException("Missing the required parameter 'binId' when calling deleteBin(Async)");
        }
        
        // verify the required parameter 'binName' is set
        if (binName == null) {
            throw new ApiException("Missing the required parameter 'binName' when calling deleteBin(Async)");
        }
        
        // verify the required parameter 'locationCode' is set
        if (locationCode == null) {
            throw new ApiException("Missing the required parameter 'locationCode' when calling deleteBin(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBinCall(xVolTenant, binId, binName, locationCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param binName Bin Name (required)
     * @param locationCode Location Code (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteBin(Integer xVolTenant, Long binId, Integer binName, String locationCode) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteBinWithHttpInfo(xVolTenant, binId, binName, locationCode);
        return resp.getData();
    }

    /**
     * 
     * Delete a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param binName Bin Name (required)
     * @param locationCode Location Code (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteBinWithHttpInfo(Integer xVolTenant, Long binId, Integer binName, String locationCode) throws ApiException {
        com.squareup.okhttp.Call call = deleteBinValidateBeforeCall(xVolTenant, binId, binName, locationCode, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param binName Bin Name (required)
     * @param locationCode Location Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBinAsync(Integer xVolTenant, Long binId, Integer binName, String locationCode, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBinValidateBeforeCall(xVolTenant, binId, binName, locationCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBinCall(Integer xVolTenant, Long binId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/bin/{bin_id}"
            .replaceAll("\\{" + "bin_id" + "\\}", apiClient.escapeString(binId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBinValidateBeforeCall(Integer xVolTenant, Long binId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getBin(Async)");
        }
        
        // verify the required parameter 'binId' is set
        if (binId == null) {
            throw new ApiException("Missing the required parameter 'binId' when calling getBin(Async)");
        }
        

        com.squareup.okhttp.Call call = getBinCall(xVolTenant, binId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @return Bin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bin getBin(Integer xVolTenant, Long binId) throws ApiException {
        ApiResponse<Bin> resp = getBinWithHttpInfo(xVolTenant, binId);
        return resp.getData();
    }

    /**
     * 
     * Get a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @return ApiResponse&lt;Bin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bin> getBinWithHttpInfo(Integer xVolTenant, Long binId) throws ApiException {
        com.squareup.okhttp.Call call = getBinValidateBeforeCall(xVolTenant, binId, null, null);
        Type localVarReturnType = new TypeToken<Bin>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to get (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBinAsync(Integer xVolTenant, Long binId, final ApiCallback<Bin> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBinValidateBeforeCall(xVolTenant, binId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bin>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBinStatuses
     * @param xVolTenant Tenant ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBinStatusesCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/bin/binStatuses/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBinStatusesValidateBeforeCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getBinStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = getBinStatusesCall(xVolTenant, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list of bin statuses
     * @param xVolTenant Tenant ID (required)
     * @return List&lt;BinStatusModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BinStatusModel> getBinStatuses(Integer xVolTenant) throws ApiException {
        ApiResponse<List<BinStatusModel>> resp = getBinStatusesWithHttpInfo(xVolTenant);
        return resp.getData();
    }

    /**
     * 
     * Get list of bin statuses
     * @param xVolTenant Tenant ID (required)
     * @return ApiResponse&lt;List&lt;BinStatusModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BinStatusModel>> getBinStatusesWithHttpInfo(Integer xVolTenant) throws ApiException {
        com.squareup.okhttp.Call call = getBinStatusesValidateBeforeCall(xVolTenant, null, null);
        Type localVarReturnType = new TypeToken<List<BinStatusModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of bin statuses
     * @param xVolTenant Tenant ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBinStatusesAsync(Integer xVolTenant, final ApiCallback<List<BinStatusModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBinStatusesValidateBeforeCall(xVolTenant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BinStatusModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBinTypes
     * @param xVolTenant Tenant ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBinTypesCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/bin/binTypes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBinTypesValidateBeforeCall(Integer xVolTenant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getBinTypes(Async)");
        }
        

        com.squareup.okhttp.Call call = getBinTypesCall(xVolTenant, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list of bin types
     * @param xVolTenant Tenant ID (required)
     * @return List&lt;BinTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BinTypeModel> getBinTypes(Integer xVolTenant) throws ApiException {
        ApiResponse<List<BinTypeModel>> resp = getBinTypesWithHttpInfo(xVolTenant);
        return resp.getData();
    }

    /**
     * 
     * Get list of bin types
     * @param xVolTenant Tenant ID (required)
     * @return ApiResponse&lt;List&lt;BinTypeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BinTypeModel>> getBinTypesWithHttpInfo(Integer xVolTenant) throws ApiException {
        com.squareup.okhttp.Call call = getBinTypesValidateBeforeCall(xVolTenant, null, null);
        Type localVarReturnType = new TypeToken<List<BinTypeModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of bin types
     * @param xVolTenant Tenant ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBinTypesAsync(Integer xVolTenant, final ApiCallback<List<BinTypeModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBinTypesValidateBeforeCall(xVolTenant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BinTypeModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBins
     * @param xVolTenant Tenant ID (required)
     * @param locationID Id of location (required)
     * @param searchTerm Term to match in bins (required)
     * @param perPage Results per page (optional)
     * @param page Page to show (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBinsCall(Integer xVolTenant, Long locationID, Long searchTerm, Long perPage, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v1/bin/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("perPage", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBinsValidateBeforeCall(Integer xVolTenant, Long locationID, Long searchTerm, Long perPage, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling getBins(Async)");
        }
        
        // verify the required parameter 'locationID' is set
        if (locationID == null) {
            throw new ApiException("Missing the required parameter 'locationID' when calling getBins(Async)");
        }
        
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling getBins(Async)");
        }
        

        com.squareup.okhttp.Call call = getBinsCall(xVolTenant, locationID, searchTerm, perPage, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of bins
     * @param xVolTenant Tenant ID (required)
     * @param locationID Id of location (required)
     * @param searchTerm Term to match in bins (required)
     * @param perPage Results per page (optional)
     * @param page Page to show (optional)
     * @return BinResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BinResponseModel getBins(Integer xVolTenant, Long locationID, Long searchTerm, Long perPage, Long page) throws ApiException {
        ApiResponse<BinResponseModel> resp = getBinsWithHttpInfo(xVolTenant, locationID, searchTerm, perPage, page);
        return resp.getData();
    }

    /**
     * 
     * Get a list of bins
     * @param xVolTenant Tenant ID (required)
     * @param locationID Id of location (required)
     * @param searchTerm Term to match in bins (required)
     * @param perPage Results per page (optional)
     * @param page Page to show (optional)
     * @return ApiResponse&lt;BinResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BinResponseModel> getBinsWithHttpInfo(Integer xVolTenant, Long locationID, Long searchTerm, Long perPage, Long page) throws ApiException {
        com.squareup.okhttp.Call call = getBinsValidateBeforeCall(xVolTenant, locationID, searchTerm, perPage, page, null, null);
        Type localVarReturnType = new TypeToken<BinResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of bins
     * @param xVolTenant Tenant ID (required)
     * @param locationID Id of location (required)
     * @param searchTerm Term to match in bins (required)
     * @param perPage Results per page (optional)
     * @param page Page to show (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBinsAsync(Integer xVolTenant, Long locationID, Long searchTerm, Long perPage, Long page, final ApiCallback<BinResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBinsValidateBeforeCall(xVolTenant, locationID, searchTerm, perPage, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BinResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loadInventory
     * @param xVolTenant Tenant ID (required)
     * @param loadBinInventoryRequest Request to load bin inventory (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loadInventoryCall(Integer xVolTenant, LoadBinInventoryRequest loadBinInventoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loadBinInventoryRequest;

        // create path and map variables
        String localVarPath = "/v1/bin/loadInventory/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loadInventoryValidateBeforeCall(Integer xVolTenant, LoadBinInventoryRequest loadBinInventoryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling loadInventory(Async)");
        }
        
        // verify the required parameter 'loadBinInventoryRequest' is set
        if (loadBinInventoryRequest == null) {
            throw new ApiException("Missing the required parameter 'loadBinInventoryRequest' when calling loadInventory(Async)");
        }
        

        com.squareup.okhttp.Call call = loadInventoryCall(xVolTenant, loadBinInventoryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Loads bin inventory for designated bins
     * @param xVolTenant Tenant ID (required)
     * @param loadBinInventoryRequest Request to load bin inventory (required)
     * @return LoadBinInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoadBinInventoryResponse loadInventory(Integer xVolTenant, LoadBinInventoryRequest loadBinInventoryRequest) throws ApiException {
        ApiResponse<LoadBinInventoryResponse> resp = loadInventoryWithHttpInfo(xVolTenant, loadBinInventoryRequest);
        return resp.getData();
    }

    /**
     * 
     * Loads bin inventory for designated bins
     * @param xVolTenant Tenant ID (required)
     * @param loadBinInventoryRequest Request to load bin inventory (required)
     * @return ApiResponse&lt;LoadBinInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoadBinInventoryResponse> loadInventoryWithHttpInfo(Integer xVolTenant, LoadBinInventoryRequest loadBinInventoryRequest) throws ApiException {
        com.squareup.okhttp.Call call = loadInventoryValidateBeforeCall(xVolTenant, loadBinInventoryRequest, null, null);
        Type localVarReturnType = new TypeToken<LoadBinInventoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Loads bin inventory for designated bins
     * @param xVolTenant Tenant ID (required)
     * @param loadBinInventoryRequest Request to load bin inventory (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loadInventoryAsync(Integer xVolTenant, LoadBinInventoryRequest loadBinInventoryRequest, final ApiCallback<LoadBinInventoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loadInventoryValidateBeforeCall(xVolTenant, loadBinInventoryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoadBinInventoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchBins
     * @param xVolTenant Tenant ID (required)
     * @param binSearchRequest Request to allocate inventory (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchBinsCall(Integer xVolTenant, BinSearchRequest binSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = binSearchRequest;

        // create path and map variables
        String localVarPath = "/v1/bin/searchInventory/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchBinsValidateBeforeCall(Integer xVolTenant, BinSearchRequest binSearchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling searchBins(Async)");
        }
        
        // verify the required parameter 'binSearchRequest' is set
        if (binSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'binSearchRequest' when calling searchBins(Async)");
        }
        

        com.squareup.okhttp.Call call = searchBinsCall(xVolTenant, binSearchRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Search bins for a inventory by bin name or any product identifier
     * @param xVolTenant Tenant ID (required)
     * @param binSearchRequest Request to allocate inventory (required)
     * @return BinSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BinSearchResponse searchBins(Integer xVolTenant, BinSearchRequest binSearchRequest) throws ApiException {
        ApiResponse<BinSearchResponse> resp = searchBinsWithHttpInfo(xVolTenant, binSearchRequest);
        return resp.getData();
    }

    /**
     * 
     * Search bins for a inventory by bin name or any product identifier
     * @param xVolTenant Tenant ID (required)
     * @param binSearchRequest Request to allocate inventory (required)
     * @return ApiResponse&lt;BinSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BinSearchResponse> searchBinsWithHttpInfo(Integer xVolTenant, BinSearchRequest binSearchRequest) throws ApiException {
        com.squareup.okhttp.Call call = searchBinsValidateBeforeCall(xVolTenant, binSearchRequest, null, null);
        Type localVarReturnType = new TypeToken<BinSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search bins for a inventory by bin name or any product identifier
     * @param xVolTenant Tenant ID (required)
     * @param binSearchRequest Request to allocate inventory (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchBinsAsync(Integer xVolTenant, BinSearchRequest binSearchRequest, final ApiCallback<BinSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchBinsValidateBeforeCall(xVolTenant, binSearchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BinSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to update (required)
     * @param updateBinRequest Request to update a bin (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBinCall(Integer xVolTenant, Long binId, UpdateBinRequest updateBinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateBinRequest;

        // create path and map variables
        String localVarPath = "/v1/bin/{bin_id}/"
            .replaceAll("\\{" + "bin_id" + "\\}", apiClient.escapeString(binId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBinValidateBeforeCall(Integer xVolTenant, Long binId, UpdateBinRequest updateBinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateBin(Async)");
        }
        
        // verify the required parameter 'binId' is set
        if (binId == null) {
            throw new ApiException("Missing the required parameter 'binId' when calling updateBin(Async)");
        }
        
        // verify the required parameter 'updateBinRequest' is set
        if (updateBinRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBinRequest' when calling updateBin(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBinCall(xVolTenant, binId, updateBinRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update the designated bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to update (required)
     * @param updateBinRequest Request to update a bin (required)
     * @return Bin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Bin updateBin(Integer xVolTenant, Long binId, UpdateBinRequest updateBinRequest) throws ApiException {
        ApiResponse<Bin> resp = updateBinWithHttpInfo(xVolTenant, binId, updateBinRequest);
        return resp.getData();
    }

    /**
     * 
     * Update the designated bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to update (required)
     * @param updateBinRequest Request to update a bin (required)
     * @return ApiResponse&lt;Bin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Bin> updateBinWithHttpInfo(Integer xVolTenant, Long binId, UpdateBinRequest updateBinRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBinValidateBeforeCall(xVolTenant, binId, updateBinRequest, null, null);
        Type localVarReturnType = new TypeToken<Bin>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the designated bin
     * @param xVolTenant Tenant ID (required)
     * @param binId Id of bin to update (required)
     * @param updateBinRequest Request to update a bin (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBinAsync(Integer xVolTenant, Long binId, UpdateBinRequest updateBinRequest, final ApiCallback<Bin> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBinValidateBeforeCall(xVolTenant, binId, updateBinRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Bin>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBins
     * @param xVolTenant Tenant ID (required)
     * @param updateBinsRequest Request to update multiple bins (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBinsCall(Integer xVolTenant, UpdateBinsRequest updateBinsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateBinsRequest;

        // create path and map variables
        String localVarPath = "/v1/bin/updateBins/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xVolTenant != null) {
            localVarHeaderParams.put("x-vol-tenant", apiClient.parameterToString(xVolTenant));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBinsValidateBeforeCall(Integer xVolTenant, UpdateBinsRequest updateBinsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xVolTenant' is set
        if (xVolTenant == null) {
            throw new ApiException("Missing the required parameter 'xVolTenant' when calling updateBins(Async)");
        }
        
        // verify the required parameter 'updateBinsRequest' is set
        if (updateBinsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBinsRequest' when calling updateBins(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBinsCall(xVolTenant, updateBinsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update the designated bins
     * @param xVolTenant Tenant ID (required)
     * @param updateBinsRequest Request to update multiple bins (required)
     * @return UpdateBinsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateBinsResponse updateBins(Integer xVolTenant, UpdateBinsRequest updateBinsRequest) throws ApiException {
        ApiResponse<UpdateBinsResponse> resp = updateBinsWithHttpInfo(xVolTenant, updateBinsRequest);
        return resp.getData();
    }

    /**
     * 
     * Update the designated bins
     * @param xVolTenant Tenant ID (required)
     * @param updateBinsRequest Request to update multiple bins (required)
     * @return ApiResponse&lt;UpdateBinsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateBinsResponse> updateBinsWithHttpInfo(Integer xVolTenant, UpdateBinsRequest updateBinsRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateBinsValidateBeforeCall(xVolTenant, updateBinsRequest, null, null);
        Type localVarReturnType = new TypeToken<UpdateBinsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the designated bins
     * @param xVolTenant Tenant ID (required)
     * @param updateBinsRequest Request to update multiple bins (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBinsAsync(Integer xVolTenant, UpdateBinsRequest updateBinsRequest, final ApiCallback<UpdateBinsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBinsValidateBeforeCall(xVolTenant, updateBinsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateBinsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
